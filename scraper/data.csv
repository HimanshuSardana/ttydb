Instruction,Query,Table Schema,Explanation
Retrieve all information about employees.,SELECT * FROM employees;,"employees(employee_id INTEGER, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date DATE, job_id TEXT, salary REAL, department_id INTEGER)","This query selects all columns and all rows from the 'employees' table, effectively retrieving all available information."
List the first name, last name, and email of all employees.,"SELECT first_name, last_name, email FROM employees;","employees(employee_id INTEGER, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date DATE, job_id TEXT, salary REAL, department_id INTEGER)","This query selects specific columns (first_name, last_name, email) from the 'employees' table for all records."
"Show the first name, last name, and salary of employees who work in department 50.","SELECT first_name, last_name, salary FROM employees WHERE department_id = 50;","employees(employee_id INTEGER, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date DATE, job_id TEXT, salary REAL, department_id INTEGER)","This query retrieves the first name, last name, and salary for employees where the 'department_id' is exactly 50."
Get all details for products in the 'Electronics' category.,SELECT * FROM products WHERE category = 'Electronics';,"products(product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER)","This query selects all columns from the 'products' table, but only for rows where the 'category' is 'Electronics'."
Find the names and prices of products that cost more than 100.,"SELECT product_name, price FROM products WHERE price > 100;","products(product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER)",This query fetches the product name and price for all products whose price is greater than 100.
List employees whose last name starts with 'Sm'.,"SELECT first_name, last_name FROM employees WHERE last_name LIKE 'Sm%';","employees(employee_id INTEGER, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date DATE, job_id TEXT, salary REAL, department_id INTEGER)",This query selects the first and last names of employees where their last name begins with the sequence 'Sm'.
Show product names and stock quantities for products in the 'Books' category with stock less than 50.,"SELECT product_name, stock_quantity FROM products WHERE category = 'Books' AND stock_quantity < 50;","products(product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER)",This query retrieves product names and stock quantities for products that are both in the 'Books' category and have a stock quantity less than 50.
Find employees whose job ID is 'IT_PROG' or 'SA_REP'.,"SELECT first_name, last_name, job_id FROM employees WHERE job_id = 'IT_PROG' OR job_id = 'SA_REP';","employees(employee_id INTEGER, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date DATE, job_id TEXT, salary REAL, department_id INTEGER)","This query selects the first name, last name, and job ID for employees whose job ID is either 'IT_PROG' or 'SA_REP'."
"List products whose category is 'Electronics', 'Home & Kitchen', or 'Apparel'.","SELECT product_name, category FROM products WHERE category IN ('Electronics', 'Home & Kitchen', 'Apparel');","products(product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER)","This query selects the product name and category for products belonging to any of the specified categories: 'Electronics', 'Home & Kitchen', or 'Apparel'."
Retrieve employees who do not have an email address listed.,"SELECT first_name, last_name FROM employees WHERE email IS NULL;","employees(employee_id INTEGER, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date DATE, job_id TEXT, salary REAL, department_id INTEGER)",This query selects the first and last names of employees whose 'email' field is explicitly null (not provided).
Instruction,Query,Table Schema,Explanation
Retrieve all products that belong to the 'Electronics' category.,SELECT * FROM Products WHERE Category = 'Electronics',"CREATE TABLE Products (ProductID INT, ProductName VARCHAR(255), Category VARCHAR(255), Price DECIMAL(10, 2), Stock INT)",This query selects all columns from the 'Products' table where the 'Category' column's value is exactly 'Electronics'.
Find all orders that are not in 'Pending' status.,"SELECT OrderID, CustomerID, OrderDate, Status FROM Orders WHERE Status != 'Pending'","CREATE TABLE Orders (OrderID INT, CustomerID INT, OrderDate DATE, TotalAmount DECIMAL(10, 2), Status VARCHAR(50))","This query retrieves the order ID, customer ID, order date, and status for all orders where the 'Status' is not equal to 'Pending'."
List all employees who earn more than 60000.,"SELECT EmployeeID, FirstName, LastName, Salary FROM Employees WHERE Salary > 60000","CREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(255), LastName VARCHAR(255), Department VARCHAR(255), Salary DECIMAL(10, 2))","This query selects employee details (ID, first name, last name, salary) from the 'Employees' table for those whose 'Salary' is strictly greater than 60000."
Show all items in stock where the quantity is less than 50.,"SELECT ItemName, QuantityInStock FROM Inventory WHERE QuantityInStock < 50","CREATE TABLE Inventory (ItemID INT, ItemName VARCHAR(255), QuantityInStock INT, LastUpdated DATE)","This query fetches the name and quantity of items from the 'Inventory' table where the 'QuantityInStock' is less than 50, indicating low stock."
"Get all customers who registered on or after January 1, 2023.","SELECT CustomerID, CustomerName, RegistrationDate FROM Customers WHERE RegistrationDate >= '2023-01-01'","CREATE TABLE Customers (CustomerID INT, CustomerName VARCHAR(255), Email VARCHAR(255), RegistrationDate DATE)","This query selects customer ID, name, and registration date from the 'Customers' table for all customers whose 'RegistrationDate' is on or after January 1, 2023."
Find all books published before or in the year 2000.,"SELECT Title, Author, PublicationYear FROM Books WHERE PublicationYear <= 2000","CREATE TABLE Books (BookID INT, Title VARCHAR(255), Author VARCHAR(255), PublicationYear INT, Genre VARCHAR(100))","This query retrieves the title, author, and publication year for books from the 'Books' table where the 'PublicationYear' is less than or equal to 2000."
"List all products with prices between 20 and 50, inclusive.","SELECT ProductName, Price FROM Products WHERE Price BETWEEN 20 AND 50","CREATE TABLE Products (ProductID INT, ProductName VARCHAR(255), Category VARCHAR(255), Price DECIMAL(10, 2), Stock INT)",This query selects product names and prices from the 'Products' table for items whose 'Price' falls inclusively between 20 and 50.
Find all customers whose names start with 'J'.,"SELECT CustomerName, Email FROM Customers WHERE CustomerName LIKE 'J%'","CREATE TABLE Customers (CustomerID INT, CustomerName VARCHAR(255), Email VARCHAR(255), RegistrationDate DATE)",This query retrieves customer names and emails from the 'Customers' table where the 'CustomerName' starts with the letter 'J'.
"Show orders placed by customers with Customer IDs 101, 105, or 110.","SELECT OrderID, CustomerID, TotalAmount FROM Orders WHERE CustomerID IN (101, 105, 110)","CREATE TABLE Orders (OrderID INT, CustomerID INT, OrderDate DATE, TotalAmount DECIMAL(10, 2), Status VARCHAR(50))","This query selects order ID, customer ID, and total amount from the 'Orders' table for orders placed by customers whose 'CustomerID' is either 101, 105, or 110."
List all employees who do not have an email address recorded.,"SELECT EmployeeID, FirstName, LastName FROM Employees WHERE Email IS NULL","CREATE TABLE Employees (EmployeeID INT, FirstName VARCHAR(255), LastName VARCHAR(255), Email VARCHAR(255), Department VARCHAR(255))","This query retrieves the employee ID, first name, and last name for all employees from the 'Employees' table where the 'Email' field is null (i.e., not provided)."
Instruction,Query,Table Schema,Explanation
List the names of all employees along with the names of the departments they belong to.,"SELECT e.employee_name, d.department_name FROM Employees e INNER JOIN Departments d ON e.department_id = d.department_id;","Employees (employee_id INT, employee_name TEXT, department_id INT); Departments (department_id INT, department_name TEXT);","This query uses an INNER JOIN to combine rows from the 'Employees' table and the 'Departments' table where the 'department_id' matches in both tables, showing only employees who are assigned to a department."
Retrieve all customer names and the orders they have placed. Include customers who have not placed any orders.,"SELECT c.customer_name, o.order_id, o.order_date FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id;","Customers (customer_id INT, customer_name TEXT); Orders (order_id INT, customer_id INT, order_date DATE);","This query uses a LEFT JOIN to return all rows from the 'Customers' table (left table) and the matching rows from the 'Orders' table. If there is no match in 'Orders', NULL values are returned for 'Orders' columns, ensuring all customers are listed."
Show all product categories and any products associated with them. Include categories that currently have no products.,"SELECT pc.category_name, p.product_name FROM ProductCategories pc LEFT JOIN Products p ON pc.category_id = p.category_id;","ProductCategories (category_id INT, category_name TEXT); Products (product_id INT, product_name TEXT, category_id INT);","This LEFT JOIN retrieves all product categories. For each category, it lists associated products. Categories without any products will still appear, with NULLs for product details."
"Get the names of all employees and their managers. If an employee does not have a manager, still list them.","SELECT e.employee_name AS employee, m.employee_name AS manager FROM Employees e LEFT JOIN Employees m ON e.manager_id = m.employee_id;","Employees (employee_id INT, employee_name TEXT, manager_id INT);","This query performs a SELF LEFT JOIN on the 'Employees' table. It joins an employee's record with another employee's record (the manager) based on 'manager_id'. The LEFT JOIN ensures all employees are listed, even if they don't have a manager (manager_id is NULL)."
"List all products and their suppliers, including products that might not have a registered supplier.","SELECT p.product_name, s.supplier_name FROM Products p LEFT JOIN Suppliers s ON p.supplier_id = s.supplier_id;","Products (product_id INT, product_name TEXT, supplier_id INT); Suppliers (supplier_id INT, supplier_name TEXT);","This LEFT JOIN retrieves all product names and, if available, their corresponding supplier names. Products without a supplier will still be listed with a NULL supplier name."
Find all suppliers and the products they supply. Include suppliers who do not currently supply any products.,"SELECT s.supplier_name, p.product_name FROM Suppliers s LEFT JOIN Products p ON s.supplier_id = p.supplier_id;","Suppliers (supplier_id INT, supplier_name TEXT); Products (product_id INT, product_name TEXT, supplier_id INT);","This LEFT JOIN is used to list all suppliers. For each supplier, it shows the products they supply. If a supplier does not supply any products, they will still appear in the result with NULL for product details."
Show all students and the courses they are enrolled in. Include students not enrolled in any course and courses with no enrolled students.,"SELECT s.student_name, c.course_name FROM Students s FULL OUTER JOIN Enrollments e ON s.student_id = e.student_id FULL OUTER JOIN Courses c ON e.course_id = c.course_id;","Students (student_id INT, student_name TEXT); Courses (course_id INT, course_name TEXT); Enrollments (enrollment_id INT, student_id INT, course_id INT);","This query uses FULL OUTER JOINs to include all students (even those not enrolled in any course) and all courses (even those with no enrolled students). It combines results from 'Students', 'Enrollments', and 'Courses' to show a complete picture."
List every possible pairing of employees and projects.,"SELECT e.employee_name, p.project_name FROM Employees e CROSS JOIN Projects p;","Employees (employee_id INT, employee_name TEXT); Projects (project_id INT, project_name TEXT);","A CROSS JOIN produces a Cartesian product of the two tables, meaning every row from the 'Employees' table is combined with every row from the 'Projects' table. This results in all possible combinations."
Count the number of orders for each customer.,"SELECT c.customer_name, COUNT(o.order_id) AS total_orders FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;","Customers (customer_id INT, customer_name TEXT); Orders (order_id INT, customer_id INT, order_date DATE);","This query uses a LEFT JOIN to ensure all customers are included, even those with no orders. It then uses COUNT and GROUP BY to count the number of orders for each unique customer name."
Retrieve the names of employees who work in the 'Sales' department.,SELECT e.employee_name FROM Employees e INNER JOIN Departments d ON e.department_id = d.department_id WHERE d.department_name = 'Sales';,"Employees (employee_id INT, employee_name TEXT, department_id INT); Departments (department_id INT, department_name TEXT);",This query uses an INNER JOIN to link employees to their departments. A WHERE clause then filters the results to only include employees from the 'Sales' department.
Instruction,Query,Table Schema,Explanation
Count the number of products in each category.,"SELECT category, COUNT(product_id) FROM products GROUP BY category;","CREATE TABLE products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",Groups products by their category and counts the total number of products within each category.
Calculate the total salary for each department.,"SELECT department, SUM(salary) FROM employees GROUP BY department;","CREATE TABLE employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL);",Groups employees by their department and calculates the sum of salaries for all employees in each department.
Find the average age of students in each city.,"SELECT city, AVG(age) FROM students GROUP BY city;","CREATE TABLE students (student_id INTEGER PRIMARY KEY, name TEXT, city TEXT, age INTEGER);",Groups students by their city of residence and calculates the average age of students in each city.
Determine the minimum and maximum price for each product type.,"SELECT product_type, MIN(price), MAX(price) FROM inventory GROUP BY product_type;","CREATE TABLE inventory (item_id INTEGER PRIMARY KEY, product_type TEXT, price REAL, stock_quantity INTEGER);",Groups inventory items by their product type and finds the lowest and highest price among items of each type.
"List customers who have placed more than 2 orders, along with their total order count.","SELECT customer_id, COUNT(order_id) FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 2;","CREATE TABLE orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL);","Groups orders by customer and counts the number of orders each customer has placed. Then, it filters these groups to only show customers who have placed more than 2 orders."
Calculate the total amount spent by each customer.,"SELECT c.customer_name, SUM(o.total_amount) FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;","CREATE TABLE customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL, order_date DATE);","Joins the customers and orders tables on customer_id, then groups the results by customer name and calculates the sum of total_amount for each customer."
Find the average sales amount for each year.,"SELECT EXTRACT(YEAR FROM sale_date) AS sale_year, AVG(amount) FROM sales GROUP BY sale_year;","CREATE TABLE sales (sale_id INTEGER PRIMARY KEY, sale_date DATE, amount REAL, product_id INTEGER);","Extracts the year from the sale_date, then groups sales by year and calculates the average sales amount for each year."
Count the number of unique products sold in each region.,"SELECT region, COUNT(DISTINCT product_id) FROM sales GROUP BY region;","CREATE TABLE sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, region TEXT, amount REAL);",Groups sales records by region and counts the number of distinct product IDs sold within each region.
"For each department, find the total number of employees, their average salary, and the sum of all salaries.","SELECT department, COUNT(employee_id), AVG(salary), SUM(salary) FROM employees GROUP BY department;","CREATE TABLE employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL);","Groups employees by department and calculates three aggregate measures for each department: the total count of employees, their average salary, and the sum of their salaries."
"Get the total sales amount for each product, broken down by month and year.","SELECT product_id, EXTRACT(YEAR FROM sale_date) AS sales_year, EXTRACT(MONTH FROM sale_date) AS sales_month, SUM(amount) FROM sales GROUP BY product_id, sales_year, sales_month;","CREATE TABLE sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date DATE, amount REAL);","Groups sales data by product ID, year, and month, then calculates the total sales amount for each unique combination of product, year, and month."
Instruction,Query,Table Schema,Explanation
"For each department, list employees and their row number based on salary in descending order.","SELECT employee_id, employee_name, department, salary, ROW_NUMBER() OVER(PARTITION BY department ORDER BY salary DESC) AS rn FROM Employees;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL, hire_date DATE);","ROW_NUMBER() assigns a unique sequential integer to each row within its partition (department), ordered by salary in descending order. This provides a distinct ranking for each employee within their respective department."
"Rank products within each category by their price, allowing for gaps in rank for ties.","SELECT product_id, product_name, category, price, RANK() OVER(PARTITION BY category ORDER BY price DESC) AS price_rank FROM Products;","CREATE TABLE Products (product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL);","RANK() assigns a rank to each product within its category based on price. If multiple products have the same price, they receive the same rank, and subsequent ranks will have gaps (e.g., 1, 1, 3)."
"Assign a dense rank to students based on their total score in a specific course, without gaps for ties.","SELECT student_id, student_name, course, total_score, DENSE_RANK() OVER(PARTITION BY course ORDER BY total_score DESC) AS score_dense_rank FROM Students;","CREATE TABLE Students (student_id INT, student_name VARCHAR, course VARCHAR, total_score INT);","DENSE_RANK() assigns a rank to each student within their course based on total score. Similar to RANK(), it gives the same rank to tied values, but it does not leave gaps in the ranking sequence (e.g., 1, 1, 2)."
Divide all customers into 4 quartiles based on their total purchase amount.,"SELECT customer_id, customer_name, total_purchase_amount, NTILE(4) OVER(ORDER BY total_purchase_amount DESC) AS purchase_quartile FROM Customers;","CREATE TABLE Customers (customer_id INT, customer_name VARCHAR, total_purchase_amount DECIMAL);","NTILE(4) divides the entire result set into 4 equal (or nearly equal) groups based on the total purchase amount, assigning a group number (1 to 4) to each customer. It's useful for bucketing data into quantiles."
"For each product, find the sales amount from the previous day.","SELECT sale_date, product_id, daily_sales_amount, LAG(daily_sales_amount, 1, 0) OVER(PARTITION BY product_id ORDER BY sale_date) AS previous_day_sales FROM DailySales;","CREATE TABLE DailySales (sale_date DATE, product_id INT, daily_sales_amount DECIMAL);","LAG() retrieves the value of 'daily_sales_amount' from the row immediately preceding the current row within the same product partition, ordered by 'sale_date'. The '1' specifies an offset of one row, and '0' is the default value if there is no preceding row."
"For each stock, find the closing price of the next trading day.","SELECT trade_date, stock_symbol, closing_price, LEAD(closing_price, 1) OVER(PARTITION BY stock_symbol ORDER BY trade_date) AS next_day_closing_price FROM StockPrices;","CREATE TABLE StockPrices (trade_date DATE, stock_symbol VARCHAR, closing_price DECIMAL);","LEAD() retrieves the value of 'closing_price' from the row immediately following the current row within the same stock symbol partition, ordered by 'trade_date'. This is useful for comparing current values with future values."
"Calculate the running average of transaction amounts for each account, ordered by transaction date.","SELECT transaction_id, account_id, transaction_date, amount, AVG(amount) OVER(PARTITION BY account_id ORDER BY transaction_date) AS running_avg_amount FROM Transactions;","CREATE TABLE Transactions (transaction_id INT, account_id INT, transaction_date DATE, amount DECIMAL);","AVG() OVER(PARTITION BY account_id ORDER BY transaction_date) calculates the cumulative average of 'amount' for all transactions up to the current row, specifically for each 'account_id', ordered by 'transaction_date'."
"Calculate the cumulative sum of order totals for each customer, ordered by order date.","SELECT order_id, customer_id, order_date, total_amount, SUM(total_amount) OVER(PARTITION BY customer_id ORDER BY order_date) AS cumulative_customer_spend FROM Orders;","CREATE TABLE Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL);","SUM() OVER(PARTITION BY customer_id ORDER BY order_date) calculates the running total of 'total_amount' for each customer, based on the chronological order of their orders."
Calculate the 3-day moving average of temperature readings.,"SELECT reading_date, temperature, AVG(temperature) OVER(ORDER BY reading_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS three_day_moving_avg FROM SensorReadings;","CREATE TABLE SensorReadings (reading_id INT, reading_date DATE, temperature DECIMAL);","AVG(temperature) OVER(ORDER BY reading_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) calculates the average of 'temperature' for the current row and the two preceding rows, ordered by 'reading_date'. This creates a 3-day moving average to smooth out data fluctuations."
"For each player, find their highest score achieved up to each game.","SELECT game_id, player_id, score, MAX(score) OVER(PARTITION BY player_id ORDER BY game_id) AS highest_score_so_far FROM GameScores;","CREATE TABLE GameScores (game_id INT, player_id INT, score INT, game_date DATE);","MAX(score) OVER(PARTITION BY player_id ORDER BY game_id) calculates the maximum 'score' achieved by each player from the beginning of their records up to the current 'game_id', ordered chronologically. This shows the highest score a player has reached at any point."
Instruction,Query,Table Schema,Explanation
Find the names of employees who earn more than the average salary of all employees.,SELECT Name FROM Employees WHERE Salary > (SELECT AVG(Salary) FROM Employees);,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, Name VARCHAR(255), Salary DECIMAL(10, 2), DepartmentID INT);","This query uses a scalar subquery in the WHERE clause. The inner query calculates the average salary of all employees, and the outer query then filters employees whose individual salary is greater than this average."
List all departments that currently have at least one employee.,SELECT DepartmentName FROM Departments WHERE EXISTS (SELECT 1 FROM Employees WHERE Employees.DepartmentID = Departments.DepartmentID);,"CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(255), Location VARCHAR(255)); CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, Name VARCHAR(255), Salary DECIMAL(10, 2), DepartmentID INT);","This query uses an EXISTS subquery. For each department, the subquery checks if there is any employee associated with its DepartmentID. If at least one employee exists, the department name is included in the result."
Find all products that belong to the 'Electronics' category.,SELECT ProductName FROM Products WHERE CategoryID IN (SELECT CategoryID FROM Categories WHERE CategoryName = 'Electronics');,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255), CategoryID INT, Price DECIMAL(10, 2)); CREATE TABLE Categories (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(255));","This query uses an IN subquery. The inner query first retrieves the CategoryID for the 'Electronics' category, and then the outer query selects products whose CategoryID matches any of the IDs returned by the subquery."
List employees who do not belong to any department listed in the Departments table.,SELECT Name FROM Employees WHERE DepartmentID NOT IN (SELECT DepartmentID FROM Departments WHERE DepartmentID IS NOT NULL);,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, Name VARCHAR(255), Salary DECIMAL(10, 2), DepartmentID INT); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(255), Location VARCHAR(255));","This query uses a NOT IN subquery. It selects employees whose DepartmentID is not present in the list of valid DepartmentIDs from the Departments table. The `WHERE DepartmentID IS NOT NULL` in the subquery is a good practice to handle potential NULLs in the subquery result, which could invalidate the NOT IN clause."
Find the names of employees who have the highest salary within their respective department.,"SELECT Name, DepartmentID, Salary FROM Employees e WHERE Salary = (SELECT MAX(Salary) FROM Employees WHERE DepartmentID = e.DepartmentID);","CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, Name VARCHAR(255), Salary DECIMAL(10, 2), DepartmentID INT);","This is a correlated subquery. For each employee in the outer query (aliased as 'e'), the inner subquery calculates the maximum salary specifically for their department (e.DepartmentID). The outer query then returns employees whose salary matches this department-specific maximum."
Identify customers who have placed at least one order.,SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT DISTINCT CustomerID FROM Orders);,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(255), Email VARCHAR(255)); CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE, TotalAmount DECIMAL(10, 2));","This query uses an IN subquery to find customers. The inner query retrieves all unique CustomerIDs from the Orders table, representing customers who have placed orders. The outer query then selects the names of customers whose CustomerID is present in this list."
List employees whose salary is not the maximum salary in their department.,"SELECT Name, DepartmentID, Salary FROM Employees e WHERE Salary < (SELECT MAX(Salary) FROM Employees WHERE DepartmentID = e.DepartmentID);","CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, Name VARCHAR(255), Salary DECIMAL(10, 2), DepartmentID INT);","This is another correlated subquery example. For each employee, the inner query finds the maximum salary in their department. The outer query then returns employees whose salary is strictly less than this departmental maximum, effectively excluding the top earner(s)."
"Retrieve the total number of orders placed by each customer, but only for customers who have placed more than the average number of orders per customer.","SELECT c.CustomerName, COUNT(o.OrderID) AS TotalOrders FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerName HAVING COUNT(o.OrderID) > (SELECT AVG(OrderCount) FROM (SELECT COUNT(OrderID) AS OrderCount FROM Orders GROUP BY CustomerID) AS CustomerOrderCounts);","CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(255)); CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE);","This query demonstrates a subquery in the HAVING clause and a derived table. The innermost subquery calculates the order count for each customer. The middle subquery (derived table) then calculates the average of these individual customer order counts. Finally, the outer query groups orders by customer and filters these groups, keeping only those customers whose order count exceeds the overall average."
Find the names of employees who work in departments located in 'New York'.,SELECT Name FROM Employees WHERE DepartmentID IN (SELECT DepartmentID FROM Departments WHERE Location = 'New York');,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, Name VARCHAR(255), Salary DECIMAL(10, 2), DepartmentID INT); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(255), Location VARCHAR(255));",This query uses an IN subquery to link employees to department locations. The inner query first identifies the DepartmentIDs of all departments situated in 'New York'. The outer query then selects the names of employees whose DepartmentID matches any of the IDs returned by the subquery.
Get the details of products that have never been ordered.,"SELECT ProductID, ProductName, Price FROM Products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM Order_Items);","CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255), Price DECIMAL(10, 2)); CREATE TABLE Order_Items (OrderItemID INT PRIMARY KEY, OrderID INT, ProductID INT, Quantity INT);","This query uses a NOT IN subquery. The inner query finds all unique ProductIDs that have appeared in any order item. The outer query then selects products whose ProductID is not present in this list, effectively showing products that have never been ordered."
Instruction,Query,Table Schema,Explanation
List all distinct cities where we have customers or suppliers.,SELECT city FROM Customers UNION SELECT city FROM Suppliers;,"Customers(customer_id INT, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)), Suppliers(supplier_id INT, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255))","This query uses the UNION operator to combine the distinct cities from both the Customers and Suppliers tables. UNION automatically removes duplicate entries, ensuring each city is listed only once."
"Get a combined list of all customer names and supplier names, including duplicates if any exist.",SELECT name FROM Customers UNION ALL SELECT name FROM Suppliers;,"Customers(customer_id INT, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)), Suppliers(supplier_id INT, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255))","The UNION ALL operator is used here to combine all names from the Customers and Suppliers tables. Unlike UNION, UNION ALL includes all matching rows from both queries, preserving any duplicate names."
Find the names of people who are both customers and employees.,SELECT name FROM Customers INTERSECT SELECT name FROM Employees;,"Customers(customer_id INT, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)), Employees(employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2))","This query uses the INTERSECT operator to return only the names that exist in both the Customers table and the Employees table, effectively finding common individuals."
List all employees who are not also customers.,SELECT name FROM Employees EXCEPT SELECT name FROM Customers;,"Employees(employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2)), Customers(customer_id INT, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255))",The EXCEPT operator is used to retrieve names that are present in the Employees table but are not found in the Customers table. This identifies employees who do not have a corresponding entry as a customer.
Show the names of all employees from the 'Sales' department and all customers from 'New York' city.,SELECT name FROM Employees WHERE department = 'Sales' UNION SELECT name FROM Customers WHERE city = 'New York';,"Employees(employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2)), Customers(customer_id INT, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255))","This query combines two sets of names: distinct names of employees working in the 'Sales' department and distinct names of customers residing in 'New York' city, using the UNION operator."
"Create a combined list of employee IDs and customer IDs, labeling each as 'Employee' or 'Customer'.","SELECT employee_id AS ID, 'Employee' AS Type FROM Employees UNION ALL SELECT customer_id AS ID, 'Customer' AS Type FROM Customers;","Employees(employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2)), Customers(customer_id INT, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255))","The UNION ALL operator is used to combine IDs from two different tables. Aliases (AS ID, AS Type) are used to ensure the columns are compatible, and a literal string 'Employee' or 'Customer' is added to categorize each ID."
Find the names of products that have been ordered by customers in 'USA' and also by customers in 'Canada'.,SELECT P.name FROM Products P JOIN Orders O ON P.product_id = O.product_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.country = 'USA' INTERSECT SELECT P.name FROM Products P JOIN Orders O ON P.product_id = O.product_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.country = 'Canada';,"Products(product_id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2)), Orders(order_id INT, product_id INT, customer_id INT, order_date DATE, quantity INT), Customers(customer_id INT, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255))","This query identifies products ordered by US customers and products ordered by Canadian customers in two separate subqueries. The INTERSECT operator then finds the product names common to both sets, meaning products ordered by customers from both countries."
List the project names that are currently 'Active' but have not yet appeared in the 'CompletedProjects' table.,SELECT project_name FROM Projects WHERE status = 'Active' EXCEPT SELECT project_name FROM CompletedProjects;,"Projects(project_id INT, project_name VARCHAR(255), status VARCHAR(50)), CompletedProjects(project_id INT, project_name VARCHAR(255), completion_date DATE)","The query first selects active projects from the 'Projects' table. Then, using EXCEPT, it removes any of those project names that are also found in the 'CompletedProjects' table, effectively showing only active, uncompleted projects."
"Get a complete list of all employee names, including main employees, new hires, and old employees.",SELECT name FROM Employees UNION ALL SELECT name FROM NewHires UNION ALL SELECT name FROM OldEmployees;,"Employees(employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2)), NewHires(employee_id INT, name VARCHAR(255), hire_date DATE), OldEmployees(employee_id INT, name VARCHAR(255), retirement_date DATE)","This query uses multiple UNION ALL operators to combine all names from three different employee-related tables: Employees, NewHires, and OldEmployees. UNION ALL ensures that all entries are included, even if names are duplicated across tables."
Find customer IDs who have ordered products from both the 'Electronics' and 'Books' categories.,SELECT C.customer_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Products P ON O.product_id = P.product_id WHERE P.category = 'Electronics' INTERSECT SELECT C.customer_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Products P ON O.product_id = P.product_id WHERE P.category = 'Books';,"Customers(customer_id INT, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)), Orders(order_id INT, product_id INT, customer_id INT, order_date DATE, quantity INT), Products(product_id INT, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2))","This query determines customer IDs that have ordered from 'Electronics' and those who ordered from 'Books' through two separate subqueries. The INTERSECT operator then identifies the customer IDs that are present in both sets, meaning they purchased from both categories."
Instruction,Query,Table Schema,Explanation
Retrieve the current date.,SELECT CURRENT_DATE;,CREATE TABLE general_info (id INT PRIMARY KEY);,This query uses the `CURRENT_DATE` function to return the present calendar date from the database server. It does not require a specific table.
Get the current date and time with full precision.,SELECT CURRENT_TIMESTAMP;,CREATE TABLE sensor_readings (reading_id INT PRIMARY KEY);,"The `CURRENT_TIMESTAMP` function returns the current date and time, including seconds and fractional seconds, according to the database server's clock. It's a standard SQL function."
List all event names and the year in which each event occurred from the 'events' table.,"SELECT event_name, EXTRACT(YEAR FROM event_date) AS event_year FROM events;","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(255), event_date DATE);","The `EXTRACT` function is used to pull specific parts (like YEAR, MONTH, DAY, HOUR, etc.) from a date or time value. Here, it extracts the year from the `event_date` column."
"For each order, calculate the date that is 14 days after the order was placed.","SELECT order_id, order_date, order_date + INTERVAL '14 DAY' AS estimated_delivery_date FROM orders;","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));","This query demonstrates date arithmetic. Adding an `INTERVAL` (e.g., '14 DAY') to a `DATE` column shifts the date forward by the specified duration. This syntax is common in PostgreSQL and MySQL."
Display the birth date of employees in 'DD-MM-YYYY' format.,"SELECT first_name, last_name, TO_CHAR(birth_date, 'DD-MM-YYYY') AS formatted_birth_date FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), birth_date DATE);",The `TO_CHAR` function is used to convert a date or timestamp into a formatted string. The format string 'DD-MM-YYYY' specifies the desired output pattern (Day-Month-Year). This function is common in PostgreSQL and Oracle.
Calculate the number of days between the 'start_date' and 'end_date' for each project.,"SELECT project_name, DATEDIFF(day, start_date, end_date) AS duration_in_days FROM projects;","CREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(255), start_date DATE, end_date DATE);","The `DATEDIFF` function calculates the difference between two dates in a specified unit (e.g., day, month, year). The syntax `DATEDIFF(unit, start_date, end_date)` is common in SQL Server and MySQL."
"Show the transaction ID and the full name of the day of the week (e.g., Monday, Tuesday) for each transaction.","SELECT transaction_id, TO_CHAR(transaction_date, 'Day') AS day_of_week FROM transactions;","CREATE TABLE transactions (transaction_id INT PRIMARY KEY, transaction_date DATE, amount DECIMAL(10, 2));","Using `TO_CHAR` with the format 'Day' extracts the full weekday name from the `transaction_date`. This is a useful way to present date information in a user-friendly format, common in PostgreSQL and Oracle."
Find the last day of the month for each product's manufacturing date.,"SELECT product_name, manufacturing_date, LAST_DAY(manufacturing_date) AS end_of_month_mfg FROM products;","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), manufacturing_date DATE);","The `LAST_DAY` function returns the last day of the month for a given date. This function is specific to databases like MySQL and Oracle. Other databases might use alternative methods (e.g., `EOMONTH` in SQL Server, or date arithmetic in PostgreSQL)."
Determine the age in years for each student based on their birth date.,"SELECT student_id, first_name, TIMESTAMPDIFF(YEAR, birth_date, CURRENT_DATE) AS age_in_years FROM students;","CREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(50), birth_date DATE);","The `TIMESTAMPDIFF` function calculates the difference between two timestamp or date expressions in a specified unit (here, `YEAR`). `CURRENT_DATE` provides the present date. This function is common in MySQL and similar concepts exist in SQL Server (`DATEDIFF`)."
"For each log entry, retrieve the week number of the year when it was recorded.","SELECT log_id, log_timestamp, EXTRACT(WEEK FROM log_timestamp) AS week_of_year FROM logs;","CREATE TABLE logs (log_id INT PRIMARY KEY, log_timestamp TIMESTAMP, message TEXT);","The `EXTRACT` function is used again, this time to retrieve the `WEEK` component from the `log_timestamp`. This will return the week number (1-53) within the year for each log entry."
Instruction,Query,Table Schema,Explanation
Retrieve all information about all employees.,SELECT * FROM Employees;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date DATE);","This query selects all columns and all rows from the 'Employees' table, providing a complete dataset for every employee."
List the names and departments of all employees.,"SELECT first_name, last_name, department FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date DATE);","This query selects only the 'first_name', 'last_name', and 'department' columns from the 'Employees' table for all records."
Find all products that are in the 'Electronics' category.,SELECT * FROM Products WHERE category = 'Electronics';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query retrieves all details for products where the 'category' column exactly matches 'Electronics'.
Show products with a price greater than 500.,"SELECT product_name, price FROM Products WHERE price > 500;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query lists the names and prices of products whose price is strictly greater than 500.
Get the distinct categories of products available.,SELECT DISTINCT category FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query returns a unique list of all values present in the 'category' column of the 'Products' table.
Retrieve orders placed on or after '2023-01-01'.,SELECT * FROM Orders WHERE order_date >= '2023-01-01';,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);","This query fetches all columns for orders where the 'order_date' is on or after January 1, 2023."
List customers whose first name starts with 'J'.,"SELECT customer_id, first_name, last_name FROM Customers WHERE first_name LIKE 'J%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date DATE);","This query selects customer IDs, first names, and last names for customers whose 'first_name' begins with the letter 'J'."
Find books published before the year 2000.,"SELECT title, author, publication_year FROM Books WHERE publication_year < 2000;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, price REAL, publication_year INTEGER);","This query retrieves the title, author, and publication year of books published in any year prior to 2000."
Show all movies with a rating of 8.0 or higher.,"SELECT title, director, rating FROM Movies WHERE rating >= 8.0;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);","This query lists the title, director, and rating for movies that have a rating of 8.0 or greater."
Get students whose GPA is between 3.0 and 4.0 (inclusive).,"SELECT first_name, last_name, gpa FROM Students WHERE gpa BETWEEN 3.0 AND 4.0;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT, gpa REAL, enrollment_date DATE);","This query selects the names and GPA of students whose GPA falls within the range of 3.0 to 4.0, including both endpoints."
Retrieve courses offered by the 'Computer Science' department.,"SELECT course_name, credits FROM Courses WHERE department = 'Computer Science';","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT, credits INTEGER);",This query selects the names and credits of courses that belong to the 'Computer Science' department.
Find flights departing from 'JFK'.,"SELECT flight_number, destination, departure_time FROM Flights WHERE origin = 'JFK';","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT, origin TEXT, destination TEXT, departure_time DATETIME, arrival_time DATETIME, price REAL);","This query retrieves the flight number, destination, and departure time for all flights originating from 'JFK'."
List cars made by 'Honda' from the year 2020.,"SELECT make, model, year FROM Cars WHERE make = 'Honda' AND year = 2020;","CREATE TABLE Cars (car_id INTEGER PRIMARY KEY, make TEXT, model TEXT, year INTEGER, color TEXT, price REAL);","This query selects the make, model, and year for cars that are both 'Honda' and from the year 2020."
Show employees who are in 'Sales' or 'Marketing' departments.,"SELECT employee_id, first_name, department FROM Employees WHERE department = 'Sales' OR department = 'Marketing';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date DATE);",This query returns employees who work in either the 'Sales' department or the 'Marketing' department.
Get the top 10 most expensive products.,"SELECT product_name, price FROM Products ORDER BY price DESC LIMIT 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query sorts products by price in descending order and then retrieves only the first 10 results, representing the most expensive products."
Find orders that are 'Pending' or 'Processing'.,"SELECT order_id, customer_id, status FROM Orders WHERE status IN ('Pending', 'Processing');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);",This query retrieves orders whose 'status' is either 'Pending' or 'Processing'.
List all customers registered in 2022.,"SELECT first_name, last_name, registration_date FROM Customers WHERE STRFTIME('%Y', registration_date) = '2022';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date DATE);",This query uses the STRFTIME function to extract the year from 'registration_date' and filters for customers registered in 2022.
Retrieve books with 'Fantasy' genre and price less than 20.00.,"SELECT title, author, price FROM Books WHERE genre = 'Fantasy' AND price < 20.00;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, price REAL, publication_year INTEGER);",This query selects books that are in the 'Fantasy' genre and have a price less than 20.00.
Show movies released between 2000 and 2010.,"SELECT title, release_year FROM Movies WHERE release_year BETWEEN 2000 AND 2010;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);","This query retrieves movies whose 'release_year' is within the range of 2000 to 2010, inclusive."
Get students whose major is not 'Engineering'.,"SELECT student_id, first_name, major FROM Students WHERE major != 'Engineering';","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT, gpa REAL, enrollment_date DATE);",This query selects students whose 'major' is anything other than 'Engineering'.
Find courses with 3 or 4 credits.,"SELECT course_name, credits FROM Courses WHERE credits IN (3, 4);","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT, credits INTEGER);",This query returns the names and credits of courses that have either 3 or 4 credits.
List flights arriving at 'LAX' after 18:00 (6 PM).,"SELECT flight_number, origin, arrival_time FROM Flights WHERE destination = 'LAX' AND STRFTIME('%H', arrival_time) >= '18';","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT, origin TEXT, destination TEXT, departure_time DATETIME, arrival_time DATETIME, price REAL);",This query selects flights arriving at 'LAX' whose arrival time's hour component is 18 or later (6 PM or later).
Show all cars that are red or blue.,"SELECT make, model, color FROM Cars WHERE color = 'Red' OR color = 'Blue';","CREATE TABLE Cars (car_id INTEGER PRIMARY KEY, make TEXT, model TEXT, year INTEGER, color TEXT, price REAL);",This query retrieves cars that have a 'Red' color or a 'Blue' color.
"Retrieve employees with salary between 50000 and 70000, ordered by salary.","SELECT first_name, last_name, salary FROM Employees WHERE salary BETWEEN 50000 AND 70000 ORDER BY salary ASC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date DATE);",This query selects employees with salaries in the specified range and orders the results by salary in ascending order.
"Find products with stock quantity less than 10, ordered by quantity.","SELECT product_name, stock_quantity FROM Products WHERE stock_quantity < 10 ORDER BY stock_quantity DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query lists products with low stock, sorting them by stock quantity in descending order to see the lowest first."
List orders with a total amount over 100.00 and status 'Completed'.,"SELECT order_id, total_amount, status FROM Orders WHERE total_amount > 100.00 AND status = 'Completed';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);",This query fetches completed orders where the total amount is greater than 100.00.
Get customers who do not have an email address recorded.,"SELECT customer_id, first_name, last_name FROM Customers WHERE email IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date DATE);",This query identifies customers for whom the 'email' field is null (not provided).
Show books whose author name contains 'Smith'.,"SELECT title, author FROM Books WHERE author LIKE '%Smith%';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, price REAL, publication_year INTEGER);",This query retrieves books where the author's name contains 'Smith' anywhere within the string.
Find movies directed by 'Christopher Nolan' released after 2005.,"SELECT title, release_year FROM Movies WHERE director = 'Christopher Nolan' AND release_year > 2005;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);",This query selects movies directed by Christopher Nolan that were released after the year 2005.
List students with a GPA less than 2.5.,"SELECT first_name, last_name, gpa FROM Students WHERE gpa < 2.5;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT, gpa REAL, enrollment_date DATE);",This query retrieves the names and GPA of students whose GPA is below 2.5.
Retrieve courses that are not in the 'Arts' department and have more than 3 credits.,"SELECT course_name, department, credits FROM Courses WHERE department != 'Arts' AND credits > 3;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT, credits INTEGER);",This query selects courses that do not belong to the 'Arts' department and have more than 3 credits.
Get the cheapest 5 flights.,"SELECT flight_number, origin, destination, price FROM Flights ORDER BY price ASC LIMIT 5;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT, origin TEXT, destination TEXT, departure_time DATETIME, arrival_time DATETIME, price REAL);","This query orders flights by price in ascending order and returns the first 5 results, representing the cheapest flights."
Show cars that are either 'Sedan' or 'SUV' models.,"SELECT make, model, year FROM Cars WHERE model LIKE '%Sedan%' OR model LIKE '%SUV%';","CREATE TABLE Cars (car_id INTEGER PRIMARY KEY, make TEXT, model TEXT, year INTEGER, color TEXT, price REAL);",This query selects cars whose model name contains 'Sedan' or 'SUV' as a substring.
Find employees whose name starts with 'A' and salary is greater than 60000.,"SELECT employee_id, first_name, salary FROM Employees WHERE first_name LIKE 'A%' AND salary > 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date DATE);",This query retrieves employees whose first name starts with 'A' and have a salary exceeding 60000.
List products whose name ends with 'Kit'.,"SELECT product_name, category FROM Products WHERE product_name LIKE '%Kit';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects products whose name finishes with the string 'Kit'.
Retrieve orders placed by customer_id 101 or 105.,"SELECT order_id, customer_id, order_date FROM Orders WHERE customer_id IN (101, 105);","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);",This query fetches orders specifically placed by customer with ID 101 or customer with ID 105.
Get customers registered before '2020-01-01'.,"SELECT customer_id, first_name, registration_date FROM Customers WHERE registration_date < '2020-01-01';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date DATE);","This query retrieves customers whose registration date is prior to January 1, 2020."
"Show books with price between 15.00 and 30.00, ordered by title.","SELECT title, author, price FROM Books WHERE price BETWEEN 15.00 AND 30.00 ORDER BY title ASC;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, price REAL, publication_year INTEGER);",This query selects books with prices in the specified range and orders them alphabetically by title.
Find movies that are not 'Action' or 'Comedy' genres.,"SELECT title, genre FROM Movies WHERE genre NOT IN ('Action', 'Comedy');","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);",This query retrieves movies whose genre is neither 'Action' nor 'Comedy'.
List students whose last name is 'Jones' and GPA is above 3.5.,"SELECT first_name, last_name, gpa FROM Students WHERE last_name = 'Jones' AND gpa > 3.5;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT, gpa REAL, enrollment_date DATE);",This query selects students named 'Jones' who also have a GPA higher than 3.5.
Retrieve courses with 'Intro' in their name.,"SELECT course_name, department FROM Courses WHERE course_name LIKE '%Intro%';","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT, credits INTEGER);",This query returns courses whose name contains the substring 'Intro'.
Get flights with a price less than 200.,"SELECT flight_number, price FROM Flights WHERE price < 200;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT, origin TEXT, destination TEXT, departure_time DATETIME, arrival_time DATETIME, price REAL);",This query selects flight numbers and prices for flights that cost less than 200.
Show cars older than 2015 and colored 'Black'.,"SELECT make, model, year, color FROM Cars WHERE year < 2015 AND color = 'Black';","CREATE TABLE Cars (car_id INTEGER PRIMARY KEY, make TEXT, model TEXT, year INTEGER, color TEXT, price REAL);",This query retrieves black cars manufactured before the year 2015.
Find employees hired in 2023.,"SELECT employee_id, first_name, hire_date FROM Employees WHERE STRFTIME('%Y', hire_date) = '2023';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date DATE);",This query selects employees whose hire date falls within the year 2023.
List products whose category is 'Food' and stock is greater than 50.,"SELECT product_name, category, stock_quantity FROM Products WHERE category = 'Food' AND stock_quantity > 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query returns food products that currently have more than 50 units in stock.
Retrieve orders that are not 'Shipped'.,"SELECT order_id, status FROM Orders WHERE status != 'Shipped';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);",This query fetches all orders that are not currently in a 'Shipped' status.
Get customers who have an email and their last name is 'Doe'.,"SELECT first_name, last_name, email FROM Customers WHERE email IS NOT NULL AND last_name = 'Doe';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date DATE);",This query selects customers with the last name 'Doe' who also have a recorded email address.
Show all books except those in 'History' genre.,"SELECT title, genre FROM Books WHERE genre != 'History';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, price REAL, publication_year INTEGER);",This query retrieves all books from the 'Books' table that are not categorized as 'History'.
Find movies with a rating below 7.0 and released before 2000.,"SELECT title, rating, release_year FROM Movies WHERE rating < 7.0 AND release_year < 2000;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);",This query selects movies that have a rating less than 7.0 and were released prior to the year 2000.
List students enrolled after '2021-09-01' and majoring in 'Biology'.,"SELECT first_name, last_name, enrollment_date, major FROM Students WHERE enrollment_date > '2021-09-01' AND major = 'Biology';","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT, gpa REAL, enrollment_date DATE);","This query fetches Biology students who enrolled after September 1, 2021."
Retrieve courses that cost 3 credits and are in 'Science' or 'Math' departments.,"SELECT course_name, department, credits FROM Courses WHERE credits = 3 AND (department = 'Science' OR department = 'Math');","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT, credits INTEGER);",This query selects courses that grant 3 credits and belong to either the 'Science' or 'Math' department.
Get flights with price between 300 and 500.,"SELECT flight_number, price FROM Flights WHERE price BETWEEN 300 AND 500;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT, origin TEXT, destination TEXT, departure_time DATETIME, arrival_time DATETIME, price REAL);","This query retrieves flights whose price is between 300 and 500, inclusive."
Show cars that are 'Silver' and made by 'Toyota'.,"SELECT make, model, color FROM Cars WHERE color = 'Silver' AND make = 'Toyota';","CREATE TABLE Cars (car_id INTEGER PRIMARY KEY, make TEXT, model TEXT, year INTEGER, color TEXT, price REAL);",This query selects Silver cars manufactured by 'Toyota'.
"Find the names and salaries of employees, ordered by salary from highest to lowest.","SELECT first_name, last_name, salary FROM Employees ORDER BY salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date DATE);","This query lists employee names and salaries, sorted in descending order based on their salary."
"List the names of products, sorted alphabetically.",SELECT product_name FROM Products ORDER BY product_name ASC;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query retrieves product names and sorts them alphabetically in ascending order.
Retrieve the first 5 customers registered.,"SELECT customer_id, first_name, registration_date FROM Customers ORDER BY registration_date ASC LIMIT 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date DATE);",This query orders customers by their registration date (earliest first) and then selects only the top 5.
Get books written by 'Jane Austen' or 'Charles Dickens'.,"SELECT title, author FROM Books WHERE author IN ('Jane Austen', 'Charles Dickens');","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, price REAL, publication_year INTEGER);",This query retrieves books where the author is either 'Jane Austen' or 'Charles Dickens'.
Show movies with a title containing 'The' and released after 2015.,"SELECT title, release_year FROM Movies WHERE title LIKE '%The%' AND release_year > 2015;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);",This query selects movies whose title includes 'The' and were released after 2015.
Find students not majoring in 'Computer Science' and with a GPA of at least 3.0.,"SELECT first_name, last_name, major, gpa FROM Students WHERE major != 'Computer Science' AND gpa >= 3.0;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT, gpa REAL, enrollment_date DATE);",This query retrieves students who are not Computer Science majors but have a GPA of 3.0 or higher.
"List courses with exactly 3 credits, ordered by course name.","SELECT course_name, department FROM Courses WHERE credits = 3 ORDER BY course_name ASC;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT, credits INTEGER);",This query selects courses that have 3 credits and sorts them alphabetically by their name.
Retrieve flights departing between 08:00 and 12:00.,"SELECT flight_number, departure_time FROM Flights WHERE STRFTIME('%H', departure_time) BETWEEN '08' AND '12';","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT, origin TEXT, destination TEXT, departure_time DATETIME, arrival_time DATETIME, price REAL);",This query selects flights whose departure time hour is between 08 and 12 (inclusive).
Get cars that are 'Red' but not 'Ford' brand.,"SELECT make, model, color FROM Cars WHERE color = 'Red' AND make != 'Ford';","CREATE TABLE Cars (car_id INTEGER PRIMARY KEY, make TEXT, model TEXT, year INTEGER, color TEXT, price REAL);",This query retrieves red cars that are not manufactured by 'Ford'.
Instruction,Query,Table Schema,Explanation
Find all products with a price greater than 50.,SELECT * FROM Products WHERE Price > 50;,"CREATE TABLE Products (ProductID INTEGER, ProductName TEXT, Price REAL, StockQuantity INTEGER);",This query retrieves all columns from the 'Products' table where the 'Price' is strictly greater than 50.
List all customers from the city 'New York'.,"SELECT CustomerName, Email FROM Customers WHERE City = 'New York';","CREATE TABLE Customers (CustomerID INTEGER, CustomerName TEXT, City TEXT, Email TEXT);",This query selects the name and email of customers whose 'City' is 'New York'.
Show orders placed before '2023-01-01'.,"SELECT OrderID, OrderDate FROM Orders WHERE OrderDate < '2023-01-01';","CREATE TABLE Orders (OrderID INTEGER, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query fetches order IDs and dates for orders placed prior to January 1, 2023."
Get employees with a salary less than or equal to 60000.,"SELECT EmployeeID, Name FROM Employees WHERE Salary <= 60000;","CREATE TABLE Employees (EmployeeID INTEGER, Name TEXT, Department TEXT, Salary REAL);",This query retrieves employee IDs and names for employees earning 60000 or less.
Find books published in the year 2022.,"SELECT Title, Author FROM Books WHERE PublicationYear = 2022;","CREATE TABLE Books (BookID INTEGER, Title TEXT, Author TEXT, PublicationYear INTEGER);",This query lists titles and authors of books that were published in the year 2022.
Display active users.,"SELECT UserID, Username FROM Users WHERE IsActive = TRUE;","CREATE TABLE Users (UserID INTEGER, Username TEXT, IsActive BOOLEAN, LastLoginDate TEXT);",This query returns the IDs and usernames of users marked as active.
Show movies released after 2010 and before 2020.,"SELECT Title, ReleaseYear FROM Movies WHERE ReleaseYear > 2010 AND ReleaseYear < 2020;","CREATE TABLE Movies (MovieID INTEGER, Title TEXT, ReleaseYear INTEGER, Genre TEXT);",This query selects movie titles and their release years for movies released strictly between 2010 and 2020.
List items with 'apple' in their name.,"SELECT ItemName, Price FROM Inventory WHERE ItemName LIKE '%apple%';","CREATE TABLE Inventory (ItemID INTEGER, ItemName TEXT, Price REAL, Quantity INTEGER);",This query retrieves items whose names contain the substring 'apple'.
Find vehicles that are either 'Car' or 'Motorcycle'.,"SELECT VehicleID, Type FROM Vehicles WHERE Type IN ('Car', 'Motorcycle');","CREATE TABLE Vehicles (VehicleID INTEGER, Make TEXT, Model TEXT, Type TEXT);",This query selects vehicles where the 'Type' is either 'Car' or 'Motorcycle'.
Get transactions with an amount between 100 and 500 (inclusive).,"SELECT TransactionID, Amount FROM Transactions WHERE Amount BETWEEN 100 AND 500;","CREATE TABLE Transactions (TransactionID INTEGER, AccountID INTEGER, Amount REAL, TransactionDate TEXT);","This query retrieves transaction IDs and amounts for transactions where the 'Amount' falls within the range of 100 to 500, inclusive."
Display employees who do not work in the 'HR' department.,"SELECT EmployeeName, Department FROM CompanyEmployees WHERE Department != 'HR';","CREATE TABLE CompanyEmployees (EmployeeID INTEGER, EmployeeName TEXT, Department TEXT, HireDate TEXT);",This query lists employee names and departments for employees not assigned to the 'HR' department.
Find suppliers whose names start with 'S'.,"SELECT SupplierID, SupplierName FROM Suppliers WHERE SupplierName LIKE 'S%';","CREATE TABLE Suppliers (SupplierID INTEGER, SupplierName TEXT, ContactPerson TEXT);",This query fetches suppliers whose names begin with the letter 'S'.
Show courses that are not 'Calculus' or 'Physics'.,"SELECT CourseName FROM Courses WHERE CourseName NOT IN ('Calculus', 'Physics');","CREATE TABLE Courses (CourseID INTEGER, CourseName TEXT, Credits INTEGER);",This query selects course names that are not 'Calculus' and not 'Physics'.
Get tasks that have a due date in 2024.,SELECT TaskName FROM Tasks WHERE DueDate BETWEEN '2024-01-01' AND '2024-12-31';,"CREATE TABLE Tasks (TaskID INTEGER, TaskName TEXT, DueDate TEXT, Status TEXT);",This query retrieves task names for tasks whose 'DueDate' falls within the year 2024.
List students who have not yet submitted their assignment.,SELECT StudentName FROM Students WHERE HasSubmitted = FALSE;,"CREATE TABLE Students (StudentID INTEGER, StudentName TEXT, HasSubmitted BOOLEAN, Grade REAL);",This query selects student names for students whose 'HasSubmitted' status is false.
Find products with a price greater than 100 and a stock quantity less than 50.,"SELECT ProductName, Price, Stock FROM ProductsData WHERE Price > 100 AND Stock < 50;","CREATE TABLE ProductsData (ProductID INTEGER, ProductName TEXT, Price REAL, Stock INTEGER);","This query retrieves product names, prices, and stock for products that are both expensive (price > 100) and low in stock (stock < 50)."
Display orders with a total amount over 1000 or placed on '2023-03-15'.,"SELECT OrderID, TotalAmount, OrderDate FROM CustomerOrders WHERE TotalAmount > 1000 OR OrderDate = '2023-03-15';","CREATE TABLE CustomerOrders (OrderID INTEGER, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query selects orders that either have a total amount greater than 1000 OR were placed on March 15, 2023."
Get users whose email address is not null.,"SELECT UserID, Username FROM AppUsers WHERE Email IS NOT NULL;","CREATE TABLE AppUsers (UserID INTEGER, Username TEXT, Email TEXT, SignUpDate TEXT);","This query fetches user IDs and usernames for users who have provided an email address (i.e., their 'Email' is not NULL)."
Find employees whose phone number is missing.,"SELECT EmployeeID, EmployeeName FROM Staff WHERE PhoneNumber IS NULL;","CREATE TABLE Staff (EmployeeID INTEGER, EmployeeName TEXT, Department TEXT, PhoneNumber TEXT);","This query retrieves employee IDs and names for staff members who do not have a recorded phone number (i.e., their 'PhoneNumber' is NULL)."
List projects that are 'Active' and have a budget exceeding 50000.,"SELECT ProjectName, Budget FROM Projects WHERE Status = 'Active' AND Budget > 50000;","CREATE TABLE Projects (ProjectID INTEGER, ProjectName TEXT, Status TEXT, Budget REAL);",This query selects project names and budgets for projects that are currently 'Active' and have a budget greater than 50000.
Show products whose name ends with 'kit'.,SELECT ProductName FROM ProductsList WHERE ProductName LIKE '%kit';,"CREATE TABLE ProductsList (ProductID INTEGER, ProductName TEXT, Category TEXT);",This query lists product names that end with the string 'kit'.
Find customers whose name does not start with 'A'.,SELECT CustomerName FROM RetailCustomers WHERE CustomerName NOT LIKE 'A%';,"CREATE TABLE RetailCustomers (CustomerID INTEGER, CustomerName TEXT, Region TEXT);",This query retrieves customer names for customers whose names do not begin with the letter 'A'.
Get events scheduled for tomorrow (assuming today is '2023-11-20').,"SELECT EventName, EventDate FROM Events WHERE EventDate = '2023-11-21';","CREATE TABLE Events (EventID INTEGER, EventName TEXT, EventDate TEXT, Location TEXT);","This query selects event names and dates for events scheduled specifically on November 21, 2023."
List employees hired after '2020-01-01' and before '2023-01-01'.,"SELECT EmployeeName, HireDate FROM CompanyStaff WHERE HireDate > '2020-01-01' AND HireDate < '2023-01-01';","CREATE TABLE CompanyStaff (EmployeeID INTEGER, EmployeeName TEXT, HireDate TEXT, Position TEXT);","This query retrieves employee names and hire dates for employees hired strictly between January 1, 2020, and January 1, 2023."
Show movies with a runtime of exactly 120 minutes.,SELECT Title FROM Films WHERE RuntimeMinutes = 120;,"CREATE TABLE Films (FilmID INTEGER, Title TEXT, RuntimeMinutes INTEGER, Director TEXT);",This query lists titles of films that have a runtime of exactly 120 minutes.
Find vehicles with a license plate containing 'ABC' or 'XYZ'.,"SELECT VehicleModel, LicensePlate FROM VehiclesInfo WHERE LicensePlate LIKE '%ABC%' OR LicensePlate LIKE '%XYZ%';","CREATE TABLE VehiclesInfo (VehicleID INTEGER, VehicleModel TEXT, LicensePlate TEXT);",This query selects vehicle models and license plates for vehicles whose license plates contain either 'ABC' or 'XYZ'.
Get orders that were not shipped yet.,"SELECT OrderID, Status FROM CustomerOrdersData WHERE Status = 'Pending';","CREATE TABLE CustomerOrdersData (OrderID INTEGER, OrderDate TEXT, Status TEXT);",This query retrieves order IDs and statuses for orders that are in a 'Pending' (not shipped) state.
Display items with quantity exactly 0.,SELECT ItemName FROM WarehouseStock WHERE Quantity = 0;,"CREATE TABLE WarehouseStock (ItemID INTEGER, ItemName TEXT, Quantity INTEGER);",This query lists item names for items that currently have zero quantity in stock.
Find departments with more than 10 employees.,SELECT DepartmentName FROM DepartmentsInfo WHERE NumberOfEmployees > 10;,"CREATE TABLE DepartmentsInfo (DepartmentID INTEGER, DepartmentName TEXT, NumberOfEmployees INTEGER);",This query selects department names for departments that have more than 10 employees.
List tasks marked as 'Completed'.,"SELECT TaskID, TaskDescription FROM ProjectTasks WHERE Status = 'Completed';","CREATE TABLE ProjectTasks (TaskID INTEGER, TaskDescription TEXT, Status TEXT, AssignedTo TEXT);",This query fetches task IDs and descriptions for tasks that have a 'Completed' status.
Show customers whose email ends with '.com'.,"SELECT CustomerName, Email FROM UserAccounts WHERE Email LIKE '%.com';","CREATE TABLE UserAccounts (UserID INTEGER, CustomerName TEXT, Email TEXT);",This query selects customer names and emails for users whose email addresses end with '.com'.
Get employees hired in 2021 or 2022.,"SELECT EmployeeName, HireDate FROM CompanyRoster WHERE HireDate BETWEEN '2021-01-01' AND '2022-12-31';","CREATE TABLE CompanyRoster (EmployeeID INTEGER, EmployeeName TEXT, HireDate TEXT);",This query retrieves employee names and hire dates for employees hired during the years 2021 or 2022.
Find products that are not in the 'Electronics' category.,SELECT ProductName FROM ProductCatalog WHERE Category != 'Electronics';,"CREATE TABLE ProductCatalog (ProductID INTEGER, ProductName TEXT, Category TEXT);",This query lists product names for products that do not belong to the 'Electronics' category.
Display books with less than 200 pages.,"SELECT Title, Pages FROM LibraryBooks WHERE Pages < 200;","CREATE TABLE LibraryBooks (BookID INTEGER, Title TEXT, Author TEXT, Pages INTEGER);",This query selects titles and page counts for books that have fewer than 200 pages.
Show orders with a total amount not between 50 and 200.,"SELECT OrderID, TotalAmount FROM PurchaseOrders WHERE TotalAmount NOT BETWEEN 50 AND 200;","CREATE TABLE PurchaseOrders (OrderID INTEGER, CustomerID INTEGER, TotalAmount REAL);",This query retrieves order IDs and total amounts for orders where the total amount is not within the inclusive range of 50 to 200.
Find movies that are not 'Action' and have a rating above 7.0.,SELECT Title FROM FilmArchive WHERE Genre != 'Action' AND Rating > 7.0;,"CREATE TABLE FilmArchive (MovieID INTEGER, Title TEXT, Genre TEXT, Rating REAL);",This query lists titles of movies that are not 'Action' genre and have a rating greater than 7.0.
Get employees whose name starts with 'J' and is at least 5 characters long.,SELECT EmployeeName FROM Workforce WHERE EmployeeName LIKE 'J%' AND LENGTH(EmployeeName) >= 5;,"CREATE TABLE Workforce (EmployeeID INTEGER, EmployeeName TEXT, Position TEXT);",This query selects employee names for employees whose name starts with 'J' and has a length of 5 or more characters.
List students who are either in 'Grade 10' or 'Grade 12'.,"SELECT StudentName FROM SchoolStudents WHERE GradeLevel IN ('Grade 10', 'Grade 12');","CREATE TABLE SchoolStudents (StudentID INTEGER, StudentName TEXT, GradeLevel TEXT);",This query retrieves student names for students who are in either 'Grade 10' or 'Grade 12'.
Show appointments scheduled for today (assuming today is '2023-11-20').,"SELECT PatientName, AppointmentTime FROM Appointments WHERE AppointmentDate = '2023-11-20';","CREATE TABLE Appointments (AppointmentID INTEGER, PatientName TEXT, AppointmentDate TEXT, AppointmentTime TEXT);","This query fetches patient names and appointment times for appointments scheduled on November 20, 2023."
Find users who registered after '2023-06-01'.,SELECT Username FROM UserRegistrations WHERE RegistrationDate > '2023-06-01';,"CREATE TABLE UserRegistrations (UserID INTEGER, Username TEXT, RegistrationDate TEXT);","This query lists usernames of users who registered after June 1, 2023."
Get articles that are 'Published' and have a 'Technology' tag.,SELECT ArticleTitle FROM Articles WHERE Status = 'Published' AND Tag = 'Technology';,"CREATE TABLE Articles (ArticleID INTEGER, ArticleTitle TEXT, Status TEXT, Tag TEXT);",This query selects article titles for articles that are both 'Published' and tagged as 'Technology'.
Display products with a weight exactly 1.5 kg.,SELECT ProductName FROM ProductSpecs WHERE WeightKG = 1.5;,"CREATE TABLE ProductSpecs (ProductID INTEGER, ProductName TEXT, WeightKG REAL, Dimensions TEXT);",This query lists product names for products that have a weight of exactly 1.5 kilograms.
Show employees who are not in 'Sales' or 'Marketing' departments.,"SELECT EmployeeName FROM TeamMembers WHERE Department NOT IN ('Sales', 'Marketing');","CREATE TABLE TeamMembers (EmployeeID INTEGER, EmployeeName TEXT, Department TEXT);",This query retrieves employee names for team members who are not part of the 'Sales' or 'Marketing' departments.
Find orders placed by customer ID 101.,"SELECT OrderID, OrderDate FROM OrdersLog WHERE CustomerID = 101;","CREATE TABLE OrdersLog (OrderID INTEGER, CustomerID INTEGER, OrderDate TEXT);",This query selects order IDs and dates for all orders made by customer with ID 101.
Get books written by 'Jane Doe'.,SELECT Title FROM BooksCollection WHERE Author = 'Jane Doe';,"CREATE TABLE BooksCollection (BookID INTEGER, Title TEXT, Author TEXT);",This query lists titles of books authored by 'Jane Doe'.
List students who scored above 90 in Math.,SELECT StudentName FROM Grades WHERE Subject = 'Math' AND Score > 90;,"CREATE TABLE Grades (StudentID INTEGER, StudentName TEXT, Subject TEXT, Score INTEGER);",This query retrieves student names who scored greater than 90 in the 'Math' subject.
Show employees with a salary between 70000 and 90000.,"SELECT Name, Salary FROM StaffSalaries WHERE Salary BETWEEN 70000 AND 90000;","CREATE TABLE StaffSalaries (EmployeeID INTEGER, Name TEXT, Salary REAL);",This query selects names and salaries for staff members whose salary is within the inclusive range of 70000 to 90000.
Find movies whose title starts with 'The' and released after 2000.,SELECT Title FROM FilmLibrary WHERE Title LIKE 'The%' AND ReleaseYear > 2000;,"CREATE TABLE FilmLibrary (MovieID INTEGER, Title TEXT, ReleaseYear INTEGER);",This query lists titles of movies that begin with 'The' and were released after the year 2000.
Get articles that are not 'Draft' status.,"SELECT ArticleID, ArticleTitle FROM Content WHERE Status != 'Draft';","CREATE TABLE Content (ArticleID INTEGER, ArticleTitle TEXT, Status TEXT);",This query retrieves article IDs and titles for articles that are not in 'Draft' status.
Display customers who have made purchases totaling over 500.,SELECT CustomerName FROM CustomerPurchases WHERE TotalPurchases > 500;,"CREATE TABLE CustomerPurchases (CustomerID INTEGER, CustomerName TEXT, TotalPurchases REAL);",This query selects customer names for customers whose total purchases exceed 500.
List products whose category is 'Electronics' or 'Appliances'.,"SELECT ProductName FROM StoreProducts WHERE Category IN ('Electronics', 'Appliances');","CREATE TABLE StoreProducts (ProductID INTEGER, ProductName TEXT, Category TEXT);",This query fetches product names for products belonging to either the 'Electronics' or 'Appliances' category.
Show employees whose contact email is missing.,SELECT EmployeeName FROM EmployeeContact WHERE Email IS NULL;,"CREATE TABLE EmployeeContact (EmployeeID INTEGER, EmployeeName TEXT, Email TEXT);",This query lists employee names for employees who do not have an email address recorded.
Find books where the author is known.,SELECT Title FROM BookDetails WHERE Author IS NOT NULL;,"CREATE TABLE BookDetails (BookID INTEGER, Title TEXT, Author TEXT);",This query retrieves titles of books where the author information is present (not NULL).
Get tasks with priority 'High' and not yet 'Completed'.,SELECT TaskName FROM TaskList WHERE Priority = 'High' AND Status != 'Completed';,"CREATE TABLE TaskList (TaskID INTEGER, TaskName TEXT, Priority TEXT, Status TEXT);",This query selects task names for tasks that have 'High' priority and are not yet 'Completed'.
Display students who are not in 'Grade 9' and have a GPA above 3.5.,SELECT StudentName FROM StudentRecords WHERE GradeLevel != 'Grade 9' AND GPA > 3.5;,"CREATE TABLE StudentRecords (StudentID INTEGER, StudentName TEXT, GradeLevel TEXT, GPA REAL);",This query retrieves student names for students who are not in 'Grade 9' and have a GPA greater than 3.5.
Show products with a stock quantity less than 10 or greater than 100.,SELECT ProductName FROM ProductStockLevels WHERE Quantity < 10 OR Quantity > 100;,"CREATE TABLE ProductStockLevels (ProductID INTEGER, ProductName TEXT, Quantity INTEGER);",This query lists product names for products that have a stock quantity either less than 10 or greater than 100.
Find users who logged in in January 2023.,SELECT Username FROM UserLogins WHERE LoginDate BETWEEN '2023-01-01' AND '2023-01-31';,"CREATE TABLE UserLogins (UserID INTEGER, Username TEXT, LoginDate TEXT);",This query selects usernames for users who had a login recorded in January 2023.
Instruction,Query,Table Schema,Explanation
List all customers and their corresponding order IDs.,"SELECT C.CustomerName, O.OrderID FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID;","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)","This query uses an INNER JOIN to combine rows from the Customers and Orders tables where the CustomerID matches in both tables, listing customer names and their order IDs."
Show all employees and the names of their departments.,"SELECT E.FirstName, E.LastName, D.DepartmentName FROM Employees E JOIN Departments D ON E.DepartmentID = D.DepartmentID;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)",An INNER JOIN is used to connect employees with their respective departments based on a matching DepartmentID.
Retrieve all products and their categories.,"SELECT P.ProductName, C.CategoryName FROM Products P INNER JOIN Categories C ON P.CategoryID = C.CategoryID;","Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Categories(CategoryID PK, CategoryName, Description)",This query joins Products and Categories tables on CategoryID to display product names alongside their category names.
Find the titles of books and the names of their authors.,"SELECT B.Title, A.AuthorName FROM Books B INNER JOIN Authors A ON B.AuthorID = A.AuthorID;","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price)",An INNER JOIN is performed between Books and Authors tables using AuthorID to link books to their authors.
"List all departments and the employees in each, including departments with no employees.","SELECT D.DepartmentName, E.FirstName, E.LastName FROM Departments D LEFT JOIN Employees E ON D.DepartmentID = E.DepartmentID ORDER BY D.DepartmentName;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)","A LEFT JOIN ensures all departments are listed, and if there are employees in that department, their names are shown. Departments without employees will have NULLs for employee names."
"Show all customers and any orders they have placed, including customers who have not placed any orders.","SELECT C.CustomerName, O.OrderID, O.OrderDate FROM Customers C LEFT JOIN Orders O ON C.CustomerID = O.CustomerID;","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)","This LEFT JOIN returns all customers from the Customers table and matches them with their orders. Customers without orders will still appear, with NULLs for order details."
"Display all books and their publishers, including books without a listed publisher.","SELECT B.Title, P.PublisherName FROM Books B LEFT JOIN Publishers P ON B.PublisherID = P.PublisherID;","Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price), Publishers(PublisherID PK, PublisherName, City)","A LEFT JOIN is used to list all books. If a book has a corresponding publisher, its name is shown; otherwise, PublisherName will be NULL."
"List all categories and their products, including categories with no products.","SELECT C.CategoryName, P.ProductName FROM Categories C LEFT JOIN Products P ON C.CategoryID = P.CategoryID;","Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Categories(CategoryID PK, CategoryName, Description)","This query uses a LEFT JOIN to ensure all categories are listed, showing associated products if any, or NULLs otherwise."
"Find all orders and the customer information for customers who placed them, including orders placed by customers not in the system (if any such orders existed, e.g., via data anomaly).","SELECT O.OrderID, C.CustomerName, C.Email FROM Customers C RIGHT JOIN Orders O ON C.CustomerID = O.CustomerID;","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)","A RIGHT JOIN is used here to list all orders from the Orders table, and if a matching customer exists, their information is included. Orders without a matching customer would still be shown, with NULLs for customer details."
"Show all employees and their department locations, ensuring all department locations are displayed, even if no employees are assigned to them.","SELECT E.FirstName, E.LastName, D.Location FROM Employees E RIGHT JOIN Departments D ON E.DepartmentID = D.DepartmentID;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)","A RIGHT JOIN on DepartmentID ensures that all departments and their locations are included in the result set, showing employee details only where a match exists."
"List all authors and their books, ensuring all authors are shown, and all books are shown, regardless of whether they have a matching author or book entry.","SELECT A.AuthorName, B.Title FROM Authors A FULL OUTER JOIN Books B ON A.AuthorID = B.AuthorID;","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price)","A FULL OUTER JOIN returns all rows from both tables, Authors and Books. It includes rows where there is a match in both tables, as well as rows from Authors that have no corresponding Book, and rows from Books that have no corresponding Author."
"Retrieve all customers and all orders, showing matches where they exist, and also customers without orders and orders without customers.","SELECT C.CustomerName, O.OrderID, O.TotalAmount FROM Customers C FULL OUTER JOIN Orders O ON C.CustomerID = O.CustomerID;","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)","A FULL OUTER JOIN combines all rows from both Customers and Orders tables. It will include matching customer-order pairs, customers with no orders, and orders with no matching customer."
"Generate all possible combinations of products and categories, ignoring any common columns.","SELECT P.ProductName, C.CategoryName FROM Products P CROSS JOIN Categories C;","Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Categories(CategoryID PK, CategoryID PK, CategoryName, Description)","A CROSS JOIN produces a Cartesian product of the two tables, meaning every row from Products is combined with every row from Categories."
List all pairs of employees who work in the same department.,"SELECT E1.FirstName, E1.LastName, E2.FirstName, E2.LastName, E1.DepartmentID FROM Employees E1 JOIN Employees E2 ON E1.DepartmentID = E2.DepartmentID AND E1.EmployeeID <> E2.EmployeeID;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate)","This is a SELF JOIN. The Employees table is joined with itself using aliases (E1, E2) to find pairs of different employees (E1.EmployeeID <> E2.EmployeeID) who share the same DepartmentID."
Find books published after 2000 and their authors.,"SELECT B.Title, A.AuthorName FROM Books B INNER JOIN Authors A ON B.AuthorID = A.AuthorID WHERE B.PublicationYear > 2000;","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price)","An INNER JOIN links books to authors, and then a WHERE clause filters the results to include only books published after the year 2000."
Get the total amount for each customer's orders.,"SELECT C.CustomerName, SUM(O.TotalAmount) AS TotalSpent FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID GROUP BY C.CustomerName ORDER BY TotalSpent DESC;","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)","This query joins Customers and Orders, then groups the results by customer name to sum the total amount for all orders placed by each customer."
Count the number of employees in each department.,"SELECT D.DepartmentName, COUNT(E.EmployeeID) AS NumberOfEmployees FROM Departments D LEFT JOIN Employees E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentName ORDER BY D.DepartmentName;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)","A LEFT JOIN ensures all departments are included. The results are grouped by department name, and the COUNT function tallies the number of employees (or 0 if no employees)."
Find products with a stock quantity less than 10 and their categories.,"SELECT P.ProductName, P.StockQuantity, C.CategoryName FROM Products P INNER JOIN Categories C ON P.CategoryID = C.CategoryID WHERE P.StockQuantity < 10;","Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Categories(CategoryID PK, CategoryName, Description)",This query joins Products and Categories and then filters for products where the StockQuantity is less than 10.
List all authors who have written more than 5 books.,"SELECT A.AuthorName, COUNT(B.BookID) AS NumberOfBooks FROM Authors A INNER JOIN Books B ON A.AuthorID = B.AuthorID GROUP BY A.AuthorName HAVING COUNT(B.BookID) > 5;","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price)","The query joins Authors and Books, groups by author, and then uses HAVING to filter for authors who have written more than 5 books."
Retrieve employees earning more than $70000 and their department names.,"SELECT E.FirstName, E.LastName, E.Salary, D.DepartmentName FROM Employees E INNER JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE E.Salary > 70000;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)",This query joins Employees and Departments and then filters the results to show only employees with a salary greater than 70000.
Find customers from 'New York' and their orders.,"SELECT C.CustomerName, O.OrderID, O.OrderDate FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID WHERE C.City = 'New York';","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)","An INNER JOIN connects customers and orders, and a WHERE clause filters for customers located in 'New York'."
"Display products with a price greater than $50, along with their category names.","SELECT P.ProductName, P.Price, C.CategoryName FROM Products P INNER JOIN Categories C ON P.CategoryID = C.CategoryID WHERE P.Price > 50;","Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Categories(CategoryID PK, CategoryName, Description)",This query joins products with categories and then filters to show only products that have a price greater than 50.
Get the titles of books published by 'Penguin Books'.,SELECT B.Title FROM Books B INNER JOIN Publishers P ON B.PublisherID = P.PublisherID WHERE P.PublisherName = 'Penguin Books';,"Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price), Publishers(PublisherID PK, PublisherName, City)","An INNER JOIN links books to publishers, and then a WHERE clause filters for books published by 'Penguin Books'."
List employees who were hired in 2020 and their department names.,"SELECT E.FirstName, E.LastName, D.DepartmentName FROM Employees E INNER JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE STRFTIME('%Y', E.HireDate) = '2020';","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)",This query joins Employees and Departments and filters for employees whose hire date falls within the year 2020.
Find all products that have never been ordered.,SELECT P.ProductName FROM Products P LEFT JOIN OrderDetails OD ON P.ProductID = OD.ProductID WHERE OD.ProductID IS NULL;,"Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount), OrderDetails(OrderID FK, ProductID FK, Quantity, PriceAtOrder)","This query assumes an `OrderDetails` table linking products to orders. It uses a LEFT JOIN from Products to OrderDetails and filters for products that do not have a corresponding entry in OrderDetails, indicating they have never been ordered."
List customers who have placed orders with a total amount greater than $1000.,SELECT DISTINCT C.CustomerName FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID WHERE O.TotalAmount > 1000;,"Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)","This query joins Customers and Orders, filters for orders with a total amount over 1000, and then selects distinct customer names to avoid duplicates if a customer has multiple such orders."
Show the average salary for each department.,"SELECT D.DepartmentName, AVG(E.Salary) AS AverageSalary FROM Departments D LEFT JOIN Employees E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentName ORDER BY D.DepartmentName;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)","A LEFT JOIN ensures all departments are included. The average salary is calculated for each department, with departments having no employees resulting in NULL average salary."
"List all authors and the titles of their books, including authors who have no books.","SELECT A.AuthorName, B.Title FROM Authors A LEFT JOIN Books B ON A.AuthorID = B.AuthorID;","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price)","A LEFT JOIN is used to retrieve all authors and their associated books. Authors without books will still appear, with a NULL in the 'Title' column."
"Find all books and their authors, along with the publisher name.","SELECT B.Title, A.AuthorName, P.PublisherName FROM Books B INNER JOIN Authors A ON B.AuthorID = A.AuthorID INNER JOIN Publishers P ON B.PublisherID = P.PublisherID;","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price), Publishers(PublisherID PK, PublisherName, City)","This query performs two INNER JOINs: first to link Books with Authors, and then to link the result with Publishers, effectively combining data from all three tables."
"List employees, their departments, and the city where their department is located.","SELECT E.FirstName, E.LastName, D.DepartmentName, D.Location AS DepartmentCity FROM Employees E INNER JOIN Departments D ON E.DepartmentID = D.DepartmentID;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)","An INNER JOIN connects employees to their departments based on DepartmentID, allowing retrieval of employee names, department names, and department locations."
"Show customers, their orders, and the products included in each order.","SELECT C.CustomerName, O.OrderID, P.ProductName, OD.Quantity FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID INNER JOIN OrderDetails OD ON O.OrderID = OD.OrderID INNER JOIN Products P ON OD.ProductID = P.ProductID;","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount), OrderDetails(OrderID FK, ProductID FK, Quantity, PriceAtOrder), Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity)","This query involves multiple INNER JOINs: Customers to Orders, Orders to OrderDetails, and OrderDetails to Products, to link customer information with specific products in their orders."
"Retrieve the names of authors, their books, and the city of the publisher for those books.","SELECT A.AuthorName, B.Title, P.City AS PublisherCity FROM Authors A INNER JOIN Books B ON A.AuthorID = B.AuthorID INNER JOIN Publishers P ON B.PublisherID = P.PublisherID;","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price), Publishers(PublisherID PK, PublisherName, City)","Multiple INNER JOINs are used to connect Authors to Books and then Books to Publishers, retrieving the author's name, book title, and the city of the book's publisher."
List all employees who earn more than their department's average salary.,"SELECT E.FirstName, E.LastName, E.Salary, D.DepartmentName FROM Employees E INNER JOIN (SELECT DepartmentID, AVG(Salary) AS AvgDeptSalary FROM Employees GROUP BY DepartmentID) AS DeptAvg ON E.DepartmentID = DeptAvg.DepartmentID WHERE E.Salary > DeptAvg.AvgDeptSalary;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)","This query uses a subquery to first calculate the average salary for each department. Then, it joins the Employees table with this subquery result to filter for employees whose salary is greater than their department's average."
Find customers who have placed orders on the same day as another customer from a different city.,"SELECT C1.CustomerName AS Customer1, C2.CustomerName AS Customer2, O1.OrderDate FROM Customers C1 JOIN Orders O1 ON C1.CustomerID = O1.CustomerID JOIN Customers C2 JOIN Orders O2 ON C2.CustomerID = O2.CustomerID AND O1.OrderDate = O2.OrderDate AND C1.CustomerCity <> C2.CustomerCity AND C1.CustomerID <> C2.CustomerID;","Customers(CustomerID PK, CustomerName, Email, CustomerCity), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)",This query involves multiple joins and conditions. It joins Customers and Orders for two different instances to find orders placed on the same date by customers from different cities and with different customer IDs.
"Retrieve all customer names and order IDs, including customers without orders, using 'USING' for the join condition.","SELECT C.CustomerName, O.OrderID FROM Customers C LEFT JOIN Orders O USING(CustomerID);","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)","This query performs a LEFT JOIN using the 'USING' clause, which is a shorthand for 'ON C.CustomerID = O.CustomerID' when the join columns have the same name."
Show product names and category descriptions for products in the 'Electronics' category.,"SELECT P.ProductName, C.Description FROM Products P INNER JOIN Categories C ON P.CategoryID = C.CategoryID WHERE C.CategoryName = 'Electronics';","Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Categories(CategoryID PK, CategoryName, Description)","An INNER JOIN connects products to categories, and then a WHERE clause filters for products belonging to the 'Electronics' category."
List employees who work in departments located in 'New York'.,"SELECT E.FirstName, E.LastName, D.DepartmentName FROM Employees E INNER JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE D.Location = 'New York';","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)",This query joins Employees with Departments and filters the results to include only employees whose department is located in 'New York'.
Find books with more than 300 pages (assume 'Pages' column exists) and their authors.,"SELECT B.Title, A.AuthorName FROM Books B INNER JOIN Authors A ON B.AuthorID = A.AuthorID WHERE B.Pages > 300;","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price, Pages)","An INNER JOIN links books to authors, and a WHERE clause filters for books with more than 300 pages."
List customer names who have not placed any orders.,SELECT C.CustomerName FROM Customers C LEFT JOIN Orders O ON C.CustomerID = O.CustomerID WHERE O.OrderID IS NULL;,"Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)","A LEFT JOIN is used to include all customers. By checking for NULL OrderID from the Orders table, it identifies customers who have no corresponding orders."
Show departments that have no employees.,SELECT D.DepartmentName FROM Departments D LEFT JOIN Employees E ON D.DepartmentID = E.DepartmentID WHERE E.EmployeeID IS NULL;,"Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)","A LEFT JOIN retrieves all departments. By checking for a NULL EmployeeID from the Employees table, it filters for departments that do not have any employees assigned to them."
Retrieve the most expensive product in each category.,"SELECT C.CategoryName, P.ProductName, P.Price FROM Categories C JOIN Products P ON C.CategoryID = P.CategoryID WHERE P.Price = (SELECT MAX(P2.Price) FROM Products P2 WHERE P2.CategoryID = C.CategoryID);","Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Categories(CategoryID PK, CategoryName, Description)",This query joins Categories and Products. The WHERE clause uses a correlated subquery to ensure that only products with a price equal to the maximum price within their respective category are returned.
"List employees and their managers (assuming 'ManagerID' column exists in Employees, referencing EmployeeID).","SELECT E.FirstName AS EmployeeFirstName, E.LastName AS EmployeeLastName, M.FirstName AS ManagerFirstName, M.LastName AS ManagerLastName FROM Employees E LEFT JOIN Employees M ON E.ManagerID = M.EmployeeID;","Employees(EmployeeID PK, FirstName, LastName, ManagerID FK, Salary, HireDate)","This is a SELF JOIN using a LEFT JOIN to include all employees, even those without a manager. It joins the Employees table to itself (aliased as E for employee and M for manager) on the condition that the employee's ManagerID matches the manager's EmployeeID."
Find books whose author's birth year is before 1950.,"SELECT B.Title, A.AuthorName, A.BirthYear FROM Books B INNER JOIN Authors A ON B.AuthorID = A.AuthorID WHERE A.BirthYear < 1950;","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price)","An INNER JOIN connects books with their authors, and a WHERE clause filters the results to include only authors born before 1950."
Show the number of books published by each publisher.,"SELECT P.PublisherName, COUNT(B.BookID) AS NumberOfBooks FROM Publishers P LEFT JOIN Books B ON P.PublisherID = B.PublisherID GROUP BY P.PublisherName ORDER BY NumberOfBooks DESC;","Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price), Publishers(PublisherID PK, PublisherName, City)","A LEFT JOIN ensures all publishers are included. The results are grouped by publisher name, and the COUNT function tallies the number of books associated with each publisher."
Get the names of customers who have orders placed in '2023'.,"SELECT DISTINCT C.CustomerName FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID WHERE STRFTIME('%Y', O.OrderDate) = '2023';","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)",This query joins Customers with Orders and filters for orders placed in the year 2023. DISTINCT is used to ensure each customer name appears only once.
"List all products and their categories, ordered by category name and then product name.","SELECT P.ProductName, C.CategoryName FROM Products P INNER JOIN Categories C ON P.CategoryID = C.CategoryID ORDER BY C.CategoryName, P.ProductName;","Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Categories(CategoryID PK, CategoryName, Description)","An INNER JOIN retrieves products and their categories, and then the results are sorted alphabetically first by category name and then by product name."
Find employees whose salary is in the top 10% of their department's salaries.,"SELECT E.FirstName, E.LastName, E.Salary, D.DepartmentName FROM Employees E INNER JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE E.Salary >= (SELECT T2.Salary FROM Employees T2 WHERE T2.DepartmentID = E.DepartmentID ORDER BY T2.Salary DESC LIMIT 1 OFFSET (SELECT COUNT(*) FROM Employees T3 WHERE T3.DepartmentID = E.DepartmentID) * 0.1 - 1);","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)","This query joins Employees and Departments. The WHERE clause uses a correlated subquery to find the salary threshold for the top 10% within each employee's department, then filters employees based on that threshold."
List customer names and their cities for customers who have placed at least one order.,"SELECT DISTINCT C.CustomerName, C.City FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID;","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)",An INNER JOIN ensures that only customers who have a corresponding order are included. DISTINCT is used to list each customer only once.
"Show all books and their authors, and all authors and their books, even if there are mismatches, for authors born after 1980 or books published after 2010.","SELECT A.AuthorName, B.Title FROM Authors A FULL OUTER JOIN Books B ON A.AuthorID = B.AuthorID WHERE (A.BirthYear > 1980 OR B.PublicationYear > 2010);","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price)",A FULL OUTER JOIN is used to combine all authors and books. The WHERE clause then filters for rows where the author's birth year is after 1980 OR the book's publication year is after 2010. Note: FULL OUTER JOIN with WHERE clause can behave differently from two separate outer joins UNIONed.
Find the total stock quantity for products in the 'Books' category.,"SELECT C.CategoryName, SUM(P.StockQuantity) AS TotalStock FROM Categories C INNER JOIN Products P ON C.CategoryID = P.CategoryID WHERE C.CategoryName = 'Books' GROUP BY C.CategoryName;","Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Categories(CategoryID PK, CategoryName, Description)","This query joins Categories and Products, filters for the 'Books' category, and then sums the StockQuantity for all products within that category."
List all customers who have placed orders totaling more than $500.,"SELECT C.CustomerName, SUM(O.TotalAmount) AS TotalSpent FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID GROUP BY C.CustomerName HAVING SUM(O.TotalAmount) > 500;","Customers(CustomerID PK, CustomerName, Email, City), Orders(OrderID PK, CustomerID FK, OrderDate, TotalAmount)","This query joins Customers and Orders, groups the results by customer, and then uses HAVING to filter for customers whose total order amount exceeds $500."
"Show all departments and their locations, including those without any employees.","SELECT D.DepartmentName, D.Location FROM Departments D LEFT JOIN Employees E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentName, D.Location;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)","A LEFT JOIN ensures all departments are listed. Grouping by department name and location ensures each department appears only once, regardless of employee count."
Retrieve the names of authors who have published books with 'Tech Publishers' or 'Art Publishers'.,"SELECT DISTINCT A.AuthorName FROM Authors A INNER JOIN Books B ON A.AuthorID = B.AuthorID INNER JOIN Publishers P ON B.PublisherID = P.PublisherID WHERE P.PublisherName IN ('Tech Publishers', 'Art Publishers');","Authors(AuthorID PK, AuthorName, BirthYear), Books(BookID PK, Title, AuthorID FK, PublisherID FK, PublicationYear, Price), Publishers(PublisherID PK, PublisherName, City)","This query uses multiple INNER JOINs to connect authors, books, and publishers, then filters for publishers named 'Tech Publishers' or 'Art Publishers', and finally selects distinct author names."
Find all products that are more expensive than any product in the 'Office Supplies' category.,"SELECT P1.ProductName, P1.Price, C1.CategoryName FROM Products P1 INNER JOIN Categories C1 ON P1.CategoryID = C1.CategoryID WHERE P1.Price > (SELECT MAX(P2.Price) FROM Products P2 INNER JOIN Categories C2 ON P2.CategoryID = C2.CategoryID WHERE C2.CategoryName = 'Office Supplies');","Products(ProductID PK, ProductName, CategoryID FK, Price, StockQuantity), Categories(CategoryID PK, CategoryName, Description)",This query joins products with categories. The WHERE clause uses a subquery to find the maximum price of products in the 'Office Supplies' category and then filters for products that are more expensive than that maximum.
List employees who share the same last name but have different first names.,"SELECT E1.FirstName, E1.LastName, E2.FirstName, E2.LastName FROM Employees E1 JOIN Employees E2 ON E1.LastName = E2.LastName AND E1.FirstName <> E2.FirstName;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate)",This is a SELF JOIN where the Employees table is joined with itself to find pairs of employees who have the same last name but different first names.
Retrieve the department name and the total salary paid to employees in departments located in 'London'.,"SELECT D.DepartmentName, SUM(E.Salary) AS TotalDepartmentSalary FROM Departments D INNER JOIN Employees E ON D.DepartmentID = E.DepartmentID WHERE D.Location = 'London' GROUP BY D.DepartmentName;","Employees(EmployeeID PK, FirstName, LastName, DepartmentID FK, Salary, HireDate), Departments(DepartmentID PK, DepartmentName, Location)","This query joins Departments and Employees, filters for departments located in 'London', then groups by department name to sum the salaries of employees within those departments."
Instruction,Query,Table Schema,Explanation
Count the number of employees in each department.,"SELECT department, COUNT(emp_id) FROM Employees GROUP BY department;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);",Groups employees by their department and counts the number of employees in each group.
Calculate the total salary for each department.,"SELECT department, SUM(salary) FROM Employees GROUP BY department;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);",Sums the salaries for all employees within each department.
Find the average salary per department.,"SELECT department, AVG(salary) FROM Employees GROUP BY department;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);",Calculates the average salary for employees in each department.
What is the lowest salary in each department?,"SELECT department, MIN(salary) FROM Employees GROUP BY department;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);",Retrieves the minimum salary found in each department.
What is the highest salary in each department?,"SELECT department, MAX(salary) FROM Employees GROUP BY department;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);",Retrieves the maximum salary found in each department.
Count the number of orders for each product by each customer.,"SELECT customer_id, product_id, COUNT(order_id) FROM Orders GROUP BY customer_id, product_id;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER);","Groups orders by both customer and product, then counts how many orders each customer made for each product."
Calculate the total sales amount for each product category per year.,"SELECT STRFTIME('%Y', order_date) AS order_year, category, SUM(total_amount) FROM Orders JOIN Products ON Orders.product_id = Products.product_id GROUP BY order_year, category;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER); CREATE TABLE Products (product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Joins Orders and Products, extracts the year from the order date, then groups by year and product category to sum total amounts."
Find the average GPA for students in each major per enrollment year.,"SELECT major, enrollment_year, AVG(GPA) FROM Students GROUP BY major, enrollment_year;","CREATE TABLE Students (student_id INTEGER, student_name TEXT, major TEXT, GPA REAL, enrollment_year INTEGER);","Calculates the average GPA for students, grouped by their major and enrollment year."
List departments that have more than 10 employees.,"SELECT department, COUNT(emp_id) AS num_employees FROM Employees GROUP BY department HAVING num_employees > 10;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);","Counts employees per department, then filters to show only departments with more than 10 employees."
Show product categories where the total stock quantity is less than 500.,"SELECT category, SUM(stock_quantity) AS total_stock FROM Products GROUP BY category HAVING total_stock < 500;","CREATE TABLE Products (product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Sums the stock quantity for each product category and then filters to include only categories where the total stock is less than 500.
"Find majors where the average GPA is above 3.5, ordered by average GPA descending.","SELECT major, AVG(GPA) AS average_gpa FROM Students GROUP BY major HAVING average_gpa > 3.5 ORDER BY average_gpa DESC;","CREATE TABLE Students (student_id INTEGER, student_name TEXT, major TEXT, GPA REAL, enrollment_year INTEGER);","Calculates the average GPA per major, filters for averages greater than 3.5, and orders the results from highest to lowest average GPA."
Which product categories have a minimum price greater than 50?,"SELECT category, MIN(price) AS min_category_price FROM Products GROUP BY category HAVING min_category_price > 50;","CREATE TABLE Products (product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Finds the minimum price for each product category and then filters for categories where that minimum price is greater than 50.
List departments where the maximum salary is less than 80000.,"SELECT department, MAX(salary) AS max_dept_salary FROM Employees GROUP BY department HAVING max_dept_salary < 80000;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);",Determines the maximum salary in each department and then filters to show only departments where this maximum is less than 80000.
How many unique customers placed orders each year?,"SELECT STRFTIME('%Y', order_date) AS order_year, COUNT(DISTINCT customer_id) AS unique_customers FROM Orders GROUP BY order_year;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER);",Groups orders by year and counts the number of distinct customer IDs for each year.
"Calculate the total sales amount for 'Electronics' and 'Clothing' categories separately, grouped by region.","SELECT region, SUM(CASE WHEN P.category = 'Electronics' THEN S.sales_amount ELSE 0 END) AS electronics_sales, SUM(CASE WHEN P.category = 'Clothing' THEN S.sales_amount ELSE 0 END) AS clothing_sales FROM Sales S JOIN Products P ON S.product_id = P.product_id GROUP BY region;","CREATE TABLE Sales (sale_id INTEGER, product_id INTEGER, region TEXT, sales_amount REAL, sale_date TEXT); CREATE TABLE Products (product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Joins Sales and Products, then groups by region and conditionally sums sales amounts for specific categories."
"For each department, find the total salary, average salary, and number of employees.","SELECT department, SUM(salary) AS total_salary, AVG(salary) AS avg_salary, COUNT(emp_id) AS num_employees FROM Employees GROUP BY department;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);","Calculates the sum, average, and count of employees for each department."
Find the number of sales made on each day.,"SELECT STRFTIME('%Y-%m-%d', sale_date) AS sale_day, COUNT(sale_id) FROM Sales GROUP BY sale_day;","CREATE TABLE Sales (sale_id INTEGER, product_id INTEGER, region TEXT, sales_amount REAL, sale_date TEXT);",Extracts the date part from sale_date and counts sales for each unique date.
What is the total revenue generated each month?,"SELECT STRFTIME('%Y-%m', order_date) AS order_month, SUM(total_amount) FROM Orders GROUP BY order_month ORDER BY order_month;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER);","Groups orders by month and year, then sums the total amount for each month, ordered chronologically."
"For each year, what is the earliest and latest hire date?","SELECT STRFTIME('%Y', hire_date) AS hire_year, MIN(hire_date) AS earliest_hire, MAX(hire_date) AS latest_hire FROM Employees GROUP BY hire_year;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);",Groups employees by their hiring year and finds the earliest and latest hire dates within each year.
Count how many products each customer has ordered in total.,"SELECT C.customer_name, COUNT(O.product_id) AS total_products_ordered FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER, customer_name TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER);","Joins Customers and Orders, then groups by customer name to count the total number of products ordered by each customer."
Calculate the total budget spent by each department on projects.,"SELECT D.department_name, SUM(P.budget) FROM Departments D JOIN Projects P ON D.department_id = P.department_id GROUP BY D.department_name;","CREATE TABLE Departments (department_id INTEGER, department_name TEXT); CREATE TABLE Projects (project_id INTEGER, project_name TEXT, department_id INTEGER, status TEXT, budget REAL);","Joins Departments and Projects, then groups by department name to sum the budget for all projects within each department."
What is the average rating for movies directed by each director?,"SELECT director, AVG(rating) FROM Movies GROUP BY director;","CREATE TABLE Movies (movie_id INTEGER, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);","Calculates the average rating for movies, grouped by their director."
Find the lowest price of a book for each genre.,"SELECT genre, MIN(price) FROM Books GROUP BY genre;","CREATE TABLE Books (book_id INTEGER, title TEXT, author TEXT, genre TEXT, price REAL, publication_year INTEGER);",Finds the minimum price among all books for each genre.
What is the latest publication year for books by each author?,"SELECT author, MAX(publication_year) FROM Books GROUP BY author;","CREATE TABLE Books (book_id INTEGER, title TEXT, author TEXT, genre TEXT, price REAL, publication_year INTEGER);",Determines the latest publication year for books written by each author.
"List product categories by the number of products they contain, from most to least.","SELECT category, COUNT(product_id) AS num_products FROM Products GROUP BY category ORDER BY num_products DESC;","CREATE TABLE Products (product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Counts products per category and orders the results in descending order of product count.
"Show the total sales amount for each region, ordered by sales amount in ascending order.","SELECT region, SUM(sales_amount) AS total_regional_sales FROM Sales GROUP BY region ORDER BY total_regional_sales ASC;","CREATE TABLE Sales (sale_id INTEGER, product_id INTEGER, region TEXT, sales_amount REAL, sale_date TEXT);",Sums sales amounts by region and orders the results from the lowest to highest total sales.
"Identify flight origins where the average flight duration is over 3 hours (180 minutes), ordered by average duration.","SELECT origin, AVG(duration) AS avg_duration_minutes FROM Flights GROUP BY origin HAVING avg_duration_minutes > 180 ORDER BY avg_duration_minutes DESC;","CREATE TABLE Flights (flight_id INTEGER, origin TEXT, destination TEXT, airline TEXT, duration INTEGER, price REAL);","Calculates the average flight duration for each origin, filters for origins with average duration greater than 180 minutes, and orders by this average in descending order."
Find countries with more than 5 unique cities registered.,"SELECT country, COUNT(DISTINCT city) AS unique_cities FROM Customers GROUP BY country HAVING unique_cities > 5;","CREATE TABLE Customers (customer_id INTEGER, customer_name TEXT, city TEXT, country TEXT, registration_date TEXT);",Counts the number of distinct cities for each country and filters to show only countries with more than 5 unique cities.
Calculate the total quantity of products ordered by each customer per month.,"SELECT customer_id, STRFTIME('%Y-%m', order_date) AS order_month, SUM(quantity) FROM Orders GROUP BY customer_id, order_month;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER);","Groups orders by customer and then by month, summing the quantity of products ordered in each customer-month combination."
What is the average price of products in each category sold in each region?,"SELECT P.category, S.region, AVG(P.price) FROM Sales S JOIN Products P ON S.product_id = P.product_id GROUP BY P.category, S.region;","CREATE TABLE Sales (sale_id INTEGER, product_id INTEGER, region TEXT, sales_amount REAL, sale_date TEXT); CREATE TABLE Products (product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Joins Sales and Products, then groups by product category and sales region to find the average price of products sold in that combination."
"For employees hired after 2020, what is the minimum salary in each department?","SELECT department, MIN(salary) FROM Employees WHERE STRFTIME('%Y', hire_date) > '2020' GROUP BY department;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);","Filters employees hired after 2020, then finds the minimum salary for each of their departments."
"Among movies released before 2000, find the highest rating for each genre.","SELECT genre, MAX(rating) FROM Movies WHERE release_year < 2000 GROUP BY genre;","CREATE TABLE Movies (movie_id INTEGER, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);","Filters movies released before 2000, then finds the maximum rating for each genre among those movies."
"Count the number of projects for each department, including those without a specified department.","SELECT department_id, COUNT(project_id) FROM Projects GROUP BY department_id;","CREATE TABLE Projects (project_id INTEGER, project_name TEXT, department_id INTEGER, status TEXT, budget REAL);","Counts projects, grouping by department_id. Rows with a NULL department_id will form a separate group."
Calculate the total sales amount for 'completed' projects by each department.,"SELECT department_id, SUM(CASE WHEN status = 'Completed' THEN budget ELSE 0 END) AS completed_project_budget FROM Projects GROUP BY department_id;","CREATE TABLE Projects (project_id INTEGER, project_name TEXT, department_id INTEGER, status TEXT, budget REAL);",Groups projects by department and sums the budget only for projects marked as 'Completed'.
"Report the average salary for each department, rounded to two decimal places.","SELECT department, ROUND(AVG(salary), 2) AS avg_salary_rounded FROM Employees GROUP BY department;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);",Calculates the average salary for each department and rounds the result to two decimal places.
Count the number of books published in each genre and each publication year.,"SELECT genre, publication_year, COUNT(book_id) FROM Books GROUP BY genre, publication_year;","CREATE TABLE Books (book_id INTEGER, title TEXT, author TEXT, genre TEXT, price REAL, publication_year INTEGER);","Counts books, grouped by their genre and publication year."
What is the total budget for 'In Progress' projects in each department?,"SELECT department_id, SUM(budget) FROM Projects WHERE status = 'In Progress' GROUP BY department_id;","CREATE TABLE Projects (project_id INTEGER, project_name TEXT, department_id INTEGER, status TEXT, budget REAL);","Filters projects to only include those 'In Progress', then sums their budgets grouped by department."
List the airlines whose average flight price for flights with duration over 100 minutes is less than 300.,"SELECT airline, AVG(price) AS avg_price FROM Flights WHERE duration > 100 GROUP BY airline HAVING avg_price < 300;","CREATE TABLE Flights (flight_id INTEGER, origin TEXT, destination TEXT, airline TEXT, duration INTEGER, price REAL);","Filters flights to those longer than 100 minutes, calculates the average price per airline, then filters for airlines where this average is less than 300."
Count the number of products sold from each category by each customer.,"SELECT C.customer_name, P.category, COUNT(O.product_id) FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Products P ON O.product_id = P.product_id GROUP BY C.customer_name, P.category;","CREATE TABLE Customers (customer_id INTEGER, customer_name TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER); CREATE TABLE Products (product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Joins Customers, Orders, and Products, then groups by customer name and product category to count products."
Calculate the total sales amount for each product category in each region for the year 2023.,"SELECT P.category, S.region, SUM(S.sales_amount) FROM Sales S JOIN Products P ON S.product_id = P.product_id WHERE STRFTIME('%Y', S.sale_date) = '2023' GROUP BY P.category, S.region;","CREATE TABLE Sales (sale_id INTEGER, product_id INTEGER, region TEXT, sales_amount REAL, sale_date TEXT); CREATE TABLE Products (product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Filters sales to 2023, then joins Sales and Products tables and sums sales amounts, grouped by product category and sales region."
Find the top 3 departments with the highest average salary.,"SELECT department, AVG(salary) AS avg_salary FROM Employees GROUP BY department ORDER BY avg_salary DESC LIMIT 3;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);","Calculates the average salary per department, orders them by average salary descending, and takes the top 3 results."
Count the number of students per major. Include a group for students without a declared major.,"SELECT major, COUNT(student_id) FROM Students GROUP BY major;","CREATE TABLE Students (student_id INTEGER, student_name TEXT, major TEXT, GPA REAL, enrollment_year INTEGER);","Counts students for each major. If major can be NULL, a group for NULL majors will be included."
"For each genre, what are the minimum and maximum ratings of movies?","SELECT genre, MIN(rating) AS min_rating, MAX(rating) AS max_rating FROM Movies GROUP BY genre;","CREATE TABLE Movies (movie_id INTEGER, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);",Finds the minimum and maximum rating for movies within each genre.
Calculate the total sales for each product in the first quarter of 2024.,"SELECT product_id, SUM(sales_amount) FROM Sales WHERE sale_date BETWEEN '2024-01-01' AND '2024-03-31' GROUP BY product_id;","CREATE TABLE Sales (sale_id INTEGER, product_id INTEGER, region TEXT, sales_amount REAL, sale_date TEXT);","Filters sales to the first quarter of 2024, then sums the sales amount for each product."
How many distinct products has each customer ordered?,"SELECT C.customer_name, COUNT(DISTINCT O.product_id) FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER, customer_name TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER);","Joins Customers and Orders, then counts the number of distinct products each customer has ordered."
Which authors have an average book price greater than 25?,"SELECT author, AVG(price) AS avg_book_price FROM Books GROUP BY author HAVING avg_book_price > 25;","CREATE TABLE Books (book_id INTEGER, title TEXT, author TEXT, genre TEXT, price REAL, publication_year INTEGER);",Calculates the average price for books by each author and filters for authors whose average book price is greater than 25.
"List the total amount spent by each customer, ordered by the amount spent descending.","SELECT C.customer_name, SUM(O.total_amount) AS total_spent FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_name ORDER BY total_spent DESC;","CREATE TABLE Customers (customer_id INTEGER, customer_name TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER);","Joins Customers and Orders, sums the total amount spent by each customer, and orders the results from highest to lowest amount."
"For each airline, count the number of flights departing from each origin.","SELECT airline, origin, COUNT(flight_id) FROM Flights GROUP BY airline, origin;","CREATE TABLE Flights (flight_id INTEGER, origin TEXT, destination TEXT, airline TEXT, duration INTEGER, price REAL);","Counts flights, grouping them by airline and then by their origin city."
Calculate the total sales value (price * quantity) for each product category.,"SELECT P.category, SUM(P.price * O.quantity) AS total_sales_value FROM Orders O JOIN Products P ON O.product_id = P.product_id GROUP BY P.category;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER); CREATE TABLE Products (product_id INTEGER, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Joins Orders and Products, calculates the sales value for each item (price * quantity), then sums these values grouped by product category."
What is the average number of projects per department?,"SELECT AVG(num_projects) FROM (SELECT department_id, COUNT(project_id) AS num_projects FROM Projects GROUP BY department_id);","CREATE TABLE Projects (project_id INTEGER, project_name TEXT, department_id INTEGER, status TEXT, budget REAL);","First, it counts the number of projects for each department. Then, it calculates the average of these counts across all departments."
Find the total quantity of products ordered in each city.,"SELECT C.city, SUM(O.quantity) FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.city;","CREATE TABLE Customers (customer_id INTEGER, customer_name TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, product_id INTEGER, order_date TEXT, total_amount REAL, quantity INTEGER);","Joins Customers and Orders, then groups by customer city to sum the total quantity of products ordered by customers in that city."
"Count how many movies each director has directed, only including movies released after 2010.","SELECT director, COUNT(movie_id) FROM Movies WHERE release_year > 2010 GROUP BY director;","CREATE TABLE Movies (movie_id INTEGER, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);","Filters movies to those released after 2010, then counts the number of movies directed by each director within that filtered set."
Calculate the average budget for projects in each status.,"SELECT status, AVG(budget) FROM Projects GROUP BY status;","CREATE TABLE Projects (project_id INTEGER, project_name TEXT, department_id INTEGER, status TEXT, budget REAL);","Calculates the average budget for projects, grouped by their current status."
"List customer countries and the count of customers registered in each, only for countries with at least 2 customers.","SELECT country, COUNT(customer_id) AS num_customers FROM Customers GROUP BY country HAVING num_customers >= 2;","CREATE TABLE Customers (customer_id INTEGER, customer_name TEXT, city TEXT, country TEXT, registration_date TEXT);","Counts customers per country, then filters to show only countries with two or more registered customers."
Find the maximum salary for each department and order them by the department name.,"SELECT department, MAX(salary) AS max_salary FROM Employees GROUP BY department ORDER BY department ASC;","CREATE TABLE Employees (emp_id INTEGER, name TEXT, department TEXT, salary REAL, hire_date TEXT);",Finds the maximum salary for each department and orders the results alphabetically by department name.
Report the minimum and maximum sales amount for each product.,"SELECT product_id, MIN(sales_amount) AS min_sale, MAX(sales_amount) AS max_sale FROM Sales GROUP BY product_id;","CREATE TABLE Sales (sale_id INTEGER, product_id INTEGER, region TEXT, sales_amount REAL, sale_date TEXT);",Determines the minimum and maximum sales amount recorded for each unique product.
Count unique genres per director.,"SELECT director, COUNT(DISTINCT genre) AS unique_genres FROM Movies GROUP BY director;","CREATE TABLE Movies (movie_id INTEGER, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL);",Counts the number of distinct movie genres associated with each director.
"Calculate the average price of flights for each destination, excluding flights from 'New York'.","SELECT destination, AVG(price) FROM Flights WHERE origin != 'New York' GROUP BY destination;","CREATE TABLE Flights (flight_id INTEGER, origin TEXT, destination TEXT, airline TEXT, duration INTEGER, price REAL);","Filters out flights originating from 'New York', then calculates the average price for remaining flights grouped by destination."
"For each student major, find the earliest enrollment year and the latest enrollment year.","SELECT major, MIN(enrollment_year) AS earliest_enrollment, MAX(enrollment_year) AS latest_enrollment FROM Students GROUP BY major;","CREATE TABLE Students (student_id INTEGER, student_name TEXT, major TEXT, GPA REAL, enrollment_year INTEGER);","For each student major, this query finds the earliest and latest enrollment years from the Students table."
Find the total quantity of products sold per month for the year 2023.,"SELECT STRFTIME('%Y-%m', sale_date) AS sale_month, SUM(quantity) FROM Sales WHERE STRFTIME('%Y', sale_date) = '2023' GROUP BY sale_month ORDER BY sale_month;","CREATE TABLE Sales (sale_id INTEGER, product_id INTEGER, region TEXT, sales_amount REAL, sale_date TEXT, quantity INTEGER);","Filters sales to the year 2023, then groups by month and sums the quantity of items sold within each month."
Instruction,Query,Table Schema,Explanation
"Assign a unique sequential number to each employee based on their hire date, from oldest to newest.","SELECT employee_id, employee_name, hire_date, ROW_NUMBER() OVER (ORDER BY hire_date) AS row_num FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, hire_date DATE, salary DECIMAL)","Uses ROW_NUMBER() to assign a unique sequential integer to each row within the result set, ordered by hire_date. Since there's no PARTITION BY, it treats the entire table as one partition."
"Rank products by their sales amount within each category, allowing ties to have the same rank and leaving gaps.","SELECT product_id, product_name, category, sales_amount, RANK() OVER (PARTITION BY category ORDER BY sales_amount DESC) AS sales_rank FROM Products;","Products(product_id INT, product_name VARCHAR, category VARCHAR, sales_amount DECIMAL)","Applies RANK() to assign a rank to products based on sales_amount in descending order. PARTITION BY category ensures ranking restarts for each product category. Ties receive the same rank, and subsequent ranks are skipped."
"Rank students by their scores in each subject, giving the same rank to ties but without gaps in the ranks.","SELECT student_id, student_name, subject, score, DENSE_RANK() OVER (PARTITION BY subject ORDER BY score DESC) AS dense_rank FROM Grades;","Grades(student_id INT, student_name VARCHAR, subject VARCHAR, score INT)","Utilizes DENSE_RANK() to assign a rank to students within each subject based on their score. Like RANK(), ties get the same rank, but DENSE_RANK() assigns consecutive ranks without gaps."
Divide all customers into 4 equally sized groups (quartiles) based on their total purchase amount.,"SELECT customer_id, customer_name, total_purchase_amount, NTILE(4) OVER (ORDER BY total_purchase_amount DESC) AS quartile FROM Customers;","Customers(customer_id INT, customer_name VARCHAR, total_purchase_amount DECIMAL)",Divides the customers into 4 groups (quartiles) using NTILE(4) based on their total_purchase_amount in descending order. NTILE attempts to distribute rows as evenly as possible into the specified number of groups.
"For each transaction, find the amount of the previous transaction made by the same customer, defaulting to 0 if none.","SELECT transaction_id, customer_id, transaction_date, amount, LAG(amount, 1, 0) OVER (PARTITION BY customer_id ORDER BY transaction_date) AS previous_transaction_amount FROM Transactions;","Transactions(transaction_id INT, customer_id INT, transaction_date DATE, amount DECIMAL)","Uses LAG() to retrieve the amount from the row immediately preceding the current row within the partition. The partition is defined by customer_id, and rows are ordered by transaction_date. If no previous row exists, it defaults to 0."
"For each stock price entry, find the price of the next entry for the same stock, ordered by date.","SELECT price_id, stock_symbol, trade_date, price, LEAD(price, 1) OVER (PARTITION BY stock_symbol ORDER BY trade_date) AS next_price FROM StockPrices;","StockPrices(price_id INT, stock_symbol VARCHAR, trade_date DATE, price DECIMAL)","Employs LEAD() to fetch the price from the row immediately following the current row. The PARTITION BY stock_symbol ensures the 'next' price is for the same stock, ordered by trade_date."
"For each employee, find the salary of the highest-paid employee in their department.","SELECT employee_id, employee_name, department, salary, FIRST_VALUE(salary) OVER (PARTITION BY department ORDER BY salary DESC) AS top_department_salary FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)","Uses FIRST_VALUE() to return the salary of the first row in the window frame. The window is partitioned by department and ordered by salary in descending order, effectively giving the highest salary in each department."
"For each order item, find the price of the last item added to that specific order.","SELECT order_item_id, order_id, product_name, price, LAST_VALUE(price) OVER (PARTITION BY order_id ORDER BY item_add_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_item_price_in_order FROM OrderItems;","OrderItems(order_item_id INT, order_id INT, product_name VARCHAR, quantity INT, price DECIMAL, item_add_time DATETIME)",Utilizes LAST_VALUE() to get the price of the last row in the window frame. The window is partitioned by order_id and ordered by item_add_time. The frame ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ensures the entire partition is considered for the 'last' value.
"For each student in a class, find the score of the student with the second highest score in that class.","SELECT student_id, student_name, class, score, NTH_VALUE(score, 2) OVER (PARTITION BY class ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS second_highest_score_in_class FROM Scores;","Scores(student_id INT, student_name VARCHAR, class VARCHAR, score INT)",Employs NTH_VALUE() to retrieve the score from the 2nd row in the window frame. The window is partitioned by class and ordered by score descending. The frame ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ensures the function considers all rows in the partition.
Calculate the running total of sales for each product over time.,"SELECT sale_id, product_id, sale_date, amount, SUM(amount) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total_sales FROM DailySales;","DailySales(sale_id INT, product_id INT, sale_date DATE, amount DECIMAL)","Calculates a cumulative sum of amount for each product_id, ordered by sale_date. The ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW frame ensures that for each row, the sum includes all preceding rows within its partition up to the current row."
Calculate the 3-day moving average of stock prices for each stock symbol.,"SELECT record_id, stock_symbol, trade_date, price, AVG(price) OVER (PARTITION BY stock_symbol ORDER BY trade_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg_3_day FROM StockPrices;","StockPrices(record_id INT, stock_symbol VARCHAR, trade_date DATE, price DECIMAL)",Computes a 3-day moving average of price for each stock_symbol. The ROWS BETWEEN 2 PRECEDING AND CURRENT ROW frame considers the current row and the two immediately preceding rows for the average calculation.
"For each department, count the total number of employees.","SELECT employee_id, employee_name, department, COUNT(*) OVER (PARTITION BY department) AS total_employees_in_dept FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)",Uses COUNT(*) as a window function to count all rows within each department partition. This provides the total number of employees for each department on every employee row within that department.
Find the maximum salary within each department.,"SELECT employee_id, employee_name, department, salary, MAX(salary) OVER (PARTITION BY department) AS max_salary_in_dept FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)",Uses MAX(salary) as a window function to find the highest salary within each department partition. The result is repeated for every employee in that department.
"Find the minimum order amount among the last 5 orders placed by a customer, ordered by date.","SELECT order_id, customer_id, order_date, total_amount, MIN(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS min_amount_last_5_orders FROM Orders;","Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL)",Calculates the minimum total_amount for each customer considering the current order and the 4 preceding orders using MIN() with a sliding window frame.
Calculate the difference in salary between an employee and the employee directly above them in salary within the same department.,"SELECT employee_id, employee_name, department, salary, salary - LAG(salary) OVER (PARTITION BY department ORDER BY salary) AS salary_difference_from_lower FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)",Calculates the difference between an employee's salary and the salary of the employee with the next lower salary within the same department using LAG().
Calculate the percentage of total sales each product contributed within its category.,"SELECT product_id, product_name, category, sales_amount, sales_amount / SUM(sales_amount) OVER (PARTITION BY category) * 100 AS percentage_of_category_sales FROM Products;","Products(product_id INT, product_name VARCHAR, category VARCHAR, sales_amount DECIMAL)","Divides each product's sales amount by the total sales amount of its category, calculated using SUM() as a window function over the category partition, to get the percentage contribution."
"Rank students in a class based on their score, but assign ranks in ascending order of score.","SELECT student_id, student_name, class, score, ROW_NUMBER() OVER (PARTITION BY class ORDER BY score ASC) AS rank_asc_score FROM Grades;","Grades(student_id INT, student_name VARCHAR, class VARCHAR, score INT)","Uses ROW_NUMBER() to assign a sequential rank to students within each class, ordered by score in ascending order."
"For each login event, identify the timestamp of the previous login by the same user.","SELECT user_id, login_time, LAG(login_time) OVER (PARTITION BY user_id ORDER BY login_time) AS previous_login_time FROM UserLogins;","UserLogins(login_id INT, user_id INT, login_time DATETIME)","Uses LAG() to retrieve the login_time of the preceding row for the same user, ordered by login_time, to find the previous login timestamp."
Find the average salary across all employees.,"SELECT employee_id, employee_name, salary, AVG(salary) OVER () AS overall_avg_salary FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)","Calculates the average salary for the entire dataset using AVG() as a window function without any PARTITION BY clause, treating the whole table as one window."
"For each product, show its sales and the sales from the next product ordered by sales amount, regardless of category.","SELECT product_id, product_name, sales_amount, LEAD(sales_amount, 1, 0) OVER (ORDER BY sales_amount ASC) AS next_product_sales FROM Products;","Products(product_id INT, product_name VARCHAR, category VARCHAR, sales_amount DECIMAL)",Uses LEAD() to get the sales_amount of the next product when all products are ordered by sales_amount. No PARTITION BY means it considers all products as one window.
"Assign a rank to each book based on its publication year within its genre, allowing ties to share the same rank.","SELECT book_id, title, genre, publication_year, RANK() OVER (PARTITION BY genre ORDER BY publication_year ASC) AS publication_rank FROM Books;","Books(book_id INT, title VARCHAR, genre VARCHAR, publication_year INT)","Ranks books within each genre by their publication year using RANK(), where ties receive the same rank and subsequent ranks are skipped."
"For each employee, find the total salary sum of all employees hired in the same year or earlier, within their department.","SELECT employee_id, employee_name, department, hire_date, salary, SUM(salary) OVER (PARTITION BY department ORDER BY hire_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_dept_salary FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, hire_date DATE, salary DECIMAL)","Calculates the cumulative sum of salaries for employees within each department, ordered by hire_date, using a cumulative window frame."
Identify the first customer who placed an order on each specific date.,"SELECT DISTINCT order_date, FIRST_VALUE(customer_id) OVER (PARTITION BY order_date ORDER BY order_id) AS first_customer_on_date FROM Orders;","Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL)",Uses FIRST_VALUE() to find the customer_id of the first order (based on order_id) for each distinct order_date. DISTINCT is used to show one entry per date.
"For each sales record, calculate the percentage of total sales within the current month.","SELECT sale_id, sale_date, amount, amount / SUM(amount) OVER (PARTITION BY EXTRACT(YEAR FROM sale_date), EXTRACT(MONTH FROM sale_date)) * 100 AS monthly_sales_percentage FROM DailySales;","DailySales(sale_id INT, product_id INT, sale_date DATE, amount DECIMAL)",Calculates each sale's percentage of the total sales for its respective month and year. SUM() as a window function partitions by year and month.
Retrieve the score of the 3rd highest student in each class.,"SELECT student_id, student_name, class, score, NTH_VALUE(score, 3) OVER (PARTITION BY class ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS third_highest_score FROM Grades;","Grades(student_id INT, student_name VARCHAR, class VARCHAR, score INT)","Uses NTH_VALUE() to fetch the score of the 3rd ranked student within each class, ordered by score descending. The unbounded frame ensures all students in the class are considered."
Calculate the rolling sum of revenue over a 7-day period for each region.,"SELECT region, sales_date, revenue, SUM(revenue) OVER (PARTITION BY region ORDER BY sales_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS rolling_7_day_revenue FROM RegionalSales;","RegionalSales(sale_id INT, region VARCHAR, sales_date DATE, revenue DECIMAL)",Computes a 7-day rolling sum of revenue for each region. The window frame includes the current day and the 6 preceding days.
Find the last comment made by each user.,"SELECT comment_id, user_id, comment_text, comment_date, LAST_VALUE(comment_text) OVER (PARTITION BY user_id ORDER BY comment_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_user_comment FROM Comments;","Comments(comment_id INT, user_id INT, comment_text TEXT, comment_date DATETIME)",Uses LAST_VALUE() to retrieve the comment_text of the latest comment (ordered by date) made by each user. The unbounded frame ensures the entire user's comment history is considered.
"Rank employees based on their salary, assigning sequential ranks even for ties, within the entire company.","SELECT employee_id, employee_name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) AS company_salary_rank FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)","Assigns a unique sequential rank to each employee based on their salary across the entire company using ROW_NUMBER(), which provides distinct ranks even for ties."
"For each payment, find the next payment date for the same customer.","SELECT payment_id, customer_id, payment_date, amount, LEAD(payment_date) OVER (PARTITION BY customer_id ORDER BY payment_date) AS next_payment_date FROM Payments;","Payments(payment_id INT, customer_id INT, payment_date DATE, amount DECIMAL)","Uses LEAD() to find the date of the next payment for each customer, ordered by payment_date, within their payment history."
Calculate the average transaction amount for each customer.,"SELECT transaction_id, customer_id, amount, AVG(amount) OVER (PARTITION BY customer_id) AS customer_avg_transaction FROM Transactions;","Transactions(transaction_id INT, customer_id INT, transaction_date DATE, amount DECIMAL)",Computes the average transaction amount for each customer using AVG() as a window function partitioned by customer_id.
Divide users into 5 groups (quintiles) based on their activity count.,"SELECT user_id, activity_count, NTILE(5) OVER (ORDER BY activity_count DESC) AS activity_quintile FROM UserActivity;","UserActivity(user_id INT, activity_count INT, last_activity_date DATE)","Divides users into 5 groups (quintiles) based on their activity_count, distributing them as evenly as possible across the groups using NTILE(5)."
Find the highest score recorded for each student across all their subjects.,"SELECT student_id, student_name, subject, score, MAX(score) OVER (PARTITION BY student_id) AS student_max_score FROM Grades;","Grades(student_id INT, student_name VARCHAR, subject VARCHAR, score INT)",Uses MAX(score) as a window function to find the maximum score achieved by each student across all their subjects. The result is repeated for every subject entry of that student.
"For each product sale, find the earliest sale date of that product.","SELECT sale_id, product_id, sale_date, amount, FIRST_VALUE(sale_date) OVER (PARTITION BY product_id ORDER BY sale_date) AS first_sale_date FROM DailySales;","DailySales(sale_id INT, product_id INT, sale_date DATE, amount DECIMAL)",Retrieves the earliest sale_date for each product using FIRST_VALUE() partitioned by product_id and ordered by sale_date.
Calculate the difference between the current stock price and the price from 5 days ago for each stock.,"SELECT record_id, stock_symbol, trade_date, price, price - LAG(price, 5) OVER (PARTITION BY stock_symbol ORDER BY trade_date) AS price_change_5_day FROM StockPrices;","StockPrices(record_id INT, stock_symbol VARCHAR, trade_date DATE, price DECIMAL)","Calculates the price change by subtracting the stock price from 5 days ago (LAG with offset 5) from the current price, for each stock, ordered by date."
Find the 5th most expensive product in each category.,"SELECT product_id, product_name, category, sales_amount, NTH_VALUE(product_name, 5) OVER (PARTITION BY category ORDER BY sales_amount DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS fifth_most_expensive_product_name FROM Products;","Products(product_id INT, product_name VARCHAR, category VARCHAR, sales_amount DECIMAL)",Uses NTH_VALUE() to find the name of the 5th most expensive product within each category. The unbounded frame is necessary to evaluate the entire partition.
Identify the last order placed by each customer.,"SELECT order_id, customer_id, order_date, total_amount, LAST_VALUE(order_id) OVER (PARTITION BY customer_id ORDER BY order_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_order_id FROM Orders;","Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL)","Retrieves the order_id of the last order placed by each customer, based on order_date, using LAST_VALUE(). The unbounded frame ensures all orders of a customer are included."
"For each student, calculate the average score of the current and two previous subjects they took.","SELECT student_id, student_name, subject, score, AVG(score) OVER (PARTITION BY student_id ORDER BY subject_completion_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_avg_score FROM Grades;","Grades(student_id INT, student_name VARCHAR, subject VARCHAR, score INT, subject_completion_date DATE)","Calculates a 3-subject rolling average of scores for each student, based on their subject completion date. The window frame includes the current and two preceding subjects."
"Rank employees by salary within their department, ensuring no gaps in ranks even for ties.","SELECT employee_id, employee_name, department, salary, DENSE_RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS department_dense_rank FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)","Assigns ranks to employees within each department based on salary in descending order using DENSE_RANK(). Ties receive the same rank, and there are no gaps in the rank sequence."
"For each payment, find the total amount of all payments made by the customer up to that point.","SELECT payment_id, customer_id, payment_date, amount, SUM(amount) OVER (PARTITION BY customer_id ORDER BY payment_date) AS cumulative_customer_payments FROM Payments;","Payments(payment_id INT, customer_id INT, payment_date DATE, amount DECIMAL)","Calculates the cumulative sum of payment amounts for each customer, ordered by payment_date. The default window frame (RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW for ordered windows) is used."
Determine the lead time (in days) between an order being placed and the next order placed by the same customer.,"SELECT order_id, customer_id, order_date, LEAD(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) - order_date AS days_to_next_order FROM Orders;","Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL)",Calculates the difference in days between the current order_date and the next order_date for the same customer using LEAD() and date subtraction.
"For each employee, find the employee with the lowest salary in their respective department.","SELECT employee_id, employee_name, department, salary, FIRST_VALUE(employee_name) OVER (PARTITION BY department ORDER BY salary ASC) AS lowest_paid_employee_in_dept FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)",Uses FIRST_VALUE() to retrieve the name of the employee with the lowest salary (first employee when ordered by salary ascending) within each department.
"Assign a percentile rank to each product based on its sales amount, where 1 is the highest sales.","SELECT product_id, product_name, sales_amount, NTILE(100) OVER (ORDER BY sales_amount DESC) AS sales_percentile FROM Products;","Products(product_id INT, product_name VARCHAR, category VARCHAR, sales_amount DECIMAL)","Divides products into 100 groups (percentiles) based on their sales amount, assigning a percentile rank from 1 to 100, where 1 indicates the highest sales."
"For each day, count the number of new employees hired on or before that day.","SELECT hire_date, COUNT(employee_id) OVER (ORDER BY hire_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_hires FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, hire_date DATE)",Calculates the cumulative count of employees hired up to and including each specific hire_date across the entire company using COUNT() with a cumulative window frame.
Find the transaction amount of the customer's very first transaction.,"SELECT transaction_id, customer_id, transaction_date, amount, FIRST_VALUE(amount) OVER (PARTITION BY customer_id ORDER BY transaction_date ASC) AS first_transaction_amount FROM Transactions;","Transactions(transaction_id INT, customer_id INT, transaction_date DATE, amount DECIMAL)",Uses FIRST_VALUE() to find the amount of the earliest transaction (based on transaction_date) for each customer.
"For each product, find its sales relative to the average sales of the three surrounding products (one before, current, one after) when ordered by product ID.","SELECT product_id, product_name, sales_amount, AVG(sales_amount) OVER (ORDER BY product_id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS three_point_avg_sales FROM Products;","Products(product_id INT, product_name VARCHAR, sales_amount DECIMAL)","Calculates a 3-point moving average of sales_amount for products ordered by product_id. The window frame includes the current row, one preceding, and one following row."
Get the second latest login time for each user.,"SELECT login_id, user_id, login_time, NTH_VALUE(login_time, 2) OVER (PARTITION BY user_id ORDER BY login_time DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS second_latest_login FROM UserLogins;","UserLogins(login_id INT, user_id INT, login_time DATETIME)","Uses NTH_VALUE() to retrieve the second latest login_time for each user. The window is partitioned by user and ordered by login time descending, with an unbounded frame."
"For each student, show their score and the score of the student with the next lower score in the same subject.","SELECT student_id, student_name, subject, score, LAG(score) OVER (PARTITION BY subject ORDER BY score DESC) AS score_of_next_lower_student FROM Grades;","Grades(student_id INT, student_name VARCHAR, subject VARCHAR, score INT)",Uses LAG() to get the score of the student immediately preceding the current student when ordered by score in descending order within the same subject. This effectively finds the score of the student with the next lower score.
Identify the total number of orders placed by each customer.,"SELECT customer_id, order_id, order_date, COUNT(order_id) OVER (PARTITION BY customer_id) AS total_orders_by_customer FROM Orders;","Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL)",Counts the total number of orders for each customer using COUNT() as a window function partitioned by customer_id.
"For each employee, find the number of employees in their department earning less than them.","SELECT employee_id, employee_name, department, salary, COUNT(CASE WHEN e2.salary < e1.salary THEN 1 END) OVER (PARTITION BY e1.department ORDER BY e1.salary) AS num_employees_less_salary FROM Employees e1 JOIN Employees e2 ON e1.department = e2.department;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)",This query attempts to count employees with lower salaries. A simpler approach for the specified task would be to count rows in a growing window frame. Let's simplify and rephrase.
"For each employee, count how many employees in their department have a lower salary.","SELECT employee_id, employee_name, department, salary, COUNT(*) OVER (PARTITION BY department ORDER BY salary ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS employees_with_lower_salary FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)","Counts the number of employees within the same department who have a strictly lower salary. The window frame `ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING` includes all rows before the current row, effectively counting those with lower salaries when ordered by salary."
"For each product, show its current inventory and the inventory of the highest stocked product in its category.","SELECT product_id, product_name, category, inventory_level, MAX(inventory_level) OVER (PARTITION BY category) AS max_inventory_in_category FROM Products;","Products(product_id INT, product_name VARCHAR, category VARCHAR, inventory_level INT)",Uses MAX() as a window function to find the maximum inventory_level within each product category.
"Calculate the average sales amount for products within the same sales date range, plus/minus 3 days.","SELECT product_id, sales_date, amount, AVG(amount) OVER (ORDER BY sales_date RANGE BETWEEN INTERVAL '3 DAY' PRECEDING AND INTERVAL '3 DAY' FOLLOWING) AS avg_sales_7_day_range FROM DailySales;","DailySales(sale_id INT, product_id INT, sales_date DATE, amount DECIMAL)","Computes the average sales amount for each sale, considering sales within a 7-day range (current day +/- 3 days) using a RANGE window frame."
Find the last price for each stock symbol.,"SELECT stock_symbol, LAST_VALUE(price) OVER (PARTITION BY stock_symbol ORDER BY trade_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_recorded_price FROM StockPrices;","StockPrices(price_id INT, stock_symbol VARCHAR, trade_date DATE, price DECIMAL)","Uses LAST_VALUE() to retrieve the price of the last recorded trade for each stock symbol, ordered by trade date, considering all entries for that stock."
"Rank employees based on their hire date, but reset the rank for each job title, allowing for ties with gaps.","SELECT employee_id, employee_name, job_title, hire_date, RANK() OVER (PARTITION BY job_title ORDER BY hire_date) AS hire_date_rank_by_job FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, job_title VARCHAR, hire_date DATE, salary DECIMAL)","Ranks employees within each job_title based on their hire_date using RANK(). Ties (same hire date) receive the same rank, and subsequent ranks are skipped."
"For each student, calculate the percentage of their score relative to the highest score in their class.","SELECT student_id, student_name, class, score, score * 100.0 / MAX(score) OVER (PARTITION BY class) AS percent_of_max_class_score FROM Grades;","Grades(student_id INT, student_name VARCHAR, class VARCHAR, score INT)","Calculates each student's score as a percentage of the maximum score achieved in their respective class, using MAX() as a window function."
Determine the previous month's total sales for each product.,"SELECT product_id, sale_date, amount, SUM(amount) OVER (PARTITION BY product_id ORDER BY sale_date RANGE BETWEEN INTERVAL '1 MONTH' PRECEDING AND CURRENT ROW) - amount AS previous_month_sales FROM DailySales;","DailySales(sale_id INT, product_id INT, sale_date DATE, amount DECIMAL)","This query attempts to find previous month's sales, but RANGE BETWEEN applies to the value of order by column. A simpler LAG with a grouped sum is better. Let's rephrase for LAG."
"For each month, find the total sales of the previous month for a specific product.","WITH MonthlySales AS (SELECT product_id, DATE_TRUNC('month', sale_date) AS sales_month, SUM(amount) AS monthly_total FROM DailySales GROUP BY product_id, DATE_TRUNC('month', sale_date)) SELECT product_id, sales_month, monthly_total, LAG(monthly_total, 1, 0) OVER (PARTITION BY product_id ORDER BY sales_month) AS previous_month_sales FROM MonthlySales;","DailySales(sale_id INT, product_id INT, sale_date DATE, amount DECIMAL)","First, it aggregates daily sales into monthly totals per product. Then, it uses LAG() to retrieve the monthly_total from the preceding month for the same product."
"For each customer, find the date of their first transaction.","SELECT customer_id, transaction_id, transaction_date, FIRST_VALUE(transaction_date) OVER (PARTITION BY customer_id ORDER BY transaction_date) AS customer_first_transaction_date FROM Transactions;","Transactions(transaction_id INT, customer_id INT, transaction_date DATE, amount DECIMAL)","Uses FIRST_VALUE() to find the earliest transaction_date for each customer, based on partitioning by customer_id and ordering by transaction_date."
Calculate the average salary of employees within the same department and within a salary range of +/- 1000 from the current employee's salary.,"SELECT employee_id, employee_name, department, salary, AVG(salary) OVER (PARTITION BY department ORDER BY salary RANGE BETWEEN 1000 PRECEDING AND 1000 FOLLOWING) AS avg_salary_nearby FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)","Computes the average salary for employees within the same department whose salaries are within +/- 1000 of the current employee's salary, using a RANGE window frame."
"Rank students globally based on their total score, without gaps for ties.","SELECT student_id, student_name, score, DENSE_RANK() OVER (ORDER BY score DESC) AS global_dense_rank FROM Grades;","Grades(student_id INT, student_name VARCHAR, subject VARCHAR, score INT)","Assigns a global rank to students based on their score, using DENSE_RANK() to ensure consecutive ranks without gaps, even for tied scores."
"Find the next 3 sales amounts for each product, ordered by date.","SELECT sale_id, product_id, sale_date, amount, LEAD(amount, 1) OVER (PARTITION BY product_id ORDER BY sale_date) AS next_sale_1, LEAD(amount, 2) OVER (PARTITION BY product_id ORDER BY sale_date) AS next_sale_2, LEAD(amount, 3) OVER (PARTITION BY product_id ORDER BY sale_date) AS next_sale_3 FROM DailySales;","DailySales(sale_id INT, product_id INT, sale_date DATE, amount DECIMAL)","Uses LEAD() multiple times with different offsets (1, 2, and 3) to retrieve the amounts of the next three sales for each product, ordered by date."
"For each item in an order, find the most expensive item in that same order.","SELECT order_item_id, order_id, product_name, price, MAX(price) OVER (PARTITION BY order_id) AS max_price_in_order FROM OrderItems;","OrderItems(order_item_id INT, order_id INT, product_name VARCHAR, quantity INT, price DECIMAL)","Uses MAX() as a window function to find the maximum price among all items within the same order, partitioned by order_id."
Count the total number of products for each category.,"SELECT product_id, product_name, category, COUNT(*) OVER (PARTITION BY category) AS total_products_in_category FROM Products;","Products(product_id INT, product_name VARCHAR, category VARCHAR, sales_amount DECIMAL)","Counts the total number of products within each category using COUNT(*) as a window function, partitioned by category."
Calculate the difference between the current day's stock price and the maximum price in the preceding 30 days for the same stock.,"SELECT record_id, stock_symbol, trade_date, price, price - MAX(price) OVER (PARTITION BY stock_symbol ORDER BY trade_date ROWS BETWEEN 30 PRECEDING AND 1 PRECEDING) AS price_diff_from_30day_high FROM StockPrices;","StockPrices(record_id INT, stock_symbol VARCHAR, trade_date DATE, price DECIMAL)","Calculates the difference between the current stock price and the maximum price observed in the 30 days preceding the current day, for each stock."
Find the employee with the third highest salary in the entire company.,"SELECT employee_id, employee_name, salary, NTH_VALUE(employee_name, 3) OVER (ORDER BY salary DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS third_highest_paid_employee FROM Employees;","Employees(employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL)",Uses NTH_VALUE() to find the name of the employee with the third highest salary in the entire company. The unbounded frame ensures all employees are considered.
Instruction,Query,Table Schema,Explanation
Find the names of employees whose salary is greater than the average salary of all employees.,SELECT employee_name FROM Employees WHERE salary > (SELECT AVG(salary) FROM Employees);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);",This query uses a scalar subquery to first calculate the average salary of all employees. The outer query then filters employees whose salary is greater than this calculated average.
List the names of employees who work in departments located in 'New York'.,SELECT employee_name FROM Employees WHERE department_id IN (SELECT department_id FROM Departments WHERE location = 'New York');,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));",The subquery retrieves the department IDs for departments located in 'New York'. The outer query then selects employee names whose department ID is found in the list returned by the subquery.
Find the names of customers who have not placed any orders.,SELECT customer_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders);,"Customers (customer_id INT, customer_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10,2));","The subquery selects all customer IDs that exist in the Orders table. The outer query then returns the names of customers whose ID is not present in this list, indicating they have not placed an order."
Retrieve the names of departments that have at least one employee with a salary greater than 70000.,SELECT department_name FROM Departments d WHERE EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id AND e.salary > 70000);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));","For each department, the correlated subquery checks if there exists any employee within that department with a salary greater than 70000. If such an employee exists, the department's name is selected."
List departments that have no employees.,SELECT department_name FROM Departments d WHERE NOT EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));","For each department, the correlated subquery checks if there are any employees associated with it. If no employees are found (NOT EXISTS), the department name is selected."
"For each employee, show their name and the average salary of their department.","SELECT employee_name, (SELECT AVG(salary) FROM Employees sub WHERE sub.department_id = e.department_id) AS department_average_salary FROM Employees e;","Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);","This query uses a correlated scalar subquery. For each employee in the outer query, the subquery calculates the average salary specifically for that employee's department, linking via department_id."
Find the top 5 highest-paid employees.,"SELECT employee_name, salary FROM (SELECT employee_name, salary FROM Employees ORDER BY salary DESC LIMIT 5) AS TopEarners;","Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);","The subquery (SELECT employee_name, salary FROM Employees ORDER BY salary DESC LIMIT 5) first selects the top 5 employees by salary. This result set is then treated as a temporary table named TopEarners from which the employee name and salary are selected."
List products that have a price higher than the average price of all products.,SELECT product_name FROM Products WHERE price > (SELECT AVG(price) FROM Products);,"Products (product_id INT, product_name VARCHAR(255), price DECIMAL(10,2), stock_quantity INT);",The subquery calculates the overall average price of all products. The outer query then filters and returns the names of products whose individual price is greater than this average.
Find the names of students who are enrolled in courses taught by the 'Computer Science' department and have a grade 'A'.,SELECT student_name FROM Students WHERE student_id IN (SELECT student_id FROM Enrollments WHERE course_id IN (SELECT course_id FROM Courses WHERE department = 'Computer Science') AND grade = 'A');,"Students (student_id INT, student_name VARCHAR(255), major VARCHAR(255), enrollment_year INT); Courses (course_id INT, course_name VARCHAR(255), credits INT, department VARCHAR(255)); Enrollments (enrollment_id INT, student_id INT, course_id INT, grade VARCHAR(2));",The innermost subquery gets course_id for 'Computer Science' courses. The middle subquery then finds student_ids who are enrolled in those courses and got an 'A'. The outermost query finally retrieves the student_names for these student IDs.
Find employees whose salary is greater than the salary of at least one employee in department ID 3.,SELECT employee_name FROM Employees WHERE salary > ANY (SELECT salary FROM Employees WHERE department_id = 3);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);",The subquery returns a set of salaries for employees in department ID 3. The outer query selects employees whose salary is greater than any of the salaries returned by the subquery.
Find employees whose salary is greater than the salary of all employees in department ID 3.,SELECT employee_name FROM Employees WHERE salary > ALL (SELECT salary FROM Employees WHERE department_id = 3);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);","The subquery returns a set of salaries for employees in department ID 3. The outer query selects employees whose salary is greater than all of the salaries returned by the subquery, meaning it's greater than the maximum salary in department 3."
"List each order ID, its total amount, and the average total amount of all orders made by that customer.","SELECT o.order_id, o.total_amount, (SELECT AVG(total_amount) FROM Orders WHERE customer_id = o.customer_id) AS customer_avg_order FROM Orders o;","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10,2));","For each order, a correlated scalar subquery calculates the average total_amount for all orders placed by the same customer_id as the current order in the outer query."
Find departments where the total salary of their employees exceeds 200000.,"SELECT d.department_name FROM Departments d JOIN (SELECT department_id, SUM(salary) AS total_dept_salary FROM Employees GROUP BY department_id HAVING SUM(salary) > 200000) AS DepartmentSalaries ON d.department_id = DepartmentSalaries.department_id;","Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));","The subquery creates a derived table DepartmentSalaries which lists department IDs and their total salaries, filtered for those exceeding 200000. This derived table is then joined with the Departments table to get the department names."
"For each department, show its name and the number of employees it has.","SELECT d.department_name, (SELECT COUNT(e.employee_id) FROM Employees e WHERE e.department_id = d.department_id) AS num_employees FROM Departments d;","Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));","For each department in the outer query, a correlated scalar subquery counts the number of employees associated with that specific department."
List the names of employees who are managers.,SELECT employee_name FROM Employees WHERE employee_id IN (SELECT manager_id FROM Employees WHERE manager_id IS NOT NULL);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);","The subquery finds all unique manager_id values from the Employees table, effectively identifying employees who manage others. The outer query then selects the names of employees whose employee_id matches one of these manager_ids."
Retrieve the names of customers who have ordered the most expensive product.,SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE oi.product_id = (SELECT product_id FROM Products ORDER BY price DESC LIMIT 1);,"Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10,2)); Customers (customer_id INT, customer_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); Products (product_id INT, product_name VARCHAR(255), price DECIMAL(10,2), stock_quantity INT); Order_Items (order_item_id INT, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10,2));","The subquery identifies the product_id of the single most expensive product. The outer query then joins Customers, Orders, and Order_Items to find the names of customers who have purchased this specific product."
List students who are not enrolled in any course.,SELECT student_name FROM Students WHERE student_id NOT IN (SELECT student_id FROM Enrollments);,"Students (student_id INT, student_name VARCHAR(255), major VARCHAR(255), enrollment_year INT); Enrollments (enrollment_id INT, student_id INT, course_id INT, grade VARCHAR(2));","The subquery gets all student IDs present in the Enrollments table. The outer query then selects the names of students whose student_id is not in this list, meaning they have no enrollments."
Find all books published in the same year as the book titled 'The Hitchhiker's Guide to the Galaxy'.,SELECT title FROM Books WHERE publication_year = (SELECT publication_year FROM Books WHERE title = 'The Hitchhiker''s Guide to the Galaxy');,"Books (book_id INT, title VARCHAR(255), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(255));",The subquery first finds the publication year of 'The Hitchhiker's Guide to the Galaxy'. The outer query then retrieves the titles of all books published in that specific year.
List authors who have published more than 5 books.,SELECT author_name FROM Authors WHERE author_id IN (SELECT author_id FROM Books GROUP BY author_id HAVING COUNT(book_id) > 5);,"Authors (author_id INT, author_name VARCHAR(255), nationality VARCHAR(255)); Books (book_id INT, title VARCHAR(255), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(255));","The subquery groups books by author_id and filters for authors who have more than 5 books, returning their IDs. The outer query then selects the names of these authors."
Find departments that have more employees than the overall average number of employees per department.,SELECT d.department_name FROM Departments d WHERE (SELECT COUNT(*) FROM Employees e WHERE e.department_id = d.department_id) > (SELECT AVG(employee_count) FROM (SELECT COUNT(*) AS employee_count FROM Employees GROUP BY department_id) AS DeptCounts);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));","The innermost subquery calculates the average employee count per department. The outer query then uses a correlated subquery to count employees for each department and compares it to this overall average, returning department names that exceed it."
Retrieve employees whose salary is in the top 10% of all salaries.,"SELECT employee_name, salary FROM Employees WHERE salary >= (SELECT MIN(salary) FROM (SELECT salary FROM Employees ORDER BY salary DESC LIMIT (SELECT CEIL(COUNT(*) * 0.1) FROM Employees)) AS Top10PercentSalaries);","Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);",The innermost subquery calculates the number of employees that constitute the top 10%. The next subquery selects the salaries of these top employees and the outer subquery then finds the minimum salary among them (which is the threshold for the top 10%). The outermost query selects employees whose salary meets or exceeds this threshold.
Find customers who have ordered every single product available.,SELECT c.customer_name FROM Customers c WHERE NOT EXISTS (SELECT p.product_id FROM Products p WHERE NOT EXISTS (SELECT 1 FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id WHERE o.customer_id = c.customer_id AND oi.product_id = p.product_id));,"Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10,2)); Customers (customer_id INT, customer_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); Products (product_id INT, product_name VARCHAR(255), price DECIMAL(10,2), stock_quantity INT); Order_Items (order_item_id INT, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10,2));","This query uses a double NOT EXISTS pattern to achieve relational division. It finds customers for whom it is NOT true that there exists a product that they have NOT ordered, meaning they have ordered all products."
"List employees whose manager's salary is known (i.e., the manager exists in the Employees table).",SELECT e.employee_name FROM Employees e WHERE EXISTS (SELECT 1 FROM Employees m WHERE m.employee_id = e.manager_id);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);","For each employee, the correlated subquery checks if their manager_id corresponds to an existing employee_id in the Employees table. If it does, the employee's name is selected."
Find the names of courses that currently have no students enrolled.,SELECT course_name FROM Courses c WHERE NOT EXISTS (SELECT 1 FROM Enrollments e WHERE e.course_id = c.course_id);,"Courses (course_id INT, course_name VARCHAR(255), credits INT, department VARCHAR(255)); Enrollments (enrollment_id INT, student_id INT, course_id INT, grade VARCHAR(2));","For each course, the correlated subquery checks if there are any enrollments associated with it. If no enrollments are found (NOT EXISTS), the course name is selected."
List the names of students who achieved an 'A' grade in the 'Database Systems' course.,SELECT student_name FROM Students WHERE student_id IN (SELECT student_id FROM Enrollments WHERE grade = 'A' AND course_id = (SELECT course_id FROM Courses WHERE course_name = 'Database Systems'));,"Students (student_id INT, student_name VARCHAR(255), major VARCHAR(255), enrollment_year INT); Courses (course_id INT, course_name VARCHAR(255), credits INT, department VARCHAR(255)); Enrollments (enrollment_id INT, student_id INT, course_id INT, grade VARCHAR(2));","The innermost subquery retrieves the course_id for 'Database Systems'. The outer IN subquery then finds student_ids who got an 'A' in that specific course. Finally, the outermost query selects the names of these students."
"For each customer, display their name, total amount spent across all orders, and the average total amount of their individual orders.","SELECT c.customer_name, SUM(o.total_amount) AS total_spent, (SELECT AVG(total_amount) FROM Orders WHERE customer_id = c.customer_id) AS avg_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name;","Customers (customer_id INT, customer_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10,2));","This query calculates the total amount spent for each customer using SUM and GROUP BY. Additionally, a correlated scalar subquery calculates the average total_amount for orders made by that specific customer for each row."
Find the names of products that have never been ordered.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);,"Products (product_id INT, product_name VARCHAR(255), price DECIMAL(10,2), stock_quantity INT); Order_Items (order_item_id INT, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10,2));","The subquery retrieves all product_ids that appear in the Order_Items table. The outer query then selects the names of products whose product_id is not in this list, meaning they haven't been ordered."
List employees who earn more than the average salary of their respective department.,"SELECT e.employee_name, e.salary FROM Employees e WHERE e.salary > (SELECT AVG(sub.salary) FROM Employees sub WHERE sub.department_id = e.department_id);","Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);","For each employee, a correlated scalar subquery calculates the average salary for their specific department. The outer query then compares the employee's salary to this departmental average."
Retrieve department names and locations for departments located in cities containing 'Central' in their name and whose average employee salary exceeds 60000.,"SELECT d.department_name, d.location FROM Departments d WHERE d.location LIKE '%Central%' AND (SELECT AVG(e.salary) FROM Employees e WHERE e.department_id = d.department_id) > 60000;","Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));","This query first filters departments by location. Then, for each remaining department, a correlated scalar subquery calculates the average salary of its employees, and only departments with an average salary greater than 60000 are included."
Find students who are enrolled in a greater number of courses than the student with student_id 101.,"SELECT student_name FROM Students s JOIN (SELECT student_id, COUNT(course_id) AS num_courses FROM Enrollments GROUP BY student_id) AS StudentCourseCounts ON s.student_id = StudentCourseCounts.student_id WHERE StudentCourseCounts.num_courses > (SELECT COUNT(course_id) FROM Enrollments WHERE student_id = 101);","Students (student_id INT, student_name VARCHAR(255), major VARCHAR(255), enrollment_year INT); Enrollments (enrollment_id INT, student_id INT, course_id INT, grade VARCHAR(2));",The innermost subquery finds the number of courses student 101 is enrolled in. The derived table calculates the number of courses for each student. The outer query then joins Students with this derived table and filters for students whose course count is greater than student 101's count.
List employees who have the highest salary within their own department.,"SELECT e.employee_name, e.salary, e.department_id FROM Employees e WHERE e.salary = (SELECT MAX(sub.salary) FROM Employees sub WHERE sub.department_id = e.department_id);","Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);","For each employee, a correlated scalar subquery calculates the maximum salary for their specific department. The outer query then selects employees whose salary matches this departmental maximum."
Find the names of publishers who have published at least one book in the 'Fantasy' genre.,SELECT publisher_name FROM Publishers WHERE publisher_id IN (SELECT DISTINCT publisher_id FROM Books WHERE genre = 'Fantasy');,"Publishers (publisher_id INT, publisher_name VARCHAR(255), city VARCHAR(255)); Books (book_id INT, title VARCHAR(255), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(255));",The subquery retrieves all unique publisher_ids associated with books of 'Fantasy' genre. The outer query then selects the names of these publishers.
List departments where every employee earns more than 50000.,SELECT department_name FROM Departments d WHERE 50000 < ALL (SELECT salary FROM Employees e WHERE e.department_id = d.department_id);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));","For each department, the correlated subquery returns all salaries of its employees. The outer query then checks if 50000 is less than all of these salaries, implying every employee in that department earns more than 50000."
Find department names that have employees located in every city where a department exists.,SELECT D1.department_name FROM Departments D1 WHERE (SELECT COUNT(DISTINCT location) FROM Departments) = (SELECT COUNT(DISTINCT D2.location) FROM Employees E JOIN Departments D2 ON E.department_id = D2.department_id WHERE E.department_id = D1.department_id);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));",This query performs relational division by comparing counts. It selects departments where the total count of distinct locations (where any department exists) is equal to the count of distinct locations where their employees are based. This implies their employees are present in all existing locations.
List authors who have written books spanning multiple genres.,SELECT author_name FROM Authors WHERE author_id IN (SELECT author_id FROM Books GROUP BY author_id HAVING COUNT(DISTINCT genre) > 1);,"Authors (author_id INT, author_name VARCHAR(255), nationality VARCHAR(255)); Books (book_id INT, title VARCHAR(255), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(255));",The subquery groups books by author and counts the distinct genres for each author. It then filters for authors with more than one distinct genre. The outer query selects the names of these authors.
Find the names of students who are enrolled in at least one course that offers more than 3 credits.,SELECT DISTINCT s.student_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id WHERE e.course_id IN (SELECT course_id FROM Courses WHERE credits > 3);,"Students (student_id INT, student_name VARCHAR(255), major VARCHAR(255), enrollment_year INT); Courses (course_id INT, course_name VARCHAR(255), credits INT, department VARCHAR(255)); Enrollments (enrollment_id INT, student_id INT, course_id INT, grade VARCHAR(2));",The subquery identifies course_ids for courses offering more than 3 credits. The outer query then joins Students and Enrollments and filters for students enrolled in any of these identified courses.
List the names of employees who manage at least two other employees.,SELECT e.employee_name FROM Employees e WHERE e.employee_id IN (SELECT manager_id FROM Employees GROUP BY manager_id HAVING COUNT(employee_id) >= 2);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);","The subquery groups employees by their manager_id and counts the number of employees reporting to each manager. It then filters for managers who have 2 or more direct reports, returning their manager_ids. The outer query selects the names of these managers."
Find products whose current stock quantity is below the average stock quantity of all products.,SELECT product_name FROM Products WHERE stock_quantity < (SELECT AVG(stock_quantity) FROM Products);,"Products (product_id INT, product_name VARCHAR(255), price DECIMAL(10,2), stock_quantity INT);",The subquery calculates the average stock quantity across all products. The outer query then selects products whose stock_quantity is less than this calculated average.
Retrieve the titles of books published by the same publisher as the book 'Moby Dick'.,SELECT title FROM Books WHERE publisher_id = (SELECT publisher_id FROM Books WHERE title = 'Moby Dick');,"Books (book_id INT, title VARCHAR(255), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(255));",The subquery first finds the publisher_id of the book 'Moby Dick'. The outer query then retrieves the titles of all books published by that specific publisher.
List customer names who have not placed any orders for products categorized as 'Fiction'.,SELECT c.customer_name FROM Customers c WHERE c.customer_id NOT IN (SELECT o.customer_id FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.genre = 'Fiction');,"Customers (customer_id INT, customer_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10,2)); Order_Items (order_item_id INT, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10,2)); Products (product_id INT, product_name VARCHAR(255), price DECIMAL(10,2), stock_quantity INT, genre VARCHAR(255));",The subquery identifies customer_ids of customers who have ordered 'Fiction' products. The outer query then selects customer names whose IDs are not in this list.
List students whose age is greater than the average age of students in their respective major.,"SELECT s.student_name, s.age, s.major FROM Students s WHERE s.age > (SELECT AVG(sub.age) FROM Students sub WHERE sub.major = s.major);","Students (student_id INT, student_name VARCHAR(255), major VARCHAR(255), enrollment_year INT, age INT);","For each student, a correlated scalar subquery calculates the average age for their specific major. The outer query then compares the student's age to this major's average."
Find the names of courses that have the highest number of credits within their respective department.,"SELECT c.course_name, c.credits, c.department FROM Courses c WHERE c.credits = (SELECT MAX(sub.credits) FROM Courses sub WHERE sub.department = c.department);","Courses (course_id INT, course_name VARCHAR(255), credits INT, department VARCHAR(255));","For each course, a correlated scalar subquery determines the maximum credits offered within that course's department. The outer query then selects courses whose credits match this departmental maximum."
List employees who were hired before the earliest hire date of any employee in department ID 2.,"SELECT employee_name, hire_date FROM Employees WHERE hire_date < (SELECT MIN(hire_date) FROM Employees WHERE department_id = 2);","Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);",The subquery finds the earliest hire_date among employees in department ID 2. The outer query then selects employees whose hire_date is earlier than this date.
Find products with a price lower than any product in the 'Electronics' category.,SELECT product_name FROM Products WHERE price < ANY (SELECT price FROM Products WHERE category = 'Electronics');,"Products (product_id INT, product_name VARCHAR(255), price DECIMAL(10,2), stock_quantity INT, genre VARCHAR(255), category VARCHAR(255));","The subquery returns a set of prices for products in the 'Electronics' category. The outer query selects product names whose price is lower than any of the prices returned by the subquery (i.e., lower than the maximum price in 'Electronics')."
Find students who are enrolled in more courses than the overall average number of courses taken by a student.,"SELECT s.student_name FROM Students s JOIN (SELECT student_id, COUNT(course_id) AS course_count FROM Enrollments GROUP BY student_id) AS StudentCounts ON s.student_id = StudentCounts.student_id WHERE StudentCounts.course_count > (SELECT AVG(course_count) FROM (SELECT COUNT(course_id) AS course_count FROM Enrollments GROUP BY student_id) AS AvgCourseCounts);","Students (student_id INT, student_name VARCHAR(255), major VARCHAR(255), enrollment_year INT); Enrollments (enrollment_id INT, student_id INT, course_id INT, grade VARCHAR(2));",The innermost derived table calculates the count of courses per student. The subquery then calculates the average of these counts. The outer query joins Students with the derived table of student course counts and filters for students whose count is greater than the overall average.
List customers where their most recent order's total amount was greater than their very first order's total amount.,SELECT c.customer_name FROM Customers c WHERE (SELECT total_amount FROM Orders WHERE customer_id = c.customer_id ORDER BY order_date DESC LIMIT 1) > (SELECT total_amount FROM Orders WHERE customer_id = c.customer_id ORDER BY order_date ASC LIMIT 1);,"Customers (customer_id INT, customer_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10,2));","For each customer, two correlated scalar subqueries are used: one to find the total amount of their latest order and another for their first order. The outer query then compares these two amounts."
Find department names that have employees in all distinct locations where departments are present.,SELECT d.department_name FROM Departments d WHERE (SELECT COUNT(DISTINCT location) FROM Departments) = (SELECT COUNT(DISTINCT d2.location) FROM Employees e JOIN Departments d2 ON e.department_id = d2.department_id WHERE e.department_id = d.department_id);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));",This query performs relational division by comparing counts. It selects departments where the total count of distinct locations (where any department exists) is equal to the count of distinct locations where their employees are based. This implies their employees are present in all existing locations.
Retrieve the names of products that have been ordered by customers from the 'USA'.,SELECT DISTINCT p.product_name FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id JOIN Orders o ON oi.order_id = o.order_id WHERE o.customer_id IN (SELECT customer_id FROM Customers WHERE country = 'USA');,"Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10,2)); Customers (customer_id INT, customer_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); Products (product_id INT, product_name VARCHAR(255), price DECIMAL(10,2), stock_quantity INT); Order_Items (order_item_id INT, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10,2));","The subquery first identifies customer_ids for customers from 'USA'. The outer query then joins Products, Order_Items, and Orders and filters for products linked to any of these USA customer orders."
Find employees whose salary is equal to the minimum salary of employees in department ID 1.,"SELECT employee_name, salary FROM Employees WHERE salary = (SELECT MIN(salary) FROM Employees WHERE department_id = 1);","Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);",The subquery calculates the minimum salary in department ID 1. The outer query then selects employees whose salary matches this minimum value.
List the names of publishers who have published at least one book with more than 500 pages.,SELECT publisher_name FROM Publishers WHERE publisher_id IN (SELECT DISTINCT publisher_id FROM Books WHERE pages > 500);,"Publishers (publisher_id INT, publisher_name VARCHAR(255), city VARCHAR(255)); Books (book_id INT, title VARCHAR(255), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(255), pages INT);",The subquery identifies publisher_ids of publishers who have books with more than 500 pages. The outer query then retrieves the names of these publishers.
Find students who have not achieved a 'B' grade in any course they are enrolled in.,SELECT student_name FROM Students WHERE student_id NOT IN (SELECT student_id FROM Enrollments WHERE grade = 'B');,"Students (student_id INT, student_name VARCHAR(255), major VARCHAR(255), enrollment_year INT); Enrollments (enrollment_id INT, student_id INT, course_id INT, grade VARCHAR(2));","The subquery identifies student IDs who have at least one 'B' grade. The outer query then selects students whose ID is not in this list, meaning they have no 'B' grades."
Retrieve employees whose salary is less than the minimum salary of employees in department ID 4.,SELECT employee_name FROM Employees WHERE salary < (SELECT MIN(salary) FROM Employees WHERE department_id = 4);,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);",The subquery calculates the minimum salary for employees in department ID 4. The outer query then returns the names of employees whose salary is less than this minimum.
Find customers who have placed orders for products from at least two different categories.,SELECT c.customer_name FROM Customers c WHERE c.customer_id IN (SELECT o.customer_id FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY o.customer_id HAVING COUNT(DISTINCT p.category) >= 2);,"Customers (customer_id INT, customer_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10,2)); Order_Items (order_item_id INT, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10,2)); Products (product_id INT, product_name VARCHAR(255), price DECIMAL(10,2), stock_quantity INT, category VARCHAR(255));",The subquery groups orders by customer and counts the distinct product categories ordered by each. It filters for customers with 2 or more distinct categories. The outer query then selects the names of these customers.
List courses that have more students enrolled than the course 'Introduction to Psychology'.,"SELECT C.course_name FROM Courses C JOIN (SELECT course_id, COUNT(student_id) AS student_count FROM Enrollments GROUP BY course_id) AS CourseEnrollments ON C.course_id = CourseEnrollments.course_id WHERE CourseEnrollments.student_count > (SELECT COUNT(student_id) FROM Enrollments WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Introduction to Psychology'));","Courses (course_id INT, course_name VARCHAR(255), credits INT, department VARCHAR(255)); Enrollments (enrollment_id INT, student_id INT, course_id INT, grade VARCHAR(2));",The innermost subquery finds the course_id for 'Introduction to Psychology'. The next subquery counts students for that specific course. The derived table calculates student counts for all courses. The outer query then joins Courses with the derived table and filters for courses with more students than 'Introduction to Psychology'.
Find authors who have books published in '2020' and also in '2022'.,SELECT author_name FROM Authors WHERE author_id IN (SELECT author_id FROM Books WHERE publication_year = 2020) AND author_id IN (SELECT author_id FROM Books WHERE publication_year = 2022);,"Authors (author_id INT, author_name VARCHAR(255), nationality VARCHAR(255)); Books (book_id INT, title VARCHAR(255), author_id INT, publisher_id INT, publication_year INT, genre VARCHAR(255));","This query uses two separate IN subqueries. The first identifies authors with books published in 2020, and the second identifies authors with books published in 2022. The outer query selects authors present in both lists."
Retrieve the average salary of employees who work in departments located in 'London'.,SELECT AVG(salary) FROM Employees WHERE department_id IN (SELECT department_id FROM Departments WHERE location = 'London');,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT); Departments (department_id INT, department_name VARCHAR(255), location VARCHAR(255));",The subquery finds the department IDs for departments located in 'London'. The outer query then calculates the average salary for all employees belonging to these identified departments.
List employees who do not have a manager.,SELECT employee_name FROM Employees WHERE manager_id IS NULL;,"Employees (employee_id INT, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2), hire_date DATE, manager_id INT);","This query directly filters employees where the manager_id column is NULL, indicating they do not have a manager. While not a subquery, it's a common 'no manager' request often contrasted with subquery examples."
Find the names of students who achieved the highest grade in any course.,SELECT DISTINCT s.student_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id WHERE e.grade = (SELECT MAX(grade) FROM Enrollments);,"Students (student_id INT, student_name VARCHAR(255), major VARCHAR(255), enrollment_year INT); Enrollments (enrollment_id INT, student_id INT, course_id INT, grade VARCHAR(2));","The subquery finds the highest grade (assuming 'A' > 'B', etc. lexicographically or by defined order). The outer query then selects students who have achieved this highest grade in any of their enrollments."
Instruction,Query,Table Schema,Explanation
List all unique first names of individuals who are either employees or contractors.,SELECT first_name FROM Employees UNION SELECT first_name FROM Contractors;,"Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, department VARCHAR, hire_date DATE, salary DECIMAL), Contractors(contractor_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, project_name VARCHAR, contract_start_date DATE, hourly_rate DECIMAL)","This query combines the first names from both the Employees and Contractors tables. The UNION operator ensures that only unique first names are returned, eliminating any duplicates."
"Retrieve all email addresses from both customers and leads, including duplicates.",SELECT email FROM Customers UNION ALL SELECT email FROM Leads;,"Customers(customer_id INT, name VARCHAR, email VARCHAR, city VARCHAR, registration_date DATE), Leads(lead_id INT, name VARCHAR, email VARCHAR, source VARCHAR, lead_date DATE)",This query concatenates all email addresses from the Customers table with all email addresses from the Leads table. The UNION ALL operator preserves all duplicates.
Find the names of people who are registered as both a customer and a lead.,SELECT name FROM Customers INTERSECT SELECT name FROM Leads;,"Customers(customer_id INT, name VARCHAR, email VARCHAR, city VARCHAR, registration_date DATE), Leads(lead_id INT, name VARCHAR, email VARCHAR, source VARCHAR, lead_date DATE)",This query returns the names that exist in both the Customers table and the Leads table. The INTERSECT operator selects only the common rows found in both result sets.
List the product categories that do not have any corresponding service types.,SELECT category FROM Products EXCEPT SELECT service_type FROM Services;,"Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT), Services(service_id INT, service_name VARCHAR, service_type VARCHAR, hourly_rate DECIMAL, availability BOOLEAN)",This query returns product categories from the Products table that do not have a matching service type in the Services table. The EXCEPT operator returns rows from the first query that are not present in the second query's result.
Show all unique job titles from both current and past positions.,SELECT job_title FROM CurrentPositions UNION SELECT job_title FROM PastPositions;,"CurrentPositions(position_id INT, job_title VARCHAR, department VARCHAR), PastPositions(past_position_id INT, job_title VARCHAR, end_date DATE)","This query retrieves all unique job titles by combining titles from CurrentPositions and PastPositions, removing duplicates using UNION."
"Get all course names offered in Fall 2023 and Spring 2024, including repeats.",SELECT course_name FROM Courses WHERE semester = 'Fall 2023' UNION ALL SELECT course_name FROM Courses WHERE semester = 'Spring 2024';,"Courses(course_id INT, course_name VARCHAR, semester VARCHAR, credits INT)","This query lists all course names offered in Fall 2023 and Spring 2024. UNION ALL includes all occurrences of course names, even if they are repeated in either semester."
Find the IDs of students who are enrolled in both 'Math' and 'Physics' departments.,SELECT student_id FROM Enrollments WHERE department = 'Math' INTERSECT SELECT student_id FROM Enrollments WHERE department = 'Physics';,"Enrollments(enrollment_id INT, student_id INT, course_id INT, department VARCHAR)",This query identifies students who are associated with both the 'Math' and 'Physics' departments by finding the common student_ids between the two subqueries.
List all authors who have written books but not journal articles.,SELECT author FROM Books EXCEPT SELECT author FROM Journals;,"Books(book_id INT, title VARCHAR, author VARCHAR, genre VARCHAR), Journals(journal_id INT, title VARCHAR, editor VARCHAR, author VARCHAR)","This query returns the names of authors who appear in the Books table but not in the Journals table, using the EXCEPT operator to show the difference."
Combine all unique customer and supplier cities.,SELECT city FROM Customers UNION SELECT city FROM Suppliers;,"Customers(customer_id INT, name VARCHAR, city VARCHAR), Suppliers(supplier_id INT, name VARCHAR, city VARCHAR)",This query retrieves a unique list of cities present in either the Customers table or the Suppliers table. UNION removes duplicate cities.
"Show all product IDs from both active and discontinued products, keeping duplicates.",SELECT product_id FROM ActiveProducts UNION ALL SELECT product_id FROM DiscontinuedProducts;,"ActiveProducts(product_id INT, product_name VARCHAR), DiscontinuedProducts(product_id INT, product_name VARCHAR, discontinue_date DATE)","This query lists all product IDs from both active and discontinued products. UNION ALL ensures that all product IDs are included, even if they appear in both lists or multiple times within one."
Identify users who are both active members and administrators.,SELECT user_id FROM ActiveMembers INTERSECT SELECT user_id FROM Administrators;,"ActiveMembers(user_id INT, username VARCHAR), Administrators(user_id INT, role VARCHAR)","This query finds the user IDs that are common to both the ActiveMembers and Administrators tables, indicating users who hold both roles."
"Get a list of all employees who are not also contractors, based on email.",SELECT email FROM Employees EXCEPT SELECT email FROM Contractors;,"Employees(employee_id INT, email VARCHAR), Contractors(contractor_id INT, email VARCHAR)","This query returns email addresses that exist in the Employees table but not in the Contractors table, effectively showing employees who are not also contractors."
"List all unique names from employees, customers, and suppliers.",SELECT name FROM Employees UNION SELECT name FROM Customers UNION SELECT name FROM Suppliers;,"Employees(employee_id INT, name VARCHAR), Customers(customer_id INT, name VARCHAR), Suppliers(supplier_id INT, name VARCHAR)","This query combines names from three different tables (Employees, Customers, Suppliers) into a single result set, ensuring only unique names are listed due to UNION."
"Provide a complete list of all transaction IDs from sales and refunds, including any that occurred multiple times.",SELECT transaction_id FROM Sales UNION ALL SELECT transaction_id FROM Refunds;,"Sales(sale_id INT, transaction_id INT, amount DECIMAL), Refunds(refund_id INT, transaction_id INT, amount DECIMAL)","This query merges all transaction IDs from Sales and Refunds tables. UNION ALL includes every instance of a transaction ID, preserving duplicates."
Find product names that are available in both 'Electronics' and 'Home Appliances' categories.,SELECT product_name FROM Products WHERE category = 'Electronics' INTERSECT SELECT product_name FROM Products WHERE category = 'Home Appliances';,"Products(product_id INT, product_name VARCHAR, category VARCHAR)",This query identifies product names that appear in both the 'Electronics' and 'Home Appliances' categories within the Products table.
Show department names that exist in 'DepartmentA' records but not in 'DepartmentB' records.,SELECT department_name FROM DepartmentA EXCEPT SELECT department_name FROM DepartmentB;,"DepartmentA(dept_id INT, department_name VARCHAR), DepartmentB(dept_id INT, department_name VARCHAR)",This query lists department names that are present in the 'DepartmentA' table but not in the 'DepartmentB' table.
Get all unique countries from which orders have been placed or inventory is sourced.,SELECT country FROM Orders UNION SELECT country FROM Inventory;,"Orders(order_id INT, customer_id INT, order_date DATE, country VARCHAR), Inventory(item_id INT, item_name VARCHAR, country VARCHAR)","This query combines unique country names from both the Orders and Inventory tables, providing a consolidated list of countries."
List all unique project names that have active tasks or pending issues.,SELECT project_name FROM ActiveTasks UNION SELECT project_name FROM PendingIssues;,"ActiveTasks(task_id INT, project_name VARCHAR), PendingIssues(issue_id INT, project_name VARCHAR)",This query retrieves a unique list of project names from projects with either active tasks or pending issues.
"Retrieve all customer IDs who placed orders in 2022 and 2023, keeping all occurrences.",SELECT customer_id FROM Orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31' UNION ALL SELECT customer_id FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';,"Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL)","This query gathers all customer IDs for orders placed in 2022 and 2023, retaining duplicates if a customer ordered multiple times in either year or across both."
Find the names of students who have taken courses in both 'Computer Science' and 'Mathematics' departments.,SELECT student_name FROM StudentsCourses WHERE department = 'Computer Science' INTERSECT SELECT student_name FROM StudentsCourses WHERE department = 'Mathematics';,"StudentsCourses(student_id INT, student_name VARCHAR, course_name VARCHAR, department VARCHAR)",This query identifies students whose names appear in the course records for both 'Computer Science' and 'Mathematics' departments.
List all product IDs that are in stock but have no sales records.,SELECT product_id FROM Inventory WHERE stock_quantity > 0 EXCEPT SELECT product_id FROM SalesRecords;,"Inventory(product_id INT, product_name VARCHAR, stock_quantity INT), SalesRecords(sale_id INT, product_id INT, sale_date DATE)",This query returns product IDs from the Inventory table (where stock is positive) that do not have a corresponding entry in the SalesRecords table.
Show all unique cities where employees work or where offices are located.,SELECT city FROM Employees UNION SELECT city FROM Offices;,"Employees(employee_id INT, city VARCHAR), Offices(office_id INT, city VARCHAR)",This query combines unique city names from employee locations and office locations.
Get all unique IDs from users who have logged in from a 'web' source or a 'mobile' source.,SELECT user_id FROM UserLogs WHERE source = 'web' UNION SELECT user_id FROM UserLogs WHERE source = 'mobile';,"UserLogs(log_id INT, user_id INT, source VARCHAR, login_time DATETIME)",This query retrieves unique user IDs who have logged in via either 'web' or 'mobile' sources.
"Provide a list of all items from 'WarehouseA' and 'WarehouseB', including any duplicates.",SELECT item_name FROM WarehouseA UNION ALL SELECT item_name FROM WarehouseB;,"WarehouseA(item_id INT, item_name VARCHAR), WarehouseB(item_id INT, item_name VARCHAR)","This query combines all item names from both warehouses, preserving all instances, even if an item is present in both warehouses or multiple times in one."
Find common department names between the 'HR' and 'Finance' employee lists.,SELECT department FROM HREmployees INTERSECT SELECT department FROM FinanceEmployees;,"HREmployees(employee_id INT, department VARCHAR), FinanceEmployees(employee_id INT, department VARCHAR)",This query identifies department names that are present in both the 'HR Employees' and 'Finance Employees' lists.
List all customers who have made purchases but have not submitted reviews.,SELECT customer_id FROM Purchases EXCEPT SELECT customer_id FROM Reviews;,"Purchases(purchase_id INT, customer_id INT), Reviews(review_id INT, customer_id INT)","This query returns customer IDs from the Purchases table who do not have an entry in the Reviews table, indicating customers who bought but didn't review."
Show all unique product names that are either 'Electronics' or 'Clothing'.,SELECT product_name FROM Products WHERE category = 'Electronics' UNION SELECT product_name FROM Products WHERE category = 'Clothing';,"Products(product_id INT, product_name VARCHAR, category VARCHAR)",This query combines unique product names from the 'Electronics' and 'Clothing' categories.
"Get a comprehensive list of all salaries paid to full-time and part-time staff, keeping every instance.",SELECT salary FROM FullTimeStaff UNION ALL SELECT salary FROM PartTimeStaff;,"FullTimeStaff(staff_id INT, salary DECIMAL), PartTimeStaff(staff_id INT, salary DECIMAL)","This query concatenates all salary figures from both full-time and part-time staff tables, including duplicate salary amounts if they exist."
Identify unique project IDs that are currently 'Active' and also listed as 'High Priority'.,SELECT project_id FROM Projects WHERE status = 'Active' INTERSECT SELECT project_id FROM Projects WHERE priority = 'High';,"Projects(project_id INT, status VARCHAR, priority VARCHAR)",This query finds project IDs that are marked as both 'Active' and 'High Priority' within the Projects table.
List all student IDs who are registered for classes but not yet assigned to a dorm.,SELECT student_id FROM ClassRegistrations EXCEPT SELECT student_id FROM DormAssignments;,"ClassRegistrations(registration_id INT, student_id INT), DormAssignments(assignment_id INT, student_id INT)","This query returns student IDs from ClassRegistrations that do not have a corresponding entry in DormAssignments, identifying students awaiting dorm assignment."
Retrieve all unique authors from both the 'Fiction' and 'Non-Fiction' categories of books.,SELECT author FROM Books WHERE genre = 'Fiction' UNION SELECT author FROM Books WHERE genre = 'Non-Fiction';,"Books(book_id INT, title VARCHAR, author VARCHAR, genre VARCHAR)",This query combines the unique author names from books categorized as 'Fiction' or 'Non-Fiction'.
"Show all user IDs who have posted comments or created articles, with all occurrences.",SELECT user_id FROM Comments UNION ALL SELECT user_id FROM Articles;,"Comments(comment_id INT, user_id INT), Articles(article_id INT, user_id INT)","This query lists all user IDs from both comments and articles, preserving duplicates, so a user ID appears for every comment or article they've posted."
Find common product IDs between 'Electronics' and 'Apparel' stock lists.,SELECT product_id FROM ElectronicsStock INTERSECT SELECT product_id FROM ApparelStock;,"ElectronicsStock(product_id INT, quantity INT), ApparelStock(product_id INT, size VARCHAR)",This query identifies product IDs that are present in both the 'Electronics Stock' and 'Apparel Stock' tables.
List all employee IDs who are currently working but have no associated performance review.,SELECT employee_id FROM Employees WHERE status = 'Active' EXCEPT SELECT employee_id FROM PerformanceReviews;,"Employees(employee_id INT, status VARCHAR), PerformanceReviews(review_id INT, employee_id INT)",This query returns active employee IDs who do not have an entry in the PerformanceReviews table.
Combine all unique cities from customers in the USA and Canada.,SELECT city FROM Customers WHERE country = 'USA' UNION SELECT city FROM Customers WHERE country = 'Canada';,"Customers(customer_id INT, city VARCHAR, country VARCHAR)",This query lists all unique cities from customers located in either the USA or Canada.
"Get a complete list of all item numbers from orders placed in January and February 2024, including all repetitions.",SELECT item_number FROM OrderItems WHERE order_date BETWEEN '2024-01-01' AND '2024-01-31' UNION ALL SELECT item_number FROM OrderItems WHERE order_date BETWEEN '2024-02-01' AND '2024-02-29';,"OrderItems(order_item_id INT, item_number INT, order_date DATE)","This query retrieves all item numbers from orders placed in January and February 2024. UNION ALL includes every instance, even if an item number appears multiple times."
Identify students who have enrolled in courses in both 'Science' and 'Arts' faculties.,SELECT student_id FROM StudentEnrollments WHERE faculty = 'Science' INTERSECT SELECT student_id FROM StudentEnrollments WHERE faculty = 'Arts';,"StudentEnrollments(enrollment_id INT, student_id INT, faculty VARCHAR)",This query finds student IDs that are common to enrollments in both 'Science' and 'Arts' faculties.
Show all product SKUs that are in the 'New Arrivals' list but are not yet in the main 'Inventory'.,SELECT sku FROM NewArrivals EXCEPT SELECT sku FROM Inventory;,"NewArrivals(arrival_id INT, sku VARCHAR), Inventory(item_id INT, sku VARCHAR)",This query returns SKUs from the NewArrivals table that are not present in the Inventory table.
List all unique names of employees whose last name starts with 'S' or first name starts with 'J'.,"SELECT first_name, last_name FROM Employees WHERE last_name LIKE 'S%' UNION SELECT first_name, last_name FROM Employees WHERE first_name LIKE 'J%';","Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR)",This query combines unique first and last names of employees whose last name starts with 'S' or whose first name starts with 'J'.
Get all distinct category names from Products and Services.,SELECT category FROM Products UNION SELECT service_type FROM Services;,"Products(product_id INT, product_name VARCHAR, category VARCHAR), Services(service_id INT, service_name VARCHAR, service_type VARCHAR)",This query combines unique values from the 'category' column in Products and 'service_type' column in Services.
"Provide a list of all order IDs from 2020, 2021, and 2022, including all duplicates.",SELECT order_id FROM Orders WHERE order_date BETWEEN '2020-01-01' AND '2020-12-31' UNION ALL SELECT order_id FROM Orders WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31' UNION ALL SELECT order_id FROM Orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';,"Orders(order_id INT, order_date DATE)","This query retrieves all order IDs for orders placed in 2020, 2021, and 2022, preserving all duplicates."
Find the names of students who are registered in both the 'Undergraduate' and 'Graduate' programs (if applicable for some courses).,SELECT student_name FROM Registrations WHERE program_type = 'Undergraduate' INTERSECT SELECT student_name FROM Registrations WHERE program_type = 'Graduate';,"Registrations(registration_id INT, student_name VARCHAR, program_type VARCHAR)",This query identifies student names common to both 'Undergraduate' and 'Graduate' program registrations.
List all department IDs that have employees but no active projects.,SELECT department_id FROM Employees EXCEPT SELECT department_id FROM Projects WHERE status = 'Active';,"Employees(employee_id INT, department_id INT), Projects(project_id INT, department_id INT, status VARCHAR)",This query returns department IDs that have employees but do not have any active projects associated with them.
Get all unique email domains used by either customers or employees.,"SELECT SUBSTRING(email, INSTR(email, '@') + 1) FROM Customers UNION SELECT SUBSTRING(email, INSTR(email, '@') + 1) FROM Employees;","Customers(customer_id INT, email VARCHAR), Employees(employee_id INT, email VARCHAR)",This query extracts and combines unique email domains from both the Customers and Employees tables. `INSTR` and `SUBSTRING` are used to parse the domain from the email address.
"Show a full list of all product IDs from 'OnlineSales' and 'StoreSales', including any recurring IDs.",SELECT product_id FROM OnlineSales UNION ALL SELECT product_id FROM StoreSales;,"OnlineSales(sale_id INT, product_id INT), StoreSales(sale_id INT, product_id INT)","This query concatenates all product IDs from online and store sales, preserving duplicates."
Identify common course codes between 'Semester A' and 'Semester B' offerings.,SELECT course_code FROM CourseOfferings WHERE semester = 'Semester A' INTERSECT SELECT course_code FROM CourseOfferings WHERE semester = 'Semester B';,"CourseOfferings(offering_id INT, course_code VARCHAR, semester VARCHAR)",This query finds course codes that are offered in both 'Semester A' and 'Semester B'.
List all staff IDs who have completed 'Training A' but not 'Training B'.,SELECT staff_id FROM TrainingRecords WHERE training_name = 'Training A' EXCEPT SELECT staff_id FROM TrainingRecords WHERE training_name = 'Training B';,"TrainingRecords(record_id INT, staff_id INT, training_name VARCHAR)",This query returns staff IDs who have a record for 'Training A' but not for 'Training B'.
Combine all unique names of students who are seniors or juniors.,SELECT student_name FROM Students WHERE grade_level = 'Senior' UNION SELECT student_name FROM Students WHERE grade_level = 'Junior';,"Students(student_id INT, student_name VARCHAR, grade_level VARCHAR)",This query combines unique student names from both 'Senior' and 'Junior' grade levels.
Get all unique country codes from both inbound and outbound shipments.,SELECT country_code FROM InboundShipments UNION SELECT country_code FROM OutboundShipments;,"InboundShipments(shipment_id INT, country_code VARCHAR), OutboundShipments(shipment_id INT, country_code VARCHAR)",This query lists unique country codes found in either inbound or outbound shipments.
"Show a full list of all employee IDs from 'Active' and 'OnLeave' statuses, including any repeated IDs.",SELECT employee_id FROM Employees WHERE status = 'Active' UNION ALL SELECT employee_id FROM Employees WHERE status = 'OnLeave';,"Employees(employee_id INT, status VARCHAR)","This query retrieves all employee IDs from both 'Active' and 'OnLeave' statuses, including any duplicates."
Find the IDs of books that are in both the 'Bestsellers' and 'New Releases' lists.,SELECT book_id FROM Bestsellers INTERSECT SELECT book_id FROM NewReleases;,"Bestsellers(book_id INT, title VARCHAR), NewReleases(book_id INT, title VARCHAR)",This query identifies book IDs that are present in both the Bestsellers and New Releases lists.
List all users who have created an account but have never logged in.,SELECT user_id FROM Accounts EXCEPT SELECT user_id FROM Logins;,"Accounts(account_id INT, user_id INT, creation_date DATE), Logins(login_id INT, user_id INT, login_date DATE)",This query returns user IDs that exist in the Accounts table but do not have any corresponding entry in the Logins table.
Combine unique names of team members from 'Team Alpha' and 'Team Beta'.,SELECT member_name FROM TeamAlpha UNION SELECT member_name FROM TeamBeta;,"TeamAlpha(member_id INT, member_name VARCHAR), TeamBeta(member_id INT, member_name VARCHAR)",This query combines unique names of team members from both TeamAlpha and TeamBeta.
Get all unique genres from both books and movies.,SELECT genre FROM Books UNION SELECT genre FROM Movies;,"Books(book_id INT, genre VARCHAR), Movies(movie_id INT, genre VARCHAR)",This query lists unique genres present in either the Books table or the Movies table.
"Show all product codes from 'Warehouse X' and 'Warehouse Y', including any duplicate codes.",SELECT product_code FROM WarehouseX UNION ALL SELECT product_code FROM WarehouseY;,"WarehouseX(product_id INT, product_code VARCHAR), WarehouseY(product_id INT, product_code VARCHAR)","This query concatenates all product codes from both warehouses, preserving duplicates."
Find common customer IDs who placed orders in both 'Region A' and 'Region B'.,SELECT customer_id FROM Orders WHERE region = 'Region A' INTERSECT SELECT customer_id FROM Orders WHERE region = 'Region B';,"Orders(order_id INT, customer_id INT, region VARCHAR)",This query identifies customer IDs that have placed orders in both 'Region A' and 'Region B'.
List all product names that are listed as 'Available' but have not been 'Reviewed'.,SELECT product_name FROM Products WHERE status = 'Available' EXCEPT SELECT product_name FROM ProductReviews;,"Products(product_id INT, product_name VARCHAR, status VARCHAR), ProductReviews(review_id INT, product_name VARCHAR)",This query returns product names that are 'Available' but do not have a corresponding entry in the ProductReviews table.
Show all unique cities where active customers reside or where new leads are generated.,SELECT city FROM Customers WHERE status = 'Active' UNION SELECT city FROM Leads;,"Customers(customer_id INT, city VARCHAR, status VARCHAR), Leads(lead_id INT, city VARCHAR)",This query combines unique cities from active customers and new leads.
Retrieve all unique IDs from users who have completed 'Survey 1' or 'Survey 2'.,SELECT user_id FROM Surveys WHERE survey_name = 'Survey 1' UNION SELECT user_id FROM Surveys WHERE survey_name = 'Survey 2';,"Surveys(survey_id INT, user_id INT, survey_name VARCHAR)",This query retrieves unique user IDs who have completed either 'Survey 1' or 'Survey 2'.
"Provide a complete list of all employee IDs from 'Full-Time' and 'Contract' positions, including duplicates.",SELECT employee_id FROM FullTimeEmployees UNION ALL SELECT employee_id FROM ContractEmployees;,"FullTimeEmployees(employee_id INT), ContractEmployees(employee_id INT)","This query concatenates all employee IDs from full-time and contract employee tables, preserving duplicates."
Find the IDs of courses that are mandatory for both 'Computer Science' and 'Electrical Engineering' majors.,SELECT course_id FROM CourseRequirements WHERE major = 'Computer Science' AND is_mandatory = TRUE INTERSECT SELECT course_id FROM CourseRequirements WHERE major = 'Electrical Engineering' AND is_mandatory = TRUE;,"CourseRequirements(requirement_id INT, course_id INT, major VARCHAR, is_mandatory BOOLEAN)",This query identifies course IDs that are mandatory for both 'Computer Science' and 'Electrical Engineering' majors.
Instruction,Query,Table Schema,Explanation
Retrieve the current date.,SELECT CURRENT_DATE();,"No specific table schema is required for this query, as it fetches the system's current date.","This query uses the CURRENT_DATE() function, which returns the current date from the database server."
Get the current timestamp.,SELECT NOW();,"No specific table schema is required for this query, as it fetches the system's current timestamp.",The NOW() function returns the current date and time (timestamp) from the database server.
Find the year of the order date for all orders.,"SELECT order_id, YEAR(order_date) AS order_year FROM orders;","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));",This query uses the YEAR() function to extract the year component from the 'order_date' column for each order.
List all employees hired in the month of March.,"SELECT employee_id, first_name, last_name FROM employees WHERE MONTH(hire_date) = 3;","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), hire_date DATE);","The MONTH() function extracts the month number from the 'hire_date' column, filtering for employees hired in the 3rd month (March)."
Retrieve the day of the month for all event start dates.,"SELECT event_id, DAY(event_start_datetime) AS start_day FROM events;","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(100), event_start_datetime DATETIME);",This query uses the DAY() function (or DAYOFMONTH()) to extract the day of the month from the 'event_start_datetime' column.
Calculate the difference in days between the expiry date and manufacture date for each product.,"SELECT product_id, DATEDIFF(expiry_date, manufacture_date) AS shelf_life_days FROM products;","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(100), manufacture_date DATE, expiry_date DATE);","The DATEDIFF() function calculates the number of days between two date expressions. Here, it finds the shelf life."
"Add 7 days to a specific order date, for order ID 101.","SELECT order_date, DATE_ADD(order_date, INTERVAL 7 DAY) AS new_delivery_date FROM orders WHERE order_id = 101;","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE);","DATE_ADD() adds a specified time interval to a date. Here, 7 days are added to the 'order_date' for a specific order."
Subtract 3 hours from the current timestamp.,"SELECT DATE_SUB(NOW(), INTERVAL 3 HOUR);","No specific table schema is required for this query, as it performs a calculation on the current timestamp.","DATE_SUB() subtracts a specified time interval from a date/timestamp. Here, 3 hours are subtracted from the current time."
Format the hire date for all employees as 'YYYY-MM-DD'.,"SELECT employee_id, DATE_FORMAT(hire_date, '%Y-%m-%d') AS formatted_hire_date FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, hire_date DATE, first_name VARCHAR(50));",DATE_FORMAT() formats a date value as a string according to the specified format string. '%Y-%m-%d' represents year-month-day.
Find the name of the day for each event's start date.,"SELECT event_name, DAYNAME(event_start_datetime) AS day_of_week FROM events;","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(100), event_start_datetime DATETIME);","The DAYNAME() function returns the name of the weekday for a given date value (e.g., 'Monday', 'Tuesday')."
Get the week number of the year for all order dates.,"SELECT order_id, WEEK(order_date) AS week_of_year FROM orders;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE);","WEEK() function returns the week number for the given date. Depending on the SQL dialect, it might have different modes for starting day of the week."
Determine the quarter of the year for each employee's hire date.,"SELECT employee_id, QUARTER(hire_date) AS hire_quarter FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, hire_date DATE);",QUARTER() function returns the quarter (1-4) of the year for a given date.
Calculate the age of each employee based on their birth date and the current date.,"SELECT employee_id, first_name, TIMESTAMPDIFF(YEAR, birth_date, CURRENT_DATE()) AS age FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), birth_date DATE);","TIMESTAMPDIFF() calculates the difference between two datetime expressions in a specified unit (here, 'YEAR')."
Find events that start and end on the same day.,"SELECT event_id, event_name FROM events WHERE DATE(event_start_datetime) = DATE(event_end_datetime);","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(100), event_start_datetime DATETIME, event_end_datetime DATETIME);","The DATE() function extracts only the date part from a DATETIME expression, allowing comparison of just the dates."
Get the hour component of the event start time for all events.,"SELECT event_id, HOUR(event_start_datetime) AS start_hour FROM events;","CREATE TABLE events (event_id INT PRIMARY KEY, event_start_datetime DATETIME);",The HOUR() function extracts the hour part (0-23) from a time or datetime expression.
Retrieve orders placed on a Sunday.,"SELECT order_id, order_date FROM orders WHERE DAYOFWEEK(order_date) = 1;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE);","DAYOFWEEK() returns the weekday index (1=Sunday, 2=Monday, ..., 7=Saturday). Filtering for 1 selects Sundays."
Get the last day of the month for all employee hire dates.,"SELECT employee_id, hire_date, LAST_DAY(hire_date) AS end_of_month FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, hire_date DATE);",LAST_DAY() function returns the date of the last day of the month for the given date.
List all products that will expire in the current year.,"SELECT product_id, product_name, expiry_date FROM products WHERE YEAR(expiry_date) = YEAR(CURRENT_DATE());","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(100), expiry_date DATE);",This query filters products by checking if the year of their expiry date matches the year of the current date.
Calculate the total duration of each event in minutes.,"SELECT event_id, TIMESTAMPDIFF(MINUTE, event_start_datetime, event_end_datetime) AS duration_minutes FROM events;","CREATE TABLE events (event_id INT PRIMARY KEY, event_start_datetime DATETIME, event_end_datetime DATETIME);","TIMESTAMPDIFF() calculates the difference between two datetime expressions in the specified unit, here 'MINUTE'."
"Create a date from the year 2023, month 7, and day 15.","SELECT MAKEDATE(2023, 196); -- 196th day of 2023 is July 15th",No specific table schema needed. This is a date construction example.,MAKEDATE() creates a date from a year and a day-of-year value. 196 is the day number for July 15th in a non-leap year.
Extract the minute component from the order time.,"SELECT order_id, MINUTE(order_time) AS order_minute FROM orders;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_time TIME);",The MINUTE() function extracts the minute part (0-59) from a time or datetime expression.
Extract the second component from the event end time.,"SELECT event_id, SECOND(event_end_datetime) AS end_second FROM events;","CREATE TABLE events (event_id INT PRIMARY KEY, event_end_datetime DATETIME);",The SECOND() function extracts the second part (0-59) from a time or datetime expression.
Find the day of the year for all employee birth dates.,"SELECT employee_id, DAYOFYEAR(birth_date) AS day_in_year FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, birth_date DATE);",DAYOFYEAR() function returns the day of the year (1-366) for a given date.
List orders placed in the first half of the month (days 1-15).,"SELECT order_id, order_date FROM orders WHERE DAY(order_date) <= 15;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE);",This query uses the DAY() function to filter orders based on the day of the month being 15 or less.
Get the name of the month for all employee hire dates.,"SELECT employee_id, MONTHNAME(hire_date) AS hire_month_name FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, hire_date DATE);","MONTHNAME() function returns the full name of the month for a given date (e.g., 'January')."
Find orders placed exactly 30 days ago from today.,"SELECT order_id, order_date FROM orders WHERE order_date = DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY);","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE);",This query compares the order date to a date calculated by subtracting 30 days from the current date.
Determine the number of working days (Monday-Friday) between two specific dates: '2023-01-01' and '2023-01-31'.,"SELECT COUNT(*) FROM (SELECT ADDDATE('2023-01-01', @num:=@num+1) AS day FROM information_schema.tables, (SELECT @num:=-1) num HAVING day <= '2023-01-31') AS days_list WHERE DAYOFWEEK(day) NOT IN (1, 7);",No specific table schema needed. This is a complex date calculation example.,"This query generates a series of dates between the start and end, then counts how many of those days are not a Sunday (1) or a Saturday (7). Note: This is a MySQL-specific approach for date series."
Get orders that were delivered on the same day they were ordered.,"SELECT order_id, order_date, delivery_date FROM orders WHERE order_date = delivery_date;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, delivery_date DATE);",This query directly compares the 'order_date' and 'delivery_date' columns to find orders delivered on the same day.
List employees whose birth month is the current month.,"SELECT employee_id, first_name, last_name, birth_date FROM employees WHERE MONTH(birth_date) = MONTH(CURRENT_DATE());","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), birth_date DATE);",This query filters employees by comparing their birth month to the current month using the MONTH() function.
Format the event start datetime as 'MM/DD/YYYY HH:MI AM/PM'.,"SELECT event_id, DATE_FORMAT(event_start_datetime, '%m/%d/%Y %h:%i %p') AS formatted_datetime FROM events;","CREATE TABLE events (event_id INT PRIMARY KEY, event_start_datetime DATETIME);",DATE_FORMAT() is used to present the datetime in a specific 'MM/DD/YYYY HH:MI AM/PM' format using various format specifiers.
Find the next Monday from a given date '2023-10-26'.,"SELECT NEXT_DAY('2023-10-26', 'MONDAY'); -- Oracle specific, or complex date arithmetic for others",No specific table schema needed. This is a date calculation example.,"NEXT_DAY() returns the date of the first weekday specified that is later than the date specified. This function is common in Oracle, for MySQL/PostgreSQL, it would involve DATE_ADD and DAYOFWEEK calculations."
Get the current time.,SELECT CURRENT_TIME();,"No specific table schema is required for this query, as it fetches the system's current time.",The CURRENT_TIME() function returns the current time from the database server.
Calculate the difference in hours between two specific times: '09:00:00' and '17:30:00'.,"SELECT TIMEDIFF('17:30:00', '09:00:00') AS time_difference;",No specific table schema needed. This is a time calculation example.,TIMEDIFF() calculates the difference between two time or datetime expressions. The result is a time value.
"Get the day of the week (0=Monday, 6=Sunday) for all employee birth dates.","SELECT employee_id, WEEKDAY(birth_date) AS weekday_index FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, birth_date DATE);","WEEKDAY() function returns the weekday index (0=Monday, 1=Tuesday, ..., 6=Sunday)."
Convert a string '2023-01-25 14:30:00' to a datetime value.,"SELECT STR_TO_DATE('2023-01-25 14:30:00', '%Y-%m-%d %H:%i:%s');",No specific table schema needed. This is a date/time conversion example.,STR_TO_DATE() converts a string to a date/datetime value based on a specified format string.
Find orders placed in the year 2022 and 2023.,"SELECT order_id, order_date FROM orders WHERE YEAR(order_date) IN (2022, 2023);","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE);",This query uses the YEAR() function to filter orders whose order_date falls within the years 2022 or 2023.
List events that started after 6 PM.,"SELECT event_id, event_name, event_start_datetime FROM events WHERE HOUR(event_start_datetime) >= 18;","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(100), event_start_datetime DATETIME);",This query filters events by extracting the hour component from 'event_start_datetime' and checking if it's 18 (6 PM) or later.
Get the number of days in the month of a specific order date for order ID 105.,"SELECT order_date, DAY(LAST_DAY(order_date)) AS days_in_month FROM orders WHERE order_id = 105;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE);","This combines LAST_DAY() to get the last day of the month, then DAY() to extract the day number, which effectively gives the total days in that month."
Calculate the difference in months between two dates: '2022-01-15' and '2023-07-20'.,"SELECT PERIOD_DIFF(202307, 202201); -- Assuming YYYYMM format for arguments",No specific table schema needed. This is a date calculation example.,PERIOD_DIFF() returns the number of months between periods in YYYYMM or YYMM format. It's a MySQL specific function.
Add 2 years and 3 months to an employee's hire date for employee ID 1.,"SELECT hire_date, DATE_ADD(DATE_ADD(hire_date, INTERVAL 2 YEAR), INTERVAL 3 MONTH) AS adjusted_hire_date FROM employees WHERE employee_id = 1;","CREATE TABLE employees (employee_id INT PRIMARY KEY, hire_date DATE);",This query demonstrates chaining DATE_ADD functions to add different time intervals (years and months) to a date.
Find products manufactured in a leap year.,"SELECT product_id, manufacture_date FROM products WHERE MOD(YEAR(manufacture_date), 4) = 0 AND (MOD(YEAR(manufacture_date), 100) != 0 OR MOD(YEAR(manufacture_date), 400) = 0);","CREATE TABLE products (product_id INT PRIMARY KEY, manufacture_date DATE);","This query identifies leap years using the standard leap year rules: divisible by 4, but not by 100 unless also by 400."
"Create a time value from hours (10), minutes (30), and seconds (00).","SELECT MAKETIME(10, 30, 00);",No specific table schema needed. This is a time construction example.,"MAKETIME() creates a time value from specified hour, minute, and second components."
List all events that span across multiple days.,"SELECT event_id, event_name FROM events WHERE DATE(event_start_datetime) != DATE(event_end_datetime);","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(100), event_start_datetime DATETIME, event_end_datetime DATETIME);","This query checks if the date part of the start datetime is different from the date part of the end datetime, indicating a multi-day event."
Retrieve the current Unix timestamp (seconds since '1970-01-01 00:00:00' UTC).,SELECT UNIX_TIMESTAMP(NOW());,"No specific table schema is required for this query, as it fetches a system value.","UNIX_TIMESTAMP() returns a Unix timestamp, which is the number of seconds since the 'epoch' (1970-01-01 00:00:00 UTC)."
"Convert a Unix timestamp (e.g., 1678886400) back to a readable datetime.",SELECT FROM_UNIXTIME(1678886400);,No specific table schema needed. This is a timestamp conversion example.,FROM_UNIXTIME() converts a Unix timestamp (an integer representing seconds) back into a datetime value.
Find orders placed in the first quarter of any year.,"SELECT order_id, order_date FROM orders WHERE QUARTER(order_date) = 1;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE);",This query filters orders by checking if the quarter of their 'order_date' is the first quarter (1).
List employees whose hiring anniversary is within the next 30 days from today.,"SELECT employee_id, first_name, hire_date FROM employees WHERE (DATE_FORMAT(hire_date, '%m-%d') BETWEEN DATE_FORMAT(CURRENT_DATE(), '%m-%d') AND DATE_FORMAT(DATE_ADD(CURRENT_DATE(), INTERVAL 30 DAY), '%m-%d')) AND MONTH(hire_date) >= MONTH(CURRENT_DATE());","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), hire_date DATE);","This query checks if the month and day of the hire date fall within the current date and 30 days from now, essentially looking for anniversaries soon."
Get the current UTC date and time.,SELECT UTC_TIMESTAMP();,No specific table schema needed. This is a system function.,UTC_TIMESTAMP() returns the current UTC (Coordinated Universal Time) date and time.
Find the next order date after '2023-06-01' for customer ID 5.,SELECT MIN(order_date) AS next_order_date FROM orders WHERE customer_id = 5 AND order_date > '2023-06-01';,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE);",This query uses MIN() to find the earliest order date that is after a specified date for a given customer.
Get products expiring in the next 60 days.,"SELECT product_id, product_name, expiry_date FROM products WHERE expiry_date BETWEEN CURRENT_DATE() AND DATE_ADD(CURRENT_DATE(), INTERVAL 60 DAY);","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(100), expiry_date DATE);",This query filters products by checking if their 'expiry_date' falls within the next 60 days from the current date using the BETWEEN operator.
Calculate the age of an employee in days based on their birth date and current date.,"SELECT employee_id, DATEDIFF(CURRENT_DATE(), birth_date) AS age_in_days FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, birth_date DATE);","DATEDIFF() calculates the difference in days between two dates. Here, it gives the total days an employee has lived."
List orders placed on the 10th day of any month.,"SELECT order_id, order_date FROM orders WHERE DAYOFMONTH(order_date) = 10;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE);","DAYOFMONTH() extracts the day of the month from a date, allowing filtering for orders placed on the 10th."
Retrieve the current date and time as a string in 'YYYYMMDDHHMMSS' format.,"SELECT DATE_FORMAT(NOW(), '%Y%m%d%H%i%s');",No specific table schema needed. This is a system function with formatting.,DATE_FORMAT() is used to convert the current timestamp into a specific string format without separators.
Find the number of completed years an employee has worked since their hire date.,"SELECT employee_id, first_name, TIMESTAMPDIFF(YEAR, hire_date, CURRENT_DATE()) AS years_worked FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), hire_date DATE);","TIMESTAMPDIFF() calculates the full difference in years between the hire date and the current date, representing years of service."
Get the current date as a DATE type.,SELECT CURDATE();,"No specific table schema is required for this query, as it fetches the system's current date.","CURDATE() is an alias for CURRENT_DATE(), returning the current date."
Get the current time as a TIME type.,SELECT CURTIME();,"No specific table schema is required for this query, as it fetches the system's current time.","CURTIME() is an alias for CURRENT_TIME(), returning the current time."
Find the events that started and ended within the same hour on the same day.,"SELECT event_id, event_name FROM events WHERE DATE(event_start_datetime) = DATE(event_end_datetime) AND HOUR(event_start_datetime) = HOUR(event_end_datetime);","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(100), event_start_datetime DATETIME, event_end_datetime DATETIME);",This query filters events where both the date and the hour components of the start and end datetimes are identical.
List employees celebrating their birthday in August.,"SELECT employee_id, first_name, last_name, birth_date FROM employees WHERE MONTH(birth_date) = 8;","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), birth_date DATE);",This query filters employees by checking if the month of their birth date is 8 (August).
Instruction,Query,Table Schema,Explanation
Retrieve all information about all students.,SELECT * FROM Students;,"CREATE TABLE Students (student_id INT, name TEXT, major TEXT, gpa DECIMAL, enrollment_year INT);",This query selects all columns and all rows from the Students table.
List the names and majors of all students.,"SELECT name, major FROM Students;","CREATE TABLE Students (student_id INT, name TEXT, major TEXT, gpa DECIMAL, enrollment_year INT);",This query retrieves only the name and major columns for all students.
Find all courses in the 'Computer Science' department.,SELECT * FROM Courses WHERE department = 'Computer Science';,"CREATE TABLE Courses (course_id INT, course_name TEXT, department TEXT, credits INT);",This query selects all courses where the department column is exactly 'Computer Science'.
Show all faculty members whose salary is greater than 80000.,"SELECT name, department, salary FROM Faculty WHERE salary > 80000;","CREATE TABLE Faculty (faculty_id INT, name TEXT, department TEXT, rank TEXT, salary DECIMAL);","This query retrieves the names, departments, and salaries of faculty members whose salary is strictly greater than 80000."
Get all customers whose last name starts with 'S'.,SELECT * FROM Customers WHERE last_name LIKE 'S%';,"CREATE TABLE Customers (customer_id INT, first_name TEXT, last_name TEXT, email TEXT, city TEXT);",This query fetches all customer records where the last_name begins with the letter 'S'.
Find products that do not have a category assigned.,SELECT * FROM Products WHERE category IS NULL;,"CREATE TABLE Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT);",This query returns all products where the category column has a NULL value.
List all orders with 'Pending' or 'Processing' status.,"SELECT order_id, status FROM Orders WHERE status IN ('Pending', 'Processing');","CREATE TABLE Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT);",This query selects order IDs and statuses for orders that have either 'Pending' or 'Processing' status.
Display all books sorted by their title in ascending order.,SELECT * FROM Books ORDER BY title ASC;,"CREATE TABLE Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL);",This query retrieves all book records and sorts them alphabetically by their title.
Get the 3 cheapest cars.,"SELECT make, model, price FROM Cars ORDER BY price ASC LIMIT 3;","CREATE TABLE Cars (car_id INT, make TEXT, model TEXT, year INT, color TEXT, price DECIMAL);","This query selects make, model, and price, sorts them by price in ascending order, and then limits the result to the first 3 rows."
Show all unique genres of movies.,SELECT DISTINCT genre FROM Movies;,"CREATE TABLE Movies (movie_id INT, title TEXT, director TEXT, genre TEXT, release_year INT, rating DECIMAL);",This query retrieves a list of all unique values present in the 'genre' column of the Movies table.
Retrieve flight numbers for flights departing from 'New York'.,SELECT flight_number FROM Flights WHERE departure_city = 'New York';,"CREATE TABLE Flights (flight_id INT, flight_number TEXT, departure_city TEXT, arrival_city TEXT, departure_time TIME, status TEXT);",This query selects the flight_number for flights where the departure_city is 'New York'.
Find users who are currently active.,"SELECT username, email FROM Users WHERE is_active = TRUE;","CREATE TABLE Users (user_id INT, username TEXT, email TEXT, registration_date DATE, is_active BOOLEAN);",This query retrieves the username and email of users where the 'is_active' column is true.
Display all posts created after 2023-01-01.,"SELECT title, created_at FROM Posts WHERE created_at > '2023-01-01';","CREATE TABLE Posts (post_id INT, user_id INT, title TEXT, content TEXT, created_at DATE);",This query selects titles and creation dates for posts created after the specified date.
Get all comments made by user ID 101.,SELECT comment_text FROM Comments WHERE user_id = 101;,"CREATE TABLE Comments (comment_id INT, post_id INT, user_id INT, comment_text TEXT, created_at DATE);",This query retrieves the text of comments made by the user with ID 101.
Show employees in the 'Sales' or 'Marketing' department.,"SELECT first_name, last_name, department FROM Employees WHERE department IN ('Sales', 'Marketing');","CREATE TABLE Employees (employee_id INT, first_name TEXT, last_name TEXT, department TEXT, position TEXT, salary DECIMAL);","This query selects first name, last name, and department for employees in either 'Sales' or 'Marketing' departments."
List all departments and their locations.,"SELECT dept_name, location FROM Departments;","CREATE TABLE Departments (dept_id INT, dept_name TEXT, location TEXT);",This query retrieves the department names and their locations from the Departments table.
Find projects with a budget less than 100000.,"SELECT project_name, budget FROM Projects WHERE budget < 100000;","CREATE TABLE Projects (project_id INT, project_name TEXT, start_date DATE, end_date DATE, budget DECIMAL);",This query selects project names and budgets for projects where the budget is strictly less than 100000.
Show suppliers located in 'London'.,"SELECT supplier_name, phone FROM Suppliers WHERE city = 'London';","CREATE TABLE Suppliers (supplier_id INT, supplier_name TEXT, contact_person TEXT, city TEXT, phone TEXT);",This query retrieves supplier names and phone numbers for suppliers based in 'London'.
Get inventory items with quantity less than 10.,"SELECT item_name, quantity FROM Inventory WHERE quantity < 10;","CREATE TABLE Inventory (item_id INT, item_name TEXT, supplier_id INT, quantity INT, unit_price DECIMAL);",This query selects item names and quantities for inventory items where the quantity is strictly less than 10.
List events with a ticket price between 20 and 50.,"SELECT event_name, ticket_price FROM Events WHERE ticket_price BETWEEN 20 AND 50;","CREATE TABLE Events (event_id INT, event_name TEXT, event_date DATE, location TEXT, ticket_price DECIMAL);",This query retrieves event names and ticket prices for events where the ticket price is between 20 and 50 (inclusive).
Retrieve all faculty members sorted by salary in descending order.,SELECT * FROM Faculty ORDER BY salary DESC;,"CREATE TABLE Faculty (faculty_id INT, name TEXT, department TEXT, rank TEXT, salary DECIMAL);",This query selects all columns from the Faculty table and orders the results by salary from highest to lowest.
Find students whose GPA is 3.5 or higher.,"SELECT name, gpa FROM Students WHERE gpa >= 3.5;","CREATE TABLE Students (student_id INT, name TEXT, major TEXT, gpa DECIMAL, enrollment_year INT);",This query retrieves names and GPAs for students whose GPA is 3.5 or greater.
List all products that are not in the 'Food' category.,"SELECT product_name, category FROM Products WHERE category <> 'Food';","CREATE TABLE Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT);",This query selects product names and categories for products that are not classified as 'Food'.
Show the oldest 5 orders.,"SELECT order_id, order_date FROM Orders ORDER BY order_date ASC LIMIT 5;","CREATE TABLE Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT);","This query selects order IDs and dates, sorts them by order date in ascending order, and then limits the result to the first 5 rows."
Get unique cities where customers are located.,SELECT DISTINCT city FROM Customers;,"CREATE TABLE Customers (customer_id INT, first_name TEXT, last_name TEXT, email TEXT, city TEXT);",This query retrieves a list of all unique values present in the 'city' column of the Customers table.
Display all books published after 2000.,"SELECT title, author, publication_year FROM Books WHERE publication_year > 2000;","CREATE TABLE Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL);","This query selects titles, authors, and publication years for books published after the year 2000."
Find movies with a rating of 7.0 or higher.,"SELECT title, rating FROM Movies WHERE rating >= 7.0;","CREATE TABLE Movies (movie_id INT, title TEXT, director TEXT, genre TEXT, release_year INT, rating DECIMAL);",This query retrieves titles and ratings for movies with a rating of 7.0 or greater.
List all actors born before 1970.,"SELECT first_name, last_name, birth_year FROM Actors WHERE birth_year < 1970;","CREATE TABLE Actors (actor_id INT, first_name TEXT, last_name TEXT, birth_year INT);","This query selects first names, last names, and birth years for actors born before 1970."
Show cars that are red.,"SELECT make, model FROM Cars WHERE color = 'Red';","CREATE TABLE Cars (car_id INT, make TEXT, model TEXT, year INT, color TEXT, price DECIMAL);",This query retrieves the make and model of cars that have the color 'Red'.
Get all flights with 'Delayed' status.,"SELECT flight_number, departure_city, arrival_city FROM Flights WHERE status = 'Delayed';","CREATE TABLE Flights (flight_id INT, flight_number TEXT, departure_city TEXT, arrival_city TEXT, departure_time TIME, status TEXT);","This query selects flight numbers, departure cities, and arrival cities for flights whose status is 'Delayed'."
"Retrieve usernames and registration dates of all users, ordered by registration date.","SELECT username, registration_date FROM Users ORDER BY registration_date;","CREATE TABLE Users (user_id INT, username TEXT, email TEXT, registration_date DATE, is_active BOOLEAN);","This query selects usernames and registration dates from the Users table, ordered by registration date in ascending order by default."
Find posts containing the word 'SQL' in their title.,"SELECT title, created_at FROM Posts WHERE title LIKE '%SQL%';","CREATE TABLE Posts (post_id INT, user_id INT, title TEXT, content TEXT, created_at DATE);",This query selects titles and creation dates for posts where the title contains the substring 'SQL'.
List comments that are not null.,SELECT comment_text FROM Comments WHERE comment_text IS NOT NULL;,"CREATE TABLE Comments (comment_id INT, post_id INT, user_id INT, comment_text TEXT, created_at DATE);",This query retrieves the text of comments that have a non-NULL value.
Show all employees except those in the 'HR' department.,"SELECT first_name, last_name FROM Employees WHERE department <> 'HR';","CREATE TABLE Employees (employee_id INT, first_name TEXT, last_name TEXT, department TEXT, position TEXT, salary DECIMAL);",This query selects first names and last names for all employees whose department is not 'HR'.
Get projects that started in 2023.,SELECT project_name FROM Projects WHERE start_date BETWEEN '2023-01-01' AND '2023-12-31';,"CREATE TABLE Projects (project_id INT, project_name TEXT, start_date DATE, end_date DATE, budget DECIMAL);",This query selects project names for projects whose start date falls within the year 2023.
Display suppliers whose names start with 'Global'.,SELECT supplier_name FROM Suppliers WHERE supplier_name LIKE 'Global%';,"CREATE TABLE Suppliers (supplier_id INT, supplier_name TEXT, contact_person TEXT, city TEXT, phone TEXT);",This query retrieves supplier names that begin with the word 'Global'.
Find inventory items that cost more than 50.00.,"SELECT item_name, unit_price FROM Inventory WHERE unit_price > 50.00;","CREATE TABLE Inventory (item_id INT, item_name TEXT, supplier_id INT, quantity INT, unit_price DECIMAL);",This query selects item names and unit prices for inventory items with a unit price strictly greater than 50.00.
List events happening in 'Paris'.,"SELECT event_name, event_date FROM Events WHERE location = 'Paris';","CREATE TABLE Events (event_id INT, event_name TEXT, event_date DATE, location TEXT, ticket_price DECIMAL);",This query retrieves event names and dates for events taking place in 'Paris'.
Show student IDs and names for students enrolled in 2022.,"SELECT student_id, name FROM Students WHERE enrollment_year = 2022;","CREATE TABLE Students (student_id INT, name TEXT, major TEXT, gpa DECIMAL, enrollment_year INT);",This query selects the ID and name of students who enrolled in the year 2022.
Get courses with 3 credits.,"SELECT course_name, department FROM Courses WHERE credits = 3;","CREATE TABLE Courses (course_id INT, course_name TEXT, department TEXT, credits INT);",This query retrieves course names and departments for courses that have exactly 3 credits.
Retrieve the name and rank of all faculty members.,"SELECT name, rank FROM Faculty;","CREATE TABLE Faculty (faculty_id INT, name TEXT, department TEXT, rank TEXT, salary DECIMAL);",This query selects the name and rank columns for all faculty members.
Find orders placed by customer ID 5.,"SELECT order_id, total_amount FROM Orders WHERE customer_id = 5;","CREATE TABLE Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT);",This query selects order IDs and total amounts for orders placed by the customer with ID 5.
List products with a stock quantity of 0.,SELECT product_name FROM Products WHERE stock_quantity = 0;,"CREATE TABLE Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT);",This query retrieves product names for products that are out of stock (quantity is 0).
Show all customers registered after 2020-06-30.,"SELECT first_name, last_name, registration_date FROM Customers WHERE registration_date > '2020-06-30';","CREATE TABLE Customers (customer_id INT, first_name TEXT, last_name TEXT, email TEXT, city TEXT, registration_date DATE);","This query selects first names, last names, and registration dates for customers who registered after June 30, 2020."
Get books with 'Fantasy' genre.,"SELECT title, author FROM Books WHERE genre = 'Fantasy';","CREATE TABLE Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL);",This query retrieves titles and authors for books categorized as 'Fantasy'.
Display movies released in the 1990s.,"SELECT title, release_year FROM Movies WHERE release_year BETWEEN 1990 AND 1999;","CREATE TABLE Movies (movie_id INT, title TEXT, director TEXT, genre TEXT, release_year INT, rating DECIMAL);","This query selects titles and release years for movies released between 1990 and 1999, inclusive."
Find actors whose first name is 'Tom'.,"SELECT first_name, last_name FROM Actors WHERE first_name = 'Tom';","CREATE TABLE Actors (actor_id INT, first_name TEXT, last_name TEXT, birth_year INT);",This query selects first names and last names for actors whose first name is 'Tom'.
"List all cars, ordered by year descending.","SELECT make, model, year FROM Cars ORDER BY year DESC;","CREATE TABLE Cars (car_id INT, make TEXT, model TEXT, year INT, color TEXT, price DECIMAL);","This query retrieves the make, model, and year for all cars, sorted by manufacturing year from newest to oldest."
Show the flight status and flight number for all flights.,"SELECT flight_number, status FROM Flights;","CREATE TABLE Flights (flight_id INT, flight_number TEXT, departure_city TEXT, arrival_city TEXT, departure_time TIME, status TEXT);",This query selects the flight number and status for all records in the Flights table.
Get the latest 10 posts.,"SELECT post_id, title FROM Posts ORDER BY created_at DESC LIMIT 10;","CREATE TABLE Posts (post_id INT, user_id INT, title TEXT, content TEXT, created_at DATE);",This query selects the ID and title of the 10 most recently created posts.
Retrieve unique user IDs from comments.,SELECT DISTINCT user_id FROM Comments;,"CREATE TABLE Comments (comment_id INT, post_id INT, user_id INT, comment_text TEXT, created_at DATE);",This query retrieves a list of all unique user IDs that have made comments.
Find employees whose salary is between 50000 and 70000.,"SELECT first_name, last_name, salary FROM Employees WHERE salary BETWEEN 50000 AND 70000;","CREATE TABLE Employees (employee_id INT, first_name TEXT, last_name TEXT, department TEXT, position TEXT, salary DECIMAL);","This query selects first names, last names, and salaries for employees earning between 50000 and 70000, inclusive."
List all department names that contain the word 'Engineering'.,SELECT dept_name FROM Departments WHERE dept_name LIKE '%Engineering%';,"CREATE TABLE Departments (dept_id INT, dept_name TEXT, location TEXT);",This query retrieves department names that contain the substring 'Engineering'.
Show projects that have an end date specified.,SELECT project_name FROM Projects WHERE end_date IS NOT NULL;,"CREATE TABLE Projects (project_id INT, project_name TEXT, start_date DATE, end_date DATE, budget DECIMAL);",This query selects project names for projects where an end date is recorded.
Get contact persons and phone numbers for all suppliers.,"SELECT contact_person, phone FROM Suppliers;","CREATE TABLE Suppliers (supplier_id INT, supplier_name TEXT, contact_person TEXT, city TEXT, phone TEXT);",This query retrieves the contact person and phone number columns for all suppliers.
Retrieve item names and quantities for items last updated in 2024.,"SELECT item_name, quantity FROM Inventory WHERE last_updated BETWEEN '2024-01-01' AND '2024-12-31';","CREATE TABLE Inventory (item_id INT, item_name TEXT, supplier_id INT, quantity INT, unit_price DECIMAL, last_updated DATE);",This query selects item names and quantities for inventory items where the 'last_updated' date falls within the year 2024.
"List events by date, showing the earliest ones first.","SELECT event_name, event_date, location FROM Events ORDER BY event_date ASC;","CREATE TABLE Events (event_id INT, event_name TEXT, event_date DATE, location TEXT, ticket_price DECIMAL);","This query retrieves event names, dates, and locations for all events, sorted by date from earliest to latest."
Show students with a major in 'Physics' or 'Chemistry'.,"SELECT name, major FROM Students WHERE major IN ('Physics', 'Chemistry');","CREATE TABLE Students (student_id INT, name TEXT, major TEXT, gpa DECIMAL, enrollment_year INT);",This query selects names and majors for students whose major is either 'Physics' or 'Chemistry'.
Instruction,Query,Table Schema,Explanation
Retrieve all products that are currently in stock and have a quantity greater than 0.,SELECT * FROM products WHERE in_stock = TRUE AND quantity > 0;,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), quantity INT, in_stock BOOLEAN);","This query selects all columns from the 'products' table where the 'in_stock' column is TRUE and the 'quantity' column is greater than 0, effectively filtering for available products."
Find all employees from the 'Sales' department.,"SELECT employee_id, first_name, last_name FROM employees WHERE department = 'Sales';","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(100), salary DECIMAL(10, 2));","This query retrieves the employee ID, first name, and last name for all employees whose 'department' is 'Sales'."
List all customers who are not located in 'New York'.,"SELECT customer_id, customer_name, city FROM customers WHERE city != 'New York';","CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100), country VARCHAR(100));","This query selects customer ID, name, and city for all customers where the 'city' is not equal to 'New York'."
"Get all orders placed after January 1, 2023.",SELECT * FROM orders WHERE order_date > '2023-01-01';,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));",This query retrieves all orders where the 'order_date' is later than '2023-01-01'.
Show all students whose GPA is less than 3.0.,"SELECT student_id, first_name, last_name, gpa FROM students WHERE gpa < 3.0;","CREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), gpa DECIMAL(3, 2), major VARCHAR(100));","This query selects student ID, first name, last name, and GPA for students with a 'gpa' strictly less than 3.0."
Find all movies released in or after the year 2020.,"SELECT movie_id, title, release_year FROM movies WHERE release_year >= 2020;","CREATE TABLE movies (movie_id INT PRIMARY KEY, title VARCHAR(255), director VARCHAR(100), release_year INT, genre VARCHAR(50));","This query retrieves movie ID, title, and release year for all movies released in 'release_year' 2020 or later."
List books with a price less than or equal to $25.,"SELECT book_id, title, price FROM books WHERE price <= 25.00;","CREATE TABLE books (book_id INT PRIMARY KEY, title VARCHAR(255), author VARCHAR(100), price DECIMAL(10, 2), stock_quantity INT);","This query selects book ID, title, and price for books where the 'price' is less than or equal to 25.00."
Retrieve items from inventory whose name starts with 'Laptop'.,SELECT * FROM inventory WHERE item_name LIKE 'Laptop%';,"CREATE TABLE inventory (item_id INT PRIMARY KEY, item_name VARCHAR(255), category VARCHAR(100), quantity INT, warehouse_location VARCHAR(50));",This query selects all columns from 'inventory' where 'item_name' begins with 'Laptop'.
Show transactions that are either 'completed' or 'shipped'.,"SELECT transaction_id, status, amount FROM transactions WHERE status IN ('completed', 'shipped');","CREATE TABLE transactions (transaction_id INT PRIMARY KEY, customer_id INT, transaction_date DATE, amount DECIMAL(10, 2), status VARCHAR(50));","This query retrieves transaction ID, status, and amount for transactions whose 'status' is either 'completed' or 'shipped'."
Find employees who do not have an assigned manager ID.,"SELECT employee_id, first_name, last_name FROM employees WHERE manager_id IS NULL;","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(100), manager_id INT);","This query selects employee ID, first name, and last name for employees where 'manager_id' is NULL."
List customers who have provided an email address.,"SELECT customer_id, customer_name, email FROM customers WHERE email IS NOT NULL;","CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20));","This query selects customer ID, name, and email for customers where the 'email' column is not NULL."
Get projects that are in 'Active' status and have a budget greater than $10000.,"SELECT project_id, project_name, status, budget FROM projects WHERE status = 'Active' AND budget > 10000;","CREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(255), status VARCHAR(50), budget DECIMAL(12, 2));","This query selects project ID, name, status, and budget for projects that are 'Active' and have a 'budget' over 10000."
Retrieve tasks that are either 'Pending' or 'In Progress' and are due by the end of 2023.,"SELECT task_id, task_name, status, due_date FROM tasks WHERE (status = 'Pending' OR status = 'In Progress') AND due_date <= '2023-12-31';","CREATE TABLE tasks (task_id INT PRIMARY KEY, task_name VARCHAR(255), status VARCHAR(50), due_date DATE, assigned_to INT);",This query retrieves tasks where the 'status' is either 'Pending' or 'In Progress' AND the 'due_date' is on or before '2023-12-31'.
Find departments that are not located in 'Building A' and have more than 50 employees.,"SELECT department_id, department_name, location, num_employees FROM departments WHERE location != 'Building A' AND num_employees > 50;","CREATE TABLE departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100), num_employees INT);","This query selects department ID, name, location, and employee count for departments not in 'Building A' and with more than 50 employees."
Show sales records for products with a 'category' of 'Electronics' or 'Appliances' and a 'sale_amount' between $500 and $1000.,"SELECT sale_id, product_id, sale_amount, sale_date FROM sales WHERE (category = 'Electronics' OR category = 'Appliances') AND sale_amount BETWEEN 500 AND 1000;","CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT, category VARCHAR(100), sale_amount DECIMAL(10, 2), sale_date DATE);","This query filters sales records where the 'category' is 'Electronics' or 'Appliances', AND the 'sale_amount' is between 500 and 1000 (inclusive)."
List events that are scheduled in 'Room 101' and start after 10:00 AM.,"SELECT event_id, event_name, event_date, start_time FROM events WHERE location = 'Room 101' AND start_time > '10:00:00';","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, location VARCHAR(100));","This query selects event ID, name, date, and start time for events in 'Room 101' starting after 10 AM."
Retrieve sensor readings that are out of the normal range (temperature not between 20 and 25 degrees Celsius).,"SELECT reading_id, sensor_id, temperature FROM sensor_readings WHERE temperature NOT BETWEEN 20 AND 25;","CREATE TABLE sensor_readings (reading_id INT PRIMARY KEY, sensor_id INT, temperature DECIMAL(5, 2), humidity DECIMAL(5, 2), reading_time DATETIME);",This query retrieves sensor readings where the 'temperature' is outside the range of 20 to 25 degrees Celsius (exclusive of the range).
Find articles that contain 'database' in their title but not 'SQL'.,"SELECT article_id, title FROM articles WHERE title LIKE '%database%' AND title NOT LIKE '%SQL%';","CREATE TABLE articles (article_id INT PRIMARY KEY, title VARCHAR(255), author VARCHAR(100), publish_date DATE, content TEXT);",This query selects article ID and title for articles where the 'title' contains 'database' but does not contain 'SQL'.
Show vehicles that are 'available' and were manufactured after 2020.,"SELECT vehicle_id, make, model, year, status FROM vehicles WHERE status = 'available' AND year > 2020;","CREATE TABLE vehicles (vehicle_id INT PRIMARY KEY, make VARCHAR(100), model VARCHAR(100), year INT, status VARCHAR(50), mileage INT);","This query retrieves vehicle ID, make, model, year, and status for vehicles whose 'status' is 'available' and 'year' is after 2020."
List patients who are older than 60 or have 'diabetes' as a diagnosis.,"SELECT patient_id, first_name, last_name, age, diagnosis FROM patients WHERE age > 60 OR diagnosis LIKE '%diabetes%';","CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), age INT, gender VARCHAR(10), diagnosis TEXT);","This query selects patient ID, first name, last name, age, and diagnosis for patients who are over 60 years old OR whose 'diagnosis' contains 'diabetes'."
Retrieve employees whose last name begins with 'Sm' and whose salary is above 60000.,"SELECT employee_id, first_name, last_name, salary FROM employees WHERE last_name LIKE 'Sm%' AND salary > 60000;","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(100), salary DECIMAL(10, 2));","This query selects employee ID, first name, last name, and salary for employees whose 'last_name' starts with 'Sm' and 'salary' is greater than 60000."
Find products that are not in the 'Electronics' category and have a price less than $50.,"SELECT product_id, product_name, category, price FROM products WHERE category != 'Electronics' AND price < 50;","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(100), price DECIMAL(10, 2), stock_quantity INT);","This query retrieves product ID, name, category, and price for products that are not in the 'Electronics' category AND have a 'price' less than 50."
Show orders that have a total amount greater than or equal to $500 and were placed in Q3 2023 (July 1 to September 30).,"SELECT order_id, customer_id, order_date, total_amount FROM orders WHERE total_amount >= 500 AND order_date BETWEEN '2023-07-01' AND '2023-09-30';","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));","This query selects order ID, customer ID, order date, and total amount for orders with a 'total_amount' of 500 or more, and placed between July 1 and September 30, 2023 (inclusive)."
List students who are either in 'Computer Science' or 'Engineering' majors and have a GPA of 3.5 or higher.,"SELECT student_id, first_name, last_name, major, gpa FROM students WHERE (major = 'Computer Science' OR major = 'Engineering') AND gpa >= 3.5;","CREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), gpa DECIMAL(3, 2), major VARCHAR(100));","This query retrieves student ID, first name, last name, major, and GPA for students in 'Computer Science' or 'Engineering' majors AND a 'gpa' of 3.5 or higher."
Get movies that are not rated 'PG-13' or 'R' and have a runtime of over 120 minutes.,"SELECT movie_id, title, rating, runtime_minutes FROM movies WHERE rating NOT IN ('PG-13', 'R') AND runtime_minutes > 120;","CREATE TABLE movies (movie_id INT PRIMARY KEY, title VARCHAR(255), director VARCHAR(100), release_year INT, rating VARCHAR(10), runtime_minutes INT);","This query selects movie ID, title, rating, and runtime for movies whose 'rating' is not 'PG-13' or 'R', AND 'runtime_minutes' is greater than 120."
Find books where the author's name contains 'Smith' and the stock quantity is less than 10.,"SELECT book_id, title, author, stock_quantity FROM books WHERE author LIKE '%Smith%' AND stock_quantity < 10;","CREATE TABLE books (book_id INT PRIMARY KEY, title VARCHAR(255), author VARCHAR(100), price DECIMAL(10, 2), stock_quantity INT);","This query retrieves book ID, title, author, and stock quantity for books whose 'author' contains 'Smith' and 'stock_quantity' is less than 10."
Retrieve inventory items with a quantity between 10 and 50 (inclusive) and located in 'Warehouse B'.,"SELECT item_id, item_name, quantity, warehouse_location FROM inventory WHERE quantity BETWEEN 10 AND 50 AND warehouse_location = 'Warehouse B';","CREATE TABLE inventory (item_id INT PRIMARY KEY, item_name VARCHAR(255), category VARCHAR(100), quantity INT, warehouse_location VARCHAR(50));","This query selects item ID, name, quantity, and warehouse location for inventory items with 'quantity' between 10 and 50, and located in 'Warehouse B'."
Show transactions where the amount is exactly $100 or the status is 'refunded'.,"SELECT transaction_id, amount, status FROM transactions WHERE amount = 100.00 OR status = 'refunded';","CREATE TABLE transactions (transaction_id INT PRIMARY KEY, customer_id INT, transaction_date DATE, amount DECIMAL(10, 2), status VARCHAR(50));","This query retrieves transaction ID, amount, and status for transactions where the 'amount' is 100.00 OR the 'status' is 'refunded'."
Find employees whose 'email' is not null and 'phone_number' is not null.,"SELECT employee_id, first_name, email, phone_number FROM employees WHERE email IS NOT NULL AND phone_number IS NOT NULL;","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(255), phone_number VARCHAR(20));","This query selects employee ID, first name, email, and phone number for employees who have both 'email' and 'phone_number' provided (not null)."
List customers who registered in 2022 and have a 'Gold' membership status.,"SELECT customer_id, customer_name, registration_date, membership_status FROM customers WHERE registration_date BETWEEN '2022-01-01' AND '2022-12-31' AND membership_status = 'Gold';","CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), registration_date DATE, membership_status VARCHAR(50));","This query selects customer ID, name, registration date, and membership status for customers registered in 2022 and with 'Gold' membership."
Get projects that are due this month (October 2023) and are not yet 'Completed'.,"SELECT project_id, project_name, due_date, status FROM projects WHERE due_date BETWEEN '2023-10-01' AND '2023-10-31' AND status != 'Completed';","CREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(255), status VARCHAR(50), due_date DATE, assigned_to INT);","This query retrieves project ID, name, due date, and status for projects due in October 2023 and whose 'status' is not 'Completed'."
Show tasks that were created on '2023-09-15' and are assigned to 'John Doe' (assuming employee_id 101).,"SELECT task_id, task_name, created_date, assigned_to FROM tasks WHERE created_date = '2023-09-15' AND assigned_to = 101;","CREATE TABLE tasks (task_id INT PRIMARY KEY, task_name VARCHAR(255), created_date DATE, due_date DATE, assigned_to INT);","This query selects task ID, name, creation date, and assigned person for tasks created on '2023-09-15' and assigned to employee ID 101."
Find departments that have 'HR' in their name and are located in 'Floor 2'.,"SELECT department_id, department_name, location FROM departments WHERE department_name LIKE '%HR%' AND location = 'Floor 2';","CREATE TABLE departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100), num_employees INT);","This query retrieves department ID, name, and location for departments with 'HR' in their name and located on 'Floor 2'."
"Retrieve sales records with a 'product_id' of 10 or 20, and a 'sale_amount' greater than $100.","SELECT sale_id, product_id, sale_amount FROM sales WHERE product_id IN (10, 20) AND sale_amount > 100;","CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT, category VARCHAR(100), sale_amount DECIMAL(10, 2), sale_date DATE);","This query selects sale ID, product ID, and sale amount for sales where 'product_id' is 10 or 20, AND 'sale_amount' is greater than 100."
Show events that are not 'private' and have attendance greater than 50.,"SELECT event_id, event_name, type, attendance FROM events WHERE type != 'private' AND attendance > 50;","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(255), event_date DATE, type VARCHAR(50), attendance INT);","This query retrieves event ID, name, type, and attendance for events that are not 'private' and have more than 50 attendees."
List sensor readings where 'humidity' is less than 30 or greater than 70.,"SELECT reading_id, sensor_id, humidity FROM sensor_readings WHERE humidity < 30 OR humidity > 70;","CREATE TABLE sensor_readings (reading_id INT PRIMARY KEY, sensor_id INT, temperature DECIMAL(5, 2), humidity DECIMAL(5, 2), reading_time DATETIME);","This query selects reading ID, sensor ID, and humidity for readings where 'humidity' is either below 30 or above 70."
Find articles published in 2023 whose author is not 'Jane Doe'.,"SELECT article_id, title, author, publish_date FROM articles WHERE publish_date BETWEEN '2023-01-01' AND '2023-12-31' AND author != 'Jane Doe';","CREATE TABLE articles (article_id INT PRIMARY KEY, title VARCHAR(255), author VARCHAR(100), publish_date DATE, content TEXT);","This query retrieves article ID, title, author, and publish date for articles published in 2023 and whose 'author' is not 'Jane Doe'."
Retrieve vehicles that have a mileage greater than 100000 and were manufactured before 2010.,"SELECT vehicle_id, make, model, year, mileage FROM vehicles WHERE mileage > 100000 AND year < 2010;","CREATE TABLE vehicles (vehicle_id INT PRIMARY KEY, make VARCHAR(100), model VARCHAR(100), year INT, status VARCHAR(50), mileage INT);","This query selects vehicle ID, make, model, year, and mileage for vehicles with 'mileage' over 100000 and 'year' before 2010."
List patients who are male and have a 'blood_type' of 'O-'.,"SELECT patient_id, first_name, last_name, gender, blood_type FROM patients WHERE gender = 'Male' AND blood_type = 'O-';","CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), age INT, gender VARCHAR(10), blood_type VARCHAR(5));","This query retrieves patient ID, first name, last name, gender, and blood type for male patients with blood type 'O-'."
Get users whose usernames start with 'user_' and were created after '2023-05-01'.,"SELECT user_id, username, created_at FROM users WHERE username LIKE 'user_%' AND created_at > '2023-05-01';","CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), created_at DATETIME, is_active BOOLEAN);","This query selects user ID, username, and creation timestamp for users whose 'username' starts with 'user_' and were created after May 1, 2023."
Find products with a 'price' between 10 and 50 dollars (inclusive) and a 'category' of 'Apparel'.,"SELECT product_id, product_name, price, category FROM products WHERE price BETWEEN 10 AND 50 AND category = 'Apparel';","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10, 2), category VARCHAR(100), stock_quantity INT);","This query retrieves product ID, name, price, and category for products with 'price' between 10 and 50 dollars and 'category' as 'Apparel'."
Show orders that are in 'pending' status and have a 'customer_id' greater than 500.,"SELECT order_id, customer_id, status FROM orders WHERE status = 'pending' AND customer_id > 500;","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));","This query selects order ID, customer ID, and status for orders in 'pending' status with a 'customer_id' greater than 500."
List students who are not in 'Freshman' year and have a 'major' of 'Biology'.,"SELECT student_id, first_name, last_name, academic_year, major FROM students WHERE academic_year != 'Freshman' AND major = 'Biology';","CREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), academic_year VARCHAR(50), major VARCHAR(100));","This query retrieves student ID, first name, last name, academic year, and major for students not in 'Freshman' year and majoring in 'Biology'."
Get movies where the 'director' is 'Christopher Nolan' or the 'genre' is 'Sci-Fi'.,"SELECT movie_id, title, director, genre FROM movies WHERE director = 'Christopher Nolan' OR genre = 'Sci-Fi';","CREATE TABLE movies (movie_id INT PRIMARY KEY, title VARCHAR(255), director VARCHAR(100), release_year INT, genre VARCHAR(50));","This query selects movie ID, title, director, and genre for movies directed by 'Christopher Nolan' OR whose 'genre' is 'Sci-Fi'."
Find books that have a 'stock_quantity' of exactly 0.,"SELECT book_id, title, stock_quantity FROM books WHERE stock_quantity = 0;","CREATE TABLE books (book_id INT PRIMARY KEY, title VARCHAR(255), author VARCHAR(100), price DECIMAL(10, 2), stock_quantity INT);","This query retrieves book ID, title, and stock quantity for books where the 'stock_quantity' is exactly 0 (out of stock)."
Retrieve inventory items whose 'warehouse_location' is 'A' or 'C' and 'quantity' is less than 5.,"SELECT item_id, item_name, warehouse_location, quantity FROM inventory WHERE (warehouse_location = 'A' OR warehouse_location = 'C') AND quantity < 5;","CREATE TABLE inventory (item_id INT PRIMARY KEY, item_name VARCHAR(255), category VARCHAR(100), quantity INT, warehouse_location VARCHAR(50));","This query selects item ID, name, location, and quantity for inventory items located in 'A' or 'C' and with 'quantity' less than 5."
Show transactions that occurred on '2023-08-10' and have an 'amount' greater than or equal to $200.,"SELECT transaction_id, transaction_date, amount FROM transactions WHERE transaction_date = '2023-08-10' AND amount >= 200;","CREATE TABLE transactions (transaction_id INT PRIMARY KEY, customer_id INT, transaction_date DATE, amount DECIMAL(10, 2), status VARCHAR(50));","This query retrieves transaction ID, date, and amount for transactions that occurred on '2023-08-10' and had an 'amount' of $200 or more."
List employees who were hired before 2020 and are in the 'Marketing' department.,"SELECT employee_id, first_name, last_name, hire_date, department FROM employees WHERE hire_date < '2020-01-01' AND department = 'Marketing';","CREATE TABLE employees (employee_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), department VARCHAR(100), hire_date DATE);","This query selects employee ID, first name, last name, hire date, and department for employees hired before 2020 and in the 'Marketing' department."
Find customers whose 'phone_number' starts with '555' and 'country' is 'USA'.,"SELECT customer_id, customer_name, phone_number, country FROM customers WHERE phone_number LIKE '555%' AND country = 'USA';","CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100), country VARCHAR(100), phone_number VARCHAR(20));","This query retrieves customer ID, name, phone number, and country for customers whose 'phone_number' starts with '555' and 'country' is 'USA'."
Get projects that have a 'status' of 'On Hold' and were 'start_date' after '2023-01-01'.,"SELECT project_id, project_name, status, start_date FROM projects WHERE status = 'On Hold' AND start_date > '2023-01-01';","CREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(255), status VARCHAR(50), start_date DATE, budget DECIMAL(12, 2));","This query selects project ID, name, status, and start date for projects that are 'On Hold' and started after '2023-01-01'."
Show tasks that have a 'priority' of 'High' and are not 'completed'.,"SELECT task_id, task_name, priority, status FROM tasks WHERE priority = 'High' AND status != 'completed';","CREATE TABLE tasks (task_id INT PRIMARY KEY, task_name VARCHAR(255), status VARCHAR(50), priority VARCHAR(50), due_date DATE);","This query retrieves task ID, name, priority, and status for tasks with 'High' priority and not yet 'completed'."
List departments that have 'Headquarters' as their 'location' and 'num_employees' less than 20.,"SELECT department_id, department_name, location, num_employees FROM departments WHERE location = 'Headquarters' AND num_employees < 20;","CREATE TABLE departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100), num_employees INT);","This query selects department ID, name, location, and employee count for departments located at 'Headquarters' and having fewer than 20 employees."
"Retrieve sales records where the 'sale_amount' is exactly 0 (e.g., free samples) and 'product_id' is 5.","SELECT sale_id, product_id, sale_amount FROM sales WHERE sale_amount = 0 AND product_id = 5;","CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT, category VARCHAR(100), sale_amount DECIMAL(10, 2), sale_date DATE);","This query retrieves sale ID, product ID, and sale amount for sales where the 'sale_amount' is 0 and 'product_id' is 5."
Find events that have 'Conference' in their name and an 'event_date' in November 2023.,"SELECT event_id, event_name, event_date FROM events WHERE event_name LIKE '%Conference%' AND event_date BETWEEN '2023-11-01' AND '2023-11-30';","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(255), event_date DATE, location VARCHAR(100));","This query selects event ID, name, and date for events with 'Conference' in their name and an 'event_date' in November 2023."
Show sensor readings taken on '2023-09-20' with a 'temperature' above 30 degrees.,"SELECT reading_id, sensor_id, temperature, reading_time FROM sensor_readings WHERE reading_time >= '2023-09-20 00:00:00' AND reading_time < '2023-09-21 00:00:00' AND temperature > 30;","CREATE TABLE sensor_readings (reading_id INT PRIMARY KEY, sensor_id INT, temperature DECIMAL(5, 2), humidity DECIMAL(5, 2), reading_time DATETIME);","This query retrieves reading ID, sensor ID, temperature, and reading time for readings taken on '2023-09-20' with 'temperature' greater than 30."
List articles written by 'Author B' and published before '2023-01-01'.,"SELECT article_id, title, author, publish_date FROM articles WHERE author = 'Author B' AND publish_date < '2023-01-01';","CREATE TABLE articles (article_id INT PRIMARY KEY, title VARCHAR(255), author VARCHAR(100), publish_date DATE, content TEXT);","This query selects article ID, title, author, and publish date for articles written by 'Author B' and published before '2023-01-01'."
Get vehicles that are 'red' or 'blue' and have a 'status' of 'sold'.,"SELECT vehicle_id, make, model, color, status FROM vehicles WHERE (color = 'red' OR color = 'blue') AND status = 'sold';","CREATE TABLE vehicles (vehicle_id INT PRIMARY KEY, make VARCHAR(100), model VARCHAR(100), year INT, color VARCHAR(50), status VARCHAR(50));","This query retrieves vehicle ID, make, model, color, and status for vehicles that are 'red' or 'blue' AND whose 'status' is 'sold'."
Find patients who have 'allergies' listed as non-null and whose 'age' is less than 18.,"SELECT patient_id, first_name, last_name, age, allergies FROM patients WHERE allergies IS NOT NULL AND age < 18;","CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), age INT, gender VARCHAR(10), allergies TEXT);","This query selects patient ID, first name, last name, age, and allergies for patients with non-null 'allergies' and an 'age' less than 18."
Retrieve users who are 'active' and have an 'email' ending with '.org'.,"SELECT user_id, username, email FROM users WHERE is_active = TRUE AND email LIKE '%.org';","CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(50), email VARCHAR(255), created_at DATETIME, is_active BOOLEAN);","This query retrieves user ID, username, and email for active users whose 'email' ends with '.org'."
Instruction,Query,Table Schema,Explanation
List the names of employees and the departments they belong to.,"SELECT E.EmployeeName, D.DepartmentName FROM Employees E INNER JOIN Departments D ON E.DepartmentID = D.DepartmentID;","Employees(EmployeeID, EmployeeName, DepartmentID), Departments(DepartmentID, DepartmentName)",This query retrieves employee names and their corresponding department names by joining the Employees and Departments tables on their common DepartmentID.
"Find the names of customers who have placed orders, along with their order IDs, specifically for orders placed after January 1, 2023.","SELECT C.CustomerName, O.OrderID FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID WHERE O.OrderDate > '2023-01-01';","Customers(CustomerID, CustomerName), Orders(OrderID, CustomerID, OrderDate)","This query joins Customers and Orders tables to get customer names and order IDs, then filters for orders placed after a specific date."
Show the total number of products ordered for each order.,"SELECT O.OrderID, SUM(OI.Quantity) AS TotalProducts FROM Orders O INNER JOIN OrderItems OI ON O.OrderID = OI.OrderID GROUP BY O.OrderID;","Orders(OrderID, CustomerID, OrderDate), OrderItems(OrderItemID, OrderID, ProductID, Quantity)","This query joins Orders with OrderItems to sum the quantity of products for each order, grouped by OrderID."
"List the names of students, their courses, and the instructors teaching those courses.","SELECT S.StudentName, C.CourseName, I.InstructorName FROM Students S INNER JOIN Enrollments E ON S.StudentID = E.StudentID INNER JOIN Courses C ON E.CourseID = C.CourseID INNER JOIN Instructors I ON C.InstructorID = I.InstructorID;","Students(StudentID, StudentName), Enrollments(EnrollmentID, StudentID, CourseID), Courses(CourseID, CourseName, InstructorID), Instructors(InstructorID, InstructorName)","This query joins four tables (Students, Enrollments, Courses, Instructors) to connect students to courses and then to their instructors."
Retrieve all department names and any employees who belong to them. Include departments even if they have no employees.,"SELECT D.DepartmentName, E.EmployeeName FROM Departments D LEFT JOIN Employees E ON D.DepartmentID = E.DepartmentID;","Departments(DepartmentID, DepartmentName), Employees(EmployeeID, EmployeeName, DepartmentID)","This query uses a LEFT JOIN to list all departments and their employees. If a department has no employees, the EmployeeName will be NULL."
Find customers who have not placed any orders.,SELECT C.CustomerName FROM Customers C LEFT JOIN Orders O ON C.CustomerID = O.CustomerID WHERE O.OrderID IS NULL;,"Customers(CustomerID, CustomerName), Orders(OrderID, CustomerID, OrderDate)","This query uses a LEFT JOIN to include all customers. By checking for NULL OrderID from the Orders table, it identifies customers who have no matching orders."
List all products and any order items they are part of. Include products even if they have not been ordered.,"SELECT P.ProductName, OI.OrderItemID FROM OrderItems OI RIGHT JOIN Products P ON OI.ProductID = P.ProductID;","OrderItems(OrderItemID, OrderID, ProductID, Quantity), Products(ProductID, ProductName, Price)","This query uses a RIGHT JOIN to list all products and their associated order items. If a product has no order items, OrderItemID will be NULL."
"List all departments and all employees, showing which employee belongs to which department, and also listing departments without employees and employees without departments.","SELECT D.DepartmentName, E.EmployeeName FROM Departments D FULL OUTER JOIN Employees E ON D.DepartmentID = E.DepartmentID;","Departments(DepartmentID, DepartmentName), Employees(EmployeeID, EmployeeName, DepartmentID)","This query uses a FULL OUTER JOIN to combine all departments and all employees. It shows matches, and also lists departments with no employees and employees with no department (with NULLs in the corresponding columns)."
Generate all possible pairings of products and colors.,"SELECT P.ProductName, C.ColorName FROM Products P CROSS JOIN Colors C;","Products(ProductID, ProductName), Colors(ColorID, ColorName)","This query uses a CROSS JOIN to create a Cartesian product, returning every possible combination of a product name and a color name."
Find orders that contain 'Laptop' and were placed by a customer named 'John Doe'.,SELECT O.OrderID FROM Orders O INNER JOIN Customers C ON O.CustomerID = C.CustomerID INNER JOIN OrderItems OI ON O.OrderID = OI.OrderID INNER JOIN Products P ON OI.ProductID = P.ProductID WHERE C.CustomerName = 'John Doe' AND P.ProductName = 'Laptop';,"Orders(OrderID, CustomerID, OrderDate), Customers(CustomerID, CustomerName), OrderItems(OrderItemID, OrderID, ProductID, Quantity), Products(ProductID, ProductName)","This query joins four tables to link orders to customers and products, then filters based on customer name and product name."
"For each customer, list their name and the total number of orders they have placed. Include customers who have placed no orders, showing 0 for them.","SELECT C.CustomerName, COUNT(O.OrderID) AS TotalOrders FROM Customers C LEFT JOIN Orders O ON C.CustomerID = O.CustomerID GROUP BY C.CustomerName ORDER BY C.CustomerName;","Customers(CustomerID, CustomerName), Orders(OrderID, CustomerID, OrderDate)","This query uses a LEFT JOIN to ensure all customers are included. COUNT(O.OrderID) will count only non-NULL OrderIDs, correctly returning 0 for customers with no orders."
List each employee and their manager's name.,"SELECT E.EmployeeName AS Employee, M.EmployeeName AS Manager FROM Employees E INNER JOIN Employees M ON E.ManagerID = M.EmployeeID;","Employees(EmployeeID, EmployeeName, ManagerID)",This query uses a self-join on the Employees table to match employees with their managers based on the ManagerID and EmployeeID.
"List each employee and their manager's name, including employees who do not have a manager (e.g., the CEO).","SELECT E.EmployeeName AS Employee, M.EmployeeName AS Manager FROM Employees E LEFT JOIN Employees M ON E.ManagerID = M.EmployeeID;","Employees(EmployeeID, EmployeeName, ManagerID)","This query uses a LEFT self-join on the Employees table to list employees and their managers, including those at the top of the hierarchy who have no manager (their Manager will be NULL)."
Retrieve the titles of books published by 'Penguin Random House'.,SELECT B.Title FROM Books B INNER JOIN Publishers P ON B.PublisherID = P.PublisherID WHERE P.PublisherName = 'Penguin Random House';,"Books(BookID, Title, PublisherID), Publishers(PublisherID, PublisherName)",This query joins Books and Publishers tables to filter books by a specific publisher name.
"For each product category, find the average price of products available and the total number of products in that category.","SELECT C.CategoryName, AVG(P.Price) AS AveragePrice, COUNT(P.ProductID) AS NumberOfProducts FROM Categories C INNER JOIN Products P ON C.CategoryID = P.CategoryID GROUP BY C.CategoryName;","Categories(CategoryID, CategoryName), Products(ProductID, ProductName, CategoryID, Price)",This query joins Categories and Products to calculate the average price and count of products for each category.
List all events and their venues that occurred in the year 2023.,"SELECT E.EventName, V.VenueName FROM Events E INNER JOIN Venues V ON E.VenueID = V.VenueID WHERE E.EventDate BETWEEN '2023-01-01' AND '2023-12-31';","Events(EventID, EventName, EventDate, VenueID), Venues(VenueID, VenueName)",This query joins Events and Venues and filters for events occurring within a specific date range.
"For each author, list their name and the number of books they have written. Show 0 for authors who haven't written any books in the database.","SELECT A.AuthorName, COUNT(B.BookID) AS NumberOfBooks FROM Authors A LEFT JOIN Books B ON A.AuthorID = B.AuthorID GROUP BY A.AuthorName;","Authors(AuthorID, AuthorName), Books(BookID, Title, AuthorID)","This query uses a LEFT JOIN to include all authors, then counts the number of books associated with each author. Authors with no books will correctly show 0."
Find pairs of products that share the exact same description.,"SELECT P1.ProductName AS Product1, P2.ProductName AS Product2 FROM Products P1 INNER JOIN Products P2 ON P1.ProductDescription = P2.ProductDescription AND P1.ProductID < P2.ProductID;","Products(ProductID, ProductName, ProductDescription)","This query performs a self-join on the Products table to find products with identical descriptions, excluding identical pairs and duplicate orderings using P1.ProductID < P2.ProductID."
"List employees and their department names, but only for departments that have more than 5 employees.","SELECT E.EmployeeName, D.DepartmentName FROM Employees E INNER JOIN (SELECT DepartmentID FROM Employees GROUP BY DepartmentID HAVING COUNT(EmployeeID) > 5) AS HighCountDepartments ON E.DepartmentID = HighCountDepartments.DepartmentID INNER JOIN Departments D ON E.DepartmentID = D.DepartmentID;","Employees(EmployeeID, EmployeeName, DepartmentID), Departments(DepartmentID, DepartmentName)","This query first identifies departments with more than 5 employees using a subquery, then joins Employees and Departments with the result to show employees in those specific departments."
"List all users and their most recent login date. If a user has never logged in, show NULL for their login date.","SELECT U.UserName, MAX(L.LoginDate) AS LastLoginDate FROM Users U LEFT JOIN Logins L ON U.UserID = L.UserID GROUP BY U.UserID, U.UserName ORDER BY U.UserName;","Users(UserID, UserName), Logins(LoginID, UserID, LoginDate)","This query uses a LEFT JOIN to include all users, then groups by user to find the maximum (most recent) login date for each. Users without any logins will have a NULL LastLoginDate."
List the names of customers who have bought 'ProductX'.,SELECT DISTINCT C.CustomerName FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID INNER JOIN OrderItems OI ON O.OrderID = OI.OrderID INNER JOIN Products P ON OI.ProductID = P.ProductID WHERE P.ProductName = 'ProductX';,"Customers(CustomerID, CustomerName), Orders(OrderID, CustomerID), OrderItems(OrderItemID, OrderID, ProductID), Products(ProductID, ProductName)","This query joins Customers, Orders, OrderItems, and Products tables to find customers who have purchased a specific product. DISTINCT is used to avoid listing a customer multiple times if they bought the product in different orders."
Find the department with the highest average employee salary.,"SELECT D.DepartmentName, AVG(E.Salary) AS AverageSalary FROM Departments D INNER JOIN Employees E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentName ORDER BY AverageSalary DESC LIMIT 1;","Departments(DepartmentID, DepartmentName), Employees(EmployeeID, EmployeeName, DepartmentID, Salary)","This query joins Departments and Employees, calculates the average salary for each department, and then orders by average salary in descending order to get the department with the highest average, taking only the top result."
"Retrieve all employees and their projects, but only show projects that are 'Active'. Include employees not assigned to any 'Active' project.","SELECT E.EmployeeName, P.ProjectName FROM Employees E LEFT JOIN EmployeeProjects EP ON E.EmployeeID = EP.EmployeeID LEFT JOIN Projects P ON EP.ProjectID = P.ProjectID AND P.Status = 'Active';","Employees(EmployeeID, EmployeeName), EmployeeProjects(EmployeeProjectID, EmployeeID, ProjectID), Projects(ProjectID, ProjectName, Status)","This query uses LEFT JOINs. The condition P.Status = 'Active' is in the ON clause for the Projects table. This ensures that all employees are included, and project details are only joined if the project is 'Active'. If an employee is assigned to an 'Inactive' project, or no project, the ProjectName will be NULL."
List product names that have been ordered by customers from both 'Region A' and 'Region B'.,"SELECT P.ProductName FROM Products P INNER JOIN OrderItems OI ON P.ProductID = OI.ProductID INNER JOIN Orders O ON OI.OrderID = O.OrderID INNER JOIN Customers C ON O.CustomerID = C.CustomerID WHERE C.Region IN ('Region A', 'Region B') GROUP BY P.ProductName HAVING COUNT(DISTINCT C.Region) = 2;","Products(ProductID, ProductName), OrderItems(OrderItemID, OrderID, ProductID), Orders(OrderID, CustomerID), Customers(CustomerID, CustomerName, Region)","This query joins Products, OrderItems, Orders, and Customers. It filters for orders from 'Region A' or 'Region B', then groups by product name. The HAVING clause ensures that only products ordered by customers from *both* regions are included by counting distinct regions for each product."
List all courses and identify which ones have no students enrolled.,SELECT C.CourseName FROM Enrollments E RIGHT JOIN Courses C ON E.CourseID = C.CourseID WHERE E.StudentID IS NULL;,"Enrollments(EnrollmentID, StudentID, CourseID), Courses(CourseID, CourseName)","This query uses a RIGHT JOIN to include all courses. By checking for a NULL StudentID from the Enrollments table, it identifies courses that have no matching enrollments."
"Find customers who have not placed any orders, and orders that belong to non-existent customers (data anomaly).","SELECT C.CustomerName, O.OrderID FROM Customers C FULL OUTER JOIN Orders O ON C.CustomerID = O.CustomerID WHERE C.CustomerID IS NULL OR O.OrderID IS NULL;","Customers(CustomerID, CustomerName), Orders(OrderID, CustomerID)","This query uses a FULL OUTER JOIN to combine all customers and all orders. The WHERE clause then filters for rows where a customer has no matching order (O.OrderID IS NULL) or an order has no matching customer (C.CustomerID IS NULL), identifying unplaced customers or orphaned orders."
"For each department, list the employee with the highest salary.","SELECT D.DepartmentName, E.EmployeeName, E.Salary FROM Departments D INNER JOIN Employees E ON D.DepartmentID = E.DepartmentID WHERE (E.DepartmentID, E.Salary) IN (SELECT DepartmentID, MAX(Salary) FROM Employees GROUP BY DepartmentID);","Departments(DepartmentID, DepartmentName), Employees(EmployeeID, EmployeeName, DepartmentID, Salary)","This query first finds the maximum salary for each department using a subquery. Then, it joins Departments and Employees and filters for employees whose salary matches the maximum for their department."
"For each category, count how many distinct products are in it.","SELECT C.CategoryName, COUNT(DISTINCT P.ProductID) AS DistinctProducts FROM Categories C INNER JOIN Products P ON C.CategoryID = P.CategoryID GROUP BY C.CategoryName;","Categories(CategoryID, CategoryName), Products(ProductID, ProductName, CategoryID)",This query joins Categories and Products and then counts the distinct ProductIDs for each category.
List all stores and the number of sales they made in 'Q1 2023'.,"SELECT S.StoreName, COUNT(CASE WHEN SaleDate BETWEEN '2023-01-01' AND '2023-03-31' THEN Sa.SaleID ELSE NULL END) AS Q1_2023_Sales FROM Stores S LEFT JOIN Sales Sa ON S.StoreID = Sa.StoreID GROUP BY S.StoreName;","Stores(StoreID, StoreName), Sales(SaleID, StoreID, SaleDate)","This query uses a LEFT JOIN to ensure all stores are listed. It then uses a conditional count (CASE WHEN) to count sales only within 'Q1 2023', showing 0 for stores with no such sales."
Get the names of movies and their directors.,"SELECT M.MovieTitle, D.DirectorName FROM Movies M INNER JOIN Directors D ON M.DirectorID = D.DirectorID;","Movies(MovieID, MovieTitle, DirectorID), Directors(DirectorID, DirectorName)",This query joins Movies and Directors tables using aliases (M and D) to retrieve movie titles and their corresponding director names.
Find customers who have placed at least one order.,SELECT DISTINCT C.CustomerName FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID;,"Customers(CustomerID, CustomerName), Orders(OrderID, CustomerID)","This query uses an INNER JOIN to return only customers who have a matching record in the Orders table, thus having placed at least one order. DISTINCT prevents duplicate customer names."
"List all projects and the employees assigned to them. For projects with no employees, show NULL for employee details.","SELECT P.ProjectName, E.EmployeeName FROM Projects P LEFT JOIN EmployeeProjects EP ON P.ProjectID = EP.ProjectID LEFT JOIN Employees E ON EP.EmployeeID = E.EmployeeID;","Projects(ProjectID, ProjectName), EmployeeProjects(EmployeeProjectID, ProjectID, EmployeeID), Employees(EmployeeID, EmployeeName)","This query uses LEFT JOINs to link projects to employees through the EmployeeProjects table. All projects are included, and if a project has no associated employees, the EmployeeName will be NULL."
Find users who have both 'Read' and 'Write' permissions on the same resource.,SELECT DISTINCT U.UserName FROM Users U INNER JOIN Permissions P1 ON U.UserID = P1.UserID INNER JOIN Permissions P2 ON U.UserID = P2.UserID AND P1.ResourceID = P2.ResourceID WHERE P1.PermissionType = 'Read' AND P2.PermissionType = 'Write';,"Users(UserID, UserName), Permissions(PermissionID, UserID, ResourceID, PermissionType)","This query uses a self-join on the Permissions table to find users who have both 'Read' and 'Write' permissions on the *same* resource, linking them back to the Users table."
"For each city, count the number of active users. Include cities with no active users (count 0).","SELECT C.CityName, COUNT(CASE WHEN U.Status = 'Active' THEN U.UserID ELSE NULL END) AS ActiveUserCount FROM Cities C LEFT JOIN Users U ON C.CityID = U.CityID GROUP BY C.CityName;","Cities(CityID, CityName), Users(UserID, UserName, CityID, Status)","This query uses a LEFT JOIN to include all cities. It then conditionally counts only 'Active' users within each city, displaying 0 for cities with no active users."
List products and their categories.,"SELECT P.ProductName, C.CategoryName FROM Products P INNER JOIN Categories C USING(CategoryID);","Products(ProductID, ProductName, CategoryID), Categories(CategoryID, CategoryName)","This query joins Products and Categories tables using the `USING` clause, which is a shorthand for `ON P.CategoryID = C.CategoryID` when both tables share the same column name for the join key."
"Find departments where the total salary of employees exceeds $1,000,000.","SELECT D.DepartmentName, SUM(E.Salary) AS TotalSalary FROM Departments D INNER JOIN Employees E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentName HAVING SUM(E.Salary) > 1000000;","Departments(DepartmentID, DepartmentName), Employees(EmployeeID, EmployeeName, DepartmentID, Salary)","This query joins Departments and Employees, sums the salaries for each department, and then filters the results to show only departments where the total salary is greater than $1,000,000."
List all orders and mark if they have any associated items. Mark 'No Items' if none.,"SELECT O.OrderID, O.OrderDate, CASE WHEN OI.OrderItemID IS NULL THEN 'No Items' ELSE 'Has Items' END AS HasItems FROM Orders O LEFT JOIN OrderItems OI ON O.OrderID = OI.OrderID GROUP BY O.OrderID, O.OrderDate;","Orders(OrderID, OrderDate), OrderItems(OrderItemID, OrderID)","This query uses a LEFT JOIN to include all orders. It then uses a CASE statement to check if any OrderItemID from the joined OrderItems table is NULL, indicating no items for that order."
Display customer orders with the product name for each item.,"SELECT C.CustomerName, O.OrderID, P.ProductName, OI.Quantity FROM Customers C INNER JOIN Orders O ON C.CustomerID = O.CustomerID INNER JOIN OrderItems OI ON O.OrderID = OI.OrderID INNER JOIN Products P ON OI.ProductID = P.ProductID;","Customers(CustomerID, CustomerName), Orders(OrderID, CustomerID), OrderItems(OrderItemID, OrderID, ProductID, Quantity), Products(ProductID, ProductName)","This query joins four tables to combine customer, order, order item, and product information, showing the product name for each item in an order."
Find employees who are assigned to both 'Project Alpha' and 'Project Beta'.,SELECT DISTINCT E.EmployeeName FROM Employees E INNER JOIN EmployeeProjects EP1 ON E.EmployeeID = EP1.EmployeeID INNER JOIN Projects P1 ON EP1.ProjectID = P1.ProjectID AND P1.ProjectName = 'Project Alpha' INNER JOIN EmployeeProjects EP2 ON E.EmployeeID = EP2.EmployeeID INNER JOIN Projects P2 ON EP2.ProjectID = P2.ProjectID AND P2.ProjectName = 'Project Beta';,"Employees(EmployeeID, EmployeeName), EmployeeProjects(EmployeeProjectID, EmployeeID, ProjectID), Projects(ProjectID, ProjectName)","This query uses multiple INNER JOINs, effectively creating two separate paths to link employees to projects 'Project Alpha' and 'Project Beta' simultaneously, ensuring the employee is associated with both."
List all courses and their enrollment count. Also show the average enrollment count across all courses.,"SELECT C.CourseName, COUNT(E.EnrollmentID) AS EnrollmentCount, (SELECT AVG(EnrollmentCount) FROM (SELECT COUNT(EnrollmentID) AS EnrollmentCount FROM Enrollments GROUP BY CourseID) AS AvgCounts) AS OverallAverageEnrollment FROM Courses C LEFT JOIN Enrollments E ON C.CourseID = E.CourseID GROUP BY C.CourseName;","Courses(CourseID, CourseName), Enrollments(EnrollmentID, CourseID, StudentID)","This query uses a LEFT JOIN to count enrollments for each course, including those with zero enrollments. A subquery in the SELECT clause calculates the overall average enrollment count across all courses for comparison."
Find orders that include either 'Laptop' or 'Mouse'.,SELECT DISTINCT O.OrderID FROM Orders O INNER JOIN OrderItems OI ON O.OrderID = OI.OrderID INNER JOIN Products P ON OI.ProductID = P.ProductID WHERE P.ProductName = 'Laptop' OR P.ProductName = 'Mouse';,"Orders(OrderID, CustomerID), OrderItems(OrderItemID, OrderID, ProductID), Products(ProductID, ProductName)","This query joins Orders, OrderItems, and Products to find orders that contain either 'Laptop' or 'Mouse' products."
List all products and their categories. Identify products that have no category assigned.,"SELECT P.ProductName, C.CategoryName FROM Products P LEFT JOIN Categories C ON P.CategoryID = C.CategoryID;","Products(ProductID, ProductName, CategoryID), Categories(CategoryID, CategoryName)","This query uses a LEFT JOIN to list all products and their categories. If a product has no category, CategoryName will be NULL."
"Show all lectures and the courses they belong to, specifically for lectures scheduled after 5 PM.","SELECT L.LectureTitle, C.CourseName FROM Lectures L INNER JOIN Courses C ON L.CourseID = C.CourseID WHERE L.LectureTime > '17:00:00';","Lectures(LectureID, LectureTitle, CourseID, LectureTime), Courses(CourseID, CourseName)","This query joins Lectures and Courses, then filters to show only lectures scheduled after 5 PM."
"For each department, list its name, the total salary of its employees, and the total budget allocated to it.","SELECT D.DepartmentName, SUM(E.Salary) AS TotalEmployeeSalary, D.Budget AS DepartmentBudget FROM Departments D LEFT JOIN Employees E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentName, D.Budget;","Departments(DepartmentID, DepartmentName, Budget), Employees(EmployeeID, EmployeeName, DepartmentID, Salary)","This query joins Departments with Employees (using LEFT JOIN to include departments with no employees for salary sum, though SUM(E.Salary) would be NULL for empty departments). It groups by department to sum salaries and displays the department's pre-defined budget."
"List all cities and count how many customers are from each city, but only considering customers who joined in 2023. Include cities with no 2023 customers.","SELECT C.CityName, COUNT(CASE WHEN STRFTIME('%Y', Cust.JoinDate) = '2023' THEN Cust.CustomerID ELSE NULL END) AS CustomersIn2023 FROM Cities C LEFT JOIN Customers Cust ON C.CityID = Cust.CityID GROUP BY C.CityName;","Cities(CityID, CityName), Customers(CustomerID, CustomerName, CityID, JoinDate)","This query uses a LEFT JOIN to ensure all cities are listed. It conditionally counts customers whose join date is in 2023, showing 0 for cities without such customers."
Find customers who have placed orders for products in the 'Electronics' category.,SELECT DISTINCT Cu.CustomerName FROM Customers Cu INNER JOIN Orders O ON Cu.CustomerID = O.CustomerID INNER JOIN OrderItems OI ON O.OrderID = OI.OrderID INNER JOIN Products P ON OI.ProductID = P.ProductID INNER JOIN Categories Ca ON P.CategoryID = Ca.CategoryID WHERE Ca.CategoryName = 'Electronics';,"Customers(CustomerID, CustomerName), Orders(OrderID, CustomerID), OrderItems(OrderItemID, OrderID, ProductID), Products(ProductID, ProductName, CategoryID), Categories(CategoryID, CategoryName)","This query links Customers, Orders, OrderItems, Products, and Categories to identify customers who have purchased products belonging to the 'Electronics' category."
"List all products and their associated order items. Also, identify any products that exist in the product catalog but have never been part of an order item.","SELECT P.ProductName, OI.OrderItemID FROM OrderItems OI RIGHT JOIN Products P ON OI.ProductID = P.ProductID WHERE OI.OrderItemID IS NULL;","OrderItems(OrderItemID, OrderID, ProductID), Products(ProductID, ProductName)","This query uses a RIGHT JOIN to include all products. By filtering where OrderItemID is NULL, it isolates products that have no matching entries in the OrderItems table, meaning they've never been ordered."
Generate a list of all possible combinations of student IDs and course IDs.,"SELECT S.StudentID, C.CourseID FROM Students S CROSS JOIN Courses C;","Students(StudentID, StudentName), Courses(CourseID, CourseName)","This query performs a CROSS JOIN to generate every possible pairing between a StudentID and a CourseID, effectively creating a Cartesian product of the two tables."
"Find employees who are assigned to projects with a budget between $50,000 and $100,000.",SELECT DISTINCT E.EmployeeName FROM Employees E INNER JOIN EmployeeProjects EP ON E.EmployeeID = EP.EmployeeID INNER JOIN Projects P ON EP.ProjectID = P.ProjectID WHERE P.Budget BETWEEN 50000 AND 100000;,"Employees(EmployeeID, EmployeeName), EmployeeProjects(EmployeeProjectID, EmployeeID, ProjectID), Projects(ProjectID, ProjectName, Budget)",This query links Employees to Projects via EmployeeProjects and filters for employees working on projects within a specified budget range.
"List all departments and the employee in each department who has the highest salary. If multiple employees have the same highest salary, list them all. Include departments with no employees.","SELECT D.DepartmentName, E.EmployeeName, E.Salary FROM Departments D LEFT JOIN Employees E ON D.DepartmentID = E.DepartmentID WHERE E.Salary = (SELECT MAX(Salary) FROM Employees WHERE DepartmentID = D.DepartmentID) OR E.EmployeeID IS NULL;","Departments(DepartmentID, DepartmentName), Employees(EmployeeID, EmployeeName, DepartmentID, Salary)","This query uses a LEFT JOIN to include all departments. For each department, it finds employees whose salary matches the maximum salary within that specific department (using a correlated subquery) or includes employees who are NULL if the department has no employees."
List all courses and count the number of students enrolled in each. Show courses with 0 enrollments.,"SELECT C.CourseName, COUNT(E.StudentID) AS EnrolledStudents FROM Courses C LEFT JOIN Enrollments E ON C.CourseID = E.CourseID GROUP BY C.CourseName;","Courses(CourseID, CourseName), Enrollments(EnrollmentID, CourseID, StudentID)","This query uses a LEFT JOIN to include all courses. It then counts the number of enrolled students for each course, ensuring courses with no enrollments show a count of 0."
Find suppliers who supply products that are categorized as 'Electronics'.,SELECT DISTINCT S.SupplierName FROM Suppliers S INNER JOIN Products P ON S.SupplierID = P.SupplierID INNER JOIN Categories C ON P.CategoryID = C.CategoryID WHERE C.CategoryName = 'Electronics';,"Suppliers(SupplierID, SupplierName), Products(ProductID, ProductName, SupplierID, CategoryID), Categories(CategoryID, CategoryName)","This query joins Suppliers, Products, and Categories to find the names of suppliers who provide products belonging to the 'Electronics' category."
"Show products that have been ordered at least once, along with the total quantity ordered.","SELECT P.ProductName, SUM(OI.Quantity) AS TotalQuantityOrdered FROM Products P INNER JOIN OrderItems OI ON P.ProductID = OI.ProductID GROUP BY P.ProductName;","Products(ProductID, ProductName), OrderItems(OrderItemID, OrderID, ProductID, Quantity)",This query uses an INNER JOIN to include only products that exist in OrderItems. It then sums the quantity of these products to get the total quantity ordered for each.
"List all employees and their contact numbers. If an employee has no contact number listed, display 'N/A'.","SELECT E.EmployeeName, IFNULL(C.ContactNumber, 'N/A') AS ContactInfo FROM Employees E LEFT JOIN Contacts C ON E.EmployeeID = C.EmployeeID;","Employees(EmployeeID, EmployeeName), Contacts(ContactID, EmployeeID, ContactNumber)",This query uses a LEFT JOIN to include all employees. It then uses IFNULL (or COALESCE) to display 'N/A' if an employee does not have a matching contact number.
Retrieve sales transactions that occurred in 'Store A' and involved 'Product Z'.,"SELECT T.TransactionID, T.TransactionDate FROM Transactions T INNER JOIN Stores S ON T.StoreID = S.StoreID INNER JOIN ProductsSold PS ON T.TransactionID = PS.TransactionID INNER JOIN Products P ON PS.ProductID = P.ProductID WHERE S.StoreName = 'Store A' AND P.ProductName = 'Product Z';","Transactions(TransactionID, StoreID, TransactionDate), Stores(StoreID, StoreName), ProductsSold(PSID, TransactionID, ProductID), Products(ProductID, ProductName)","This query joins Transactions, Stores, ProductsSold, and Products to find specific transactions based on store name and product name."
Find students who are enrolled in more than one course.,SELECT S.StudentName FROM Students S INNER JOIN Enrollments E ON S.StudentID = E.StudentID GROUP BY S.StudentName HAVING COUNT(E.CourseID) > 1;,"Students(StudentID, StudentName), Enrollments(EnrollmentID, StudentID, CourseID)","This query joins Students and Enrollments, groups by student name, and then uses a HAVING clause to filter for students with more than one course enrollment."
List all instructors and the number of distinct courses they teach. Include instructors who teach no courses.,"SELECT I.InstructorName, COUNT(DISTINCT C.CourseID) AS NumberOfCoursesTaught FROM Instructors I LEFT JOIN Courses C ON I.InstructorID = C.InstructorID GROUP BY I.InstructorName;","Instructors(InstructorID, InstructorName), Courses(CourseID, CourseName, InstructorID)","This query uses a LEFT JOIN to include all instructors. It then counts the distinct CourseIDs taught by each instructor, showing 0 for those who teach no courses."
"Display all projects and their respective project managers, including projects that do not yet have a manager assigned.","SELECT P.ProjectName, E.EmployeeName AS ProjectManager FROM Projects P LEFT JOIN Employees E ON P.ManagerID = E.EmployeeID;","Projects(ProjectID, ProjectName, ManagerID), Employees(EmployeeID, EmployeeName)","This query uses a LEFT JOIN to list all projects. If a project's ManagerID does not match an EmployeeID, the ProjectManager name will be NULL."
Find orders that include products from both 'Category X' and 'Category Y'.,SELECT O.OrderID FROM Orders O INNER JOIN OrderItems OI1 ON O.OrderID = OI1.OrderID INNER JOIN Products P1 ON OI1.ProductID = P1.ProductID INNER JOIN Categories C1 ON P1.CategoryID = C1.CategoryID INNER JOIN OrderItems OI2 ON O.OrderID = OI2.OrderID INNER JOIN Products P2 ON OI2.ProductID = P2.ProductID INNER JOIN Categories C2 ON P2.CategoryID = C2.CategoryID WHERE C1.CategoryName = 'Category X' AND C2.CategoryName = 'Category Y' AND C1.CategoryID <> C2.CategoryID GROUP BY O.OrderID;,"Orders(OrderID, CustomerID), OrderItems(OrderItemID, OrderID, ProductID), Products(ProductID, ProductName, CategoryID), Categories(CategoryID, CategoryName)",This query self-joins on OrderItems (via Products and Categories) to find orders that contain at least one product from 'Category X' AND at least one product from 'Category Y'. The `C1.CategoryID <> C2.CategoryID` ensures the categories are distinct for each matched product.
Instruction,Query,Table Schema,Explanation
Count the total number of orders for each customer.,"SELECT customer_id, COUNT(order_id) FROM Orders GROUP BY customer_id;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, order_date DATE, amount DECIMAL);",This query counts the number of orders for each unique customer by grouping the rows based on 'customer_id' and then applying the COUNT aggregate function.
Calculate the total sales amount for each product category.,"SELECT category, SUM(price * quantity_sold) AS total_sales FROM Products GROUP BY category;","CREATE TABLE Products (product_id INTEGER, name TEXT, category TEXT, price DECIMAL, quantity_sold INTEGER);","This query calculates the total sales for each product category by multiplying price and quantity sold for each item, then summing these values for each unique category."
Find the average salary for employees in each department.,"SELECT department, AVG(salary) AS average_salary FROM Employees GROUP BY department;","CREATE TABLE Employees (employee_id INTEGER, name TEXT, department TEXT, salary DECIMAL);",This query computes the average salary for each department by grouping employees by their department and then applying the AVG aggregate function.
Retrieve the minimum and maximum order amount placed on each date.,"SELECT order_date, MIN(amount) AS min_amount, MAX(amount) AS max_amount FROM Orders GROUP BY order_date;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, order_date DATE, amount DECIMAL);",This query finds the minimum and maximum order amounts for each unique order date by grouping the orders by 'order_date' and using MIN and MAX aggregate functions.
"Count the number of students in each major, but only for majors that have more than 10 students.","SELECT major, COUNT(student_id) AS num_students FROM Students GROUP BY major HAVING COUNT(student_id) > 10;","CREATE TABLE Students (student_id INTEGER, name TEXT, major TEXT, gpa DECIMAL);","This query first counts students per major using GROUP BY and COUNT, then filters the results to show only majors with more than 10 students using the HAVING clause."
List the total quantity of items sold for each product.,"SELECT product_id, SUM(quantity) AS total_quantity_sold FROM Sales GROUP BY product_id;","CREATE TABLE Sales (sale_id INTEGER, product_id INTEGER, sale_date DATE, quantity INTEGER);",This query sums the 'quantity' for each 'product_id' to get the total quantity sold per product.
Determine the earliest and latest enrollment dates for each course.,"SELECT course_id, MIN(enrollment_date) AS first_enrollment, MAX(enrollment_date) AS last_enrollment FROM Enrollments GROUP BY course_id;","CREATE TABLE Enrollments (enrollment_id INTEGER, student_id INTEGER, course_id INTEGER, enrollment_date DATE);",This query finds the earliest and latest enrollment dates for each course by grouping by 'course_id' and using MIN and MAX on 'enrollment_date'.
Find the average rating for each movie.,"SELECT movie_id, AVG(rating) AS average_rating FROM Ratings GROUP BY movie_id;","CREATE TABLE Ratings (rating_id INTEGER, movie_id INTEGER, user_id INTEGER, rating INTEGER);",This query calculates the average rating for each movie by grouping by 'movie_id' and applying the AVG function to 'rating'.
Count the number of unique visitors per day.,"SELECT visit_date, COUNT(DISTINCT user_id) AS unique_visitors FROM Website_Visits GROUP BY visit_date;","CREATE TABLE Website_Visits (visit_id INTEGER, user_id INTEGER, visit_date DATE, page_view INTEGER);",This query counts the distinct number of 'user_id's for each 'visit_date' to find unique visitors per day.
Get the total revenue generated by each sales person.,"SELECT salesperson_id, SUM(amount) AS total_revenue FROM Sales GROUP BY salesperson_id;","CREATE TABLE Sales (sale_id INTEGER, salesperson_id INTEGER, customer_id INTEGER, amount DECIMAL);",This query sums the 'amount' for each 'salesperson_id' to determine the total revenue generated by each salesperson.
List departments with more than 5 employees.,"SELECT department, COUNT(employee_id) AS num_employees FROM Employees GROUP BY department HAVING COUNT(employee_id) > 5;","CREATE TABLE Employees (employee_id INTEGER, name TEXT, department TEXT, salary DECIMAL);",This query counts employees per department and then filters the results to include only departments with more than 5 employees using HAVING.
Determine the highest and lowest scores obtained in each subject.,"SELECT subject_id, MAX(score) AS highest_score, MIN(score) AS lowest_score FROM Scores GROUP BY subject_id;","CREATE TABLE Scores (score_id INTEGER, student_id INTEGER, subject_id INTEGER, score INTEGER);",This query finds the maximum and minimum scores for each subject by grouping by 'subject_id' and using MAX and MIN on 'score'.
Calculate the average price of products in each brand.,"SELECT brand, AVG(price) AS average_price FROM Products GROUP BY brand;","CREATE TABLE Products (product_id INTEGER, name TEXT, brand TEXT, price DECIMAL);",This query calculates the average price for each product brand by grouping by 'brand' and applying the AVG function to 'price'.
Count the number of transactions per month for a given year.,"SELECT STRFTIME('%Y-%m', transaction_date) AS month, COUNT(transaction_id) AS total_transactions FROM Transactions WHERE STRFTIME('%Y', transaction_date) = '2023' GROUP BY month;","CREATE TABLE Transactions (transaction_id INTEGER, transaction_date DATE, amount DECIMAL);","This query counts transactions per month for the year 2023 by extracting the year and month from 'transaction_date', filtering for 2023, and then grouping by the resulting month string."
"Find the sum of quantities ordered for each product, only for products with total quantity ordered exceeding 100.","SELECT product_id, SUM(quantity) AS total_quantity FROM Order_Items GROUP BY product_id HAVING SUM(quantity) > 100;","CREATE TABLE Order_Items (item_id INTEGER, order_id INTEGER, product_id INTEGER, quantity INTEGER);",This query sums the quantity for each product and then filters for products where the total quantity is greater than 100.
Count how many employees are in each job title.,"SELECT job_title, COUNT(employee_id) AS num_employees FROM Employees GROUP BY job_title;","CREATE TABLE Employees (employee_id INTEGER, name TEXT, job_title TEXT, salary DECIMAL);",This query counts the number of employees for each distinct job title by grouping on 'job_title'.
Get the latest login time for each user.,"SELECT user_id, MAX(login_time) AS last_login FROM User_Logins GROUP BY user_id;","CREATE TABLE User_Logins (login_id INTEGER, user_id INTEGER, login_time DATETIME);",This query finds the maximum 'login_time' for each 'user_id' to determine the last login time for each user.
Calculate the average age of members in each club.,"SELECT club_id, AVG(age) AS average_age FROM Members GROUP BY club_id;","CREATE TABLE Members (member_id INTEGER, club_id INTEGER, name TEXT, age INTEGER);",This query computes the average age of members for each club by grouping by 'club_id' and applying AVG on 'age'.
Count the number of items stocked for each warehouse.,"SELECT warehouse_id, COUNT(item_id) AS total_items FROM Inventory GROUP BY warehouse_id;","CREATE TABLE Inventory (item_id INTEGER, warehouse_id INTEGER, product_id INTEGER, stock_level INTEGER);",This query counts the total number of distinct items for each warehouse by grouping by 'warehouse_id'.
Find the total number of sales for each region and year.,"SELECT region, STRFTIME('%Y', sale_date) AS year, COUNT(sale_id) AS total_sales FROM Sales GROUP BY region, year;","CREATE TABLE Sales (sale_id INTEGER, region TEXT, sale_date DATE, amount DECIMAL);",This query counts sales for each combination of region and year by grouping on both 'region' and the extracted year from 'sale_date'.
List categories where the average product price is above 50.,"SELECT category, AVG(price) AS avg_price FROM Products GROUP BY category HAVING AVG(price) > 50;","CREATE TABLE Products (product_id INTEGER, name TEXT, category TEXT, price DECIMAL);",This query calculates the average price per category and then filters to show only categories where this average price exceeds 50.
Determine the highest bid for each auction item.,"SELECT item_id, MAX(bid_amount) AS highest_bid FROM Bids GROUP BY item_id;","CREATE TABLE Bids (bid_id INTEGER, item_id INTEGER, user_id INTEGER, bid_amount DECIMAL);",This query finds the maximum 'bid_amount' for each 'item_id' to identify the highest bid per auction item.
Count the number of flights originating from each airport.,"SELECT origin_airport, COUNT(flight_id) AS num_flights FROM Flights GROUP BY origin_airport;","CREATE TABLE Flights (flight_id INTEGER, origin_airport TEXT, destination_airport TEXT, departure_time DATETIME);",This query counts the total number of flights for each origin airport by grouping on 'origin_airport'.
Calculate the sum of all expenses for each project.,"SELECT project_id, SUM(amount) AS total_expenses FROM Expenses GROUP BY project_id;","CREATE TABLE Expenses (expense_id INTEGER, project_id INTEGER, expense_date DATE, amount DECIMAL);",This query sums the 'amount' for each 'project_id' to get the total expenses per project.
Find the average duration of calls for each customer.,"SELECT customer_id, AVG(duration_minutes) AS average_duration FROM Calls GROUP BY customer_id;","CREATE TABLE Calls (call_id INTEGER, customer_id INTEGER, call_date DATE, duration_minutes INTEGER);",This query calculates the average call duration for each customer by grouping by 'customer_id' and applying AVG on 'duration_minutes'.
"Count users by their country, showing only countries with less than 100 users.","SELECT country, COUNT(user_id) AS num_users FROM Users GROUP BY country HAVING COUNT(user_id) < 100;","CREATE TABLE Users (user_id INTEGER, name TEXT, country TEXT, signup_date DATE);",This query counts users per country and then filters the results to include only countries with fewer than 100 users using HAVING.
Retrieve the first and last name registered in the system for each city.,"SELECT city, MIN(signup_date) AS earliest_signup, MAX(signup_date) AS latest_signup FROM Users GROUP BY city;","CREATE TABLE Users (user_id INTEGER, name TEXT, city TEXT, signup_date DATE);",This query finds the earliest and latest signup dates for each city by grouping by 'city' and using MIN and MAX on 'signup_date'.
Sum the total number of page views for each user on a specific date.,"SELECT user_id, SUM(page_views) AS total_views FROM Website_Activity WHERE activity_date = '2023-01-15' GROUP BY user_id;","CREATE TABLE Website_Activity (activity_id INTEGER, user_id INTEGER, activity_date DATE, page_views INTEGER);","This query sums the 'page_views' for each 'user_id' for a specific date, '2023-01-15', by filtering first and then grouping."
Find the minimum and maximum price for services offered by each provider.,"SELECT provider_id, MIN(service_price) AS min_price, MAX(service_price) AS max_price FROM Services GROUP BY provider_id;","CREATE TABLE Services (service_id INTEGER, provider_id INTEGER, service_name TEXT, service_price DECIMAL);",This query finds the minimum and maximum service prices for each provider by grouping by 'provider_id' and using MIN and MAX on 'service_price'.
Count the number of books published in each year.,"SELECT publication_year, COUNT(book_id) AS num_books FROM Books GROUP BY publication_year;","CREATE TABLE Books (book_id INTEGER, title TEXT, author TEXT, publication_year INTEGER);",This query counts the number of books for each publication year by grouping on 'publication_year'.
Calculate the average quantity of products ordered in each order.,"SELECT order_id, AVG(quantity) AS average_quantity_per_order FROM Order_Items GROUP BY order_id;","CREATE TABLE Order_Items (item_id INTEGER, order_id INTEGER, product_id INTEGER, quantity INTEGER);",This query calculates the average quantity of items for each order by grouping by 'order_id' and applying AVG on 'quantity'.
"List product categories and the total number of products in each, but only for categories with at least 50 products.","SELECT category, COUNT(product_id) AS product_count FROM Products GROUP BY category HAVING COUNT(product_id) >= 50;","CREATE TABLE Products (product_id INTEGER, name TEXT, category TEXT, price DECIMAL);",This query counts products per category and then filters to show only categories with 50 or more products using HAVING.
Determine the total budget allocated for each department.,"SELECT department_id, SUM(budget_amount) AS total_budget FROM Department_Budgets GROUP BY department_id;","CREATE TABLE Department_Budgets (budget_id INTEGER, department_id INTEGER, budget_year INTEGER, budget_amount DECIMAL);",This query sums the 'budget_amount' for each 'department_id' to get the total budget per department.
Find the average transaction amount for each customer type.,"SELECT customer_type, AVG(amount) AS average_transaction_amount FROM Transactions GROUP BY customer_type;","CREATE TABLE Transactions (transaction_id INTEGER, customer_type TEXT, amount DECIMAL, transaction_date DATE);",This query calculates the average transaction amount for each customer type by grouping by 'customer_type' and applying AVG on 'amount'.
Count the number of items delivered by each courier.,"SELECT courier_id, COUNT(delivery_id) AS items_delivered FROM Deliveries GROUP BY courier_id;","CREATE TABLE Deliveries (delivery_id INTEGER, courier_id INTEGER, item_id INTEGER, delivery_date DATE);",This query counts the number of deliveries made by each courier by grouping on 'courier_id'.
Retrieve the minimum and maximum temperatures recorded for each city.,"SELECT city, MIN(temperature) AS min_temp, MAX(temperature) AS max_temp FROM Weather_Readings GROUP BY city;","CREATE TABLE Weather_Readings (reading_id INTEGER, city TEXT, reading_date DATE, temperature DECIMAL);",This query finds the minimum and maximum temperatures for each city by grouping by 'city' and using MIN and MAX on 'temperature'.
"Get the total number of units in stock for each product, considering all warehouses.","SELECT product_id, SUM(stock_quantity) AS total_stock FROM Warehouse_Stock GROUP BY product_id;","CREATE TABLE Warehouse_Stock (stock_id INTEGER, warehouse_id INTEGER, product_id INTEGER, stock_quantity INTEGER);",This query sums the 'stock_quantity' for each 'product_id' across all warehouses to get the total stock per product.
Find the average salary for each department and job title combination.,"SELECT department, job_title, AVG(salary) AS average_salary FROM Employees GROUP BY department, job_title;","CREATE TABLE Employees (employee_id INTEGER, name TEXT, department TEXT, job_title TEXT, salary DECIMAL);",This query computes the average salary for each unique combination of department and job title by grouping on both columns.
Count the number of unique songs listened to by each user.,"SELECT user_id, COUNT(DISTINCT song_id) AS unique_songs_listened FROM Song_Plays GROUP BY user_id;","CREATE TABLE Song_Plays (play_id INTEGER, user_id INTEGER, song_id INTEGER, play_date DATE);",This query counts the distinct 'song_id's for each 'user_id' to find unique songs listened to by each user.
List customers who have placed more than 3 orders.,"SELECT customer_id, COUNT(order_id) AS num_orders FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 3;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, order_date DATE, amount DECIMAL);",This query counts orders per customer and then filters to show only customers who have placed more than 3 orders.
"Determine the total quantity of items sold for each product, only for products with total quantity between 50 and 200.","SELECT product_id, SUM(quantity) AS total_quantity FROM Order_Items GROUP BY product_id HAVING SUM(quantity) BETWEEN 50 AND 200;","CREATE TABLE Order_Items (item_id INTEGER, order_id INTEGER, product_id INTEGER, quantity INTEGER);",This query sums the quantity for each product and then filters for products where the total quantity is between 50 and 200 (inclusive).
Find the average duration of projects for each project manager.,"SELECT project_manager_id, AVG(julianday(end_date) - julianday(start_date)) AS avg_duration_days FROM Projects GROUP BY project_manager_id;","CREATE TABLE Projects (project_id INTEGER, project_manager_id INTEGER, project_name TEXT, start_date DATE, end_date DATE);","This query calculates the average duration of projects (in days) for each project manager by finding the difference between start and end dates, then averaging for each manager."
"Count the number of items in each condition (e.g., 'new', 'used').","SELECT condition, COUNT(item_id) AS num_items FROM Items GROUP BY condition;","CREATE TABLE Items (item_id INTEGER, name TEXT, condition TEXT, price DECIMAL);",This query counts the number of items for each distinct condition by grouping on the 'condition' column.
Get the earliest and latest received dates for each shipment.,"SELECT shipment_id, MIN(received_date) AS earliest_received, MAX(received_date) AS latest_received FROM Shipments GROUP BY shipment_id;","CREATE TABLE Shipments (shipment_id INTEGER, item_id INTEGER, sent_date DATE, received_date DATE);",This query finds the earliest and latest received dates for each shipment by grouping by 'shipment_id' and using MIN and MAX on 'received_date'.
"Calculate the total amount spent by each customer, only for customers who spent more than $1000.","SELECT customer_id, SUM(amount) AS total_spent FROM Orders GROUP BY customer_id HAVING SUM(amount) > 1000;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, order_date DATE, amount DECIMAL);",This query sums the order amounts for each customer and then filters to show only customers who have spent more than $1000.
Find the count of distinct products sold per customer.,"SELECT customer_id, COUNT(DISTINCT product_id) AS distinct_products_bought FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id GROUP BY customer_id;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, order_date DATE, amount DECIMAL); CREATE TABLE Order_Items (item_id INTEGER, order_id INTEGER, product_id INTEGER, quantity INTEGER);","This query first joins Order_Items and Orders to link products to customers, then counts the distinct 'product_id's for each 'customer_id'."
Determine the highest and lowest scores for each student.,"SELECT student_id, MAX(score) AS highest_score, MIN(score) AS lowest_score FROM Scores GROUP BY student_id;","CREATE TABLE Scores (score_id INTEGER, student_id INTEGER, subject_id INTEGER, score INTEGER);",This query finds the maximum and minimum scores for each student by grouping by 'student_id' and using MAX and MIN on 'score'.
Count the number of orders placed by each customer in 2023.,"SELECT customer_id, COUNT(order_id) AS orders_in_2023 FROM Orders WHERE STRFTIME('%Y', order_date) = '2023' GROUP BY customer_id;","CREATE TABLE Orders (order_id INTEGER, customer_id INTEGER, order_date DATE, amount DECIMAL);",This query counts orders for each customer specifically for the year 2023 by filtering on 'order_date' and then grouping by 'customer_id'.
Calculate the average review score for each restaurant.,"SELECT restaurant_id, AVG(score) AS average_score FROM Reviews GROUP BY restaurant_id;","CREATE TABLE Reviews (review_id INTEGER, restaurant_id INTEGER, user_id INTEGER, score INTEGER, review_text TEXT);",This query calculates the average review score for each restaurant by grouping by 'restaurant_id' and applying AVG on 'score'.
Find the total quantity of each ingredient used in recipes.,"SELECT ingredient_id, SUM(quantity_used) AS total_quantity FROM Recipe_Ingredients GROUP BY ingredient_id;","CREATE TABLE Recipe_Ingredients (recipe_ingredient_id INTEGER, recipe_id INTEGER, ingredient_id INTEGER, quantity_used DECIMAL, unit TEXT);",This query sums the 'quantity_used' for each 'ingredient_id' to get the total quantity of each ingredient used across all recipes.
"List artists and the total number of albums they have, but only for artists with more than 3 albums.","SELECT artist_id, COUNT(album_id) AS num_albums FROM Albums GROUP BY artist_id HAVING COUNT(album_id) > 3;","CREATE TABLE Albums (album_id INTEGER, artist_id INTEGER, title TEXT, release_year INTEGER);",This query counts albums per artist and then filters to show only artists who have released more than 3 albums.
Count the number of messages sent by each user on a specific day.,"SELECT sender_user_id, COUNT(message_id) AS messages_sent FROM Messages WHERE message_date = '2023-04-01' GROUP BY sender_user_id;","CREATE TABLE Messages (message_id INTEGER, sender_user_id INTEGER, receiver_user_id INTEGER, message_date DATE);",This query counts messages sent by each user specifically on '2023-04-01' by filtering first and then grouping by 'sender_user_id'.
Determine the earliest and latest production dates for each product model.,"SELECT model_id, MIN(production_date) AS earliest_prod, MAX(production_date) AS latest_prod FROM Production_Logs GROUP BY model_id;","CREATE TABLE Production_Logs (log_id INTEGER, model_id INTEGER, production_date DATE, quantity_produced INTEGER);",This query finds the earliest and latest production dates for each product model by grouping by 'model_id' and using MIN and MAX on 'production_date'.
Calculate the average duration of movies per genre.,"SELECT genre, AVG(duration_minutes) AS average_duration FROM Movies GROUP BY genre;","CREATE TABLE Movies (movie_id INTEGER, title TEXT, genre TEXT, duration_minutes INTEGER);",This query calculates the average duration of movies for each genre by grouping by 'genre' and applying AVG on 'duration_minutes'.
Count the number of employees hired each year.,"SELECT STRFTIME('%Y', hire_date) AS hire_year, COUNT(employee_id) AS new_hires FROM Employees GROUP BY hire_year;","CREATE TABLE Employees (employee_id INTEGER, name TEXT, hire_date DATE, salary DECIMAL);",This query counts the number of employees hired in each year by extracting the year from 'hire_date' and grouping by it.
Find the total amount of donations received per donor.,"SELECT donor_id, SUM(donation_amount) AS total_donated FROM Donations GROUP BY donor_id;","CREATE TABLE Donations (donation_id INTEGER, donor_id INTEGER, donation_date DATE, donation_amount DECIMAL);",This query sums the 'donation_amount' for each 'donor_id' to get the total amount donated by each donor.
List courses with an average student GPA higher than 3.5.,"SELECT course_id, AVG(gpa) AS avg_gpa FROM Enrollments JOIN Students ON Enrollments.student_id = Students.student_id GROUP BY course_id HAVING AVG(gpa) > 3.5;","CREATE TABLE Students (student_id INTEGER, name TEXT, gpa DECIMAL); CREATE TABLE Enrollments (enrollment_id INTEGER, student_id INTEGER, course_id INTEGER, enrollment_date DATE);","This query joins Enrollments and Students to access GPA, calculates the average GPA for each course, and then filters for courses where this average is greater than 3.5."
Count the number of support tickets opened for each issue type.,"SELECT issue_type, COUNT(ticket_id) AS num_tickets FROM Support_Tickets GROUP BY issue_type;","CREATE TABLE Support_Tickets (ticket_id INTEGER, customer_id INTEGER, issue_type TEXT, opened_date DATE);",This query counts the number of support tickets for each distinct issue type by grouping on 'issue_type'.
Instruction,Query,Table Schema,Explanation
"List all employees and their rank based on salary within their department, where the highest salary gets rank 1.","SELECT employee_id, name, department_id, salary, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) as salary_rank FROM employees;","employees (employee_id INT, name VARCHAR, department_id INT, salary DECIMAL)","Assigns a unique sequential rank to each employee within their respective department, ordered by salary in descending order. Even employees with the same salary in the same department will receive distinct ranks."
"Determine the sales rank of each product within its category, based on total sales amount, allowing ties to share ranks.","WITH ProductSales AS (SELECT product_id, product_name, category, SUM(sale_amount) as total_sales FROM sales GROUP BY product_id, product_name, category) SELECT product_id, product_name, category, total_sales, RANK() OVER (PARTITION BY category ORDER BY total_sales DESC) as sales_rank_in_category FROM ProductSales;","sales (sale_id INT, product_id INT, product_name VARCHAR, category VARCHAR, sale_amount DECIMAL)","Calculates the total sales for each product, then uses RANK() to assign a rank within each product category. Products with the same total sales within a category will have the same rank, and the next rank will be skipped."
"Find the dense rank of students based on their score in each subject, where ties get the same rank without gaps.","SELECT student_id, student_name, subject, score, DENSE_RANK() OVER (PARTITION BY subject ORDER BY score DESC) as score_dense_rank FROM student_scores;","student_scores (student_id INT, student_name VARCHAR, subject VARCHAR, score INT)","Applies DENSE_RANK() to assign ranks to students within each subject based on their score. Students with identical scores in the same subject will get the same rank, and subsequent ranks will not have gaps."
Divide all employees into 4 salary quartiles based on their overall salary.,"SELECT employee_id, name, salary, NTILE(4) OVER (ORDER BY salary) as salary_quartile FROM employees;","employees (employee_id INT, name VARCHAR, salary DECIMAL)",Uses NTILE(4) to divide the employees into 4 approximately equal groups (quartiles) based on their salary in ascending order. Each employee is assigned to a specific quartile number.
"Calculate the running total of order amounts for each customer, ordered by order date.","SELECT order_id, customer_id, order_date, amount, SUM(amount) OVER (PARTITION BY customer_id ORDER BY order_date) as running_total_amount FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, amount DECIMAL)","Calculates a cumulative sum of the 'amount' for each 'customer_id' independently, ordered by 'order_date'. The sum accumulates as the order date progresses for each customer."
"For each sale, find the average sale amount for its respective product category.","SELECT sale_id, product_id, category, sale_amount, AVG(sale_amount) OVER (PARTITION BY category) as average_category_sale FROM sales;","sales (sale_id INT, product_id INT, category VARCHAR, sale_amount DECIMAL)",Computes the average 'sale_amount' for all sales within the same 'category'. This average value is then displayed for every row belonging to that category.
"For each temperature reading, show the maximum temperature recorded on that same day.","SELECT reading_id, reading_time, temperature, MAX(temperature) OVER (PARTITION BY CAST(reading_time AS DATE)) as max_daily_temperature FROM sensor_readings;","sensor_readings (reading_id INT, reading_time DATETIME, temperature DECIMAL)",Calculates the maximum 'temperature' for each distinct day based on 'reading_time'. This maximum value is then displayed for every reading taken on that day.
"For each order, display the minimum order amount made by that customer across all their orders.","SELECT order_id, customer_id, order_date, order_amount, MIN(order_amount) OVER (PARTITION BY customer_id) as min_customer_order FROM customer_orders;","customer_orders (order_id INT, customer_id INT, order_date DATE, order_amount DECIMAL)",Determines the minimum 'order_amount' for each 'customer_id' across all their orders. This minimum value is then repeated for every order placed by that customer.
"For each employee, show the total number of employees in their department.","SELECT employee_id, name, department_id, COUNT(employee_id) OVER (PARTITION BY department_id) as total_employees_in_dept FROM employees;","employees (employee_id INT, name VARCHAR, department_id INT)",Counts the total number of employees within each 'department_id'. This count is then displayed for every employee belonging to that department.
"For each stock price, retrieve the closing price from the immediate previous trading day.","SELECT symbol, trade_date, closing_price, LAG(closing_price, 1) OVER (PARTITION BY symbol ORDER BY trade_date) as previous_day_closing_price FROM daily_stock_prices;","daily_stock_prices (symbol VARCHAR, trade_date DATE, closing_price DECIMAL)","Uses LAG() to fetch the 'closing_price' from the row preceding the current row based on 'trade_date' for each unique 'symbol'. If there is no previous row, it returns NULL."
"For each appointment, find the time of the next appointment scheduled for the same doctor.","SELECT appointment_id, doctor_id, patient_id, appointment_time, LEAD(appointment_time, 1) OVER (PARTITION BY doctor_id ORDER BY appointment_time) as next_appointment_time FROM appointments;","appointments (appointment_id INT, doctor_id INT, patient_id INT, appointment_time DATETIME)","Uses LEAD() to retrieve the 'appointment_time' of the next appointment scheduled for the same 'doctor_id', ordered by 'appointment_time'. If no subsequent appointment exists, it returns NULL."
"For each order, display the amount of the very first order placed by that customer.","SELECT order_id, customer_id, order_date, amount, FIRST_VALUE(amount) OVER (PARTITION BY customer_id ORDER BY order_date) as first_order_amount FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, amount DECIMAL)",Retrieves the 'amount' of the first order (ordered by 'order_date') placed by each 'customer_id'. This value is then displayed for every order placed by that customer.
"For each task, find the timestamp of its latest status update.","SELECT task_id, update_time, status, LAST_VALUE(update_time) OVER (PARTITION BY task_id ORDER BY update_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as last_status_update_time FROM task_status_history;","task_status_history (task_id INT, update_time DATETIME, status VARCHAR)",Finds the 'update_time' of the last status update for each 'task_id' based on 'update_time'. The `ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING` frame ensures the entire partition is considered for the last value.
Identify the score of the third-highest scoring student in each class.,"SELECT DISTINCT class_id, NTH_VALUE(score, 3) OVER (PARTITION BY class_id ORDER BY score DESC) as third_highest_score FROM student_grades WHERE NTH_VALUE(score, 3) OVER (PARTITION BY class_id ORDER BY score DESC) IS NOT NULL;","student_grades (student_id INT, class_id INT, score INT)","Uses NTH_VALUE() to get the 'score' of the third row when ordered by 'score' descending within each 'class_id'. `DISTINCT` and `WHERE` are used to return only one row per class with the third highest score, if it exists."
Calculate the cumulative distribution of each employee's salary relative to all other employees.,"SELECT employee_id, name, salary, CUME_DIST() OVER (ORDER BY salary) as salary_cumulative_distribution FROM employees;","employees (employee_id INT, name VARCHAR, salary DECIMAL)",Calculates the cumulative distribution of 'salary' for each employee. This value represents the proportion of employees with a salary less than or equal to the current employee's salary.
Determine the percentage rank of each student's score within their class.,"SELECT student_id, class_id, score, PERCENT_RANK() OVER (PARTITION BY class_id ORDER BY score) as score_percent_rank FROM student_grades;","student_grades (student_id INT, class_id INT, score INT)","Calculates the percentile rank of each student's score within their respective 'class_id'. A value of 0 means the lowest score, and 1 means the highest score."
Calculate the sum of sales for the current month and the two preceding months for each product.,"SELECT product_id, sale_date, amount, SUM(amount) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as three_month_moving_sum FROM monthly_sales;","monthly_sales (product_id INT, sale_date DATE, amount DECIMAL)","Computes a moving sum of 'amount' for each 'product_id', including the current row's 'amount' and the 'amount' from the two preceding rows (months) based on 'sale_date'."
Calculate the running average of transaction amounts for each account over time.,"SELECT transaction_id, account_id, transaction_date, amount, AVG(amount) OVER (PARTITION BY account_id ORDER BY transaction_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as running_average_transaction FROM transactions;","transactions (transaction_id INT, account_id INT, transaction_date DATE, amount DECIMAL)","Calculates a running average of 'amount' for each 'account_id', considering all transactions from the beginning of the partition up to the current row, ordered by 'transaction_date'."
"For each employee, show their current salary and the difference from their salary two years ago. Assume 0 if no prior salary exists.","SELECT employee_id, salary_year, salary, salary - LAG(salary, 2, 0) OVER (PARTITION BY employee_id ORDER BY salary_year) as salary_change_two_years FROM salary_history;","salary_history (employee_id INT, salary_year INT, salary DECIMAL)","Calculates the difference between the current 'salary' and the 'salary' from two 'salary_year's prior for each 'employee_id'. If no prior salary exists at the specified offset, it defaults to 0."
List products with their current price and the price they are expected to have two weeks from the current record's date. Default to current price if no future price.,"SELECT product_id, price_date, price, LEAD(price, 2, price) OVER (PARTITION BY product_id ORDER BY price_date) as price_in_two_weeks FROM product_pricing;","product_pricing (product_id INT, price_date DATE, price DECIMAL)","Retrieves the 'price' of the product two 'price_date' entries ahead for each 'product_id'. If no such future price exists, it uses the current row's 'price' as the default."
"From a table of user activity logs, retrieve only the latest activity record for each user.","WITH RankedActivity AS (SELECT user_id, activity_type, activity_timestamp, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY activity_timestamp DESC) as rn FROM user_activity_logs) SELECT user_id, activity_type, activity_timestamp FROM RankedActivity WHERE rn = 1;","user_activity_logs (user_id INT, activity_type VARCHAR, activity_timestamp DATETIME)","Assigns a rank to each user's activity based on the timestamp in descending order. Filters to keep only the record with rank 1, which represents the latest activity for each user."
List the top 5 products by sales amount for each region.,"WITH RegionProductSales AS (SELECT region, product_id, SUM(sale_amount) as total_sales FROM sales_data GROUP BY region, product_id), RankedSales AS (SELECT region, product_id, total_sales, RANK() OVER (PARTITION BY region ORDER BY total_sales DESC) as rnk FROM RegionProductSales) SELECT region, product_id, total_sales FROM RankedSales WHERE rnk <= 5;","sales_data (sale_id INT, region VARCHAR, product_id INT, sale_amount DECIMAL)","Calculates total sales per product per region. Then uses RANK() to rank products within each region by total sales. Finally, filters for products that are within the top 5 ranks for their respective regions."
"Generate a leaderboard for a gaming competition, showing players' dense rank by score across all games, where tied scores get the same rank.","SELECT player_id, player_name, total_score, DENSE_RANK() OVER (ORDER BY total_score DESC) as overall_rank FROM game_scores;","game_scores (player_id INT, player_name VARCHAR, total_score INT)","Assigns a dense rank to each player based on their 'total_score'. Players with identical scores will receive the same rank, and there will be no gaps in the ranking sequence."
Divide customers into 5 spending tiers based on their total lifetime spending.,"SELECT customer_id, total_spending, NTILE(5) OVER (ORDER BY total_spending) as spending_tier FROM customer_spending;","customer_spending (customer_id INT, total_spending DECIMAL)",Partitions customers into 5 approximately equal groups (quintiles) based on their 'total_spending' using NTILE(5). Each customer is assigned to a specific tier number from 1 to 5.
Calculate the running sum of inventory quantity changes for a specific product over time.,"SELECT product_id, transaction_date, quantity_change, SUM(quantity_change) OVER (PARTITION BY product_id ORDER BY transaction_date) as running_inventory_level FROM inventory_transactions;","inventory_transactions (transaction_id INT, product_id INT, transaction_date DATE, quantity_change INT)","Computes a cumulative sum of 'quantity_change' for each 'product_id', ordered by 'transaction_date'. This effectively shows the inventory level at each transaction point."
Calculate the running average temperature for a sensor over time.,"SELECT sensor_id, reading_time, temperature, AVG(temperature) OVER (PARTITION BY sensor_id ORDER BY reading_time) as running_average_temp FROM sensor_readings;","sensor_readings (reading_id INT, sensor_id INT, reading_time DATETIME, temperature DECIMAL)","Calculates a cumulative average of 'temperature' for each 'sensor_id', considering all readings from the beginning of the partition up to the current row, ordered by 'reading_time'."
Count the cumulative number of events for each user over time.,"SELECT user_id, event_time, event_type, COUNT(event_id) OVER (PARTITION BY user_id ORDER BY event_time) as running_event_count FROM user_events;","user_events (event_id INT, user_id INT, event_time DATETIME, event_type VARCHAR)","Counts the cumulative number of 'event_id's for each 'user_id', ordered by 'event_time'. This shows how many events a user has performed up to a given point."
"For each employee's salary record, find their salary from the immediate previous recorded year.","SELECT employee_id, year, salary, LAG(salary, 1) OVER (PARTITION BY employee_id ORDER BY year) as previous_year_salary FROM employee_salary_history;","employee_salary_history (employee_id INT, year INT, salary DECIMAL)","Retrieves the 'salary' from the row directly preceding the current row, within the partition of 'employee_id's, ordered by 'year'. Returns NULL if no previous year's salary exists."
"For each product's price change, determine the price for the next scheduled change.","SELECT product_id, price_date, price, LEAD(price, 1) OVER (PARTITION BY product_id ORDER BY price_date) as next_price FROM product_price_changes;","product_price_changes (change_id INT, product_id INT, price_date DATE, price DECIMAL)","Fetches the 'price' from the row immediately following the current row, within the partition of 'product_id's, ordered by 'price_date'. Returns NULL if no next price exists."
"For a project's task history, show the initial status of each task.","SELECT task_id, status_timestamp, status, FIRST_VALUE(status) OVER (PARTITION BY task_id ORDER BY status_timestamp) as initial_task_status FROM task_history;","task_history (task_id INT, status_timestamp DATETIME, status VARCHAR)",Retrieves the 'status' from the first row (ordered by 'status_timestamp') for each 'task_id'. This 'initial_task_status' is then displayed for every record related to that task.
"For each flight, find the final departure gate.","SELECT flight_id, timestamp, gate, LAST_VALUE(gate) OVER (PARTITION BY flight_id ORDER BY timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as final_gate FROM flight_gate_history;","flight_gate_history (flight_id INT, timestamp DATETIME, gate VARCHAR)","Finds the 'gate' from the last row (ordered by 'timestamp') for each 'flight_id'. The `ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING` frame ensures the entire partition is considered, giving the true last value."
Find the amount of the second transaction performed by each customer.,"SELECT DISTINCT customer_id, NTH_VALUE(amount, 2) OVER (PARTITION BY customer_id ORDER BY transaction_date) as second_transaction_amount FROM customer_transactions WHERE NTH_VALUE(amount, 2) OVER (PARTITION BY customer_id ORDER BY transaction_date) IS NOT NULL;","customer_transactions (transaction_id INT, customer_id INT, transaction_date DATE, amount DECIMAL)","Uses NTH_VALUE() to get the 'amount' of the second transaction (ordered by 'transaction_date') for each 'customer_id'. `DISTINCT` and `WHERE` are used to return one row per customer with the second transaction amount, if it exists."
Calculate the difference in temperature from 3 readings ago for each sensor.,"SELECT sensor_id, reading_time, temperature, temperature - LAG(temperature, 3) OVER (PARTITION BY sensor_id ORDER BY reading_time) as temp_diff_from_3_ago FROM sensor_data;","sensor_data (reading_id INT, sensor_id INT, reading_time DATETIME, temperature DECIMAL)","Calculates the difference between the current 'temperature' and the 'temperature' from 3 rows prior, within each 'sensor_id' partition, ordered by 'reading_time'."
Calculate the average order amount for a customer within a 7-day window around each order date.,"SELECT customer_id, order_date, amount, AVG(amount) OVER (PARTITION BY customer_id ORDER BY order_date RANGE BETWEEN INTERVAL '3' DAY PRECEDING AND INTERVAL '3' DAY FOLLOWING) as seven_day_avg_amount FROM customer_orders;","customer_orders (order_id INT, customer_id INT, order_date DATE, amount DECIMAL)","Computes the average 'amount' for each 'customer_id', considering orders whose 'order_date' falls within a 3-day window before and after the current order's date (inclusive of current date)."
Calculate a 5-day centered moving average of daily sales for each product.,"SELECT product_id, sale_date, daily_sales, AVG(daily_sales) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) as five_day_centered_avg FROM daily_product_sales;","daily_product_sales (product_id INT, sale_date DATE, daily_sales DECIMAL)","Calculates the average 'daily_sales' for each 'product_id', considering the current day's sales, two preceding days' sales, and two following days' sales, ordered by 'sale_date'."
Calculate the percentage change in stock price from the previous day for each stock.,"SELECT symbol, trade_date, price, (price - LAG(price, 1) OVER (PARTITION BY symbol ORDER BY trade_date)) / LAG(price, 1) OVER (PARTITION BY symbol ORDER BY trade_date) * 100 as percentage_change FROM daily_stock_prices;","daily_stock_prices (symbol VARCHAR, trade_date DATE, price DECIMAL)","Computes the percentage change in 'price' from the previous day's 'price' for each 'symbol', ordered by 'trade_date'. This involves two LAG() calls."
"For each user, count the number of consecutive days they have logged in.","WITH LoginLag AS (SELECT user_id, login_date, LAG(login_date, 1) OVER (PARTITION BY user_id ORDER BY login_date) as prev_login_date FROM user_logins), DayDiff AS (SELECT user_id, login_date, CASE WHEN DATEDIFF(login_date, prev_login_date) = 1 THEN 0 ELSE 1 END as gap FROM LoginLag), Groups AS (SELECT user_id, login_date, SUM(gap) OVER (PARTITION BY user_id ORDER BY login_date) as streak_group FROM DayDiff) SELECT user_id, streak_group, MIN(login_date) as streak_start_date, MAX(login_date) as streak_end_date, COUNT(*) as streak_length FROM Groups GROUP BY user_id, streak_group ORDER BY user_id, streak_start_date;","user_logins (user_id INT, login_date DATE)","Identifies consecutive login streaks by first checking for gaps (where the difference from the previous login is not 1 day). Then, a running sum of these 'gaps' creates distinct groups for each streak. Finally, it counts the length of each streak."
"For each user session, find the start and end timestamp of the session.","SELECT session_id, FIRST_VALUE(event_time) OVER (PARTITION BY session_id ORDER BY event_time) as session_start_time, LAST_VALUE(event_time) OVER (PARTITION BY session_id ORDER BY event_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as session_end_time FROM user_session_events;","user_session_events (event_id INT, session_id INT, event_time DATETIME, event_type VARCHAR)","Uses FIRST_VALUE() to get the earliest 'event_time' and LAST_VALUE() with an unbounded frame to get the latest 'event_time' for each 'session_id', effectively marking the start and end of each session."
"For each department, calculate the average salary of the top 20% highest-paid employees.","WITH RankedEmployees AS (SELECT employee_id, department_id, salary, NTILE(5) OVER (PARTITION BY department_id ORDER BY salary DESC) as salary_quintile FROM employees) SELECT department_id, AVG(salary) as avg_salary_top_quintile FROM RankedEmployees WHERE salary_quintile = 1 GROUP BY department_id;","employees (employee_id INT, department_id INT, salary DECIMAL)","First, uses NTILE(5) to divide employees within each department into 5 groups based on salary (top 20% being quintile 1). Then, it calculates the average salary only for those employees in the first quintile for each department."
Find the second to last transaction for each account.,"WITH RankedTransactions AS (SELECT transaction_id, account_id, transaction_date, amount, ROW_NUMBER() OVER (PARTITION BY account_id ORDER BY transaction_date DESC) as rn FROM account_transactions) SELECT transaction_id, account_id, transaction_date, amount FROM RankedTransactions WHERE rn = 2;","account_transactions (transaction_id INT, account_id INT, transaction_date DATE, amount DECIMAL)","Ranks transactions for each account in descending order of transaction date. Then filters to select the row with rank 2, which corresponds to the second to last transaction."
Determine the percentage rank of each student's overall score among all students.,"SELECT student_id, student_name, total_score, PERCENT_RANK() OVER (ORDER BY total_score) as overall_percent_rank FROM students_overall_scores;","students_overall_scores (student_id INT, student_name VARCHAR, total_score INT)","Calculates the percentile rank of each student's 'total_score' across all students. A value of 0 means the lowest score, and 1 means the highest score in the dataset."
Calculate the cumulative distribution of products by price within each category.,"SELECT product_id, category, price, CUME_DIST() OVER (PARTITION BY category ORDER BY price) as price_cume_dist FROM products;","products (product_id INT, category VARCHAR, price DECIMAL)",Calculates the cumulative distribution of 'price' for each product within its respective 'category'. This value represents the proportion of products within that category with a price less than or equal to the current product's price.
Calculate the sum of sales for the current day and the previous day for each store.,"SELECT store_id, sale_date, daily_sales, SUM(daily_sales) OVER (PARTITION BY store_id ORDER BY sale_date ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) as two_day_rolling_sales FROM daily_store_sales;","daily_store_sales (store_id INT, sale_date DATE, daily_sales DECIMAL)","Computes a rolling sum of 'daily_sales' for each 'store_id', considering the current day's sales and the sales from the immediately preceding day, ordered by 'sale_date'."
"For each temperature reading, find the average of the next 3 readings for that sensor.","SELECT sensor_id, reading_time, temperature, AVG(temperature) OVER (PARTITION BY sensor_id ORDER BY reading_time ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) as avg_next_three_readings FROM sensor_data;","sensor_data (reading_id INT, sensor_id INT, reading_time DATETIME, temperature DECIMAL)","Calculates the average 'temperature' for each 'sensor_id', considering the current reading and the two subsequent readings, ordered by 'reading_time'."
"For each department, find the employee who was hired first.","WITH RankedHires AS (SELECT employee_id, name, department_id, hire_date, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY hire_date) as rn FROM employees) SELECT employee_id, name, department_id, hire_date FROM RankedHires WHERE rn = 1;","employees (employee_id INT, name VARCHAR, department_id INT, hire_date DATE)","Ranks employees within each department by their 'hire_date' in ascending order. Then filters to select the row with rank 1, representing the first hired employee in each department."
"Rank products by units sold, and then by revenue within each category, prioritizing units sold.","SELECT product_id, category, units_sold, revenue, RANK() OVER (PARTITION BY category ORDER BY units_sold DESC, revenue DESC) as product_rank FROM product_performance;","product_performance (product_id INT, category VARCHAR, units_sold INT, revenue DECIMAL)","Ranks products within each 'category' first by 'units_sold' in descending order, and then by 'revenue' in descending order for ties. Products with identical units sold and revenue within a category will share the same rank."
"Calculate the running balance of an account, starting from an initial balance.","SELECT account_id, transaction_date, transaction_amount, SUM(transaction_amount) OVER (PARTITION BY account_id ORDER BY transaction_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) + initial_balance as running_balance FROM account_transactions_with_initial;","account_transactions_with_initial (transaction_id INT, account_id INT, transaction_date DATE, transaction_amount DECIMAL, initial_balance DECIMAL)","Calculates a running sum of 'transaction_amount' for each 'account_id', ordered by 'transaction_date'. This running sum is then added to the 'initial_balance' to compute the running balance."
Calculate the median salary for each department.,"SELECT DISTINCT department_id, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department_id) as median_salary FROM employees;","employees (employee_id INT, department_id INT, salary DECIMAL)","Computes the 50th percentile (median) of 'salary' for each 'department_id'. `PERCENTILE_CONT` interpolates values, providing a continuous median."
Find the 75th percentile score (discrete) for students in each course.,"SELECT DISTINCT course_id, PERCENTILE_DISC(0.75) WITHIN GROUP (ORDER BY score) OVER (PARTITION BY course_id) as seventy_fifth_percentile_score FROM student_scores;","student_scores (student_id INT, course_id INT, score INT)","Calculates the 75th percentile of 'score' for each 'course_id'. `PERCENTILE_DISC` picks an actual score value from the set, representing the discrete 75th percentile."
"For each employee, show their current salary and the salary of the next employee hired in the same department.","SELECT employee_id, name, department_id, salary, LEAD(salary, 1) OVER (PARTITION BY department_id ORDER BY hire_date) as salary_of_next_hire FROM employees;","employees (employee_id INT, name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Uses LEAD() to retrieve the 'salary' of the next employee hired within the same 'department_id', based on their 'hire_date'. Returns NULL if no subsequent employee exists in that department."
Calculate the total sales for the last 3 days for each product.,"SELECT product_id, sale_date, daily_sales, SUM(daily_sales) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) as three_day_sales FROM daily_sales;","daily_sales (product_id INT, sale_date DATE, daily_sales DECIMAL)","Computes a rolling sum of 'daily_sales' for each 'product_id', including the current day's sales and the sales from the two preceding days, ordered by 'sale_date'."
Identify the top 10% highest selling products overall based on total quantity sold.,"WITH ProductQuantity AS (SELECT product_id, product_name, SUM(quantity_sold) as total_quantity FROM product_sales GROUP BY product_id, product_name) SELECT product_id, product_name, total_quantity, NTILE(10) OVER (ORDER BY total_quantity DESC) as quantity_decile FROM ProductQuantity WHERE NTILE(10) OVER (ORDER BY total_quantity DESC) = 1;","product_sales (product_id INT, product_name VARCHAR, quantity_sold INT)",Calculates the total quantity sold for each product. Then uses NTILE(10) to divide products into 10 groups based on total quantity sold in descending order. Filters to show only products in the first decile (top 10%).
"For each stock, show its highest price recorded in the preceding 30 days.","SELECT symbol, trade_date, price, MAX(price) OVER (PARTITION BY symbol ORDER BY trade_date RANGE BETWEEN INTERVAL '29' DAY PRECEDING AND CURRENT ROW) as max_price_last_30_days FROM daily_stock_prices;","daily_stock_prices (symbol VARCHAR, trade_date DATE, price DECIMAL)","Calculates the maximum 'price' for each 'symbol', considering the current day's price and all prices within the preceding 29 days (making it a 30-day window), ordered by 'trade_date'."
Find all products that have experienced a price drop compared to their immediately previous price.,"WITH PriceChanges AS (SELECT product_id, price_date, price, LAG(price, 1) OVER (PARTITION BY product_id ORDER BY price_date) as previous_price FROM product_history) SELECT product_id, price_date, price, previous_price FROM PriceChanges WHERE price < previous_price;","product_history (product_id INT, price_date DATE, price DECIMAL)","Uses LAG() to get the previous price for each product. Then, it filters the results to show only those records where the current price is less than the previous price, indicating a price drop."
"For each student, list their score and the score of the highest-scoring student in their class (excluding the student themselves if they are the highest).","SELECT student_id, class_id, score, MAX(score) OVER (PARTITION BY class_id) as highest_score_in_class FROM student_scores;","student_scores (student_id INT, class_id INT, score INT)",Computes the maximum 'score' for all students within each 'class_id'. This maximum value is then displayed for every row belonging to that class.
"Assign a sequence number to each order a customer places, starting from 1 for their first order.","SELECT customer_id, order_id, order_date, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date) as customer_order_sequence FROM orders;","orders (order_id INT, customer_id INT, order_date DATE)","Assigns a sequential number to each order placed by a 'customer_id', ordered by 'order_date', so the first order gets 1, the second gets 2, and so on."
"Calculate the average rating for each movie, considering ratings from the same year.","SELECT movie_id, release_year, rating, AVG(rating) OVER (PARTITION BY release_year) as avg_rating_by_year FROM movie_ratings;","movie_ratings (rating_id INT, movie_id INT, release_year INT, rating DECIMAL)",Computes the average 'rating' for all movies released in the same 'release_year'. This average is then displayed for every movie from that year.
Show the employee with the second highest salary in each department.,"WITH EmployeeRank AS (SELECT employee_id, name, department_id, salary, DENSE_RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) as salary_dr FROM employees) SELECT employee_id, name, department_id, salary FROM EmployeeRank WHERE salary_dr = 2;","employees (employee_id INT, name VARCHAR, department_id INT, salary DECIMAL)",Assigns a dense rank to employees within each department based on salary in descending order. Then filters to select employees who hold the second dense rank in their department.
"For each transaction, find the first recorded transaction amount for its transaction type.","SELECT transaction_id, transaction_type, transaction_date, amount, FIRST_VALUE(amount) OVER (PARTITION BY transaction_type ORDER BY transaction_date) as first_transaction_amount_for_type FROM financial_transactions;","financial_transactions (transaction_id INT, transaction_type VARCHAR, transaction_date DATE, amount DECIMAL)",Retrieves the 'amount' of the earliest transaction (ordered by 'transaction_date') for each 'transaction_type'. This value is then displayed for every transaction of that type.
Calculate the difference between the current daily production and the average daily production over the entire month for each product.,"SELECT product_id, production_date, daily_production, daily_production - AVG(daily_production) OVER (PARTITION BY product_id, EXTRACT(YEAR FROM production_date), EXTRACT(MONTH FROM production_date)) as diff_from_monthly_avg FROM daily_production_data;","daily_production_data (product_id INT, production_date DATE, daily_production DECIMAL)","Calculates the average 'daily_production' for each 'product_id' within its respective month and year. Then, it subtracts this monthly average from the current 'daily_production' to show the deviation."
"For each customer's purchase, find the date of their subsequent purchase.","SELECT customer_id, purchase_date, item, LEAD(purchase_date, 1) OVER (PARTITION BY customer_id ORDER BY purchase_date) as next_purchase_date FROM purchases;","purchases (purchase_id INT, customer_id INT, purchase_date DATE, item VARCHAR)","Uses LEAD() to fetch the 'purchase_date' of the next purchase made by the same 'customer_id', ordered by 'purchase_date'. Returns NULL if no subsequent purchase exists."
Instruction,Query,Table Schema,Explanation
Find the names of employees who work in the 'Sales' department.,SELECT employee_name FROM Employees WHERE department_id IN (SELECT department_id FROM Departments WHERE department_name = 'Sales');,"Employees (employee_id, employee_name, department_id, salary), Departments (department_id, department_name)","This query uses a subquery in the WHERE clause with IN to select department_id from the Departments table where the department_name is 'Sales', then filters Employees based on these department_ids."
List each product's name along with its average price across all products.,"SELECT product_name, price, (SELECT AVG(price) FROM Products) AS average_product_price FROM Products;","Products (product_id, product_name, price, category)",A scalar subquery is used in the SELECT clause to calculate the overall average price of all products and display it alongside each individual product's name and price.
Retrieve the names of departments that have at least one employee earning more than 60000.,SELECT department_name FROM Departments d WHERE EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id AND e.salary > 60000);,"Departments (department_id, department_name), Employees (employee_id, employee_name, department_id, salary)",A correlated subquery with EXISTS checks for each department if there is at least one employee in that department earning more than 60000.
Find the names of customers who have placed orders with a total amount greater than 500.,"SELECT c.customer_name FROM Customers c JOIN (SELECT customer_id, SUM(order_amount) AS total_amount FROM Orders GROUP BY customer_id HAVING SUM(order_amount) > 500) AS high_value_customers ON c.customer_id = high_value_customers.customer_id;","Customers (customer_id, customer_name, city), Orders (order_id, customer_id, order_date, order_amount)","A subquery in the FROM clause acts as a derived table named high_value_customers, which calculates the total order amount for each customer and filters those with a total greater than 500. This derived table is then joined with the Customers table."
Get the product names that are more expensive than all products in the 'Electronics' category.,SELECT product_name FROM Products WHERE price > ALL (SELECT price FROM Products WHERE category = 'Electronics');,"Products (product_id, product_name, price, category)",Uses > ALL to compare the price of each product with every price returned by the subquery (all products in the 'Electronics' category).
Find the student names who are enrolled in 'Calculus' but not in 'Algebra'.,SELECT s.student_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id WHERE c.course_name = 'Calculus' AND s.student_id NOT IN (SELECT student_id FROM Enrollments en JOIN Courses co ON en.course_id = co.course_id WHERE co.course_name = 'Algebra');,"Students (student_id, student_name), Courses (course_id, course_name), Enrollments (enrollment_id, student_id, course_id, grade)",The query first selects students enrolled in 'Calculus' and then uses a subquery with NOT IN to exclude those students who are also enrolled in 'Algebra'.
Retrieve employees whose salary is greater than the average salary of their respective department.,"SELECT e.employee_name, e.salary, d.department_name FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE e.salary > (SELECT AVG(salary) FROM Employees WHERE department_id = e.department_id);","Employees (employee_id, employee_name, department_id, salary), Departments (department_id, department_name)","This is a correlated subquery where for each employee, the subquery calculates the average salary of their specific department, and the outer query filters employees whose salary exceeds this departmental average."
Show the top 3 highest-paid employees along with their salaries.,"SELECT employee_name, salary FROM Employees WHERE salary IN (SELECT DISTINCT salary FROM Employees ORDER BY salary DESC LIMIT 3) ORDER BY salary DESC;","Employees (employee_id, employee_name, department_id, salary)",The subquery finds the top 3 distinct highest salaries. The outer query then retrieves all employees whose salaries match these top 3 values.
List all authors who have written more than 5 books.,SELECT author_name FROM Authors WHERE author_id IN (SELECT author_id FROM Books GROUP BY author_id HAVING COUNT(book_id) > 5);,"Authors (author_id, author_name), Books (book_id, title, author_id, publication_year)",The subquery identifies author IDs with more than 5 books using GROUP BY and HAVING. The outer query then retrieves the names of these authors.
Find the movies that have not been directed by 'Christopher Nolan'.,SELECT movie_title FROM Movies WHERE director_id NOT IN (SELECT director_id FROM Directors WHERE director_name = 'Christopher Nolan');,"Movies (movie_id, movie_title, director_id, release_year), Directors (director_id, director_name)","The subquery finds the director_id of 'Christopher Nolan'. The outer query then selects movies whose director_id is not in this result, effectively excluding movies directed by Christopher Nolan."
Retrieve the names of customers who have not placed any orders.,SELECT customer_name FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders);,"Customers (customer_id, customer_name, city), Orders (order_id, customer_id, order_date, order_amount)","The subquery retrieves all customer IDs that exist in the Orders table. The outer query then selects customer names whose IDs are not found in this list, indicating they have placed no orders."
Show product categories where the minimum price is greater than the overall average product price.,SELECT category FROM Products GROUP BY category HAVING MIN(price) > (SELECT AVG(price) FROM Products);,"Products (product_id, product_name, price, category)",A scalar subquery calculates the overall average product price. The outer query then groups products by category and filters those groups where their minimum price is greater than this overall average.
List the names of employees who earn more than the employee 'John Doe'.,SELECT employee_name FROM Employees WHERE salary > (SELECT salary FROM Employees WHERE employee_name = 'John Doe');,"Employees (employee_id, employee_name, department_id, salary)",A scalar subquery is used to find the salary of 'John Doe'. The outer query then selects employees whose salary is greater than this specific value.
Find all orders placed by customers from 'New York'.,"SELECT order_id, order_amount FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE city = 'New York');","Orders (order_id, customer_id, order_date, order_amount), Customers (customer_id, customer_name, city)",The subquery retrieves customer IDs for customers located in 'New York'. The outer query then selects orders associated with these customer IDs.
Retrieve the names of employees who have the same salary as 'Jane Smith'.,SELECT employee_name FROM Employees WHERE salary = (SELECT salary FROM Employees WHERE employee_name = 'Jane Smith') AND employee_name <> 'Jane Smith';,"Employees (employee_id, employee_name, department_id, salary)","A scalar subquery fetches the salary of 'Jane Smith'. The outer query then selects other employees whose salary matches this value, excluding 'Jane Smith' herself."
List projects that have no tasks assigned.,SELECT project_name FROM Projects WHERE project_id NOT IN (SELECT DISTINCT project_id FROM Tasks);,"Projects (project_id, project_name, start_date), Tasks (task_id, task_name, project_id, status)","The subquery finds all project IDs that have tasks. The outer query then selects projects whose IDs are not in this list, indicating no tasks are assigned."
Show courses that have more than 50 students enrolled.,SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Enrollments GROUP BY course_id HAVING COUNT(student_id) > 50);,"Courses (course_id, course_name), Enrollments (enrollment_id, student_id, course_id, grade)",The subquery groups enrollments by course and identifies courses with more than 50 students. The outer query then retrieves the names of these courses.
Get the names of products whose price is lower than the minimum price of products in the 'Books' category.,SELECT product_name FROM Products WHERE price < (SELECT MIN(price) FROM Products WHERE category = 'Books');,"Products (product_id, product_name, price, category)",A scalar subquery determines the minimum price of products in the 'Books' category. The outer query then selects products whose price is less than this minimum.
Find employees who are the only ones in their department.,SELECT e.employee_name FROM Employees e WHERE 1 = (SELECT COUNT(*) FROM Employees WHERE department_id = e.department_id);,"Employees (employee_id, employee_name, department_id, salary)",This correlated subquery counts the number of employees for each department. The outer query then selects employees whose department has exactly one employee (themselves).
List customer names who have ordered all products from the 'Electronics' category.,SELECT c.customer_name FROM Customers c WHERE NOT EXISTS (SELECT p.product_id FROM Products p WHERE p.category = 'Electronics' AND NOT EXISTS (SELECT o.order_id FROM Orders o WHERE o.customer_id = c.customer_id AND o.product_id = p.product_id));,"Customers (customer_id, customer_name), Products (product_id, product_name, category), Orders (order_id, customer_id, product_id)","Uses a double-nested NOT EXISTS correlated subquery. The outer NOT EXISTS checks if there's any 'Electronics' product that the customer has NOT ordered, so the customer ordering ALL 'Electronics' products will not satisfy the outer NOT EXISTS condition."
Retrieve the department names that have no employees.,SELECT department_name FROM Departments WHERE department_id NOT IN (SELECT DISTINCT department_id FROM Employees);,"Departments (department_id, department_name), Employees (employee_id, department_id)",The subquery selects all department IDs that currently have employees. The outer query then filters departments whose IDs are not in this list.
"Show the average salary for each department, only for departments where the average salary is above 70000.","SELECT d.department_name, (SELECT AVG(e.salary) FROM Employees e WHERE e.department_id = d.department_id) AS average_department_salary FROM Departments d WHERE (SELECT AVG(e.salary) FROM Employees e WHERE e.department_id = d.department_id) > 70000;","Departments (department_id, department_name), Employees (employee_id, department_id, salary)",Uses a correlated scalar subquery in both the SELECT and WHERE clauses. It calculates the average salary for each department and filters out departments where this average is not above 70000.
Find movies released in the same year as 'Titanic'.,SELECT movie_title FROM Movies WHERE release_year = (SELECT release_year FROM Movies WHERE movie_title = 'Titanic') AND movie_title <> 'Titanic';,"Movies (movie_id, movie_title, director_id, release_year)",A scalar subquery retrieves the release year of 'Titanic'. The outer query then selects other movies released in that same year.
List employees who earn more than the highest salary in the 'IT' department.,SELECT employee_name FROM Employees WHERE salary > (SELECT MAX(salary) FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'IT'));,"Employees (employee_id, employee_name, department_id, salary), Departments (department_id, department_name)","A nested subquery finds the department_id of 'IT', and then another subquery finds the maximum salary within that IT department. The outer query selects employees whose salary exceeds this maximum."
Get customers who have placed an order with an amount greater than the average order amount.,SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_amount > (SELECT AVG(order_amount) FROM Orders);,"Customers (customer_id, customer_name), Orders (order_id, customer_id, order_amount)","A scalar subquery calculates the overall average order amount. The outer query then joins Customers and Orders and filters for orders with an amount greater than this average, showing distinct customer names."
Find the courses that have the maximum number of enrollments.,"SELECT c.course_name FROM Courses c JOIN (SELECT course_id, COUNT(student_id) AS num_enrollments FROM Enrollments GROUP BY course_id) AS course_enrollments ON c.course_id = course_enrollments.course_id WHERE course_enrollments.num_enrollments = (SELECT MAX(num_enrollments) FROM (SELECT COUNT(student_id) AS num_enrollments FROM Enrollments GROUP BY course_id) AS max_enrollment_counts);","Courses (course_id, course_name), Enrollments (enrollment_id, student_id, course_id)",Uses a derived table to count enrollments per course. A nested subquery then finds the maximum enrollment count from this derived table. The outer query filters courses matching this maximum count.
List products that are more expensive than any product in the 'Clothing' category.,SELECT product_name FROM Products WHERE price > ANY (SELECT price FROM Products WHERE category = 'Clothing');,"Products (product_id, product_name, price, category)",Uses > ANY to select products whose price is greater than at least one product's price in the 'Clothing' category.
Retrieve the names of employees who have the lowest salary in their respective department.,"SELECT e.employee_name, e.salary, d.department_name FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE e.salary = (SELECT MIN(salary) FROM Employees WHERE department_id = e.department_id);","Employees (employee_id, employee_name, department_id, salary), Departments (department_id, department_name)",A correlated subquery finds the minimum salary for each employee's department. The outer query then selects employees whose salary matches this minimum.
Find publishers who have published at least one book before 2000 and at least one book after 2010.,SELECT p.publisher_name FROM Publishers p WHERE EXISTS (SELECT 1 FROM Books b WHERE b.publisher_id = p.publisher_id AND b.publication_year < 2000) AND EXISTS (SELECT 1 FROM Books b2 WHERE b2.publisher_id = p.publisher_id AND b2.publication_year > 2010);,"Publishers (publisher_id, publisher_name), Books (book_id, title, publisher_id, publication_year)","Uses two separate correlated EXISTS subqueries, one to check for books published before 2000 and another for books published after 2010, both linked to the current publisher."
"Show the total number of orders for each customer, but only for customers who have ordered more than 3 times.","SELECT c.customer_name, (SELECT COUNT(o.order_id) FROM Orders o WHERE o.customer_id = c.customer_id) AS total_orders FROM Customers c WHERE (SELECT COUNT(o.order_id) FROM Orders o WHERE o.customer_id = c.customer_id) > 3;","Customers (customer_id, customer_name), Orders (order_id, customer_id)",Uses a correlated scalar subquery to count orders per customer in both the SELECT and WHERE clauses. The outer query filters customers who have more than 3 orders and displays their count.
Get employees whose hire date is earlier than the average hire date of all employees.,"SELECT employee_name, hire_date FROM Employees WHERE hire_date < (SELECT AVG(hire_date) FROM Employees);","Employees (employee_id, employee_name, hire_date)",A scalar subquery calculates the average hire date. The outer query then selects employees whose hire date is earlier than this average.
List all departments where all employees earn more than 50000.,SELECT department_name FROM Departments d WHERE NOT EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id AND e.salary <= 50000);,"Departments (department_id, department_name), Employees (employee_id, department_id, salary)","Uses a correlated NOT EXISTS subquery. It checks if there is any employee in the department who earns 50000 or less. If no such employee exists, it means all employees earn more than 50000."
Find students who have enrolled in courses with an average grade higher than 85.,SELECT DISTINCT s.student_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id WHERE e.course_id IN (SELECT course_id FROM Enrollments GROUP BY course_id HAVING AVG(grade) > 85);,"Students (student_id, student_name), Enrollments (enrollment_id, student_id, course_id, grade)",The subquery identifies courses where the average grade is above 85. The outer query then selects distinct student names who are enrolled in any of these courses.
Retrieve the names of products that have never been ordered.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Orders);,"Products (product_id, product_name), Orders (order_id, product_id)",The subquery finds all product IDs that have been ordered. The outer query then selects product names whose IDs are not in this list.
"Show the manager's name for each employee, using a subquery to get the manager's name.","SELECT e.employee_name, (SELECT m.employee_name FROM Employees m WHERE m.employee_id = e.manager_id) AS manager_name FROM Employees e;","Employees (employee_id, employee_name, manager_id)","A correlated scalar subquery is used in the SELECT clause. For each employee, it looks up their manager's name based on the manager_id in the same Employees table."
Get the names of movies that have an actor whose age is above 60.,SELECT DISTINCT m.movie_title FROM Movies m JOIN Movie_Actors ma ON m.movie_id = ma.movie_id WHERE ma.actor_id IN (SELECT actor_id FROM Actors WHERE age > 60);,"Movies (movie_id, movie_title), Actors (actor_id, actor_name, age), Movie_Actors (movie_id, actor_id)",The subquery identifies actors older than 60. The outer query then joins Movies with Movie_Actors and filters for movies featuring any of these actors.
Find vehicles that have a market value greater than the average market value of vehicles of the same make.,"SELECT v.vehicle_model, v.market_value, v.make FROM Vehicles v WHERE v.market_value > (SELECT AVG(v2.market_value) FROM Vehicles v2 WHERE v2.make = v.make);","Vehicles (vehicle_id, vehicle_model, make, market_value)",A correlated subquery calculates the average market value for each vehicle's specific make. The outer query then selects vehicles whose market value is greater than this average for their make.
List departments with an average employee salary that is less than the overall company average salary.,SELECT d.department_name FROM Departments d WHERE (SELECT AVG(e.salary) FROM Employees e WHERE e.department_id = d.department_id) < (SELECT AVG(salary) FROM Employees);,"Departments (department_id, department_name), Employees (employee_id, department_id, salary)",Compares the average salary of each department (calculated by a correlated subquery) with the overall average salary of all employees (calculated by a scalar subquery).
Retrieve the names of customers who placed an order on the same date as customer 'Alice Smith'.,SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date = (SELECT order_date FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Alice Smith') LIMIT 1) AND c.customer_name <> 'Alice Smith';,"Customers (customer_id, customer_name), Orders (order_id, customer_id, order_date)","A nested subquery finds the customer_id for 'Alice Smith', then another subquery finds one of her order dates. The outer query selects other customers who placed an order on that same date."
Find books that have a price lower than the average price of books published by 'Penguin Random House'.,SELECT b.title FROM Books b WHERE b.price < (SELECT AVG(b2.price) FROM Books b2 WHERE b2.publisher_id = (SELECT p.publisher_id FROM Publishers p WHERE p.publisher_name = 'Penguin Random House'));,"Books (book_id, title, publisher_id, price), Publishers (publisher_id, publisher_name)","A nested subquery finds the publisher_id for 'Penguin Random House', then another subquery calculates the average price of books from that publisher. The outer query selects books with a price lower than this average."
"List all employees who are not managers (i.e., not present in the manager_id column).",SELECT employee_name FROM Employees WHERE employee_id NOT IN (SELECT DISTINCT manager_id FROM Employees WHERE manager_id IS NOT NULL);,"Employees (employee_id, employee_name, manager_id)","The subquery selects all unique employee IDs that appear as a manager_id. The outer query then selects employees whose ID is not in this list, meaning they are not managers."
"Show the number of students enrolled in each course, but only for courses with more than 10 students.","SELECT c.course_name, (SELECT COUNT(e.student_id) FROM Enrollments e WHERE e.course_id = c.course_id) AS num_students FROM Courses c WHERE (SELECT COUNT(e.student_id) FROM Enrollments e WHERE e.course_id = c.course_id) > 10;","Courses (course_id, course_name), Enrollments (enrollment_id, course_id, student_id)",Uses a correlated scalar subquery to count students for each course in both SELECT and WHERE. Filters courses to include only those with more than 10 students.
Get the names of actors who have appeared in more movies than 'Tom Hanks'.,"SELECT a.actor_name FROM Actors a JOIN (SELECT actor_id, COUNT(movie_id) AS num_movies FROM Movie_Actors GROUP BY actor_id) AS actor_movie_counts ON a.actor_id = actor_movie_counts.actor_id WHERE actor_movie_counts.num_movies > (SELECT COUNT(movie_id) FROM Movie_Actors WHERE actor_id = (SELECT actor_id FROM Actors WHERE actor_name = 'Tom Hanks'));","Actors (actor_id, actor_name), Movie_Actors (movie_id, actor_id)",A derived table calculates movie counts per actor. A nested subquery finds Tom Hanks' actor_id and then his movie count. The outer query filters actors who have appeared in more movies than Tom Hanks.
Find projects where all tasks are completed ('Completed' status).,SELECT project_name FROM Projects p WHERE NOT EXISTS (SELECT 1 FROM Tasks t WHERE t.project_id = p.project_id AND t.status <> 'Completed');,"Projects (project_id, project_name), Tasks (task_id, project_id, status)","A correlated NOT EXISTS subquery checks if there is any task within a project that is NOT 'Completed'. If no such task exists, it means all tasks are completed."
List customers who have purchased the most expensive product.,SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.product_id IN (SELECT product_id FROM Products ORDER BY price DESC LIMIT 1);,"Customers (customer_id, customer_name), Orders (order_id, customer_id, product_id), Products (product_id, price)",The subquery finds the product_id of the single most expensive product. The outer query then selects distinct customer names who have ordered this product.
Retrieve employees who have a salary less than the average salary of all employees in the 'Engineering' department.,SELECT employee_name FROM Employees WHERE salary < (SELECT AVG(salary) FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering'));,"Employees (employee_id, employee_name, department_id, salary), Departments (department_id, department_name)","A nested subquery finds the department_id of 'Engineering', then another subquery calculates the average salary within that department. The outer query selects employees with salary less than this average."
Show products that belong to categories where the total quantity ordered is less than 100.,SELECT p.product_name FROM Products p WHERE p.category IN (SELECT category FROM Products JOIN Orders o ON p.product_id = o.product_id GROUP BY category HAVING SUM(o.quantity) < 100);,"Products (product_id, product_name, category), Orders (order_id, product_id, quantity)",The subquery identifies categories where the sum of quantities ordered for products in that category is less than 100. The outer query then selects products belonging to these categories.
Find students whose grade in 'History' is higher than their grade in 'Math'.,SELECT s.student_name FROM Students s JOIN Enrollments eh ON s.student_id = eh.student_id JOIN Courses ch ON eh.course_id = ch.course_id WHERE ch.course_name = 'History' AND eh.grade > (SELECT em.grade FROM Enrollments em JOIN Courses cm ON em.course_id = cm.course_id WHERE em.student_id = s.student_id AND cm.course_name = 'Math');,"Students (student_id, student_name), Enrollments (enrollment_id, student_id, course_id, grade), Courses (course_id, course_name)",A correlated scalar subquery retrieves the student's grade in 'Math'. The outer query then filters students whose 'History' grade (from a join) is higher than their 'Math' grade.
List departments where the number of employees is above the overall average number of employees per department.,SELECT department_name FROM Departments d WHERE (SELECT COUNT(e.employee_id) FROM Employees e WHERE e.department_id = d.department_id) > (SELECT AVG(employee_count) FROM (SELECT COUNT(employee_id) AS employee_count FROM Employees GROUP BY department_id) AS department_employee_counts);,"Departments (department_id, department_name), Employees (employee_id, department_id)","A correlated subquery counts employees per department. This count is then compared with the average of employee counts across all departments, calculated by a nested derived table."
Get the names of employees who have a salary greater than the average salary of all employees working in departments whose name starts with 'A'.,SELECT employee_name FROM Employees WHERE salary > (SELECT AVG(e.salary) FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE d.department_name LIKE 'A%');,"Employees (employee_id, employee_name, department_id, salary), Departments (department_id, department_name)",A subquery calculates the average salary of employees in departments whose names start with 'A'. The outer query then selects employees with a salary greater than this average.
Find movies that received a rating higher than the average rating for all movies released in the 2000s (2000-2009).,SELECT m.movie_title FROM Movies m JOIN Ratings r ON m.movie_id = r.movie_id WHERE r.rating > (SELECT AVG(r2.rating) FROM Ratings r2 JOIN Movies m2 ON r2.movie_id = m2.movie_id WHERE m2.release_year >= 2000 AND m2.release_year <= 2009);,"Movies (movie_id, movie_title, release_year), Ratings (rating_id, movie_id, rating)",A subquery calculates the average rating for movies released between 2000 and 2009. The outer query then selects movies with a rating greater than this average.
List customers who have placed at least one order on every date an order was placed by 'Bob Johnson'.,SELECT c.customer_name FROM Customers c WHERE NOT EXISTS (SELECT DISTINCT o_bob.order_date FROM Orders o_bob WHERE o_bob.customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Bob Johnson') AND NOT EXISTS (SELECT 1 FROM Orders o_cust WHERE o_cust.customer_id = c.customer_id AND o_cust.order_date = o_bob.order_date));,"Customers (customer_id, customer_name), Orders (order_id, customer_id, order_date)",Uses a double NOT EXISTS pattern. The inner NOT EXISTS checks if the current customer has an order on Bob Johnson's order date. The outer NOT EXISTS checks if there's any date Bob ordered that the current customer did NOT order on.
Retrieve the names of employees whose department has fewer than 3 employees.,SELECT employee_name FROM Employees e WHERE (SELECT COUNT(*) FROM Employees WHERE department_id = e.department_id) < 3;,"Employees (employee_id, employee_name, department_id)",A correlated subquery counts the number of employees in the department of the current employee. The outer query filters employees whose department has less than 3 members.
Show the top 5 highest-rated movies.,"SELECT m.movie_title FROM Movies m JOIN Ratings r ON m.movie_id = r.movie_id GROUP BY m.movie_id, m.movie_title HAVING AVG(r.rating) IN (SELECT DISTINCT AVG(r2.rating) FROM Ratings r2 GROUP BY r2.movie_id ORDER BY AVG(r2.rating) DESC LIMIT 5) ORDER BY AVG(r.rating) DESC;","Movies (movie_id, movie_title), Ratings (rating_id, movie_id, rating)","The inner subquery identifies the average ratings of the top 5 movies. The outer query then groups movies by their ID and title, and filters for those with an average rating matching one of these top 5."
Find employees who joined after the last employee in the 'Marketing' department was hired.,"SELECT employee_name, hire_date FROM Employees WHERE hire_date > (SELECT MAX(e.hire_date) FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE d.department_name = 'Marketing');","Employees (employee_id, employee_name, department_id, hire_date), Departments (department_id, department_name)","A subquery finds the department_id of 'Marketing', and then another subquery determines the latest hire_date within that department. The outer query selects employees hired after this date."
List all products that have an average order quantity greater than 2.,SELECT p.product_name FROM Products p WHERE p.product_id IN (SELECT product_id FROM Orders GROUP BY product_id HAVING AVG(quantity) > 2);,"Products (product_id, product_name), Orders (order_id, product_id, quantity)",The subquery groups orders by product_id and identifies products whose average quantity per order is greater than 2. The outer query retrieves the names of these products.
Get the names of authors who have published books with more pages than the average pages of all books.,"SELECT a.author_name FROM Authors a JOIN Books b ON a.author_id = b.author_id WHERE b.pages > (SELECT AVG(pages) FROM Books) GROUP BY a.author_id, a.author_name;","Authors (author_id, author_name), Books (book_id, author_id, pages)","A scalar subquery calculates the overall average number of pages. The outer query then joins Authors and Books and filters for authors who have at least one book with more pages than this average, grouping by author to show distinct names."
"Find departments that have at least one employee, but not all employees earn above 50000.",SELECT d.department_name FROM Departments d WHERE EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id) AND EXISTS (SELECT 1 FROM Employees e2 WHERE e2.department_id = d.department_id AND e2.salary <= 50000);,"Departments (department_id, department_name), Employees (employee_id, department_id, salary)","Uses two correlated EXISTS subqueries: one to ensure the department has at least one employee, and another to ensure at least one employee earns 50000 or less."
Show products whose price is exactly the same as the most expensive product in the 'Food' category.,SELECT product_name FROM Products WHERE price = (SELECT MAX(price) FROM Products WHERE category = 'Food');,"Products (product_id, product_name, price, category)",A scalar subquery finds the maximum price of a product in the 'Food' category. The outer query then selects products whose price matches this exact value.
List all tasks that are part of a project which started in 2023.,"SELECT task_name FROM Tasks WHERE project_id IN (SELECT project_id FROM Projects WHERE STRFTIME('%Y', start_date) = '2023');","Tasks (task_id, task_name, project_id), Projects (project_id, project_name, start_date)",The subquery identifies project IDs for projects that started in 2023. The outer query then selects tasks belonging to these projects.
Get customers who have never ordered a product from the 'Electronics' category.,SELECT customer_name FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT o.customer_id FROM Orders o JOIN Products p ON o.product_id = p.product_id WHERE p.category = 'Electronics');,"Customers (customer_id, customer_name), Orders (order_id, customer_id, product_id), Products (product_id, category)",The subquery finds all customer IDs who have ordered at least one product from the 'Electronics' category. The outer query then selects customers whose IDs are not in this list.
Find employees whose salary is less than the salary of the lowest-paid employee in the 'HR' department.,SELECT employee_name FROM Employees WHERE salary < (SELECT MIN(e.salary) FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE d.department_name = 'HR');,"Employees (employee_id, employee_name, department_id, salary), Departments (department_id, department_name)","A subquery finds the department_id of 'HR', then another subquery finds the minimum salary within that HR department. The outer query selects employees with a salary lower than this minimum."
Retrieve the names of courses that have students from 'London' enrolled.,SELECT c.course_name FROM Courses c WHERE c.course_id IN (SELECT e.course_id FROM Enrollments e JOIN Students s ON e.student_id = s.student_id WHERE s.city = 'London');,"Courses (course_id, course_name), Enrollments (enrollment_id, course_id, student_id), Students (student_id, city)",The subquery identifies course IDs where students from 'London' are enrolled. The outer query then retrieves the names of these courses.
"Show the number of products in each category, but only for categories that have more products than the 'Books' category.","SELECT category, COUNT(product_id) AS num_products FROM Products GROUP BY category HAVING COUNT(product_id) > (SELECT COUNT(product_id) FROM Products WHERE category = 'Books');","Products (product_id, product_name, category)",A scalar subquery counts the number of products in the 'Books' category. The outer query groups products by category and filters out categories that do not have more products than the 'Books' category.
Find customers whose total order amount is greater than the total order amount of 'Customer A'.,"SELECT c.customer_name FROM Customers c JOIN (SELECT customer_id, SUM(order_amount) AS total_amount FROM Orders GROUP BY customer_id) AS customer_totals ON c.customer_id = customer_totals.customer_id WHERE customer_totals.total_amount > (SELECT SUM(order_amount) FROM Orders WHERE customer_id = (SELECT customer_id FROM Customers WHERE customer_name = 'Customer A'));","Customers (customer_id, customer_name), Orders (order_id, customer_id, order_amount)","A derived table calculates total order amounts for all customers. A nested subquery finds 'Customer A's ID, then their total order amount. The outer query compares each customer's total against 'Customer A's total."
List all departments where the total salary of employees is greater than 300000.,SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Employees GROUP BY department_id HAVING SUM(salary) > 300000);,"Departments (department_id, department_name), Employees (employee_id, department_id, salary)",The subquery groups employees by department and identifies departments where the sum of salaries exceeds 300000. The outer query then retrieves the names of these departments.
Instruction,Query,Table Schema,Explanation
List all unique names of employees and contractors.,SELECT name FROM Employees UNION SELECT name FROM Contractors;,"CREATE TABLE Employees (employee_id INT, name VARCHAR(100), department VARCHAR(100)); CREATE TABLE Contractors (contractor_id INT, name VARCHAR(100), project VARCHAR(100));","This query uses UNION to combine the 'name' column from the 'Employees' table and the 'name' column from the 'Contractors' table, returning only distinct names from both sets."
"Retrieve all cities where customers or suppliers are located, including duplicates.",SELECT city FROM Customers UNION ALL SELECT city FROM Suppliers;,"CREATE TABLE Customers (customer_id INT, name VARCHAR(100), city VARCHAR(100)); CREATE TABLE Suppliers (supplier_id INT, name VARCHAR(100), city VARCHAR(100));","This query uses UNION ALL to combine the 'city' column from 'Customers' and 'Suppliers' tables, including any duplicate city names that appear in either or both tables."
Find all products that are listed in both the 'Electronics' category and also considered 'Best Sellers'.,SELECT product_name FROM Products WHERE category = 'Electronics' INTERSECT SELECT product_name FROM BestSellers WHERE category = 'Electronics';,"CREATE TABLE Products (product_id INT, product_name VARCHAR(100), category VARCHAR(100), price DECIMAL(10,2)); CREATE TABLE BestSellers (item_id INT, product_name VARCHAR(100), category VARCHAR(100));",This query uses INTERSECT to find product names that exist in both the 'Products' table (filtered by 'Electronics' category) and the 'BestSellers' table (also filtered by 'Electronics' category).
Get a list of all employees who are not also listed as managers.,"SELECT employee_id, name FROM Employees EXCEPT SELECT manager_id, name FROM Managers;","CREATE TABLE Employees (employee_id INT, name VARCHAR(100), department VARCHAR(100)); CREATE TABLE Managers (manager_id INT, name VARCHAR(100), department VARCHAR(100));","This query uses EXCEPT to return rows from the 'Employees' table (employee_id, name) that do not have a matching manager_id and name in the 'Managers' table."
Show distinct email addresses of active users and new registrations.,SELECT email FROM ActiveUsers UNION SELECT email FROM NewRegistrations;,"CREATE TABLE ActiveUsers (user_id INT, username VARCHAR(100), email VARCHAR(100)); CREATE TABLE NewRegistrations (reg_id INT, email VARCHAR(100), reg_date DATE);","This query combines distinct email addresses from 'ActiveUsers' and 'NewRegistrations' tables using UNION, ensuring each email is listed only once."
"Combine all phone numbers from customers and leads, including any duplicates.",SELECT phone_number FROM Customers UNION ALL SELECT phone_number FROM Leads;,"CREATE TABLE Customers (customer_id INT, name VARCHAR(100), phone_number VARCHAR(20)); CREATE TABLE Leads (lead_id INT, company VARCHAR(100), phone_number VARCHAR(20));","This query uses UNION ALL to merge 'phone_number' from 'Customers' and 'Leads' tables, preserving all occurrences of phone numbers, even if they are duplicates."
List all products that are available in both 'Warehouse A' and 'Warehouse B'.,SELECT product_id FROM InventoryA INTERSECT SELECT product_id FROM InventoryB;,"CREATE TABLE InventoryA (product_id INT, quantity INT); CREATE TABLE InventoryB (product_id INT, quantity INT);","This query uses INTERSECT to find 'product_id's that exist in both the 'InventoryA' and 'InventoryB' tables, indicating they are available in both warehouses."
Retrieve all employees who are not currently assigned to any project.,"SELECT employee_id, name FROM Employees EXCEPT SELECT employee_id, name FROM ProjectAssignments;","CREATE TABLE Employees (employee_id INT, name VARCHAR(100), department VARCHAR(100)); CREATE TABLE ProjectAssignments (assignment_id INT, employee_id INT, project_id INT, name VARCHAR(100));","This query uses EXCEPT to return employees from the 'Employees' table who do not have a corresponding entry in the 'ProjectAssignments' table, effectively finding unassigned employees."
Show unique categories from both products and services.,SELECT category FROM Products UNION SELECT category FROM Services;,"CREATE TABLE Products (product_id INT, product_name VARCHAR(100), category VARCHAR(100)); CREATE TABLE Services (service_id INT, service_name VARCHAR(100), category VARCHAR(100));","This query combines distinct categories from 'Products' and 'Services' tables using UNION, providing a single list of all unique categories across both."
"Get a list of all item IDs from both recent sales and historical sales, including duplicates.",SELECT item_id FROM RecentSales UNION ALL SELECT item_id FROM HistoricalSales;,"CREATE TABLE RecentSales (sale_id INT, item_id INT, sale_date DATE); CREATE TABLE HistoricalSales (old_sale_id INT, item_id INT, sale_date DATE);","This query uses UNION ALL to combine 'item_id' from 'RecentSales' and 'HistoricalSales', including all instances of item IDs, regardless of duplicates."
Find all students who are enrolled in both 'Math' and 'Physics' departments.,"SELECT student_id, student_name FROM StudentEnrollments WHERE department = 'Math' INTERSECT SELECT student_id, student_name FROM StudentEnrollments WHERE department = 'Physics';","CREATE TABLE StudentEnrollments (enrollment_id INT, student_id INT, student_name VARCHAR(100), department VARCHAR(100));",This query uses INTERSECT to find students who have enrollments in both 'Math' and 'Physics' departments within the 'StudentEnrollments' table.
List all courses offered in 'Fall 2023' but not in 'Spring 2024'.,SELECT course_code FROM CoursesOffered WHERE semester = 'Fall 2023' EXCEPT SELECT course_code FROM CoursesOffered WHERE semester = 'Spring 2024';,"CREATE TABLE CoursesOffered (course_id INT, course_code VARCHAR(20), course_name VARCHAR(100), semester VARCHAR(50));",This query uses EXCEPT to find course codes that were offered in 'Fall 2023' but are not offered in 'Spring 2024' based on the 'CoursesOffered' table.
Retrieve unique product names from 'Electronics' category and 'Apparel' category.,SELECT product_name FROM Products WHERE category = 'Electronics' UNION SELECT product_name FROM Products WHERE category = 'Apparel';,"CREATE TABLE Products (product_id INT, product_name VARCHAR(100), category VARCHAR(100));","This query uses UNION to combine distinct product names from the 'Products' table, specifically those belonging to the 'Electronics' category and those belonging to the 'Apparel' category."
"Show all order IDs from both online and in-store sales, preserving duplicates.",SELECT order_id FROM OnlineSales UNION ALL SELECT order_id FROM InStoreSales;,"CREATE TABLE OnlineSales (order_id INT, customer_id INT, sale_date DATE); CREATE TABLE InStoreSales (order_id INT, cashier_id INT, sale_date DATE);","This query uses UNION ALL to combine all 'order_id's from 'OnlineSales' and 'InStoreSales' tables, including any duplicate order IDs if they exist in both or multiple times within one."
Find all users who are present in both the 'Premium Members' list and 'Newsletter Subscribers' list.,"SELECT user_id, email FROM PremiumMembers INTERSECT SELECT user_id, email FROM NewsletterSubscribers;","CREATE TABLE PremiumMembers (user_id INT, email VARCHAR(100), membership_level VARCHAR(50)); CREATE TABLE NewsletterSubscribers (user_id INT, email VARCHAR(100), subscribe_date DATE);",This query uses INTERSECT to find 'user_id' and 'email' pairs that exist in both 'PremiumMembers' and 'NewsletterSubscribers' tables.
List all departments that have employees but do not have any active projects.,SELECT department_name FROM EmployeeDepartments EXCEPT SELECT department_name FROM ProjectDepartments WHERE project_status = 'Active';,"CREATE TABLE EmployeeDepartments (employee_id INT, department_name VARCHAR(100)); CREATE TABLE ProjectDepartments (project_id INT, department_name VARCHAR(100), project_status VARCHAR(50));",This query uses EXCEPT to return department names that appear in 'EmployeeDepartments' but do not appear in 'ProjectDepartments' where the project status is 'Active'.
Get unique names of authors from books and journals.,SELECT author_name FROM Books UNION SELECT author_name FROM Journals;,"CREATE TABLE Books (book_id INT, title VARCHAR(200), author_name VARCHAR(100)); CREATE TABLE Journals (journal_id INT, article_title VARCHAR(200), author_name VARCHAR(100));",This query uses UNION to combine distinct author names from the 'Books' table and the 'Journals' table.
"Show all transaction IDs from both successful and pending transactions, allowing duplicates.",SELECT transaction_id FROM SuccessfulTransactions UNION ALL SELECT transaction_id FROM PendingTransactions;,"CREATE TABLE SuccessfulTransactions (transaction_id INT, amount DECIMAL(10,2), trans_date DATE); CREATE TABLE PendingTransactions (transaction_id INT, amount DECIMAL(10,2), trans_date DATE);","This query uses UNION ALL to combine all 'transaction_id's from 'SuccessfulTransactions' and 'PendingTransactions', including duplicate IDs if they exist in both tables or multiple times within one."
Find all employees who work in 'Sales' and also have a salary greater than 60000.,"SELECT employee_id, name FROM Employees WHERE department = 'Sales' INTERSECT SELECT employee_id, name FROM Employees WHERE salary > 60000;","CREATE TABLE Employees (employee_id INT, name VARCHAR(100), department VARCHAR(100), salary DECIMAL(10,2));","This query uses INTERSECT to find employees who satisfy both conditions: working in 'Sales' and having a salary greater than 60000, all within the 'Employees' table."
List all products that are in 'Category A' but not in 'Category B'.,"SELECT product_id, product_name FROM Products WHERE category = 'Category A' EXCEPT SELECT product_id, product_name FROM Products WHERE category = 'Category B';","CREATE TABLE Products (product_id INT, product_name VARCHAR(100), category VARCHAR(100));","This query uses EXCEPT to return products (product_id, product_name) that belong to 'Category A' but do not belong to 'Category B' within the 'Products' table."
Retrieve unique customer IDs from both online and offline channels.,SELECT customer_id FROM OnlineCustomers UNION SELECT customer_id FROM OfflineCustomers;,"CREATE TABLE OnlineCustomers (customer_id INT, email VARCHAR(100)); CREATE TABLE OfflineCustomers (customer_id INT, address VARCHAR(200));",This query uses UNION to combine distinct customer IDs from 'OnlineCustomers' and 'OfflineCustomers' tables.
"Get all employee IDs from 'HR' department and 'IT' department, including any duplicates.",SELECT employee_id FROM Employees WHERE department = 'HR' UNION ALL SELECT employee_id FROM Employees WHERE department = 'IT';,"CREATE TABLE Employees (employee_id INT, name VARCHAR(100), department VARCHAR(100));","This query uses UNION ALL to combine employee IDs from the 'Employees' table for those in 'HR' department and those in 'IT' department, including any duplicates if an employee somehow appears in both (though unlikely with a single department column)."
Find common product IDs between 'Electronics' and 'Home Goods' categories that are also 'in stock'.,SELECT product_id FROM Products WHERE category = 'Electronics' AND stock_quantity > 0 INTERSECT SELECT product_id FROM Products WHERE category = 'Home Goods' AND stock_quantity > 0;,"CREATE TABLE Products (product_id INT, product_name VARCHAR(100), category VARCHAR(100), stock_quantity INT);","This query uses INTERSECT to find product IDs that are both in the 'Electronics' category and in stock, and also in the 'Home Goods' category and in stock."
List all students who are registered in 'Course A' but not in 'Course B'.,"SELECT student_id, student_name FROM CourseRegistrations WHERE course_id = 'Course A' EXCEPT SELECT student_id, student_name FROM CourseRegistrations WHERE course_id = 'Course B';","CREATE TABLE CourseRegistrations (registration_id INT, student_id INT, student_name VARCHAR(100), course_id VARCHAR(50));","This query uses EXCEPT to return students (student_id, student_name) who are registered in 'Course A' but are not registered in 'Course B' from the 'CourseRegistrations' table."
Show unique item codes from both 'SaleItems' and 'ClearanceItems'.,SELECT item_code FROM SaleItems UNION SELECT item_code FROM ClearanceItems;,"CREATE TABLE SaleItems (sale_id INT, item_code VARCHAR(50), price DECIMAL(10,2)); CREATE TABLE ClearanceItems (clearance_id INT, item_code VARCHAR(50), discount_percentage DECIMAL(5,2));",This query uses UNION to combine distinct item codes from 'SaleItems' and 'ClearanceItems' tables.
"Combine all user IDs from 'Administrators' and 'Moderators', including duplicates.",SELECT user_id FROM Administrators UNION ALL SELECT user_id FROM Moderators;,"CREATE TABLE Administrators (user_id INT, username VARCHAR(100)); CREATE TABLE Moderators (user_id INT, username VARCHAR(100));","This query uses UNION ALL to merge all user IDs from 'Administrators' and 'Moderators' tables, preserving duplicates."
Find all employees whose names appear in both the 'ActiveEmployees' list and the 'Payroll' system.,SELECT employee_name FROM ActiveEmployees INTERSECT SELECT employee_name FROM PayrollRecords;,"CREATE TABLE ActiveEmployees (employee_id INT, employee_name VARCHAR(100)); CREATE TABLE PayrollRecords (payroll_id INT, employee_name VARCHAR(100), salary DECIMAL(10,2));",This query uses INTERSECT to find employee names that are common to both 'ActiveEmployees' and 'PayrollRecords' tables.
List all products that are available in 'North Store' but not in 'South Store'.,"SELECT product_id, product_name FROM NorthStoreInventory EXCEPT SELECT product_id, product_name FROM SouthStoreInventory;","CREATE TABLE NorthStoreInventory (product_id INT, product_name VARCHAR(100), quantity INT); CREATE TABLE SouthStoreInventory (product_id INT, product_name VARCHAR(100), quantity INT);","This query uses EXCEPT to return products (product_id, product_name) found in 'NorthStoreInventory' but not in 'SouthStoreInventory'."
Retrieve unique addresses from 'HomeAddresses' and 'WorkAddresses'.,SELECT address FROM HomeAddresses UNION SELECT address FROM WorkAddresses;,"CREATE TABLE HomeAddresses (person_id INT, address VARCHAR(200)); CREATE TABLE WorkAddresses (person_id INT, address VARCHAR(200));",This query uses UNION to combine distinct addresses from 'HomeAddresses' and 'WorkAddresses' tables.
"Show all names from 'Faculty' and 'Staff' tables, including duplicates.",SELECT name FROM Faculty UNION ALL SELECT name FROM Staff;,"CREATE TABLE Faculty (faculty_id INT, name VARCHAR(100), department VARCHAR(100)); CREATE TABLE Staff (staff_id INT, name VARCHAR(100), office VARCHAR(100));","This query uses UNION ALL to combine all names from 'Faculty' and 'Staff' tables, preserving duplicates."
Find common 'course_id's between 'Undergraduate Courses' and 'Graduate Courses'.,SELECT course_id FROM UndergraduateCourses INTERSECT SELECT course_id FROM GraduateCourses;,"CREATE TABLE UndergraduateCourses (course_id VARCHAR(50), course_name VARCHAR(100)); CREATE TABLE GraduateCourses (course_id VARCHAR(50), course_name VARCHAR(100));",This query uses INTERSECT to find 'course_id's that are present in both 'UndergraduateCourses' and 'GraduateCourses' tables.
List all customers who placed an order in '2023' but not in '2024'.,SELECT customer_id FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31' EXCEPT SELECT customer_id FROM Orders WHERE order_date BETWEEN '2024-01-01' AND '2024-12-31';,"CREATE TABLE Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10,2));","This query uses EXCEPT to return customer IDs who have orders in 2023 but do not have any orders in 2024, based on the 'Orders' table."
Retrieve unique names of participants from 'Event A' and 'Event B'.,SELECT participant_name FROM EventA_Participants UNION SELECT participant_name FROM EventB_Participants;,"CREATE TABLE EventA_Participants (participant_id INT, participant_name VARCHAR(100)); CREATE TABLE EventB_Participants (participant_id INT, participant_name VARCHAR(100));",This query uses UNION to combine distinct participant names from 'EventA_Participants' and 'EventB_Participants' tables.
"Combine all phone numbers from 'Vendors' and 'Partners', including duplicates.",SELECT phone_number FROM Vendors UNION ALL SELECT phone_number FROM Partners;,"CREATE TABLE Vendors (vendor_id INT, vendor_name VARCHAR(100), phone_number VARCHAR(20)); CREATE TABLE Partners (partner_id INT, partner_name VARCHAR(100), phone_number VARCHAR(20));","This query uses UNION ALL to merge all phone numbers from 'Vendors' and 'Partners' tables, preserving duplicates."
Find all user IDs that are active in both 'Forum A' and 'Forum B'.,SELECT user_id FROM ForumA_ActiveUsers INTERSECT SELECT user_id FROM ForumB_ActiveUsers;,"CREATE TABLE ForumA_ActiveUsers (user_id INT, last_activity DATE); CREATE TABLE ForumB_ActiveUsers (user_id INT, last_post_date DATE);",This query uses INTERSECT to find user IDs that are present in both 'ForumA_ActiveUsers' and 'ForumB_ActiveUsers' tables.
List all tasks marked 'Urgent' but not yet 'Completed'.,"SELECT task_id, task_description FROM Tasks WHERE status = 'Urgent' EXCEPT SELECT task_id, task_description FROM Tasks WHERE status = 'Completed';","CREATE TABLE Tasks (task_id INT, task_description VARCHAR(255), status VARCHAR(50));","This query uses EXCEPT to return tasks (task_id, task_description) that are marked 'Urgent' but are not marked 'Completed' within the 'Tasks' table."
Retrieve unique project names from both 'Current Projects' and 'Archived Projects'.,SELECT project_name FROM CurrentProjects UNION SELECT project_name FROM ArchivedProjects;,"CREATE TABLE CurrentProjects (project_id INT, project_name VARCHAR(100)); CREATE TABLE ArchivedProjects (project_id INT, project_name VARCHAR(100), archive_date DATE);",This query uses UNION to combine distinct project names from 'CurrentProjects' and 'ArchivedProjects' tables.
"Combine all part numbers from 'Assembly Line 1' and 'Assembly Line 2', including duplicates.",SELECT part_number FROM AssemblyLine1Parts UNION ALL SELECT part_number FROM AssemblyLine2Parts;,"CREATE TABLE AssemblyLine1Parts (part_id INT, part_number VARCHAR(50)); CREATE TABLE AssemblyLine2Parts (part_id INT, part_number VARCHAR(50));","This query uses UNION ALL to merge all part numbers from 'AssemblyLine1Parts' and 'AssemblyLine2Parts' tables, preserving duplicates."
Find all items that are present in 'Shelf A' and 'Shelf B'.,SELECT item_id FROM ShelfA INTERSECT SELECT item_id FROM ShelfB;,"CREATE TABLE ShelfA (item_id INT, item_name VARCHAR(100)); CREATE TABLE ShelfB (item_id INT, item_name VARCHAR(100));",This query uses INTERSECT to find item IDs that exist in both 'ShelfA' and 'ShelfB' tables.
List all countries that have customers but no suppliers.,SELECT country FROM Customers EXCEPT SELECT country FROM Suppliers;,"CREATE TABLE Customers (customer_id INT, name VARCHAR(100), country VARCHAR(100)); CREATE TABLE Suppliers (supplier_id INT, name VARCHAR(100), country VARCHAR(100));",This query uses EXCEPT to return countries from the 'Customers' table that do not have any corresponding entry in the 'Suppliers' table.
Retrieve unique product IDs from 'Discounted Products' and 'New Arrivals'.,SELECT product_id FROM DiscountedProducts UNION SELECT product_id FROM NewArrivals;,"CREATE TABLE DiscountedProducts (product_id INT, discount_rate DECIMAL(5,2)); CREATE TABLE NewArrivals (product_id INT, arrival_date DATE);",This query uses UNION to combine distinct product IDs from 'DiscountedProducts' and 'NewArrivals' tables.
"Show all names from 'Registered Voters' and 'Eligible Voters', allowing duplicates.",SELECT name FROM RegisteredVoters UNION ALL SELECT name FROM EligibleVoters;,"CREATE TABLE RegisteredVoters (voter_id INT, name VARCHAR(100)); CREATE TABLE EligibleVoters (voter_id INT, name VARCHAR(100));","This query uses UNION ALL to merge all names from 'RegisteredVoters' and 'EligibleVoters' tables, preserving duplicates."
Find common 'job_code's between 'Full-time Employees' and 'Part-time Employees'.,SELECT job_code FROM FullTimeEmployees INTERSECT SELECT job_code FROM PartTimeEmployees;,"CREATE TABLE FullTimeEmployees (employee_id INT, job_code VARCHAR(50)); CREATE TABLE PartTimeEmployees (employee_id INT, job_code VARCHAR(50));",This query uses INTERSECT to find 'job_code's that are present in both 'FullTimeEmployees' and 'PartTimeEmployees' tables.
List all cities where 'Branch A' operates but 'Branch B' does not.,SELECT city FROM BranchA_Locations EXCEPT SELECT city FROM BranchB_Locations;,"CREATE TABLE BranchA_Locations (location_id INT, city VARCHAR(100)); CREATE TABLE BranchB_Locations (location_id INT, city VARCHAR(100));","This query uses EXCEPT to return cities where 'Branch A' has locations but 'Branch B' does not, based on their respective location tables."
Retrieve unique IDs from 'Active Sessions' and 'Inactive Sessions'.,SELECT session_id FROM ActiveSessions UNION SELECT session_id FROM InactiveSessions;,"CREATE TABLE ActiveSessions (session_id INT, user_id INT); CREATE TABLE InactiveSessions (session_id INT, user_id INT);",This query uses UNION to combine distinct session IDs from 'ActiveSessions' and 'InactiveSessions' tables.
"Combine all names from 'Students' and 'Teachers', including duplicates.",SELECT name FROM Students UNION ALL SELECT name FROM Teachers;,"CREATE TABLE Students (student_id INT, name VARCHAR(100)); CREATE TABLE Teachers (teacher_id INT, name VARCHAR(100));","This query uses UNION ALL to merge all names from 'Students' and 'Teachers' tables, preserving duplicates."
Find all employees who are in both 'Management' and 'Engineering' departments.,"SELECT employee_id, employee_name FROM Employees WHERE department = 'Management' INTERSECT SELECT employee_id, employee_name FROM Employees WHERE department = 'Engineering';","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR(100), department VARCHAR(100));","This query uses INTERSECT to find employees (employee_id, employee_name) who are associated with both 'Management' and 'Engineering' departments within the 'Employees' table. This assumes an employee can be associated with multiple departments."
List all product IDs that were sold in Q1 but not in Q2.,SELECT product_id FROM Sales WHERE sale_date BETWEEN '2023-01-01' AND '2023-03-31' EXCEPT SELECT product_id FROM Sales WHERE sale_date BETWEEN '2023-04-01' AND '2023-06-30';,"CREATE TABLE Sales (sale_id INT, product_id INT, sale_date DATE, quantity INT);","This query uses EXCEPT to return product IDs that were sold in Q1 (Jan-Mar) but not in Q2 (Apr-Jun) of 2023, based on the 'Sales' table."
Retrieve unique names of suppliers from 'Raw Material Suppliers' and 'Finished Goods Suppliers'.,SELECT supplier_name FROM RawMaterialSuppliers UNION SELECT supplier_name FROM FinishedGoodsSuppliers;,"CREATE TABLE RawMaterialSuppliers (supplier_id INT, supplier_name VARCHAR(100)); CREATE TABLE FinishedGoodsSuppliers (supplier_id INT, supplier_name VARCHAR(100));",This query uses UNION to combine distinct supplier names from 'RawMaterialSuppliers' and 'FinishedGoodsSuppliers' tables.
"Show all customer IDs from 'Loyalty Program A' and 'Loyalty Program B', including duplicates.",SELECT customer_id FROM LoyaltyProgramA UNION ALL SELECT customer_id FROM LoyaltyProgramB;,"CREATE TABLE LoyaltyProgramA (customer_id INT, tier VARCHAR(50)); CREATE TABLE LoyaltyProgramB (customer_id INT, points INT);","This query uses UNION ALL to merge all customer IDs from 'LoyaltyProgramA' and 'LoyaltyProgramB' tables, preserving duplicates."
Find all 'item_name's that are available in both 'Online Store' and 'Physical Store'.,SELECT item_name FROM OnlineStoreInventory INTERSECT SELECT item_name FROM PhysicalStoreInventory;,"CREATE TABLE OnlineStoreInventory (item_id INT, item_name VARCHAR(100)); CREATE TABLE PhysicalStoreInventory (item_id INT, item_name VARCHAR(100));",This query uses INTERSECT to find item names that exist in both 'OnlineStoreInventory' and 'PhysicalStoreInventory' tables.
List all products that have a 'low stock' status but are not 'discontinued'.,"SELECT product_id, product_name FROM Products WHERE stock_status = 'Low' EXCEPT SELECT product_id, product_name FROM Products WHERE status = 'Discontinued';","CREATE TABLE Products (product_id INT, product_name VARCHAR(100), stock_status VARCHAR(50), status VARCHAR(50));","This query uses EXCEPT to return products (product_id, product_name) that have a 'Low' stock status but are not marked as 'Discontinued' within the 'Products' table."
Retrieve unique titles of books from 'Fiction' and 'Non-Fiction' genres.,SELECT title FROM Books WHERE genre = 'Fiction' UNION SELECT title FROM Books WHERE genre = 'Non-Fiction';,"CREATE TABLE Books (book_id INT, title VARCHAR(200), genre VARCHAR(100));","This query uses UNION to combine distinct titles from the 'Books' table, specifically those in the 'Fiction' genre and those in the 'Non-Fiction' genre."
"Combine all employee IDs from 'Active Employees' and 'Retired Employees', preserving duplicates.",SELECT employee_id FROM ActiveEmployees UNION ALL SELECT employee_id FROM RetiredEmployees;,"CREATE TABLE ActiveEmployees (employee_id INT, name VARCHAR(100)); CREATE TABLE RetiredEmployees (employee_id INT, name VARCHAR(100));","This query uses UNION ALL to merge all employee IDs from 'ActiveEmployees' and 'RetiredEmployees' tables, preserving duplicates."
Find all customer IDs that are in 'Marketing Leads' and also made a purchase in '2023'.,SELECT customer_id FROM MarketingLeads INTERSECT SELECT customer_id FROM Sales WHERE sale_date BETWEEN '2023-01-01' AND '2023-12-31';,"CREATE TABLE MarketingLeads (lead_id INT, customer_id INT, lead_source VARCHAR(100)); CREATE TABLE Sales (sale_id INT, customer_id INT, sale_date DATE);",This query uses INTERSECT to find customer IDs that exist in 'MarketingLeads' and also have a sales record in the year 2023.
List all cities where we have 'Distributors' but no 'Retailers'.,SELECT city FROM Distributors EXCEPT SELECT city FROM Retailers;,"CREATE TABLE Distributors (distributor_id INT, city VARCHAR(100)); CREATE TABLE Retailers (retailer_id INT, city VARCHAR(100));",This query uses EXCEPT to return cities that are present in the 'Distributors' table but not in the 'Retailers' table.
Retrieve unique email addresses of 'Potential Customers' and 'Existing Customers'.,SELECT email FROM PotentialCustomers UNION SELECT email FROM ExistingCustomers;,"CREATE TABLE PotentialCustomers (lead_id INT, email VARCHAR(100)); CREATE TABLE ExistingCustomers (customer_id INT, email VARCHAR(100));",This query uses UNION to combine distinct email addresses from 'PotentialCustomers' and 'ExistingCustomers' tables.
"Show all 'asset_id's from 'Fixed Assets' and 'Current Assets', including duplicates.",SELECT asset_id FROM FixedAssets UNION ALL SELECT asset_id FROM CurrentAssets;,"CREATE TABLE FixedAssets (asset_id INT, asset_name VARCHAR(100)); CREATE TABLE CurrentAssets (asset_id INT, asset_name VARCHAR(100));","This query uses UNION ALL to merge all asset IDs from 'FixedAssets' and 'CurrentAssets' tables, preserving duplicates."
Find common 'course_name's between 'Online Courses' and 'On-Campus Courses'.,SELECT course_name FROM OnlineCourses INTERSECT SELECT course_name FROM OnCampusCourses;,"CREATE TABLE OnlineCourses (course_id INT, course_name VARCHAR(100)); CREATE TABLE OnCampusCourses (course_id INT, course_name VARCHAR(100));",This query uses INTERSECT to find course names that exist in both 'OnlineCourses' and 'OnCampusCourses' tables.
List all 'device_id's that reported an 'error' but did not report a 'warning'.,SELECT device_id FROM DeviceLogs WHERE log_type = 'Error' EXCEPT SELECT device_id FROM DeviceLogs WHERE log_type = 'Warning';,"CREATE TABLE DeviceLogs (log_id INT, device_id INT, log_type VARCHAR(50), log_timestamp DATETIME);",This query uses EXCEPT to return device IDs that have logged an 'Error' but have not logged a 'Warning' from the 'DeviceLogs' table.
Retrieve unique employee IDs from 'HR Department' and 'Finance Department'.,SELECT employee_id FROM Employees WHERE department = 'HR' UNION SELECT employee_id FROM Employees WHERE department = 'Finance';,"CREATE TABLE Employees (employee_id INT, name VARCHAR(100), department VARCHAR(100));",This query uses UNION to combine distinct employee IDs from the 'Employees' table for those in the 'HR' department and those in the 'Finance' department.
Instruction,Query,Table Schema,Explanation
Retrieve the current date.,SELECT CURDATE();,N/A (no specific table needed),This query uses the CURDATE() function to return the current date as a 'YYYY-MM-DD' string.
Show the current date and time.,SELECT NOW();,N/A (no specific table needed),The NOW() function returns the current date and time in 'YYYY-MM-DD HH:MM:SS' format.
Find the year of birth for each employee.,"SELECT employee_name, YEAR(date_of_birth) FROM employees;","CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), date_of_birth DATE);",The YEAR() function extracts the year component from the date_of_birth column.
List the month in which each order was placed.,"SELECT order_id, MONTH(order_date) FROM orders;","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));",The MONTH() function extracts the month number (1-12) from the order_date column.
Get the day of the month for each event.,"SELECT event_name, DAY(event_date) FROM events;","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(255), event_date DATE, location VARCHAR(255));",The DAY() function extracts the day of the month (1-31) from the event_date column.
Calculate the due date for invoices by adding 30 days to the invoice date.,"SELECT invoice_id, invoice_date, DATE_ADD(invoice_date, INTERVAL 30 DAY) AS due_date FROM invoices;","CREATE TABLE invoices (invoice_id INT PRIMARY KEY, customer_id INT, invoice_date DATE, amount DECIMAL(10,2));",The DATE_ADD() function adds a specified time interval (30 days) to the invoice_date to determine the due_date.
Find the date 7 days before the current date.,"SELECT DATE_SUB(CURDATE(), INTERVAL 7 DAY);",N/A (no specific table needed),The DATE_SUB() function subtracts 7 days from the current date returned by CURDATE().
Determine the number of days between the order date and the shipping date for each order.,"SELECT order_id, DATEDIFF(shipping_date, order_date) AS days_to_ship FROM orders;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, shipping_date DATE, total_amount DECIMAL(10,2));",The DATEDIFF() function calculates the number of days between two date expressions. It returns expr1 - expr2.
Display the order date in 'DD/MM/YYYY' format.,"SELECT order_id, DATE_FORMAT(order_date, '%d/%m/%Y') AS formatted_date FROM orders;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT);",The DATE_FORMAT() function formats the order_date column according to the specified format string '%d/%m/%Y'.
Convert the string '2023-10-26' into a date type.,"SELECT STR_TO_DATE('2023-10-26', '%Y-%m-%d');",N/A (no specific table needed),The STR_TO_DATE() function parses a string based on a given format and converts it into a DATE value.
Retrieve the current time.,SELECT CURTIME();,N/A (no specific table needed),The CURTIME() function returns the current time as a 'HH:MM:SS' string.
Find the hour of each scheduled appointment.,"SELECT appointment_id, HOUR(appointment_time) FROM appointments;","CREATE TABLE appointments (appointment_id INT PRIMARY KEY, appointment_time TIME, description VARCHAR(255));",The HOUR() function extracts the hour component (0-23) from the appointment_time column.
Get the minute component of the session start time.,"SELECT session_id, MINUTE(start_time) FROM sessions;","CREATE TABLE sessions (session_id INT PRIMARY KEY, start_time TIME, end_time TIME);",The MINUTE() function extracts the minute component (0-59) from the start_time column.
Retrieve the second component of the transaction timestamp.,"SELECT transaction_id, SECOND(transaction_timestamp) FROM transactions;","CREATE TABLE transactions (transaction_id INT PRIMARY KEY, transaction_timestamp DATETIME, amount DECIMAL(10,2));",The SECOND() function extracts the second component (0-59) from the transaction_timestamp column.
"Calculate the duration of each task in hours, minutes, and seconds.","SELECT task_id, TIMEDIFF(end_time, start_time) AS duration FROM tasks;","CREATE TABLE tasks (task_id INT PRIMARY KEY, start_time DATETIME, end_time DATETIME, task_name VARCHAR(255));",The TIMEDIFF() function calculates the difference between two time expressions and returns the result as a time value.
"Find the day of the week (1=Sunday, 7=Saturday) for each vacation start date.","SELECT vacation_id, DAYOFWEEK(start_date) FROM vacations;","CREATE TABLE vacations (vacation_id INT PRIMARY KEY, start_date DATE, end_date DATE);","The DAYOFWEEK() function returns the weekday index for a date (1=Sunday, 2=Monday, ..., 7=Saturday)."
Determine which day of the year each holiday falls on.,"SELECT holiday_name, DAYOFYEAR(holiday_date) FROM holidays;","CREATE TABLE holidays (holiday_id INT PRIMARY KEY, holiday_name VARCHAR(255), holiday_date DATE);",The DAYOFYEAR() function returns the day of the year (1-366) for a given date.
Find the week number for each scheduled delivery.,"SELECT delivery_id, WEEK(delivery_date) FROM deliveries;","CREATE TABLE deliveries (delivery_id INT PRIMARY KEY, delivery_date DATE, item_name VARCHAR(255));",The WEEK() function returns the week number of the year for a given date (0-53 or 1-53 depending on mode).
Identify the quarter of the year for each sales report.,"SELECT report_id, QUARTER(report_date) FROM sales_reports;","CREATE TABLE sales_reports (report_id INT PRIMARY KEY, report_date DATE, sales_amount DECIMAL(10,2));",The QUARTER() function returns the quarter of the year (1-4) for a given date.
Display the name of the weekday for each meeting date.,"SELECT meeting_id, DAYNAME(meeting_date) FROM meetings;","CREATE TABLE meetings (meeting_id INT PRIMARY KEY, meeting_date DATE, topic VARCHAR(255));","The DAYNAME() function returns the name of the weekday for a date, e.g., 'Monday'."
Show the name of the month for each product launch.,"SELECT product_name, MONTHNAME(launch_date) FROM products;","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), launch_date DATE);","The MONTHNAME() function returns the full name of the month for a date, e.g., 'January'."
Get the current UNIX timestamp.,SELECT UNIX_TIMESTAMP();,N/A (no specific table needed),The UNIX_TIMESTAMP() function returns the current Unix timestamp (seconds since '1970-01-01 00:00:00' UTC).
Convert the Unix timestamp 1678886400 to a readable datetime format.,SELECT FROM_UNIXTIME(1678886400);,N/A (no specific table needed),The FROM_UNIXTIME() function converts a Unix timestamp (integer seconds) into a DATETIME value.
Find the last day of the month for each payment date.,"SELECT payment_id, LAST_DAY(payment_date) FROM payments;","CREATE TABLE payments (payment_id INT PRIMARY KEY, payment_date DATE, amount DECIMAL(10,2));",The LAST_DAY() function returns the last day of the month for the given date.
Construct a date using the year 2023 and the 150th day of the year.,"SELECT MAKEDATE(2023, 150);",N/A (no specific table needed),The MAKEDATE() function creates a date from a year and a day-of-year number.
"Formulate a time using 10 hours, 30 minutes, and 45 seconds.","SELECT MAKETIME(10, 30, 45);",N/A (no specific table needed),"The MAKETIME() function creates a time value from hours, minutes, and seconds."
"Extract the year, month, and day from the project start date.","SELECT project_name, EXTRACT(YEAR FROM start_date) AS project_year, EXTRACT(MONTH FROM start_date) AS project_month, EXTRACT(DAY FROM start_date) AS project_day FROM projects;","CREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(255), start_date DATE);","The EXTRACT() function extracts a specified part (YEAR, MONTH, DAY) from a date or datetime expression."
Calculate the expiration date for contracts by adding 6 months to the start date.,"SELECT contract_id, start_date, ADDDATE(start_date, INTERVAL 6 MONTH) AS expiration_date FROM contracts;","CREATE TABLE contracts (contract_id INT PRIMARY KEY, start_date DATE, value DECIMAL(10,2));",The ADDDATE() function (synonym for DATE_ADD()) adds 6 months to the start_date.
Find the date 5 years before the current date.,"SELECT SUBDATE(CURDATE(), INTERVAL 5 YEAR);",N/A (no specific table needed),The SUBDATE() function (synonym for DATE_SUB()) subtracts 5 years from the current date.
Advance the schedule by 2 hours for all appointments.,"SELECT appointment_id, ADDTIME(scheduled_time, '02:00:00') AS new_scheduled_time FROM appointments;","CREATE TABLE appointments (appointment_id INT PRIMARY KEY, scheduled_time DATETIME, description VARCHAR(255));",The ADDTIME() function adds a time value ('02:00:00') to a datetime expression (scheduled_time).
Adjust the end time of meetings by reducing 15 minutes.,"SELECT meeting_id, SUBTIME(end_time, '00:15:00') AS adjusted_end_time FROM meetings;","CREATE TABLE meetings (meeting_id INT PRIMARY KEY, start_time DATETIME, end_time DATETIME);",The SUBTIME() function subtracts a time value ('00:15:00') from a datetime expression (end_time).
Convert a timestamp from UTC to 'America/Los_Angeles' timezone.,"SELECT CONVERT_TZ('2023-10-26 10:00:00', 'UTC', 'America/Los_Angeles');",N/A (no specific table needed),The CONVERT_TZ() function converts a datetime value from one timezone to another. Note: Timezone tables must be loaded in MySQL.
"Get the weekday index (0=Monday, 6=Sunday) for event dates.","SELECT event_id, WEEKDAY(event_date) FROM events;","CREATE TABLE events (event_id INT PRIMARY KEY, event_date DATE, event_name VARCHAR(255));","The WEEKDAY() function returns the weekday index (0=Monday, 1=Tuesday, ..., 6=Sunday)."
"Retrieve the format string for a date that includes year, month, and day.","SELECT GET_FORMAT(DATE, 'EUR');",N/A (no specific table needed),"The GET_FORMAT() function returns a format string for a date or time, specified by type and locale. 'EUR' typically implies '%d.%m.%Y'."
Display the precise current date and time including microseconds.,SELECT CURRENT_TIMESTAMP(6);,N/A (no specific table needed),The CURRENT_TIMESTAMP() function returns the current date and time. The argument 6 specifies microsecond precision.
Find the week number for products based on a Sunday start.,"SELECT product_id, WEEK(release_date, 1) FROM products;","CREATE TABLE products (product_id INT PRIMARY KEY, release_date DATE, product_name VARCHAR(255));",The WEEK() function with mode 1 returns the week number (1-53) where week 1 starts on the first Sunday of the year.
Schedule follow-up calls 48 hours after the initial contact.,"SELECT contact_id, contact_time, DATE_ADD(contact_time, INTERVAL 48 HOUR) AS follow_up_time FROM contacts;","CREATE TABLE contacts (contact_id INT PRIMARY KEY, contact_time DATETIME, customer_name VARCHAR(255));",The DATE_ADD() function adds 48 hours to the contact_time.
Adjust production completion times by subtracting 90 minutes.,"SELECT production_id, completion_time, DATE_SUB(completion_time, INTERVAL 90 MINUTE) AS adjusted_completion_time FROM production_log;","CREATE TABLE production_log (production_id INT PRIMARY KEY, completion_time DATETIME, product_type VARCHAR(255));",The DATE_SUB() function subtracts 90 minutes from the completion_time.
Parse the string '2023/10/26 14:30:00' into a datetime value.,"SELECT STR_TO_DATE('2023/10/26 14:30:00', '%Y/%m/%d %H:%i:%s');",N/A (no specific table needed),The STR_TO_DATE() function converts the given string into a DATETIME value using the specified format.
Get today's date.,SELECT CURRENT_DATE();,N/A (no specific table needed),"The CURRENT_DATE() function is an alias for CURDATE(), returning the current date."
Retrieve the current time with second precision.,SELECT CURRENT_TIME();,N/A (no specific table needed),"The CURRENT_TIME() function is an alias for CURTIME(), returning the current time."
Extract only the date part from a full timestamp.,SELECT DATE('2023-10-26 15:30:00');,N/A (no specific table needed),The DATE() function extracts the date part of a datetime expression.
Extract only the time part from a full timestamp.,SELECT TIME('2023-10-26 15:30:00');,N/A (no specific table needed),The TIME() function extracts the time part of a datetime expression.
Calculate the exact end time by adding 3600 seconds to the start time.,"SELECT job_id, start_time, DATE_ADD(start_time, INTERVAL 3600 SECOND) AS end_time FROM jobs;","CREATE TABLE jobs (job_id INT PRIMARY KEY, start_time DATETIME, job_description VARCHAR(255));",The DATE_ADD() function adds 3600 seconds (1 hour) to the start_time.
Determine the campaign start date by subtracting 2 weeks from the launch date.,"SELECT campaign_id, launch_date, DATE_SUB(launch_date, INTERVAL 2 WEEK) AS start_date FROM campaigns;","CREATE TABLE campaigns (campaign_id INT PRIMARY KEY, launch_date DATE, campaign_name VARCHAR(255));",The DATE_SUB() function subtracts 2 weeks from the launch_date.
List all events that occurred in the year 2022.,"SELECT event_name, event_date FROM events WHERE YEAR(event_date) = 2022;","CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(255), event_date DATE, location VARCHAR(255));",This query filters events by extracting the year from event_date using YEAR() and comparing it to '2022'.
Count the number of orders placed in each month of the year 2023.,"SELECT MONTH(order_date) AS month_number, COUNT(order_id) AS total_orders FROM orders WHERE YEAR(order_date) = 2023 GROUP BY MONTH(order_date);","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, customer_id INT, total_amount DECIMAL(10,2));",The query uses MONTH() to group orders by month and COUNT() to get the total orders for each month in 2023.
Find all appointments scheduled for the 15th day of any month.,"SELECT appointment_id, appointment_date, appointment_time FROM appointments WHERE DAY(appointment_date) = 15;","CREATE TABLE appointments (appointment_id INT PRIMARY KEY, appointment_date DATE, appointment_time TIME, description VARCHAR(255));",This query filters appointments by extracting the day of the month from appointment_date using DAY() and checking if it's equal to 15.
"Display the report date including the full weekday name, month name, day, and year.","SELECT report_id, DATE_FORMAT(report_date, '%W, %M %D, %Y') AS formatted_report_date FROM sales_reports;","CREATE TABLE sales_reports (report_id INT PRIMARY KEY, report_date DATE, sales_amount DECIMAL(10,2));","The DATE_FORMAT() function formats the report_date using '%W' for full weekday name, '%M' for full month name, '%D' for day with suffix, and '%Y' for four-digit year."
Insert a new log entry with the current timestamp.,"INSERT INTO system_logs (log_message, log_timestamp) VALUES ('User logged in', NOW());","CREATE TABLE system_logs (log_id INT PRIMARY KEY AUTO_INCREMENT, log_message VARCHAR(255), log_timestamp DATETIME);","This query inserts a new row into the system_logs table, using NOW() to automatically populate the log_timestamp with the current date and time."
Calculate the age of each customer in years based on their date of birth.,"SELECT customer_name, YEAR(CURDATE()) - YEAR(date_of_birth) AS age_in_years FROM customers;","CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), date_of_birth DATE);",This query calculates the age by subtracting the birth year from the current year using YEAR() and CURDATE(). This is a simplified age calculation.
Find all orders placed on a Monday.,"SELECT order_id, order_date FROM orders WHERE DAYOFWEEK(order_date) = 2;","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, total_amount DECIMAL(10,2));","This query filters orders by checking if the DAYOFWEEK() for the order_date is 2 (Monday, where Sunday is 1)."
Get the maximum order date from the orders table.,SELECT MAX(order_date) FROM orders;,"CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, total_amount DECIMAL(10,2));",The MAX() aggregate function returns the latest (maximum) date from the order_date column.
Get the minimum event date from the events table.,SELECT MIN(event_date) FROM events;,"CREATE TABLE events (event_id INT PRIMARY KEY, event_name VARCHAR(255), event_date DATE);",The MIN() aggregate function returns the earliest (minimum) date from the event_date column.
Calculate the average time spent on tasks.,"SELECT SEC_TO_TIME(AVG(TIME_TO_SEC(TIMEDIFF(end_time, start_time)))) AS average_task_duration FROM tasks;","CREATE TABLE tasks (task_id INT PRIMARY KEY, start_time DATETIME, end_time DATETIME, task_name VARCHAR(255));","This query calculates the average duration of tasks by converting TIMEDIFF results to seconds, averaging them, and then converting back to a time format."
Retrieve records where the creation timestamp is within the last 24 hours.,"SELECT * FROM logs WHERE log_timestamp >= DATE_SUB(NOW(), INTERVAL 24 HOUR);","CREATE TABLE logs (log_id INT PRIMARY KEY, log_message VARCHAR(255), log_timestamp DATETIME);",This query filters log entries to include only those where the log_timestamp is greater than or equal to the current time minus 24 hours.
Find customers whose next anniversary is in the next 30 days.,"SELECT customer_name, date_of_birth FROM customers WHERE DATE_ADD(DATE_FORMAT(date_of_birth, CONCAT(YEAR(CURDATE()), '-%m-%d')), INTERVAL 0 YEAR) BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY);","CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), date_of_birth DATE);","This query identifies customers whose next birthday/anniversary falls within the next 30 days, calculating the current year's anniversary date for each customer."
List appointments that are scheduled for tomorrow.,"SELECT appointment_id, appointment_date, appointment_time FROM appointments WHERE appointment_date = DATE_ADD(CURDATE(), INTERVAL 1 DAY);","CREATE TABLE appointments (appointment_id INT PRIMARY KEY, appointment_date DATE, appointment_time TIME, description VARCHAR(255));","This query selects appointments where the appointment_date is exactly one day after the current date, effectively filtering for tomorrow's appointments."
Count sales by year and month.,"SELECT YEAR(sale_date) AS sale_year, MONTH(sale_date) AS sale_month, SUM(amount) AS total_sales FROM sales GROUP BY sale_year, sale_month ORDER BY sale_year, sale_month;","CREATE TABLE sales (sale_id INT PRIMARY KEY, sale_date DATE, amount DECIMAL(10,2));","This query groups sales data by year and month, using YEAR() and MONTH() functions, and calculates the total sales for each period."
Instruction,Query,Table Schema,Explanation
Retrieve all information about all products.,SELECT * FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query selects all columns and all rows from the 'Products' table, providing a complete list of all product details."
List the names and prices of all products.,"SELECT product_name, price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects only the 'product_name' and 'price' columns from the 'Products' table for all entries.
Find all customers' first names and last names.,"SELECT first_name, last_name FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, city TEXT, registration_date DATE);",This query retrieves the 'first_name' and 'last_name' for every customer listed in the 'Customers' table.
Show all details for products with a price greater than 50.00.,SELECT * FROM Products WHERE price > 50.00;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query filters the 'Products' table to show all columns for products where the 'price' is strictly greater than 50.00.
Get the names of products in the 'Electronics' category.,SELECT product_name FROM Products WHERE category = 'Electronics';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query selects the 'product_name' from the 'Products' table, specifically for items whose 'category' is 'Electronics'."
Retrieve all orders placed after '2023-01-01'.,SELECT * FROM Orders WHERE order_date > '2023-01-01';,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);","This query fetches all details of orders from the 'Orders' table that have an 'order_date' later than January 1, 2023."
List employees whose salary is less than 60000.,SELECT * FROM Employees WHERE salary < 60000;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);",This query returns all information for employees from the 'Employees' table whose 'salary' is less than 60000.
Find all customers living in 'New York'.,SELECT * FROM Customers WHERE city = 'New York';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, city TEXT, registration_date DATE);",This query selects all data for customers in the 'Customers' table where their 'city' is 'New York'.
Show all products that are currently out of stock (stock_quantity is 0).,SELECT * FROM Products WHERE stock_quantity = 0;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query retrieves all details for products in the 'Products' table where the 'stock_quantity' is exactly 0, indicating they are out of stock."
Get the titles and authors of books published before the year 2000.,"SELECT title, author FROM Books WHERE publication_year < 2000;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, price REAL, in_stock BOOLEAN);",This query selects the 'title' and 'author' from the 'Books' table for books published in a 'publication_year' before 2000.
List distinct categories of products.,SELECT DISTINCT category FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query returns a unique list of all 'category' values found in the 'Products' table, eliminating duplicates."
Retrieve unique cities where customers are located.,SELECT DISTINCT city FROM Customers;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, city TEXT, registration_date DATE);","This query selects unique 'city' values from the 'Customers' table, showing each city only once."
Show products whose names start with 'Laptop'.,SELECT * FROM Products WHERE product_name LIKE 'Laptop%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query fetches all details for products where the 'product_name' begins with the string 'Laptop'.
Find employees whose last name contains 'son'.,SELECT * FROM Employees WHERE last_name LIKE '%son%';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);",This query retrieves all information for employees whose 'last_name' includes 'son' anywhere within the name.
Get orders with a total amount between 100 and 500.,SELECT * FROM Orders WHERE total_amount BETWEEN 100 AND 500;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);","This query selects all details for orders where the 'total_amount' is within the range of 100 and 500, inclusive."
List books with a price between 15.00 and 30.00.,"SELECT title, price FROM Books WHERE price BETWEEN 15.00 AND 30.00;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, price REAL, in_stock BOOLEAN);",This query fetches the 'title' and 'price' for books where the 'price' falls between 15.00 and 30.00 (inclusive).
Show customers whose email addresses are not null.,"SELECT customer_id, first_name, email FROM Customers WHERE email IS NOT NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, city TEXT, registration_date DATE);","This query selects customer ID, first name, and email for customers who have a recorded email address (i.e., their 'email' is not NULL)."
Retrieve products that do not have a category assigned.,SELECT * FROM Products WHERE category IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query returns all details for products in the 'Products' table where the 'category' field is NULL, meaning no category has been set."
"List all products, ordered by price from lowest to highest.",SELECT * FROM Products ORDER BY price ASC;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query retrieves all product details and sorts them in ascending order based on their 'price'.
"Show employees, sorted by hire date in descending order.","SELECT first_name, last_name, hire_date FROM Employees ORDER BY hire_date DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);","This query selects employee names and hire dates, then orders the results by 'hire_date' from most recent to oldest."
Get the top 5 most expensive products.,"SELECT product_name, price FROM Products ORDER BY price DESC LIMIT 5;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query orders products by 'price' in descending order and then retrieves only the top 5 entries, showing the most expensive products."
Find the 3 newest orders.,SELECT * FROM Orders ORDER BY order_date DESC LIMIT 3;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);",This query sorts all orders by 'order_date' in descending order (newest first) and then limits the result to the first 3 rows.
"Retrieve product names and categories for products with a stock quantity greater than 10, ordered by category.","SELECT product_name, category FROM Products WHERE stock_quantity > 10 ORDER BY category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query selects product names and categories for products having a 'stock_quantity' over 10, then sorts these results by 'category'."
List customers registered in '2023' in ascending order of last name.,SELECT * FROM Customers WHERE registration_date BETWEEN '2023-01-01' AND '2023-12-31' ORDER BY last_name ASC;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, city TEXT, registration_date DATE);",This query filters customers to those registered in 2023 and then orders the filtered results by their 'last_name' in ascending order.
Show all employees who work in the 'Sales' or 'Marketing' department.,"SELECT * FROM Employees WHERE department IN ('Sales', 'Marketing');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);",This query selects all details for employees whose 'department' is either 'Sales' or 'Marketing'.
Find products whose category is not 'Food' or 'Beverages'.,"SELECT * FROM Products WHERE category NOT IN ('Food', 'Beverages');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query retrieves all product details for products that do not belong to the 'Food' or 'Beverages' categories.
Get the titles of movies released in 2020 or 2021.,"SELECT title FROM Movies WHERE release_year IN (2020, 2021);","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, genre TEXT, release_year INTEGER, rating REAL);",This query selects the 'title' of movies from the 'Movies' table that were released in either the year 2020 or 2021.
List products with a price not equal to 9.99.,SELECT * FROM Products WHERE price <> 9.99;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query retrieves all details for products from the 'Products' table where the 'price' is not exactly 9.99.
Show customers whose first name begins with 'A' and live in 'London'.,SELECT * FROM Customers WHERE first_name LIKE 'A%' AND city = 'London';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, city TEXT, registration_date DATE);",This query selects all information for customers whose 'first_name' starts with 'A' AND whose 'city' is 'London'.
Find orders placed by customer_id 101 with a total amount over 200.,SELECT * FROM Orders WHERE customer_id = 101 AND total_amount > 200;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);",This query retrieves all details for orders placed by 'customer_id' 101 where the 'total_amount' of the order exceeds 200.
Retrieve all details for employees who earn more than 70000 and were hired after 2022.,SELECT * FROM Employees WHERE salary > 70000 AND hire_date > '2022-12-31';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);",This query selects all employee details for those with a 'salary' greater than 70000 AND a 'hire_date' after the end of 2022.
List students who are majoring in 'Computer Science' and have a GPA above 3.5.,SELECT * FROM Students WHERE major = 'Computer Science' AND gpa > 3.5;,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, major TEXT, gpa REAL, enrollment_date DATE);",This query retrieves all details for students who have a 'major' in 'Computer Science' and a 'gpa' greater than 3.5.
Show books that are in stock and belong to the 'Fiction' genre.,"SELECT title, author FROM Books WHERE in_stock = TRUE AND genre = 'Fiction';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, price REAL, in_stock BOOLEAN);",This query selects the title and author of books that are marked as 'in_stock' (TRUE) AND whose 'genre' is 'Fiction'.
Get the titles and directors of movies that have a rating of 8.0 or higher.,"SELECT title, director FROM Movies WHERE rating >= 8.0;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, genre TEXT, release_year INTEGER, rating REAL);",This query selects the 'title' and 'director' for movies from the 'Movies' table where the 'rating' is 8.0 or greater.
Retrieve customer IDs and registration dates for customers whose city is 'Chicago'.,"SELECT customer_id, registration_date FROM Customers WHERE city = 'Chicago';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, city TEXT, registration_date DATE);",This query selects the 'customer_id' and 'registration_date' for customers whose 'city' is 'Chicago'.
List products whose names end with 'Kit'.,SELECT product_name FROM Products WHERE product_name LIKE '%Kit';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects the 'product_name' from the 'Products' table for products whose name ends with 'Kit'.
Find orders that are 'Pending' and were placed before '2023-06-01'.,SELECT * FROM Orders WHERE status = 'Pending' AND order_date < '2023-06-01';,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);","This query retrieves all details for orders that have a 'status' of 'Pending' AND were placed before June 1, 2023."
Show employees who are not in the 'HR' department.,SELECT * FROM Employees WHERE department <> 'HR';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);",This query selects all information for employees from the 'Employees' table whose 'department' is not 'HR'.
Get products with a price less than 20 OR a stock quantity less than 5.,SELECT * FROM Products WHERE price < 20 OR stock_quantity < 5;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects all details for products that either have a 'price' less than 20 OR a 'stock_quantity' less than 5.
Retrieve customer full names and emails for customers registered in '2022' OR living in 'Los Angeles'.,"SELECT first_name, last_name, email FROM Customers WHERE registration_date BETWEEN '2022-01-01' AND '2022-12-31' OR city = 'Los Angeles';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, city TEXT, registration_date DATE);",This query selects customer names and emails for those registered in 2022 OR residing in 'Los Angeles'.
List books that are not in stock and were published after 2010.,"SELECT title, author FROM Books WHERE in_stock = FALSE AND publication_year > 2010;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, price REAL, in_stock BOOLEAN);",This query retrieves the title and author of books that are not 'in_stock' (FALSE) AND were published in a 'publication_year' after 2010.
Show the top 10 movies released in the last 5 years.,"SELECT * FROM Movies WHERE release_year >= (strftime('%Y', 'now') - 5) ORDER BY release_year DESC LIMIT 10;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, genre TEXT, release_year INTEGER, rating REAL);","This query selects all details for movies released in the last 5 years, ordered by 'release_year' in descending order, and limits the result to the top 10. `strftime('%Y', 'now')` gets the current year."
Get the names of products with an 'A' anywhere in their name.,SELECT product_name FROM Products WHERE product_name LIKE '%A%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects the 'product_name' from the 'Products' table for products where the name contains the letter 'A' at any position.
"Find orders placed in 'Q3 2023' (July, August, September).",SELECT * FROM Orders WHERE order_date BETWEEN '2023-07-01' AND '2023-09-30';,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);","This query retrieves all orders from the 'Orders' table that were placed between July 1, 2023, and September 30, 2023, inclusive."
"List all products, ordered by category (A-Z) and then by price (highest to lowest) within each category.","SELECT * FROM Products ORDER BY category ASC, price DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query selects all product details and sorts them first by 'category' in ascending order, and then for products within the same category, by 'price' in descending order."
Show customer IDs and cities for customers whose email is not provided.,"SELECT customer_id, city FROM Customers WHERE email IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, city TEXT, registration_date DATE);","This query selects the 'customer_id' and 'city' for customers where their 'email' address is not recorded (i.e., it is NULL)."
Retrieve employee names and departments for employees with a salary between 50000 and 75000.,"SELECT first_name, last_name, department FROM Employees WHERE salary BETWEEN 50000 AND 75000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);","This query selects the names and department of employees whose 'salary' is between 50000 and 75000, inclusive."
Find books that are available (in_stock is true) and cost less than 25.00.,"SELECT title, price FROM Books WHERE in_stock = TRUE AND price < 25.00;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, price REAL, in_stock BOOLEAN);",This query selects the title and price of books that are 'in_stock' and have a 'price' less than 25.00.
"List all students, ordered by GPA from highest to lowest.",SELECT * FROM Students ORDER BY gpa DESC;,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, major TEXT, gpa REAL, enrollment_date DATE);",This query retrieves all student information and sorts the results in descending order based on their 'gpa'.
Show the top 5 highest rated movies.,"SELECT title, rating FROM Movies ORDER BY rating DESC LIMIT 5;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, genre TEXT, release_year INTEGER, rating REAL);","This query selects the title and rating of movies, orders them by 'rating' in descending order, and returns only the top 5."
Get products that are 'Electronics' and have a price over 100.,"SELECT product_name, price FROM Products WHERE category = 'Electronics' AND price > 100;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects the 'product_name' and 'price' for products that are in the 'Electronics' category and cost more than 100.
Retrieve orders with a 'Completed' status.,SELECT * FROM Orders WHERE status = 'Completed';,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);",This query fetches all details for orders from the 'Orders' table that have a 'status' of 'Completed'.
Find customers who registered before '2020-01-01'.,"SELECT first_name, last_name, registration_date FROM Customers WHERE registration_date < '2020-01-01';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, city TEXT, registration_date DATE);","This query selects the names and registration dates of customers who registered before January 1, 2020."
List employees in the 'IT' department sorted by salary in ascending order.,SELECT * FROM Employees WHERE department = 'IT' ORDER BY salary ASC;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);",This query retrieves all details for employees in the 'IT' department and orders them by 'salary' from lowest to highest.
Show distinct genres of books.,SELECT DISTINCT genre FROM Books;,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, price REAL, in_stock BOOLEAN);",This query returns a unique list of all 'genre' values present in the 'Books' table.
Get details of products that cost exactly 25.00.,SELECT * FROM Products WHERE price = 25.00;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects all information for products where the 'price' is exactly 25.00.
Retrieve the first name and last name of all employees hired in 2023.,"SELECT first_name, last_name FROM Employees WHERE hire_date BETWEEN '2023-01-01' AND '2023-12-31';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);",This query selects the first and last names of employees who were hired within the calendar year 2023.
Find all products that are not 'Accessories'.,"SELECT product_name, category FROM Products WHERE category <> 'Accessories';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects the name and category for products whose 'category' is not 'Accessories'.
Instruction,Query,Table Schema,Explanation
Get the names of all employees who work in the 'Sales' department.,SELECT EmployeeName FROM Employees WHERE Department = 'Sales';,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, EmployeeName TEXT, Department TEXT, Salary DECIMAL);",This query selects the 'EmployeeName' from the 'Employees' table where the 'Department' column exactly matches 'Sales'.
Find all products with a price greater than 50.00.,SELECT ProductName FROM Products WHERE Price > 50.00;,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, Price DECIMAL, Stock INT);",This query retrieves the 'ProductName' for all entries in the 'Products' table where the 'Price' is strictly greater than 50.00.
List all orders placed before '2023-01-01'.,"SELECT OrderID, OrderDate FROM Orders WHERE OrderDate < '2023-01-01';","CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE, TotalAmount DECIMAL);",This query selects the 'OrderID' and 'OrderDate' from the 'Orders' table for all orders placed on a date earlier than '2023-01-01'.
Show all customers who are not 'Active'.,SELECT CustomerName FROM Customers WHERE Status != 'Active';,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName TEXT, Status TEXT, RegistrationDate DATE);",This query fetches the 'CustomerName' from the 'Customers' table where the 'Status' is anything but 'Active'.
Retrieve records of books published in the year 2020.,"SELECT Title, Author FROM Books WHERE PublicationYear = 2020;","CREATE TABLE Books (BookID INT PRIMARY KEY, Title TEXT, Author TEXT, PublicationYear INT);",This query selects the 'Title' and 'Author' from the 'Books' table for books where the 'PublicationYear' is exactly 2020.
Get the list of employees with a salary less than or equal to 45000.,"SELECT EmployeeName, Salary FROM Employees WHERE Salary <= 45000;","CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, EmployeeName TEXT, Department TEXT, Salary DECIMAL);",This query retrieves 'EmployeeName' and 'Salary' from the 'Employees' table where the 'Salary' is less than or equal to 45000.
Find all movies with a rating of 8.0 or higher.,SELECT MovieTitle FROM Movies WHERE Rating >= 8.0;,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieTitle TEXT, Genre TEXT, Rating DECIMAL);",This query selects the 'MovieTitle' from the 'Movies' table where the 'Rating' is greater than or equal to 8.0.
List products that are in stock (Stock > 0).,SELECT ProductName FROM Products WHERE Stock > 0;,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, Price DECIMAL, Stock INT);",This query lists 'ProductName' from the 'Products' table for all items that have a 'Stock' quantity greater than 0.
Show orders with a total amount exactly equal to 100.50.,SELECT OrderID FROM Orders WHERE TotalAmount = 100.50;,"CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE, TotalAmount DECIMAL);",This query retrieves 'OrderID' from the 'Orders' table where the 'TotalAmount' is precisely 100.50.
Retrieve employees who are not in the 'HR' department.,SELECT EmployeeName FROM Employees WHERE Department <> 'HR';,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, EmployeeName TEXT, Department TEXT, Salary DECIMAL);",This query selects 'EmployeeName' from the 'Employees' table for all employees whose 'Department' is not 'HR'.
Get products that are 'Electronics' and have a 'Price' less than 200.,SELECT ProductName FROM Products WHERE Category = 'Electronics' AND Price < 200;,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, Category TEXT, Price DECIMAL);",This query selects 'ProductName' from 'Products' where both 'Category' is 'Electronics' AND 'Price' is less than 200.
Find orders placed by 'CustomerID' 101 or 'CustomerID' 102.,SELECT OrderID FROM Orders WHERE CustomerID = 101 OR CustomerID = 102;,"CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE);",This query retrieves 'OrderID' from 'Orders' where 'CustomerID' is either 101 OR 102.
List users who registered after '2023-01-01' and are 'Active'.,SELECT UserName FROM Users WHERE RegistrationDate > '2023-01-01' AND Status = 'Active';,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName TEXT, RegistrationDate DATE, Status TEXT);",This query selects 'UserName' from 'Users' where 'RegistrationDate' is after '2023-01-01' AND 'Status' is 'Active'.
Show tasks that are 'Pending' or have a 'DueDate' before '2023-07-01'.,SELECT TaskName FROM Tasks WHERE Status = 'Pending' OR DueDate < '2023-07-01';,"CREATE TABLE Tasks (TaskID INT PRIMARY KEY, TaskName TEXT, Status TEXT, DueDate DATE);",This query retrieves 'TaskName' from 'Tasks' where 'Status' is 'Pending' OR 'DueDate' is before '2023-07-01'.
Get articles that are not 'Published'.,SELECT ArticleTitle FROM Articles WHERE NOT Status = 'Published';,"CREATE TABLE Articles (ArticleID INT PRIMARY KEY, ArticleTitle TEXT, Status TEXT);",This query selects 'ArticleTitle' from 'Articles' where the 'Status' is not 'Published'.
Find products with names starting with 'Laptop'.,SELECT ProductName FROM Products WHERE ProductName LIKE 'Laptop%';,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, Price DECIMAL);",This query finds 'ProductName' from 'Products' where 'ProductName' begins with the string 'Laptop'.
List customers whose names end with 'son'.,SELECT CustomerName FROM Customers WHERE CustomerName LIKE '%son';,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName TEXT);",This query lists 'CustomerName' from 'Customers' where 'CustomerName' ends with the string 'son'.
Show movies containing 'War' in their title.,SELECT MovieTitle FROM Movies WHERE MovieTitle LIKE '%War%';,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieTitle TEXT);",This query selects 'MovieTitle' from 'Movies' where 'MovieTitle' contains the substring 'War' anywhere.
"Retrieve records where the product code is 3 characters long and starts with 'A' (e.g., 'A12').",SELECT ProductCode FROM Products WHERE ProductCode LIKE 'A__';,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, ProductCode TEXT);",This query retrieves 'ProductCode' from 'Products' where 'ProductCode' starts with 'A' followed by exactly two more characters.
Get employees whose name does not contain 'John'.,SELECT EmployeeName FROM Employees WHERE EmployeeName NOT LIKE '%John%';,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, EmployeeName TEXT);",This query selects 'EmployeeName' from 'Employees' where the 'EmployeeName' does not contain 'John' as a substring.
"Find orders where the customer ID is 101, 105, or 109.","SELECT OrderID FROM Orders WHERE CustomerID IN (101, 105, 109);","CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT);","This query retrieves 'OrderID' from 'Orders' where 'CustomerID' is one of the values in the specified list (101, 105, 109)."
List products whose category is 'Food' or 'Drinks'.,"SELECT ProductName FROM Products WHERE Category IN ('Food', 'Drinks');","CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, Category TEXT);",This query lists 'ProductName' from 'Products' where 'Category' is either 'Food' or 'Drinks'.
Show employees who are not in 'Sales' or 'Marketing' departments.,"SELECT EmployeeName FROM Employees WHERE Department NOT IN ('Sales', 'Marketing');","CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, EmployeeName TEXT, Department TEXT);",This query selects 'EmployeeName' from 'Employees' where 'Department' is not 'Sales' and not 'Marketing'.
Get products with a price between 20.00 and 50.00 (inclusive).,SELECT ProductName FROM Products WHERE Price BETWEEN 20.00 AND 50.00;,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, Price DECIMAL);","This query retrieves 'ProductName' from 'Products' where 'Price' is within the range [20.00, 50.00], including the boundaries."
Find orders placed between '2022-01-01' and '2022-12-31'.,SELECT OrderID FROM Orders WHERE OrderDate BETWEEN '2022-01-01' AND '2022-12-31';,"CREATE TABLE Orders (OrderID INT PRIMARY KEY, OrderDate DATE);",This query finds 'OrderID' from 'Orders' where 'OrderDate' falls inclusively between '2022-01-01' and '2022-12-31'.
List employees whose salary is not between 30000 and 60000.,SELECT EmployeeName FROM Employees WHERE Salary NOT BETWEEN 30000 AND 60000;,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, EmployeeName TEXT, Salary DECIMAL);","This query lists 'EmployeeName' from 'Employees' where 'Salary' is outside the range [30000, 60000]."
Show customers who have no email address recorded.,SELECT CustomerName FROM Customers WHERE Email IS NULL;,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName TEXT, Email TEXT);",This query selects 'CustomerName' from 'Customers' where the 'Email' column has a NULL value (no email is recorded).
Retrieve products that have a description.,SELECT ProductName FROM Products WHERE Description IS NOT NULL;,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, Description TEXT);",This query retrieves 'ProductName' from 'Products' where the 'Description' column is not NULL (meaning a description exists).
Get orders with a total amount greater than 500 and sorted by date.,"SELECT OrderID, OrderDate FROM Orders WHERE TotalAmount > 500 ORDER BY OrderDate DESC;","CREATE TABLE Orders (OrderID INT PRIMARY KEY, OrderDate DATE, TotalAmount DECIMAL);","This query selects 'OrderID' and 'OrderDate' from 'Orders' where 'TotalAmount' is over 500, then orders the results by 'OrderDate' in descending order."
Find the top 5 most expensive products with 'Electronics' category.,"SELECT ProductName, Price FROM Products WHERE Category = 'Electronics' ORDER BY Price DESC LIMIT 5;","CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, Category TEXT, Price DECIMAL);","This query retrieves 'ProductName' and 'Price' for 'Electronics' products, orders them by 'Price' descending, and then limits the result to the top 5."
Count the number of active users.,SELECT COUNT(UserID) FROM Users WHERE Status = 'Active';,"CREATE TABLE Users (UserID INT PRIMARY KEY, Status TEXT);",This query counts the total number of 'UserID' entries in the 'Users' table where the 'Status' is 'Active'.
Calculate the sum of salaries for employees in the 'Engineering' department.,SELECT SUM(Salary) FROM Employees WHERE Department = 'Engineering';,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, Department TEXT, Salary DECIMAL);",This query calculates the sum of all 'Salary' values for employees who work in the 'Engineering' department.
Find the average rating of movies released after 2000.,SELECT AVG(Rating) FROM Movies WHERE ReleaseYear > 2000;,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, ReleaseYear INT, Rating DECIMAL);",This query calculates the average 'Rating' for movies that were released after the year 2000.
Get the minimum price of a product in the 'Books' category.,SELECT MIN(Price) FROM Products WHERE Category = 'Books';,"CREATE TABLE Products (ProductID INT PRIMARY KEY, Category TEXT, Price DECIMAL);",This query finds the lowest 'Price' among all products that belong to the 'Books' category.
Identify the maximum order amount for orders placed in '2023'.,SELECT MAX(TotalAmount) FROM Orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31';,"CREATE TABLE Orders (OrderID INT PRIMARY KEY, OrderDate DATE, TotalAmount DECIMAL);",This query determines the highest 'TotalAmount' among orders placed within the calendar year 2023.
List employees who earn more than 60000 OR are in the 'Management' department.,SELECT EmployeeName FROM Employees WHERE Salary > 60000 OR Department = 'Management';,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, EmployeeName TEXT, Salary DECIMAL, Department TEXT);",This query selects 'EmployeeName' from 'Employees' if their 'Salary' is above 60000 or if their 'Department' is 'Management'.
"Retrieve products that are 'Available' AND have a 'Quantity' greater than 10, but not in 'Electronics' category.",SELECT ProductName FROM Products WHERE Status = 'Available' AND Quantity > 10 AND Category <> 'Electronics';,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, Status TEXT, Quantity INT, Category TEXT);","This query selects 'ProductName' from 'Products' if they are 'Available', have 'Quantity' over 10, AND are not in the 'Electronics' category."
Find customers whose name starts with 'A' and live in 'New York' or 'California'.,SELECT CustomerName FROM Customers WHERE CustomerName LIKE 'A%' AND (City = 'New York' OR City = 'California');,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName TEXT, City TEXT);",This query retrieves 'CustomerName' for customers whose name starts with 'A' AND live in either 'New York' or 'California'. Parentheses ensure correct logical grouping.
Show tasks that are 'Completed' and finished in '2023'.,SELECT TaskName FROM Tasks WHERE Status = 'Completed' AND DueDate BETWEEN '2023-01-01' AND '2023-12-31';,"CREATE TABLE Tasks (TaskID INT PRIMARY KEY, TaskName TEXT, Status TEXT, DueDate DATE);",This query selects 'TaskName' from 'Tasks' where the 'Status' is 'Completed' and the 'DueDate' falls within the year 2023.
Get books with more than 300 pages and published after 2000.,SELECT Title FROM Books WHERE Pages > 300 AND PublicationYear > 2000;,"CREATE TABLE Books (BookID INT PRIMARY KEY, Title TEXT, Pages INT, PublicationYear INT);",This query retrieves 'Title' from 'Books' that have more than 300 pages and were published after the year 2000.
"List sales transactions made by 'SalespersonID' 5, 7, or 9 on '2023-03-15'.","SELECT TransactionID FROM Sales WHERE SalespersonID IN (5, 7, 9) AND TransactionDate = '2023-03-15';","CREATE TABLE Sales (TransactionID INT PRIMARY KEY, SalespersonID INT, TransactionDate DATE, Amount DECIMAL);","This query selects 'TransactionID' from 'Sales' where the 'SalespersonID' is either 5, 7, or 9 AND the 'TransactionDate' is '2023-03-15'."
Find employees whose manager ID is NULL and department is 'IT'.,SELECT EmployeeName FROM Employees WHERE ManagerID IS NULL AND Department = 'IT';,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, EmployeeName TEXT, Department TEXT, ManagerID INT);",This query selects 'EmployeeName' from 'Employees' where 'ManagerID' is not assigned (NULL) AND their 'Department' is 'IT'.
Retrieve items with a quantity less than 5 and a price greater than 100.,SELECT ItemName FROM Inventory WHERE Quantity < 5 AND Price > 100;,"CREATE TABLE Inventory (ItemID INT PRIMARY KEY, ItemName TEXT, Quantity INT, Price DECIMAL);",This query retrieves 'ItemName' from 'Inventory' for items where 'Quantity' is less than 5 and 'Price' is greater than 100.
Get courses that are in 'Science' or 'Math' and have a credit of 3.,SELECT CourseName FROM Courses WHERE (Department = 'Science' OR Department = 'Math') AND Credits = 3;,"CREATE TABLE Courses (CourseID INT PRIMARY KEY, CourseName TEXT, Department TEXT, Credits INT);","This query selects 'CourseName' from 'Courses' where the 'Department' is either 'Science' or 'Math', AND the 'Credits' are 3. Parentheses are crucial for correct logical evaluation."
List users who are not 'Admin' and registered in the last year (assuming 2023).,SELECT UserName FROM Users WHERE Role <> 'Admin' AND RegistrationDate BETWEEN '2023-01-01' AND '2023-12-31';,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName TEXT, Role TEXT, RegistrationDate DATE);",This query selects 'UserName' from 'Users' where their 'Role' is not 'Admin' AND their 'RegistrationDate' falls within the year 2023.
Show customer orders placed in December 2022 and with total amount less than 50.,SELECT OrderID FROM Orders WHERE OrderDate BETWEEN '2022-12-01' AND '2022-12-31' AND TotalAmount < 50;,"CREATE TABLE Orders (OrderID INT PRIMARY KEY, OrderDate DATE, TotalAmount DECIMAL);",This query shows 'OrderID' for orders placed specifically in December 2022 AND where the 'TotalAmount' is less than 50.
Retrieve events scheduled for a specific date ('2023-10-26') and confirmed.,SELECT EventName FROM Events WHERE EventDate = '2023-10-26' AND Status = 'Confirmed';,"CREATE TABLE Events (EventID INT PRIMARY KEY, EventName TEXT, EventDate DATE, Status TEXT);",This query retrieves 'EventName' from 'Events' where 'EventDate' is '2023-10-26' AND 'Status' is 'Confirmed'.
Get products whose name contains 'Pro' and price is above 1000.,SELECT ProductName FROM Products WHERE ProductName LIKE '%Pro%' AND Price > 1000;,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName TEXT, Price DECIMAL);",This query selects 'ProductName' from 'Products' where 'ProductName' contains 'Pro' AND 'Price' is greater than 1000.
Find vehicles that are 'Available' and are 'Sedan' or 'SUV'.,"SELECT Make, Model FROM Vehicles WHERE Availability = 'Available' AND (Type = 'Sedan' OR Type = 'SUV');","CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, Make TEXT, Model TEXT, Type TEXT, Availability TEXT);",This query retrieves 'Make' and 'Model' from 'Vehicles' where 'Availability' is 'Available' AND the 'Type' is either 'Sedan' or 'SUV'.
List books by 'Author' 'Jane Doe' and published before 2022.,SELECT Title FROM Books WHERE Author = 'Jane Doe' AND PublicationYear < 2022;,"CREATE TABLE Books (BookID INT PRIMARY KEY, Title TEXT, Author TEXT, PublicationYear INT);",This query lists 'Title' from 'Books' where the 'Author' is 'Jane Doe' and the 'PublicationYear' is earlier than 2022.
Show employees who are not assigned to a project (ProjectID is NULL).,SELECT EmployeeName FROM Employees WHERE ProjectID IS NULL;,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, EmployeeName TEXT, ProjectID INT);","This query selects 'EmployeeName' from 'Employees' for those whose 'ProjectID' is not set (NULL), indicating they are not assigned to a project."
Instruction,Query,Table Schema,Explanation
Retrieve the names of all employees.,SELECT name FROM employees;,"CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);","This query selects the 'name' column from the 'employees' table, returning a list of all employee names."
Show all columns for all products.,SELECT * FROM products;,"CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(10, 2), stock_quantity INT, category VARCHAR(50));","The '*' wildcard selects all columns from the 'products' table, displaying all available information for each product."
List the order ID and total amount for every order.,"SELECT order_id, total_amount FROM orders;","CREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));",This query retrieves specific columns 'order_id' and 'total_amount' from the 'orders' table.
Find the first name and email of all customers.,"SELECT first_name, email FROM customers;","CREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), city VARCHAR(50));",This query selects the 'first_name' and 'email' columns for all entries in the 'customers' table.
Get the title and author of all books.,"SELECT title, author FROM books;","CREATE TABLE books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(50), price DECIMAL(6, 2), publication_year INT);",The query fetches the 'title' and 'author' for every book record from the 'books' table.
Display all employee records.,SELECT * FROM employees;,"CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);",This query retrieves all columns and all rows from the 'employees' table.
Retrieve the names of products that cost more than 50.,SELECT product_name FROM products WHERE price > 50;,"CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(10, 2), stock_quantity INT, category VARCHAR(50));",This query selects the 'product_name' for products where their 'price' is greater than 50.
Show the order IDs placed on '2023-01-15'.,SELECT order_id FROM orders WHERE order_date = '2023-01-15';,"CREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));",This query filters orders to find 'order_id's that have an 'order_date' exactly '2023-01-15'.
List customers living in 'New York'.,"SELECT first_name, last_name FROM customers WHERE city = 'New York';","CREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), city VARCHAR(50));",This query retrieves the first and last names of customers whose 'city' is 'New York'.
Get all details for books published before 2000.,SELECT * FROM books WHERE publication_year < 2000;,"CREATE TABLE books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(50), price DECIMAL(6, 2), publication_year INT);",This query selects all columns for books where the 'publication_year' is earlier than 2000.
Find employees whose salary is over 60000.,"SELECT name, salary FROM employees WHERE salary > 60000;","CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);","This query selects employee names and their salaries, but only for those earning more than 60000."
Display products with 'Electronics' category.,"SELECT product_name, price FROM products WHERE category = 'Electronics';","CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(10, 2), stock_quantity INT, category VARCHAR(50));",This query retrieves the name and price of products categorized as 'Electronics'.
Retrieve pending orders.,"SELECT order_id, customer_id FROM orders WHERE status = 'Pending';","CREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));",This query selects 'order_id' and 'customer_id' for orders that have a 'status' of 'Pending'.
Show customers whose email ends with '.com'.,"SELECT first_name, last_name, email FROM customers WHERE email LIKE '%.com';","CREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), city VARCHAR(50));","This query selects first name, last name, and email for customers where their email address ends with '.com', using the LIKE operator."
List books with 'Fiction' genre.,"SELECT title, author, genre FROM books WHERE genre = 'Fiction';","CREATE TABLE books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(50), price DECIMAL(6, 2), publication_year INT);","This query retrieves the title, author, and genre for books that belong to the 'Fiction' genre."
Get employee names hired after 2022.,SELECT name FROM employees WHERE hire_date > '2022-12-31';,"CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);","This query selects the 'name' of employees whose 'hire_date' is after December 31, 2022."
Display products with stock less than 10.,"SELECT product_name, stock_quantity FROM products WHERE stock_quantity < 10;","CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(10, 2), stock_quantity INT, category VARCHAR(50));",This query selects product names and their stock quantities for products that have less than 10 units in stock.
Retrieve completed orders.,"SELECT order_id, order_date, total_amount FROM orders WHERE status = 'Completed';","CREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));","This query selects the ID, date, and total amount for orders that have a 'Completed' status."
Show all information about customers from 'London'.,SELECT * FROM customers WHERE city = 'London';,"CREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), city VARCHAR(50));",This query retrieves all columns for customers whose 'city' is 'London'.
List books by 'Jane Austen'.,"SELECT title, price FROM books WHERE author = 'Jane Austen';","CREATE TABLE books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(50), price DECIMAL(6, 2), publication_year INT);",This query selects the title and price for books authored by 'Jane Austen'.
Find employees in the 'Sales' department.,"SELECT name, salary FROM employees WHERE department = 'Sales';","CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);",This query selects the name and salary of employees who work in the 'Sales' department.
Get product names with 'phone' in their name.,SELECT product_name FROM products WHERE product_name LIKE '%phone%';,"CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(10, 2), stock_quantity INT, category VARCHAR(50));",This query selects product names that contain the substring 'phone' anywhere in their 'product_name'.
Display orders with a total amount greater than 1000.,"SELECT order_id, customer_id, total_amount FROM orders WHERE total_amount > 1000;","CREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));","This query retrieves the ID, customer ID, and total amount for orders where the 'total_amount' exceeds 1000."
Retrieve customer IDs of customers not in 'Paris'.,SELECT customer_id FROM customers WHERE city != 'Paris';,"CREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), city VARCHAR(50));",This query selects the 'customer_id' for customers whose 'city' is not 'Paris'.
Show books with a price between 15 and 30.,"SELECT title, author, price FROM books WHERE price BETWEEN 15 AND 30;","CREATE TABLE books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(50), price DECIMAL(6, 2), publication_year INT);","This query selects the title, author, and price for books where the 'price' is inclusively between 15 and 30."
List employees who earn less than 50000.,"SELECT name, department FROM employees WHERE salary < 50000;","CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);",This query selects the name and department of employees whose 'salary' is less than 50000.
Get products with 'Apparel' category and price under 50.,SELECT product_name FROM products WHERE category = 'Apparel' AND price < 50;,"CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(10, 2), stock_quantity INT, category VARCHAR(50));",This query retrieves the name of products that are in the 'Apparel' category AND have a 'price' less than 50.
Find orders placed in 2023.,"SELECT order_id, order_date FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';","CREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));",This query selects order IDs and dates for orders placed within the year 2023.
Show customers whose first name starts with 'A'.,"SELECT first_name, last_name FROM customers WHERE first_name LIKE 'A%';","CREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), city VARCHAR(50));",This query selects first and last names for customers where their 'first_name' begins with the letter 'A'.
List books with 'Mystery' or 'Thriller' genre.,"SELECT title, genre FROM books WHERE genre = 'Mystery' OR genre = 'Thriller';","CREATE TABLE books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(50), price DECIMAL(6, 2), publication_year INT);",This query selects the title and genre for books where the 'genre' is either 'Mystery' or 'Thriller'.
Retrieve distinct departments of employees.,SELECT DISTINCT department FROM employees;,"CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);","This query returns a list of unique 'department' names from the 'employees' table, avoiding duplicates."
Display distinct product categories.,SELECT DISTINCT category FROM products;,"CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(10, 2), stock_quantity INT, category VARCHAR(50));",This query retrieves only the unique values from the 'category' column of the 'products' table.
Show distinct customer cities.,SELECT DISTINCT city FROM customers;,"CREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), city VARCHAR(50));","This query returns a list of unique cities where customers reside, based on the 'city' column."
List distinct genres of books.,SELECT DISTINCT genre FROM books;,"CREATE TABLE books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(50), price DECIMAL(6, 2), publication_year INT);",This query provides a list of all unique 'genre' values present in the 'books' table.
Get employee IDs and names.,"SELECT id, name FROM employees;","CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);",This query selects the 'id' and 'name' columns from the 'employees' table.
Find products with ID 101 or 105.,"SELECT product_name FROM products WHERE product_id IN (101, 105);","CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(10, 2), stock_quantity INT, category VARCHAR(50));",This query selects the 'product_name' for products whose 'product_id' is either 101 or 105.
Retrieve orders from customer 5 or 8.,"SELECT order_id, total_amount FROM orders WHERE customer_id IN (5, 8);","CREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));",This query retrieves the 'order_id' and 'total_amount' for orders placed by 'customer_id' 5 or 8.
Show customers with email 'john.doe@example.com'.,SELECT * FROM customers WHERE email = 'john.doe@example.com';,"CREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), city VARCHAR(50));",This query selects all columns for the customer whose email address is exactly 'john.doe@example.com'.
List books by author 'Stephen King' and published after 2005.,SELECT title FROM books WHERE author = 'Stephen King' AND publication_year > 2005;,"CREATE TABLE books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(50), price DECIMAL(6, 2), publication_year INT);",This query selects the title of books written by 'Stephen King' AND published after 2005.
Get employee names and their hire dates.,"SELECT name, hire_date FROM employees;","CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);",This query selects the 'name' and 'hire_date' columns from the 'employees' table.
Display product names and their current stock.,"SELECT product_name, stock_quantity FROM products;","CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(10, 2), stock_quantity INT, category VARCHAR(50));",This query retrieves the 'product_name' and 'stock_quantity' for all products.
Show all orders with a total amount greater than or equal to 500.,SELECT * FROM orders WHERE total_amount >= 500;,"CREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));",This query selects all columns for orders where the 'total_amount' is 500 or more.
Retrieve first and last names of customers who don't have an email.,"SELECT first_name, last_name FROM customers WHERE email IS NULL;","CREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), city VARCHAR(50));",This query selects the first and last names of customers where the 'email' field is NULL (empty).
Find books with 'history' in their title.,"SELECT title, author FROM books WHERE title LIKE '%history%';","CREATE TABLE books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(50), price DECIMAL(6, 2), publication_year INT);",This query selects the title and author of books where the 'title' contains the substring 'history'.
Get all employees whose name starts with 'J'.,"SELECT name, department FROM employees WHERE name LIKE 'J%';","CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);",This query selects the name and department of employees whose 'name' begins with the letter 'J'.
Display products that are not in the 'Food' category.,"SELECT product_name, category FROM products WHERE category != 'Food';","CREATE TABLE products (product_id INT, product_name VARCHAR(255), price DECIMAL(10, 2), stock_quantity INT, category VARCHAR(50));",This query selects the name and category for products that are NOT categorized as 'Food'.
Retrieve orders that are not 'Cancelled'.,"SELECT order_id, status FROM orders WHERE status != 'Cancelled';","CREATE TABLE orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), status VARCHAR(50));",This query selects the order ID and status for orders whose 'status' is not 'Cancelled'.
Show all customers except those from 'Chicago'.,"SELECT first_name, last_name, city FROM customers WHERE city <> 'Chicago';","CREATE TABLE customers (customer_id INT, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), city VARCHAR(50));","This query selects the first name, last name, and city for all customers whose 'city' is not 'Chicago'."
List books with a price exactly 25.00.,"SELECT title, author FROM books WHERE price = 25.00;","CREATE TABLE books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(50), price DECIMAL(6, 2), publication_year INT);",This query selects the title and author of books that have an exact 'price' of 25.00.
Find employees whose salary is less than or equal to 40000.,"SELECT name, salary FROM employees WHERE salary <= 40000;","CREATE TABLE employees (id INT, name VARCHAR(255), salary DECIMAL(10, 2), department VARCHAR(50), hire_date DATE);",This query selects the name and salary of employees whose 'salary' is 40000 or less.
Instruction,Query,Table Schema,Explanation
Find all products with a price of exactly 25.00.,SELECT * FROM Products WHERE Price = 25.00;,"CREATE TABLE Products (ProductID INT, ProductName TEXT, Price REAL, Stock INT);",Filters the Products table to show only rows where the 'Price' column is equal to 25.00.
List all employees from the 'Sales' department.,SELECT EmployeeName FROM Employees WHERE Department = 'Sales';,"CREATE TABLE Employees (EmployeeID INT, EmployeeName TEXT, Department TEXT, Salary REAL);",Retrieves the names of employees whose 'Department' is 'Sales'.
Show all orders with a total amount greater than 100.,"SELECT OrderID, TotalAmount FROM Orders WHERE TotalAmount > 100;","CREATE TABLE Orders (OrderID INT, CustomerID INT, OrderDate DATE, TotalAmount REAL);",Selects order IDs and total amounts for orders where 'TotalAmount' is strictly greater than 100.
Find customers whose names start with 'A'.,SELECT CustomerName FROM Customers WHERE CustomerName LIKE 'A%';,"CREATE TABLE Customers (CustomerID INT, CustomerName TEXT, Email TEXT);",Filters customers to include only those whose 'CustomerName' begins with the letter 'A'.
Get all active users from 'New York'.,SELECT UserName FROM Users WHERE IsActive = TRUE AND City = 'New York';,"CREATE TABLE Users (UserID INT, UserName TEXT, City TEXT, IsActive BOOLEAN);",Fetches user names for users who are both 'IsActive' (true) and located in 'New York'.
List books published before 2000 or after 2010.,SELECT Title FROM Books WHERE PublicationYear < 2000 OR PublicationYear > 2010;,"CREATE TABLE Books (BookID INT, Title TEXT, Author TEXT, PublicationYear INT);",Retrieves titles of books published either before the year 2000 or after the year 2010.
"Find students with scores between 80 and 90, inclusive.",SELECT StudentName FROM Students WHERE Score BETWEEN 80 AND 90;,"CREATE TABLE Students (StudentID INT, StudentName TEXT, Score INT, Grade TEXT);","Selects student names for students whose 'Score' falls within the range of 80 to 90, inclusive."
"Show orders placed by customer IDs 101, 105, or 108.","SELECT * FROM Orders WHERE CustomerID IN (101, 105, 108);","CREATE TABLE Orders (OrderID INT, CustomerID INT, OrderDate DATE, TotalAmount REAL);","Filters orders to include only those placed by customers with specific IDs (101, 105, or 108)."
List employees who do not have an assigned manager.,SELECT EmployeeName FROM Employees WHERE ManagerID IS NULL;,"CREATE TABLE Employees (EmployeeID INT, EmployeeName TEXT, ManagerID INT);","Finds employees whose 'ManagerID' column has a NULL value, indicating no assigned manager."
Get appointments scheduled for '2023-10-27'.,SELECT * FROM Appointments WHERE AppointmentDate = '2023-10-27';,"CREATE TABLE Appointments (ApptID INT, ApptName TEXT, AppointmentDate DATE, Time TIME);",Retrieves all appointments scheduled specifically for the date '2023-10-27'.
Select movies released before 2005 and having a rating above 7.5.,SELECT Title FROM Movies WHERE ReleaseYear < 2005 AND Rating > 7.5;,"CREATE TABLE Movies (MovieID INT, Title TEXT, ReleaseYear INT, Rating REAL);",Filters movies to show those released before 2005 and with a rating greater than 7.5.
Find all products that are out of stock (Stock is 0).,SELECT ProductName FROM Products WHERE Stock = 0;,"CREATE TABLE Products (ProductID INT, ProductName TEXT, Price REAL, Stock INT);",Selects product names for products where the 'Stock' quantity is exactly 0.
Retrieve users whose email address contains 'gmail.com'.,"SELECT UserName, Email FROM Users WHERE Email LIKE '%gmail.com%';","CREATE TABLE Users (UserID INT, UserName TEXT, Email TEXT);",Filters users to find those whose 'Email' column contains the substring 'gmail.com'.
Show all tasks that are not yet completed (Status is 'Pending').,SELECT TaskName FROM Tasks WHERE Status = 'Pending';,"CREATE TABLE Tasks (TaskID INT, TaskName TEXT, Status TEXT, DueDate DATE);",Retrieves the names of tasks where the 'Status' is explicitly 'Pending'.
List courses that have more than 30 students enrolled.,SELECT CourseName FROM Courses WHERE EnrolledStudents > 30;,"CREATE TABLE Courses (CourseID INT, CourseName TEXT, EnrolledStudents INT);",Selects course names for courses that have more than 30 students enrolled.
Get all transactions made in January 2023.,SELECT * FROM Transactions WHERE TransactionDate BETWEEN '2023-01-01' AND '2023-01-31';,"CREATE TABLE Transactions (TransactionID INT, Amount REAL, TransactionDate DATE);",Filters transactions to include only those where 'TransactionDate' falls within January 2023.
Find departments that are not 'HR' and not 'IT'.,"SELECT DepartmentName FROM Departments WHERE DepartmentName NOT IN ('HR', 'IT');","CREATE TABLE Departments (DepartmentID INT, DepartmentName TEXT);",Retrieves department names that are neither 'HR' nor 'IT'.
Show all employees hired after 2020-01-01.,SELECT EmployeeName FROM Employees WHERE HireDate > '2020-01-01';,"CREATE TABLE Employees (EmployeeID INT, EmployeeName TEXT, HireDate DATE);","Selects employee names for employees whose 'HireDate' is after January 1st, 2020."
Retrieve items with a weight less than or equal to 5.0 kg.,SELECT ItemName FROM Inventory WHERE Weight <= 5.0;,"CREATE TABLE Inventory (ItemID INT, ItemName TEXT, Weight REAL);",Filters inventory items to include those with a 'Weight' of 5.0 kg or less.
List projects that are 'Active' and have a 'High' priority.,SELECT ProjectName FROM Projects WHERE Status = 'Active' AND Priority = 'High';,"CREATE TABLE Projects (ProjectID INT, ProjectName TEXT, Status TEXT, Priority TEXT);",Retrieves project names for projects that are both 'Active' and have 'High' priority.
Find all articles whose title does not contain the word 'science'.,SELECT Title FROM Articles WHERE Title NOT LIKE '%science%';,"CREATE TABLE Articles (ArticleID INT, Title TEXT, Content TEXT);",Selects article titles where the 'Title' column does not contain the substring 'science'.
"Show customers who have not placed any orders (OrderID is NULL in Orders table, assuming a join for this simplified schema query).",SELECT CustomerName FROM Customers WHERE LastOrderID IS NULL;,"CREATE TABLE Customers (CustomerID INT, CustomerName TEXT, LastOrderID INT);","Finds customer names for customers where their 'LastOrderID' is NULL, implying no orders."
Get events scheduled for either 'New York' or 'London'.,SELECT EventName FROM Events WHERE Location = 'New York' OR Location = 'London';,"CREATE TABLE Events (EventID INT, EventName TEXT, Location TEXT);",Retrieves event names for events taking place in either 'New York' or 'London'.
Retrieve records where the 'Notes' column is not empty.,SELECT RecordID FROM Records WHERE Notes IS NOT NULL AND Notes != '';,"CREATE TABLE Records (RecordID INT, Data TEXT, Notes TEXT);",Selects record IDs where the 'Notes' column is not NULL and also not an empty string.
Find suppliers whose names end with 'Corp'.,SELECT SupplierName FROM Suppliers WHERE SupplierName LIKE '%Corp';,"CREATE TABLE Suppliers (SupplierID INT, SupplierName TEXT, City TEXT);",Filters suppliers to include only those whose 'SupplierName' ends with 'Corp'.
List students who scored exactly 100 on an exam.,SELECT StudentName FROM ExamResults WHERE Score = 100;,"CREATE TABLE ExamResults (ExamID INT, StudentID INT, StudentName TEXT, Score INT);",Retrieves the names of students who achieved a score of exactly 100.
Show products with a price less than 10.00 or greater than 100.00.,SELECT ProductName FROM Products WHERE Price < 10.00 OR Price > 100.00;,"CREATE TABLE Products (ProductID INT, ProductName TEXT, Price REAL);",Filters products to show those with a price less than 10.00 or greater than 100.00.
Get all employees who are not in 'Engineering' department.,SELECT EmployeeName FROM Employees WHERE Department != 'Engineering';,"CREATE TABLE Employees (EmployeeID INT, EmployeeName TEXT, Department TEXT);",Selects employee names for employees whose 'Department' is not 'Engineering'.
Find sales records where the quantity sold is between 5 and 15.,SELECT SaleID FROM Sales WHERE Quantity BETWEEN 5 AND 15;,"CREATE TABLE Sales (SaleID INT, ItemID INT, Quantity INT, SaleDate DATE);","Retrieves sale IDs where the 'Quantity' sold is between 5 and 15, inclusive."
List all users whose last login was before '2023-01-01'.,SELECT UserName FROM Users WHERE LastLogin < '2023-01-01';,"CREATE TABLE Users (UserID INT, UserName TEXT, LastLogin DATE);","Filters users to show those whose 'LastLogin' date is prior to January 1st, 2023."
Show orders with a total amount not equal to 50.00.,SELECT OrderID FROM Orders WHERE TotalAmount <> 50.00;,"CREATE TABLE Orders (OrderID INT, CustomerID INT, TotalAmount REAL);",Selects order IDs for orders where the 'TotalAmount' is not exactly 50.00.
Get customers who reside in 'Paris' and have a premium subscription.,SELECT CustomerName FROM Customers WHERE City = 'Paris' AND SubscriptionType = 'Premium';,"CREATE TABLE Customers (CustomerID INT, CustomerName TEXT, City TEXT, SubscriptionType TEXT);",Retrieves names of customers who are located in 'Paris' and have a 'Premium' subscription.
Find flights with departure city 'SFO' and arrival city 'LAX'.,SELECT FlightNumber FROM Flights WHERE DepartureCity = 'SFO' AND ArrivalCity = 'LAX';,"CREATE TABLE Flights (FlightID INT, FlightNumber TEXT, DepartureCity TEXT, ArrivalCity TEXT);",Selects flight numbers for flights departing from 'SFO' and arriving at 'LAX'.
List employees whose salary is less than 50000 and department is 'Marketing'.,SELECT EmployeeName FROM Employees WHERE Salary < 50000 AND Department = 'Marketing';,"CREATE TABLE Employees (EmployeeID INT, EmployeeName TEXT, Salary REAL, Department TEXT);",Filters employees to show those with a 'Salary' less than 50000 and belonging to the 'Marketing' department.
Show products that are not 'Electronics' category.,SELECT ProductName FROM Products WHERE Category != 'Electronics';,"CREATE TABLE Products (ProductID INT, ProductName TEXT, Category TEXT);",Retrieves product names for products whose 'Category' is not 'Electronics'.
Find all users whose age is known (not NULL).,SELECT UserName FROM Users WHERE Age IS NOT NULL;,"CREATE TABLE Users (UserID INT, UserName TEXT, Age INT);",Selects user names for users where their 'Age' is not a NULL value.
Get appointments that are not in 'Confirmed' status.,SELECT AppointmentID FROM Appointments WHERE Status != 'Confirmed';,"CREATE TABLE Appointments (AppointmentID INT, Service TEXT, Status TEXT);",Filters appointments to show those whose 'Status' is not 'Confirmed'.
Retrieve employees whose names start with 'J' and are in 'IT' department.,SELECT EmployeeName FROM Employees WHERE EmployeeName LIKE 'J%' AND Department = 'IT';,"CREATE TABLE Employees (EmployeeID INT, EmployeeName TEXT, Department TEXT);",Fetches employee names for employees whose name starts with 'J' and are in the 'IT' department.
List orders placed on '2023-09-15' and with an amount greater than 200.,SELECT OrderID FROM Orders WHERE OrderDate = '2023-09-15' AND Amount > 200;,"CREATE TABLE Orders (OrderID INT, OrderDate DATE, Amount REAL);",Selects order IDs for orders placed on '2023-09-15' with an 'Amount' greater than 200.
Show all books whose author is 'J.K. Rowling' or 'Stephen King'.,"SELECT Title FROM Books WHERE Author IN ('J.K. Rowling', 'Stephen King');","CREATE TABLE Books (BookID INT, Title TEXT, Author TEXT);",Retrieves titles of books written by either 'J.K. Rowling' or 'Stephen King'.
Find items where the color is 'Red' and the size is 'Large'.,SELECT ItemName FROM Inventory WHERE Color = 'Red' AND Size = 'Large';,"CREATE TABLE Inventory (ItemID INT, ItemName TEXT, Color TEXT, Size TEXT);",Filters inventory items to show those that are 'Red' in color and 'Large' in size.
Get customers who signed up in the year 2022.,SELECT CustomerName FROM Customers WHERE SignUpDate BETWEEN '2022-01-01' AND '2022-12-31';,"CREATE TABLE Customers (CustomerID INT, CustomerName TEXT, SignUpDate DATE);",Selects customer names for customers whose 'SignUpDate' falls within the year 2022.
"Retrieve sales with a value between 500 and 1000, but exclude those with a value of exactly 750.",SELECT SaleID FROM Sales WHERE Amount BETWEEN 500 AND 1000 AND Amount != 750;,"CREATE TABLE Sales (SaleID INT, Amount REAL, SaleDate DATE);","Filters sales to include those with an 'Amount' between 500 and 1000, excluding 750."
List all students whose major is 'Computer Science' and GPA is above 3.5.,SELECT StudentName FROM Students WHERE Major = 'Computer Science' AND GPA > 3.5;,"CREATE TABLE Students (StudentID INT, StudentName TEXT, Major TEXT, GPA REAL);",Retrieves student names for students majoring in 'Computer Science' with a GPA greater than 3.5.
Show movies that are rated 'PG-13' or 'R'.,"SELECT Title FROM Movies WHERE Rating IN ('PG-13', 'R');","CREATE TABLE Movies (MovieID INT, Title TEXT, Rating TEXT);",Filters movies to show those with a 'PG-13' or 'R' rating.
Find users who are active but have not confirmed their email.,SELECT UserName FROM Users WHERE IsActive = TRUE AND IsEmailConfirmed = FALSE;,"CREATE TABLE Users (UserID INT, UserName TEXT, IsActive BOOLEAN, IsEmailConfirmed BOOLEAN);",Selects user names for users who are active but have not confirmed their email.
Get all products with 'premium' in their description (case-insensitive).,SELECT ProductName FROM Products WHERE Description LIKE '%premium%';,"CREATE TABLE Products (ProductID INT, ProductName TEXT, Description TEXT);","Filters products to include those whose 'Description' contains 'premium' (case-insensitive, depending on DB collation)."
Retrieve tasks that are due today ('2023-10-26') or are overdue (DueDate is earlier than today).,SELECT TaskName FROM Tasks WHERE DueDate <= '2023-10-26';,"CREATE TABLE Tasks (TaskID INT, TaskName TEXT, DueDate DATE);",Selects task names for tasks that are due on or before '2023-10-26'.
List employees who work in departments 'HR' or 'Finance' and whose salary is above 60000.,SELECT EmployeeName FROM Employees WHERE (Department = 'HR' OR Department = 'Finance') AND Salary > 60000;,"CREATE TABLE Employees (EmployeeID INT, EmployeeName TEXT, Department TEXT, Salary REAL);",Retrieves employee names for those in 'HR' or 'Finance' departments with a salary greater than 60000.
Show all customer feedback entries that contain the word 'bad' or 'poor'.,SELECT FeedbackID FROM Feedback WHERE Comment LIKE '%bad%' OR Comment LIKE '%poor%';,"CREATE TABLE Feedback (FeedbackID INT, CustomerID INT, Comment TEXT);",Filters feedback entries to include those where the 'Comment' contains either 'bad' or 'poor'.
Find products whose quantity in stock is between 10 and 50 and are not marked as 'Discontinued'.,SELECT ProductName FROM Products WHERE StockQuantity BETWEEN 10 AND 50 AND Status != 'Discontinued';,"CREATE TABLE Products (ProductID INT, ProductName TEXT, StockQuantity INT, Status TEXT);",Selects product names for products with stock between 10 and 50 and whose 'Status' is not 'Discontinued'.
Get all orders from customer 201 that were placed after '2023-07-01'.,SELECT OrderID FROM Orders WHERE CustomerID = 201 AND OrderDate > '2023-07-01';,"CREATE TABLE Orders (OrderID INT, CustomerID INT, OrderDate DATE);","Filters orders to show those placed by customer 201 after July 1st, 2023."
Retrieve records where the 'Category' is 'Electronics' and the 'Status' is 'Available'.,SELECT ItemName FROM Inventory WHERE Category = 'Electronics' AND Status = 'Available';,"CREATE TABLE Inventory (ItemID INT, ItemName TEXT, Category TEXT, Status TEXT);",Retrieves item names from 'Inventory' table where 'Category' is 'Electronics' and 'Status' is 'Available'.
List all films with a runtime greater than 120 minutes and a genre of 'Action' or 'Adventure'.,SELECT Title FROM Films WHERE RuntimeMinutes > 120 AND (Genre = 'Action' OR Genre = 'Adventure');,"CREATE TABLE Films (FilmID INT, Title TEXT, RuntimeMinutes INT, Genre TEXT);",Selects film titles for films longer than 120 minutes and belonging to either 'Action' or 'Adventure' genre.
Show customer IDs who have registered in '2023' and have 'Gold' membership.,SELECT CustomerID FROM Customers WHERE RegistrationYear = 2023 AND MembershipLevel = 'Gold';,"CREATE TABLE Customers (CustomerID INT, CustomerName TEXT, RegistrationYear INT, MembershipLevel TEXT);",Filters customer IDs for customers who registered in 2023 and have a 'Gold' membership level.
Find employees whose name does not start with 'M' and salary is greater than 70000.,SELECT EmployeeName FROM Employees WHERE EmployeeName NOT LIKE 'M%' AND Salary > 70000;,"CREATE TABLE Employees (EmployeeID INT, EmployeeName TEXT, Salary REAL);",Retrieves employee names for employees whose name does not start with 'M' and salary is greater than 70000.
Get all events that are not 'Cancelled' and occur after '2024-01-01'.,SELECT EventName FROM Events WHERE Status != 'Cancelled' AND EventDate > '2024-01-01';,"CREATE TABLE Events (EventID INT, EventName TEXT, EventDate DATE, Status TEXT);","Selects event names for events that are not 'Cancelled' and scheduled after January 1st, 2024."
Retrieve products with price not less than 50.00.,SELECT ProductName FROM Products WHERE Price >= 50.00;,"CREATE TABLE Products (ProductID INT, ProductName TEXT, Price REAL);",Filters products to show those with a 'Price' greater than or equal to 50.00.
Instruction,Query,Table Schema,Explanation
Retrieve the names of all customers and the order IDs associated with them.,"SELECT c.customer_name, o.order_id FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id;","Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses an INNER JOIN to combine rows from the Customers and Orders tables. It returns only the customers who have placed orders, showing their name and the ID of each order."
List all products along with their category names.,"SELECT p.product_name, cat.category_name FROM Products p INNER JOIN Categories cat ON p.category_id = cat.category_id;","Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));",An INNER JOIN is used here to match products with their respective categories based on the category_id. Only products belonging to an existing category will be listed.
Find the names of employees and their corresponding department names.,"SELECT e.employee_name, d.department_name FROM Employees e INNER JOIN Departments d ON e.department_id = d.department_id;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2)); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));",This query joins the Employees and Departments tables using an INNER JOIN on department_id to display each employee's name alongside their department's name. Employees without an assigned department or departments without employees are not included.
"Show all customers, even those who have not placed any orders, along with their order IDs if they have any.","SELECT c.customer_name, o.order_id FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id;","Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","A LEFT JOIN is used to return all rows from the 'Customers' table (the left table) and the matching rows from the 'Orders' table (the right table). If there is no match for a customer in the Orders table, the order_id will be NULL."
"List all departments and the employees working in each department, including departments with no employees.","SELECT d.department_name, e.employee_name FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2)); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","This LEFT JOIN ensures that all departments are listed, even if they currently have no employees. For departments without employees, the employee_name will appear as NULL."
"Retrieve all orders and their associated customer names, including orders that might not have a matching customer (if such data existed) or customers without orders.","SELECT c.customer_name, o.order_id FROM Customers c FULL OUTER JOIN Orders o ON c.customer_id = o.customer_id;","Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","A FULL OUTER JOIN returns all rows when there is a match in either the left (Customers) or the right (Orders) table. If a row in one table doesn't have a match in the other, NULL values are used for the columns from the non-matching table. This shows all customers and all orders, regardless of a match."
Find all products that belong to the 'Electronics' category.,SELECT p.product_name FROM Products p INNER JOIN Categories cat ON p.category_id = cat.category_id WHERE cat.category_name = 'Electronics';,"Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));","This query uses an INNER JOIN to link products with their categories, then filters the result using a WHERE clause to only include products where the category name is 'Electronics'."
Get a list of all customers who have not placed any orders.,SELECT c.customer_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;,"Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","By performing a LEFT JOIN and then filtering where the right table's (Orders) primary key is NULL, we can identify all customers who exist in the Customers table but have no corresponding entries in the Orders table."
List all employees and their managers' names.,"SELECT e.employee_name AS Employee, m.employee_name AS Manager FROM Employees e LEFT JOIN Employees m ON e.manager_id = m.employee_id;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, manager_id INT, salary DECIMAL(10,2), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This is a self-join where the Employees table is joined with itself using two aliases (e for employee, m for manager). It links an employee to their manager by matching the employee's manager_id to another employee's employee_id. A LEFT JOIN is used to include employees who do not have a manager (e.g., the CEO)."
Show the total number of orders for each customer.,"SELECT c.customer_name, COUNT(o.order_id) AS NumberOfOrders FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY NumberOfOrders DESC;","Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","A LEFT JOIN is used to ensure all customers are included. The COUNT(o.order_id) aggregates the number of orders for each customer, and the GROUP BY clause groups the results by customer name. Even customers with no orders will appear with a count of 0."
"Get the names of products, their categories, and the names of suppliers who supply them.","SELECT p.product_name, c.category_name, s.supplier_name FROM Products p INNER JOIN Categories c ON p.category_id = c.category_id INNER JOIN Suppliers_Products sp ON p.product_id = sp.product_id INNER JOIN Suppliers s ON sp.supplier_id = s.supplier_id;","Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100)); Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), city VARCHAR(100)); Suppliers_Products (supplier_id INT, product_id INT, quantity INT, PRIMARY KEY (supplier_id, product_id), FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query demonstrates joining three tables: Products, Categories, and Suppliers via an associative table Suppliers_Products. Multiple INNER JOINs are used to connect these entities and retrieve the names of products, their categories, and their suppliers."
Find all products that are more expensive than 50 and belong to a category.,"SELECT p.product_name, p.price, cat.category_name FROM Products p INNER JOIN Categories cat ON p.category_id = cat.category_id WHERE p.price > 50;","Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));","An INNER JOIN is used to combine products with their categories, and a WHERE clause then filters these results to only include products with a price greater than 50."
"List all categories and the count of products in each, including categories with no products.","SELECT cat.category_name, COUNT(p.product_id) AS ProductCount FROM Categories cat LEFT JOIN Products p ON cat.category_id = p.category_id GROUP BY cat.category_name ORDER BY ProductCount DESC;","Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));","This query uses a LEFT JOIN to ensure all categories are listed. COUNT(p.product_id) counts products, and GROUP BY category_name groups them. Categories without products will show a count of 0 due to the LEFT JOIN."
Show the average order amount for each customer.,"SELECT c.customer_name, AVG(o.total_amount) AS AverageOrderAmount FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;","Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","An INNER JOIN connects customers with their orders. The AVG aggregate function calculates the average total_amount for orders, and the GROUP BY clause ensures this average is computed per customer."
Retrieve the names of employees who earn more than their department's average salary.,"SELECT e.employee_name, e.salary, d.department_name FROM Employees e INNER JOIN (SELECT department_id, AVG(salary) AS avg_dept_salary FROM Employees GROUP BY department_id) AS dept_avg ON e.department_id = dept_avg.department_id WHERE e.salary > dept_avg.avg_dept_salary;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2)); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));",This query uses an INNER JOIN with a derived table (subquery). The derived table calculates the average salary per department. The main query then joins employees with these average salaries and filters for employees whose salary is greater than their department's average.
"List customers from 'New York' and their orders, if any.","SELECT c.customer_name, o.order_id FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE c.city = 'New York';","Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","A LEFT JOIN ensures all customers from 'New York' are included, regardless of whether they have placed orders. The WHERE clause filters the customers by city before joining."
Get all authors and the titles of books they have written.,"SELECT a.author_name, b.title FROM Authors a LEFT JOIN Books b ON a.author_id = b.author_id;","Authors (author_id INT PRIMARY KEY, author_name VARCHAR(255), country VARCHAR(100)); Books (book_id INT PRIMARY KEY, title VARCHAR(255), author_id INT, publication_year INT, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This LEFT JOIN retrieves all authors from the Authors table, and if they have written books, their titles are displayed. Authors who haven't written any books will still appear, with a NULL value for title."
Find departments that currently have no employees.,SELECT d.department_name FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id WHERE e.employee_id IS NULL;,"Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2)); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","This query uses a LEFT JOIN to include all departments. By filtering for cases where employee_id from the Employees table is NULL, it effectively identifies departments that have no employees assigned to them."
Combine every product with every category (Cartesian product).,"SELECT p.product_name, c.category_name FROM Products p CROSS JOIN Categories c;","Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));","A CROSS JOIN returns the Cartesian product of the two tables. Every row from the Products table is combined with every row from the Categories table, resulting in all possible combinations."
"List all products and their category, ordered by product price from highest to lowest.","SELECT p.product_name, p.price, cat.category_name FROM Products p INNER JOIN Categories cat ON p.category_id = cat.category_id ORDER BY p.price DESC;","Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));",An INNER JOIN links products to their categories. The ORDER BY clause then sorts the combined result set by product price in descending order.
Get details of customers who placed orders after '2023-01-01'.,"SELECT c.customer_name, o.order_id, o.order_date FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date > '2023-01-01';","Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query uses an INNER JOIN to link customers and their orders. A WHERE clause then filters these joined results to include only orders placed after the specified date.
"Show all students and their major, even if a major is not assigned.","SELECT s.student_name, m.major_name FROM Students s LEFT JOIN Majors m ON s.major_id = m.major_id;","Students (student_id INT PRIMARY KEY, student_name VARCHAR(255), major_id INT); Majors (major_id INT PRIMARY KEY, major_name VARCHAR(100));","A LEFT JOIN is used to include all students from the Students table. If a student does not have a matching major_id in the Majors table, the major_name will be NULL."
List all courses along with the department they belong to.,"SELECT c.course_name, d.department_name FROM Courses c INNER JOIN Departments d ON c.department_id = d.department_id;","Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), department_id INT); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100));","An INNER JOIN is used to connect courses to their respective departments based on department_id, showing only courses that are associated with an existing department."
Find all suppliers who supply parts with a 'Red' color.,SELECT DISTINCT s.supplier_name FROM Suppliers s INNER JOIN Supplier_Parts sp ON s.supplier_id = sp.supplier_id INNER JOIN Parts p ON sp.part_id = p.part_id WHERE p.color = 'Red';,"Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), city VARCHAR(100)); Parts (part_id INT PRIMARY KEY, part_name VARCHAR(255), color VARCHAR(50)); Supplier_Parts (supplier_id INT, part_id INT, quantity INT, PRIMARY KEY (supplier_id, part_id), FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id), FOREIGN KEY (part_id) REFERENCES Parts(part_id));","This query uses two INNER JOINs to link suppliers to the parts they supply, and then to the part details. The WHERE clause filters for parts where the color is 'Red', and DISTINCT ensures each supplier name is listed only once."
Get the names of employees who work in the 'Sales' department.,SELECT e.employee_name FROM Employees e INNER JOIN Departments d ON e.department_id = d.department_id WHERE d.department_name = 'Sales';,"Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2)); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));",An INNER JOIN connects employees to their departments. A WHERE clause then filters the results to only show employees from the 'Sales' department.
Show products that have never been ordered.,SELECT p.product_name FROM Products p LEFT JOIN OrderDetails od ON p.product_id = od.product_id WHERE od.order_id IS NULL;,"Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); OrderDetails (order_detail_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query performs a LEFT JOIN from Products to OrderDetails. By checking where the order_id from OrderDetails is NULL, it identifies products that exist but have no corresponding entries in the OrderDetails table, meaning they've never been ordered."
List customers who placed orders with a total amount greater than 1000.,SELECT DISTINCT c.customer_name FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id WHERE o.total_amount > 1000;,"Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","An INNER JOIN is used to connect customers to their orders. The results are then filtered by orders with a total amount over 1000. DISTINCT ensures each customer name is listed only once, even if they have multiple such orders."
Find all pairs of employees who work in the same department.,"SELECT e1.employee_name AS Employee1, e2.employee_name AS Employee2, d.department_name FROM Employees e1 INNER JOIN Employees e2 ON e1.department_id = e2.department_id AND e1.employee_id < e2.employee_id INNER JOIN Departments d ON e1.department_id = d.department_id;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100));","This is a self-join on the Employees table (aliased as e1 and e2) to find employees in the same department. The condition `e1.employee_id < e2.employee_id` prevents duplicate pairs (A, B and B, A) and avoids pairing an employee with themselves. An additional INNER JOIN to Departments gets the department name."
Show the department name and the highest salary within that department.,"SELECT d.department_name, MAX(e.salary) AS MaxSalary FROM Departments d INNER JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2)); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","An INNER JOIN connects departments and employees. The MAX(salary) aggregate function finds the highest salary, and GROUP BY department_name ensures this is calculated for each department."
List all authors who have not written any books.,SELECT a.author_name FROM Authors a LEFT JOIN Books b ON a.author_id = b.author_id WHERE b.book_id IS NULL;,"Authors (author_id INT PRIMARY KEY, author_name VARCHAR(255), country VARCHAR(100)); Books (book_id INT PRIMARY KEY, title VARCHAR(255), author_id INT, publication_year INT, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","By using a LEFT JOIN from Authors to Books and filtering where the book_id from the Books table is NULL, this query identifies authors who exist but have no corresponding entries in the Books table."
Retrieve employees and their department locations.,"SELECT e.employee_name, d.location FROM Employees e INNER JOIN Departments d ON e.department_id = d.department_id;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2)); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));",An INNER JOIN combines the Employees and Departments tables based on the common department_id to show each employee's name along with their department's physical location.
"Get the total amount for each order, along with the customer's name who placed it.","SELECT o.order_id, c.customer_name, o.total_amount FROM Orders o INNER JOIN Customers c ON o.customer_id = c.customer_id;","Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses an INNER JOIN to link orders to the customers who placed them, displaying the order ID, customer name, and the total amount of the order."
Find books published before 2000 and their authors.,"SELECT b.title, a.author_name FROM Books b INNER JOIN Authors a ON b.author_id = a.author_id WHERE b.publication_year < 2000;","Authors (author_id INT PRIMARY KEY, author_name VARCHAR(255), country VARCHAR(100)); Books (book_id INT PRIMARY KEY, title VARCHAR(255), author_id INT, publication_year INT, FOREIGN KEY (author_id) REFERENCES Authors(author_id));",An INNER JOIN connects books with their authors. The WHERE clause then filters for books published before the year 2000.
List all customers and display 'No Orders' if they haven't placed any.,"SELECT c.customer_name, COALESCE(CAST(o.order_id AS VARCHAR), 'No Orders') AS OrderStatus FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id;","Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","A LEFT JOIN is used to include all customers. The COALESCE function checks if order_id is NULL (meaning no order); if so, it replaces NULL with the string 'No Orders'. Otherwise, it shows the order_id (cast to VARCHAR for type consistency)."
Get the number of employees in each department located in 'London'.,"SELECT d.department_name, COUNT(e.employee_id) AS EmployeeCount FROM Departments d INNER JOIN Employees e ON d.department_id = e.department_id WHERE d.location = 'London' GROUP BY d.department_name;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","This query joins departments and employees, filters for departments in 'London', and then counts the employees for each of those departments using GROUP BY."
"List all products and their categories, displaying products even if their category is missing or invalid (if possible).","SELECT p.product_name, cat.category_name FROM Products p LEFT JOIN Categories cat ON p.category_id = cat.category_id;","Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));","A LEFT JOIN from Products to Categories ensures that all products are listed. If a product's category_id does not have a match in the Categories table (e.g., it's NULL or points to a non-existent category), the category_name will appear as NULL."
Find the total salary paid per department.,"SELECT d.department_name, SUM(e.salary) AS TotalSalary FROM Departments d INNER JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2)); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","An INNER JOIN connects departments and employees. The SUM(salary) aggregate function calculates the total salary, grouped by department name."
Retrieve the names of customers who have placed at least one order and live in 'Paris'.,SELECT DISTINCT c.customer_name FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id WHERE c.city = 'Paris';,"Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","An INNER JOIN ensures that only customers with orders are considered. The WHERE clause filters for customers from 'Paris', and DISTINCT ensures each customer is listed once."
"List employees and their department, and their manager's name and manager's department.","SELECT E.employee_name, D1.department_name AS Employee_Department, M.employee_name AS Manager_Name, D2.department_name AS Manager_Department FROM Employees E INNER JOIN Departments D1 ON E.department_id = D1.department_id LEFT JOIN Employees M ON E.manager_id = M.employee_id LEFT JOIN Departments D2 ON M.department_id = D2.department_id;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, manager_id INT, salary DECIMAL(10,2)); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","This query uses multiple JOINs. It first INNER JOINs Employees to Departments (D1) for employee's department. Then, it LEFT JOINs Employees again (M) for the manager and LEFT JOINs Departments again (D2) for the manager's department. LEFT JOINs are used for managers as not all employees have a manager."
Find the names of students who are enrolled in 'Computer Science' major.,SELECT s.student_name FROM Students s INNER JOIN Majors m ON s.major_id = m.major_id WHERE m.major_name = 'Computer Science';,"Students (student_id INT PRIMARY KEY, student_name VARCHAR(255), major_id INT); Majors (major_id INT PRIMARY KEY, major_name VARCHAR(100));","An INNER JOIN connects students to their majors, and the WHERE clause filters the results to only include students enrolled in 'Computer Science'."
Retrieve all students and the courses they are enrolled in.,"SELECT s.student_name, c.course_name FROM Students s INNER JOIN Enrollments e ON s.student_id = e.student_id INNER JOIN Courses c ON e.course_id = c.course_id;","Students (student_id INT PRIMARY KEY, student_name VARCHAR(255), major_id INT); Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), department_id INT); Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, grade VARCHAR(2), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query uses two INNER JOINs to connect students, their enrollments, and the courses they are enrolled in. It shows students who have active enrollments and the specific courses they are taking."
List all customers who have ordered products from the 'Books' category.,SELECT DISTINCT c.customer_name FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id INNER JOIN OrderDetails od ON o.order_id = od.order_id INNER JOIN Products p ON od.product_id = p.product_id INNER JOIN Categories cat ON p.category_id = cat.category_id WHERE cat.category_name = 'Books';,"Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2)); OrderDetails (order_detail_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT); Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));",This complex query uses multiple INNER JOINs to connect Customers -> Orders -> OrderDetails -> Products -> Categories. It then filters the results to only include customers who ordered products belonging to the 'Books' category. DISTINCT ensures each customer is listed once.
"Show all books and their authors, and list books even if they don't have an assigned author (if author_id can be NULL or non-existent in Authors).","SELECT b.title, a.author_name FROM Books b LEFT JOIN Authors a ON b.author_id = a.author_id;","Authors (author_id INT PRIMARY KEY, author_name VARCHAR(255), country VARCHAR(100)); Books (book_id INT PRIMARY KEY, title VARCHAR(255), author_id INT, publication_year INT, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","A LEFT JOIN from Books to Authors ensures that all books are included. If a book's author_id does not have a match in the Authors table, the author_name will be NULL."
Get the number of products supplied by each supplier.,"SELECT s.supplier_name, COUNT(sp.product_id) AS NumberOfProductsSupplied FROM Suppliers s LEFT JOIN Suppliers_Products sp ON s.supplier_id = sp.supplier_id GROUP BY s.supplier_name;","Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), city VARCHAR(100)); Suppliers_Products (supplier_id INT, product_id INT, quantity INT, PRIMARY KEY (supplier_id, product_id));","A LEFT JOIN ensures all suppliers are included. The COUNT(sp.product_id) counts the products, and GROUP BY supplier_name aggregates the count for each supplier. Suppliers with no products will show a count of 0."
List the customer names and their cities for orders placed in January 2023.,"SELECT c.customer_name, c.city, o.order_id FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date BETWEEN '2023-01-01' AND '2023-01-31';","Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2));",This query uses an INNER JOIN to link customers to their orders. A WHERE clause then filters these combined results to include only orders placed within January 2023.
"Find employees who manage other employees, along with the count of direct reports.","SELECT m.employee_name AS ManagerName, COUNT(e.employee_id) AS DirectReportsCount FROM Employees m INNER JOIN Employees e ON m.employee_id = e.manager_id GROUP BY m.employee_name HAVING COUNT(e.employee_id) > 0;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, manager_id INT, salary DECIMAL(10,2), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));",This self-join pairs managers with their direct reports. An INNER JOIN ensures only actual managers (those who have at least one direct report) are included. GROUP BY manager name and COUNT(e.employee_id) gives the number of direct reports.
Retrieve departments that have no courses associated with them.,SELECT d.department_name FROM Departments d LEFT JOIN Courses c ON d.department_id = c.department_id WHERE c.course_id IS NULL;,"Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), department_id INT); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100));","This query uses a LEFT JOIN to include all departments. By checking where the course_id from the Courses table is NULL, it identifies departments that have no courses listed under them."
List all products and the total quantity ordered for each.,"SELECT p.product_name, SUM(od.quantity) AS TotalQuantityOrdered FROM Products p INNER JOIN OrderDetails od ON p.product_id = od.product_id GROUP BY p.product_name;","Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); OrderDetails (order_detail_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (product_id) REFERENCES Products(product_id));","An INNER JOIN links products to their order details. SUM(quantity) calculates the total quantity, and GROUP BY product_name ensures the sum is computed for each distinct product."
"Show all employees and their respective project names, including employees not assigned to any project.","SELECT e.employee_name, p.project_name FROM Employees e LEFT JOIN ProjectAssignments pa ON e.employee_id = pa.employee_id LEFT JOIN Projects p ON pa.project_id = p.project_id;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT); Projects (project_id INT PRIMARY KEY, project_name VARCHAR(255)); ProjectAssignments (assignment_id INT PRIMARY KEY, employee_id INT, project_id INT, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query uses two LEFT JOINs. First, it joins Employees with ProjectAssignments to include all employees. Then, it joins with Projects to get the project names. Employees without assignments will show NULL for project_name."
Find customers who have placed orders with a 'Laptop' product.,SELECT DISTINCT c.customer_name FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id INNER JOIN OrderDetails od ON o.order_id = od.order_id INNER JOIN Products p ON od.product_id = p.product_id WHERE p.product_name = 'Laptop';,"Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2)); OrderDetails (order_detail_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT); Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category_id INT);","Multiple INNER JOINs connect customers through orders and order details to products. The WHERE clause filters for products named 'Laptop', and DISTINCT ensures each customer is listed only once."
"Get a list of all courses and the number of students enrolled in each, including courses with no enrollments.","SELECT c.course_name, COUNT(e.student_id) AS EnrolledStudentsCount FROM Courses c LEFT JOIN Enrollments e ON c.course_id = e.course_id GROUP BY c.course_name ORDER BY EnrolledStudentsCount DESC;","Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), department_id INT); Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, grade VARCHAR(2));","A LEFT JOIN from Courses to Enrollments ensures all courses are listed. COUNT(e.student_id) counts enrolled students (NULL for courses with no enrollments results in 0), grouped by course name."
Show employees who manage employees from a different department.,"SELECT M.employee_name AS Manager, E.employee_name AS Employee, D_M.department_name AS Manager_Dept, D_E.department_name AS Employee_Dept FROM Employees E INNER JOIN Employees M ON E.manager_id = M.employee_id INNER JOIN Departments D_E ON E.department_id = D_E.department_id INNER JOIN Departments D_M ON M.department_id = D_M.department_id WHERE D_E.department_id <> D_M.department_id;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, manager_id INT); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100));","This query uses a self-join for employees and managers, and then joins both the employee and manager to their respective departments. The WHERE clause then filters for cases where the manager's department ID is different from the employee's department ID."
"List all events and their attendees, including events with no attendees.","SELECT ev.event_name, at.attendee_name FROM Events ev LEFT JOIN EventAttendees ea ON ev.event_id = ea.event_id LEFT JOIN Attendees at ON ea.attendee_id = at.attendee_id;","Events (event_id INT PRIMARY KEY, event_name VARCHAR(255), event_date DATE); Attendees (attendee_id INT PRIMARY KEY, attendee_name VARCHAR(255)); EventAttendees (event_id INT, attendee_id INT, PRIMARY KEY (event_id, attendee_id), FOREIGN KEY (event_id) REFERENCES Events(event_id), FOREIGN KEY (attendee_id) REFERENCES Attendees(attendee_id));","Two LEFT JOINs are used. First, Events are joined with EventAttendees to include all events. Then, EventAttendees are joined with Attendees to get attendee names. Events without attendees will show NULL for attendee_name."
Get the names of customers who have placed an order but their city is unknown (NULL).,SELECT c.customer_name FROM Customers c INNER JOIN Orders o ON c.customer_id = o.customer_id WHERE c.city IS NULL;,"Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(100)); Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",An INNER JOIN ensures only customers with orders are considered. The WHERE clause then filters these customers to find those whose city information is missing (NULL).
Show the number of distinct products in each order.,"SELECT o.order_id, COUNT(DISTINCT od.product_id) AS DistinctProductCount FROM Orders o INNER JOIN OrderDetails od ON o.order_id = od.order_id GROUP BY o.order_id;","Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2)); OrderDetails (order_detail_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); Products (product_id INT PRIMARY KEY, product_name VARCHAR(255));","An INNER JOIN connects orders to their details. COUNT(DISTINCT product_id) counts unique products for each order, with results grouped by order ID."
"List all employees, their salary, and their department name, ordering by department name then by salary.","SELECT e.employee_name, e.salary, d.department_name FROM Employees e INNER JOIN Departments d ON e.department_id = d.department_id ORDER BY d.department_name, e.salary DESC;","Employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2)); Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","An INNER JOIN combines employee and department information. The ORDER BY clause sorts the results first by department name in ascending order, then by salary in descending order within each department."
Find all products that are not assigned to any category.,SELECT p.product_name FROM Products p LEFT JOIN Categories c ON p.category_id = c.category_id WHERE c.category_id IS NULL;,"Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));","A LEFT JOIN from Products to Categories is performed. By filtering where the category_id from the Categories table is NULL, it identifies products that exist but have no corresponding entry in the Categories table (either `category_id` in Products is NULL or points to a non-existent category)."
Get the top 3 most expensive products and their categories.,"SELECT p.product_name, p.price, c.category_name FROM Products p INNER JOIN Categories c ON p.category_id = c.category_id ORDER BY p.price DESC LIMIT 3;","Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category_id INT); Categories (category_id INT PRIMARY KEY, category_name VARCHAR(100));","An INNER JOIN links products to their categories. The results are ordered by price in descending order, and LIMIT 3 then restricts the output to only the top 3 rows."
Identify products that are supplied by 'Global Supplies' but not by 'Local Distributors'.,SELECT DISTINCT p.product_name FROM Products p INNER JOIN Suppliers_Products sp1 ON p.product_id = sp1.product_id INNER JOIN Suppliers s1 ON sp1.supplier_id = s1.supplier_id WHERE s1.supplier_name = 'Global Supplies' AND NOT EXISTS (SELECT 1 FROM Suppliers_Products sp2 INNER JOIN Suppliers s2 ON sp2.supplier_id = s2.supplier_id WHERE sp2.product_id = p.product_id AND s2.supplier_name = 'Local Distributors');,"Products (product_id INT PRIMARY KEY, product_name VARCHAR(255)); Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255)); Suppliers_Products (supplier_id INT, product_id INT, PRIMARY KEY (supplier_id, product_id));","This query finds products supplied by 'Global Supplies' using INNER JOINs. It then uses NOT EXISTS with a subquery to exclude any of these products that are also supplied by 'Local Distributors', effectively finding products unique to 'Global Supplies' from this comparison."
Instruction,Query,Table Schema,Explanation
Count the total number of books written by each author.,"SELECT author, COUNT(book_id) AS total_books FROM books GROUP BY author;","books (book_id INT, title TEXT, author TEXT, publication_year INT)",This query groups the books by their author and then counts the number of books for each distinct author.
Calculate the average salary for employees in each department.,"SELECT department, AVG(salary) AS average_salary FROM employees GROUP BY department;","employees (employee_id INT, name TEXT, department TEXT, salary DECIMAL)",This query groups employees by their department and computes the average salary for each department.
Find the maximum price of a product in each category.,"SELECT category, MAX(price) AS max_price FROM products GROUP BY category;","products (product_id INT, name TEXT, category TEXT, price DECIMAL)",This query groups products by their category and determines the highest price within each category.
Determine the total sales amount for each customer.,"SELECT customer_id, SUM(amount) AS total_sales FROM orders GROUP BY customer_id;","orders (order_id INT, customer_id INT, order_date DATE, amount DECIMAL)",This query groups orders by customer ID and sums up the total amount spent by each customer.
Count the number of courses offered by each instructor.,"SELECT instructor_id, COUNT(course_id) AS num_courses FROM courses GROUP BY instructor_id;","courses (course_id INT, title TEXT, instructor_id INT, credits INT)",This query counts how many courses are associated with each instructor by grouping based on instructor ID.
"List each department and the number of employees it has, but only for departments with more than 5 employees.","SELECT department, COUNT(employee_id) AS num_employees FROM employees GROUP BY department HAVING COUNT(employee_id) > 5;","employees (employee_id INT, name TEXT, department TEXT, salary DECIMAL)",This query counts employees per department and then filters the results to show only departments that have more than 5 employees.
Calculate the average order value for each month.,"SELECT STRFTIME('%Y-%m', order_date) AS order_month, AVG(amount) AS average_order_value FROM orders GROUP BY order_month;","orders (order_id INT, customer_id INT, order_date DATE, amount DECIMAL)","This query extracts the month and year from the order date, groups orders by this month, and calculates the average order amount for each month."
Find the minimum quantity sold for each product.,"SELECT product_id, MIN(quantity) AS min_quantity_sold FROM sales GROUP BY product_id;","sales (sale_id INT, product_id INT, quantity INT, sale_date DATE)",This query groups sales records by product ID and identifies the smallest quantity sold in any single transaction for each product.
"For each student, find their highest score.","SELECT student_id, MAX(score) AS highest_score FROM grades GROUP BY student_id;","grades (grade_id INT, student_id INT, course_id INT, score INT)",This query groups grades by student ID and retrieves the highest score achieved by each student.
Count the number of unique visitors for each day.,"SELECT visit_date, COUNT(DISTINCT user_id) AS unique_visitors FROM website_visits GROUP BY visit_date;","website_visits (visit_id INT, user_id INT, visit_date DATE, page_view INT)",This query groups website visits by date and then counts the number of distinct user IDs for each day to find unique visitors.
Calculate the total budget allocated to each project.,"SELECT project_name, SUM(budget_allocated) AS total_budget FROM project_tasks GROUP BY project_name;","project_tasks (task_id INT, project_name TEXT, task_name TEXT, budget_allocated DECIMAL)","This query aggregates the budget allocated for tasks under each project, providing the total budget for each project."
Find the earliest and latest order dates for each customer.,"SELECT customer_id, MIN(order_date) AS first_order, MAX(order_date) AS last_order FROM orders GROUP BY customer_id;","orders (order_id INT, customer_id INT, order_date DATE, amount DECIMAL)",This query groups orders by customer ID and finds the minimum (earliest) and maximum (latest) order dates for each customer.
Count the number of items in each order.,"SELECT order_id, COUNT(item_id) AS num_items FROM order_items GROUP BY order_id;","order_items (item_id INT, order_id INT, product_id INT, quantity INT)",This query groups items by their associated order ID and counts how many distinct items are in each order.
Calculate the sum of quantities sold for each product on each day.,"SELECT product_id, sale_date, SUM(quantity) AS total_quantity_sold FROM sales GROUP BY product_id, sale_date;","sales (sale_id INT, product_id INT, quantity INT, sale_date DATE)","This query groups sales records by both product ID and sale date, summing up the quantity sold for each product on each specific day."
"For each user, find the total number of comments they have posted, ordered by comment count descending.","SELECT user_id, COUNT(comment_id) AS comment_count FROM comments GROUP BY user_id ORDER BY comment_count DESC;","comments (comment_id INT, user_id INT, post_id INT, comment_text TEXT, comment_date DATE)","This query counts comments for each user, then sorts the users by the number of comments they posted in descending order."
List products where the average quantity sold per sale is greater than 5.,"SELECT product_id, AVG(quantity) AS average_quantity_per_sale FROM sales GROUP BY product_id HAVING AVG(quantity) > 5;","sales (sale_id INT, product_id INT, quantity INT, sale_date DATE)",This query calculates the average quantity sold for each product and then filters for products where this average is greater than 5.
Find the oldest and newest employee hire dates for each job title.,"SELECT job_title, MIN(hire_date) AS oldest_hire_date, MAX(hire_date) AS newest_hire_date FROM employees GROUP BY job_title;","employees (employee_id INT, name TEXT, job_title TEXT, hire_date DATE)",This query groups employees by their job title and determines the earliest and latest hire dates within each job title.
Count how many users registered in each year.,"SELECT STRFTIME('%Y', registration_date) AS registration_year, COUNT(user_id) AS num_users FROM users GROUP BY registration_year;","users (user_id INT, username TEXT, email TEXT, registration_date DATE)","This query extracts the year from the registration date, groups users by that year, and counts the number of users registered in each year."
Calculate the sum of all payments made by each customer.,"SELECT customer_id, SUM(amount) AS total_payments FROM payments GROUP BY customer_id;","payments (payment_id INT, customer_id INT, amount DECIMAL, payment_date DATE)",This query groups payments by customer ID and sums the amount of all payments made by each customer.
"Find the average rating for each movie, considering only movies with at least 10 ratings.","SELECT movie_id, AVG(rating) AS average_rating FROM ratings GROUP BY movie_id HAVING COUNT(rating_id) >= 10;","ratings (rating_id INT, movie_id INT, user_id INT, rating INT)",This query calculates the average rating for each movie and then filters to include only movies that have received 10 or more ratings.
List the total number of events per event type.,"SELECT event_type, COUNT(event_id) AS total_events FROM events GROUP BY event_type;","events (event_id INT, event_type TEXT, event_date DATE, location TEXT)",This query groups events by their type and counts the total number of events for each type.
Show the number of tasks assigned to each employee and their average task duration.,"SELECT assigned_to_employee_id, COUNT(task_id) AS num_tasks, AVG(duration_minutes) AS avg_duration FROM tasks GROUP BY assigned_to_employee_id;","tasks (task_id INT, description TEXT, assigned_to_employee_id INT, duration_minutes INT)","This query groups tasks by the employee they are assigned to, counting the number of tasks and calculating the average duration for each employee."
"For each product, find the month with the highest sales volume.","SELECT product_id, STRFTIME('%Y-%m', sale_date) AS sales_month, SUM(quantity) AS monthly_quantity FROM sales GROUP BY product_id, sales_month ORDER BY monthly_quantity DESC;","sales (sale_id INT, product_id INT, quantity INT, sale_date DATE)","This query groups sales by product and month, sums the quantity for each combination, and then orders to potentially identify the top month for each product (though it returns all months)."
"List all countries and the number of cities they contain, only if they have more than 10 cities.","SELECT country, COUNT(city_id) AS num_cities FROM cities GROUP BY country HAVING COUNT(city_id) > 10;","cities (city_id INT, city_name TEXT, country TEXT, population INT)",This query counts cities per country and then filters to display only those countries that contain more than 10 cities.
"What is the total number of items ordered by each customer, including customers who placed no orders?","SELECT C.customer_id, C.name, COUNT(OI.item_id) AS total_items_ordered FROM customers C LEFT JOIN orders O ON C.customer_id = O.customer_id LEFT JOIN order_items OI ON O.order_id = OI.order_id GROUP BY C.customer_id, C.name;","customers (customer_id INT, name TEXT), orders (order_id INT, customer_id INT), order_items (item_id INT, order_id INT)","This query joins customers with their orders and order items, then counts the total items for each customer, ensuring customers with no orders are also included (with a count of 0) due to LEFT JOINs."
Calculate the average review score for each restaurant.,"SELECT restaurant_id, AVG(score) AS average_score FROM reviews GROUP BY restaurant_id;","reviews (review_id INT, restaurant_id INT, user_id INT, score INT, review_text TEXT)",This query groups reviews by restaurant ID and computes the average review score for each distinct restaurant.
Find the total amount spent on tickets for each event.,"SELECT event_id, SUM(price * quantity) AS total_revenue FROM tickets GROUP BY event_id;","tickets (ticket_id INT, event_id INT, price DECIMAL, quantity INT, purchase_date DATE)",This query groups ticket purchases by event ID and calculates the total revenue generated for each event by summing (price * quantity).
"List the status and the count of tasks in each status, ordered by count in descending order.","SELECT status, COUNT(task_id) AS task_count FROM tasks GROUP BY status ORDER BY task_count DESC;","tasks (task_id INT, description TEXT, status TEXT)","This query groups tasks by their status, counts the number of tasks in each status, and then orders the results from the most common status to the least common."
Calculate the average age of users in each country.,"SELECT country, AVG(age) AS average_age FROM users GROUP BY country;","users (user_id INT, name TEXT, age INT, country TEXT)",This query groups users by their country and computes the average age of users within each country.
Count the number of distinct genres available for each artist.,"SELECT artist_id, COUNT(DISTINCT genre) AS distinct_genres FROM songs GROUP BY artist_id;","songs (song_id INT, title TEXT, artist_id INT, genre TEXT)",This query groups songs by artist ID and then counts the number of unique genres associated with each artist.
Find the total quantity of each product sold by each seller.,"SELECT seller_id, product_id, SUM(quantity) AS total_quantity FROM sales GROUP BY seller_id, product_id;","sales (sale_id INT, seller_id INT, product_id INT, quantity INT)","This query groups sales records by both seller ID and product ID, then sums the quantity sold for each unique seller-product combination."
"List employees who manage at least 3 direct reports, showing their manager ID and count of reports.","SELECT manager_id, COUNT(employee_id) AS direct_reports_count FROM employees WHERE manager_id IS NOT NULL GROUP BY manager_id HAVING COUNT(employee_id) >= 3;","employees (employee_id INT, name TEXT, manager_id INT)","This query counts the direct reports for each manager, filters out non-managers (where manager_id is NULL for the employee's own manager_id), and then displays only those managers who have 3 or more direct reports."
"For each movie, find the earliest and latest release dates if there are multiple releases.","SELECT movie_title, MIN(release_date) AS earliest_release, MAX(release_date) AS latest_release FROM movie_releases GROUP BY movie_title;","movie_releases (release_id INT, movie_title TEXT, release_date DATE, region TEXT)",This query groups movie releases by title and finds the earliest and latest release dates recorded for each movie.
Calculate the average duration of trips for each bike type.,"SELECT bike_type, AVG(duration_minutes) AS avg_trip_duration FROM bike_trips GROUP BY bike_type;","bike_trips (trip_id INT, bike_type TEXT, duration_minutes INT, start_station TEXT)",This query groups bike trips by the type of bike used and calculates the average duration of trips for each bike type.
Count the number of reviews submitted by each user and show only users who submitted more than 5 reviews.,"SELECT user_id, COUNT(review_id) AS num_reviews FROM reviews GROUP BY user_id HAVING COUNT(review_id) > 5;","reviews (review_id INT, user_id INT, product_id INT, rating INT)",This query counts the total reviews per user and then filters the results to only include users who have submitted more than 5 reviews.
"For each day, find the total number of page views and the count of unique users.","SELECT view_date, SUM(page_views) AS total_page_views, COUNT(DISTINCT user_id) AS unique_users FROM page_activity GROUP BY view_date;","page_activity (activity_id INT, user_id INT, view_date DATE, page_views INT)","This query groups page activity by date, summing up total page views and counting unique users for each day."
Determine the total price of all items in stock for each warehouse.,"SELECT warehouse_id, SUM(quantity_in_stock * unit_price) AS total_stock_value FROM inventory GROUP BY warehouse_id;","inventory (item_id INT, warehouse_id INT, product_id INT, quantity_in_stock INT, unit_price DECIMAL)",This query groups inventory by warehouse ID and calculates the total value of stock in each warehouse by summing (quantity_in_stock * unit_price).
Find the artist and album with the most tracks.,"SELECT artist_id, album_id, COUNT(track_id) AS num_tracks FROM tracks GROUP BY artist_id, album_id ORDER BY num_tracks DESC LIMIT 1;","tracks (track_id INT, album_id INT, artist_id INT, title TEXT)","This query groups tracks by both artist and album, counts the tracks in each album, and then returns only the album with the highest track count."
Calculate the average session duration for each operating system.,"SELECT os_type, AVG(session_duration_seconds) AS avg_duration FROM user_sessions GROUP BY os_type;","user_sessions (session_id INT, user_id INT, os_type TEXT, session_duration_seconds INT)",This query groups user sessions by the operating system used and calculates the average session duration for each OS.
List the total number of orders placed by customers from each city.,"SELECT C.city, COUNT(O.order_id) AS total_orders FROM customers C JOIN orders O ON C.customer_id = O.customer_id GROUP BY C.city;","customers (customer_id INT, name TEXT, city TEXT), orders (order_id INT, customer_id INT)","This query joins customers with their orders, groups the results by customer city, and counts the total number of orders originating from each city."
Find the maximum and minimum temperature recorded for each sensor.,"SELECT sensor_id, MAX(temperature) AS max_temp, MIN(temperature) AS min_temp FROM sensor_readings GROUP BY sensor_id;","sensor_readings (reading_id INT, sensor_id INT, temperature DECIMAL, reading_time DATETIME)",This query groups sensor readings by sensor ID and finds the highest and lowest temperatures recorded by each sensor.
"Calculate the total revenue generated by each product type, only for types with revenue exceeding $5000.","SELECT product_type, SUM(price * quantity) AS total_revenue FROM sales_items GROUP BY product_type HAVING SUM(price * quantity) > 5000;","sales_items (item_id INT, product_type TEXT, price DECIMAL, quantity INT)",This query calculates the total revenue for each product type and then filters to show only those product types that have generated more than $5000 in revenue.
Count the number of flights originating from each airport.,"SELECT origin_airport_code, COUNT(flight_id) AS num_flights FROM flights GROUP BY origin_airport_code;","flights (flight_id INT, origin_airport_code TEXT, destination_airport_code TEXT, departure_time DATETIME)",This query groups flights by their origin airport code and counts the total number of flights departing from each airport.
List the customer segments with an average purchase amount over $100.,"SELECT segment, AVG(amount) AS average_purchase FROM purchases GROUP BY segment HAVING AVG(amount) > 100;","purchases (purchase_id INT, customer_id INT, segment TEXT, amount DECIMAL)",This query calculates the average purchase amount for each customer segment and then filters to only include segments where the average purchase is greater than $100.
"For each employee, find the total number of projects they are assigned to.","SELECT employee_id, COUNT(project_id) AS projects_assigned FROM employee_projects GROUP BY employee_id;","employee_projects (assignment_id INT, employee_id INT, project_id INT, role TEXT)",This query groups project assignments by employee ID and counts how many distinct projects each employee is assigned to.
Find the average salary of employees in departments that have more than 3 employees.,"SELECT department_name, AVG(salary) AS avg_salary FROM employees E JOIN departments D ON E.department_id = D.department_id GROUP BY department_name HAVING COUNT(employee_id) > 3;","employees (employee_id INT, salary DECIMAL, department_id INT), departments (department_id INT, department_name TEXT)","This query joins employees with their departments, groups by department name, calculates the average salary, and filters to include only departments with more than 3 employees."
Determine the total number of active users per plan type.,"SELECT plan_type, COUNT(user_id) AS active_users_count FROM users WHERE status = 'active' GROUP BY plan_type;","users (user_id INT, username TEXT, plan_type TEXT, status TEXT)","This query filters for active users, then groups them by their plan type and counts the number of active users for each plan."
Calculate the sum of quantities for each product that has been returned.,"SELECT product_id, SUM(quantity) AS total_returned_quantity FROM returns GROUP BY product_id;","returns (return_id INT, product_id INT, quantity INT, return_date DATE)",This query groups returned items by product ID and sums the quantity of each product that has been returned.
"For each student, find the total credits they are enrolled in.","SELECT student_id, SUM(C.credits) AS total_credits FROM enrollments E JOIN courses C ON E.course_id = C.course_id GROUP BY student_id;","enrollments (enrollment_id INT, student_id INT, course_id INT), courses (course_id INT, credits INT)","This query joins enrollments with courses, groups by student ID, and sums the credits for all courses each student is enrolled in."
List publishers and the average publication year of their books.,"SELECT publisher, AVG(publication_year) AS average_publication_year FROM books GROUP BY publisher;","books (book_id INT, title TEXT, publisher TEXT, publication_year INT)",This query groups books by their publisher and calculates the average publication year for books from each publisher.
Find the number of unique visitors to the website each day of the week.,"SELECT STRFTIME('%w', visit_date) AS day_of_week, COUNT(DISTINCT user_id) AS unique_visitors FROM website_visits GROUP BY day_of_week ORDER BY day_of_week;","website_visits (visit_id INT, user_id INT, visit_date DATE)","This query extracts the day of the week from the visit date, groups visits by this day, counts unique users for each day, and orders by day of week (0 for Sunday, 1 for Monday, etc.)."
"Count the number of items sold from each product category, but only if the category has more than 100 items sold in total.","SELECT P.category, SUM(OI.quantity) AS total_items_sold FROM products P JOIN order_items OI ON P.product_id = OI.product_id GROUP BY P.category HAVING SUM(OI.quantity) > 100;","products (product_id INT, category TEXT), order_items (item_id INT, product_id INT, quantity INT)","This query joins products with order items, groups by product category, sums the quantities sold for each category, and then filters to show only categories with more than 100 items sold."
Instruction,Query,Table Schema,Explanation
Assign a unique row number to each employee based on their salary in ascending order.,"SELECT employee_id, employee_name, salary, ROW_NUMBER() OVER (ORDER BY salary ASC) AS rn FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Assigns a sequential integer to each row within the result set, ordered by salary."
"Rank employees within each department based on their salary in descending order. Employees with the same salary should get the same rank, and the next rank should skip numbers.","SELECT employee_id, employee_name, department_id, salary, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Ranks employees by salary within each department. If two employees have the same salary, they get the same rank, and subsequent ranks are skipped."
"Rank employees within each department based on their salary in descending order, where ties receive the same rank and no ranks are skipped.","SELECT employee_id, employee_name, department_id, salary, DENSE_RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS dense_salary_rank FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Ranks employees by salary within each department. If two employees have the same salary, they get the same rank, and subsequent ranks are not skipped."
Divide all employees into 4 salary groups (quartiles) based on their salary.,"SELECT employee_id, employee_name, salary, NTILE(4) OVER (ORDER BY salary ASC) AS salary_quartile FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Divides the ordered set of employees into 4 equally sized groups based on salary and assigns a group number.
"For each sale, retrieve the total amount of the previous sale made by the same product, ordered by sale date.","SELECT sale_id, product_id, sale_date, total_amount, LAG(total_amount, 1, 0) OVER (PARTITION BY product_id ORDER BY sale_date) AS previous_sale_amount FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)","Retrieves the total_amount from the row preceding the current row within each product's sales history, ordered by date. If no previous row, it defaults to 0."
"For each sale, retrieve the total amount of the next sale made by the same product, ordered by sale date.","SELECT sale_id, product_id, sale_date, total_amount, LEAD(total_amount, 1) OVER (PARTITION BY product_id ORDER BY sale_date) AS next_sale_amount FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)","Retrieves the total_amount from the row following the current row within each product's sales history, ordered by date."
"Calculate the running total of sales amounts for each product, ordered by sale date.","SELECT sale_id, product_id, sale_date, total_amount, SUM(total_amount) OVER (PARTITION BY product_id ORDER BY sale_date) AS running_total_sales FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)",Calculates the cumulative sum of total_amount for each product up to the current sale date.
"Calculate the 3-day moving average of total sales for all products, based on sale date.","SELECT sale_id, sale_date, total_amount, AVG(total_amount) OVER (ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS three_day_moving_avg FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)","Calculates the average of total_amount for the current row and the two preceding rows, ordered by sale_date."
Count the number of employees in each department.,"SELECT employee_id, employee_name, department_id, COUNT(*) OVER (PARTITION BY department_id) AS department_employee_count FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Counts the total number of employees for each respective department.
Find the minimum salary in each department.,"SELECT employee_id, employee_name, department_id, salary, MIN(salary) OVER (PARTITION BY department_id) AS min_dept_salary FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Determines the lowest salary among all employees within the same department.
Find the maximum salary in each department.,"SELECT employee_id, employee_name, department_id, salary, MAX(salary) OVER (PARTITION BY department_id) AS max_dept_salary FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Determines the highest salary among all employees within the same department.
"For each employee, find the salary of the highest-paid employee in their department.","SELECT employee_id, employee_name, department_id, salary, FIRST_VALUE(salary) OVER (PARTITION BY department_id ORDER BY salary DESC) AS highest_salary_in_dept FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Retrieves the salary of the first row in each department, after ordering by salary in descending order, effectively getting the highest salary."
"For each employee, find the salary of the lowest-paid employee in their department.","SELECT employee_id, employee_name, department_id, salary, LAST_VALUE(salary) OVER (PARTITION BY department_id ORDER BY salary ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS lowest_salary_in_dept FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Retrieves the salary of the last row in each department, after ordering by salary in ascending order, within an unbounded frame, effectively getting the lowest salary."
"For each employee, find the salary of the second highest-paid employee in their department.","SELECT employee_id, employee_name, department_id, salary, NTH_VALUE(salary, 2) OVER (PARTITION BY department_id ORDER BY salary DESC) AS second_highest_salary_in_dept FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Retrieves the salary of the second row in each department, after ordering by salary in descending order."
Calculate the cumulative distribution of employee salaries.,"SELECT employee_id, employee_name, salary, CUME_DIST() OVER (ORDER BY salary ASC) AS salary_cume_dist FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Calculates the cumulative distribution of a salary value within the ordered set of all salaries (the proportion of values less than or equal to the current value).
Calculate the percentile rank of employee salaries.,"SELECT employee_id, employee_name, salary, PERCENT_RANK() OVER (ORDER BY salary ASC) AS salary_percent_rank FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Calculates the relative rank of a salary within the ordered set of all salaries as a percentage, ranging from 0 to 1."
"Calculate the cumulative sum of sales amounts across all sales, ordered by sale date.","SELECT sale_id, sale_date, total_amount, SUM(total_amount) OVER (ORDER BY sale_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total_all_sales FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)",Calculates the cumulative sum of total_amount for all sales up to the current sale date.
"Calculate the cumulative average of scores for each student in a course, ordered by student ID.","SELECT student_id, course_id, score, AVG(score) OVER (PARTITION BY course_id ORDER BY student_id) AS cumulative_avg_score FROM students;","students (student_id INT, student_name VARCHAR, course_id INT, score INT)","Computes the running average of scores for each student within their respective courses, based on student ID order."
"For each product, count the total number of sales records.","SELECT product_id, sale_date, quantity_sold, COUNT(*) OVER (PARTITION BY product_id) AS total_sales_records_for_product FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)",Counts all sales records for each product.
"For each employee, find the salary of the employee hired two positions before them within the same department, ordered by hire date. If no such employee, default to 0.","SELECT employee_id, employee_name, department_id, hire_date, salary, LAG(salary, 2, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS salary_two_hires_ago FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Retrieves the salary of the employee two rows prior within the same department, ordered by hire date. If not found, returns 0."
"For each employee, find the hire date of the employee hired immediately after them within the same department.","SELECT employee_id, employee_name, department_id, hire_date, LEAD(hire_date, 1) OVER (PARTITION BY department_id ORDER BY hire_date) AS next_hire_date_in_dept FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Retrieves the hire date of the employee immediately following the current employee within the same department, ordered by hire date."
"For each employee, calculate their salary as a percentage of the total salary in their department.","SELECT employee_id, employee_name, department_id, salary, (salary * 100.0 / SUM(salary) OVER (PARTITION BY department_id)) AS percent_of_dept_salary FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Divides each employee's salary by the sum of all salaries within their respective department to get a percentage.
Calculate the difference in total amount between the current sale and the previous sale for each product.,"SELECT sale_id, product_id, sale_date, total_amount, total_amount - LAG(total_amount, 1, 0) OVER (PARTITION BY product_id ORDER BY sale_date) AS amount_difference_from_prev_sale FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)","Calculates the difference between the current sale's total amount and the previous sale's total amount for the same product, using 0 if no previous sale."
Get the top 3 highest-paid employees in each department.,"WITH RankedEmployees AS (SELECT employee_id, employee_name, department_id, salary, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk FROM employees) SELECT employee_id, employee_name, department_id, salary FROM RankedEmployees WHERE rnk <= 3;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Ranks employees by salary within each department and then filters to show only the top 3.
Calculate the sum of total sales for the current sale and the previous 2 sales for each product.,"SELECT sale_id, product_id, sale_date, total_amount, SUM(total_amount) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS three_sale_moving_sum FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)","Calculates the sum of total_amount for the current row and the two preceding rows within each product's sales history, ordered by sale date."
Calculate the population variance of salaries within each department.,"SELECT employee_id, employee_name, department_id, salary, VAR_POP(salary) OVER (PARTITION BY department_id) AS dept_salary_var_pop FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Computes the population variance of salaries for all employees in their respective departments.
Calculate the sample variance of salaries within each department.,"SELECT employee_id, employee_name, department_id, salary, VAR_SAMP(salary) OVER (PARTITION BY department_id) AS dept_salary_var_samp FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Computes the sample variance of salaries for all employees in their respective departments.
Calculate the population standard deviation of salaries within each department.,"SELECT employee_id, employee_name, department_id, salary, STDDEV_POP(salary) OVER (PARTITION BY department_id) AS dept_salary_stddev_pop FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Computes the population standard deviation of salaries for all employees in their respective departments.
Calculate the sample standard deviation of salaries within each department.,"SELECT employee_id, employee_name, department_id, salary, STDDEV_SAMP(salary) OVER (PARTITION BY department_id) AS dept_salary_stddev_samp FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Computes the sample standard deviation of salaries for all employees in their respective departments.
"For each sale, calculate the sum of total amounts from the current sale onwards, for the same product, ordered by sale date.","SELECT sale_id, product_id, sale_date, total_amount, SUM(total_amount) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS sum_from_current_onwards FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)","Calculates the sum of total_amount for the current row and all subsequent rows for each product, ordered by sale date."
Divide all sales into 5 equal groups based on their total amount.,"SELECT sale_id, total_amount, NTILE(5) OVER (ORDER BY total_amount DESC) AS sales_quintile FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)",Divides all sales records into 5 approximately equal groups based on their total amount and assigns a group number.
Calculate the average salary of all employees.,"SELECT employee_id, employee_name, salary, AVG(salary) OVER () AS overall_avg_salary FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Computes the average salary across all employees in the table.
"For each order, count the number of previous active orders for the same customer, ordered by order date.","SELECT order_id, customer_id, order_date, status, COUNT(CASE WHEN status = 'Active' THEN 1 END) OVER (PARTITION BY customer_id ORDER BY order_date ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS previous_active_orders FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)",Counts the number of active orders placed by the same customer prior to the current order.
Rank employees within each department by salary (descending) and then by hire date (ascending) for ties.,"SELECT employee_id, employee_name, department_id, salary, hire_date, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC, hire_date ASC) AS dept_salary_hire_rank FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Ranks employees within their department first by salary (highest first), then by hire date (earliest first) for employees with the same salary."
"For each sale, retrieve the earliest sale date for its corresponding product.","SELECT sale_id, product_id, sale_date, FIRST_VALUE(sale_date) OVER (PARTITION BY product_id ORDER BY sale_date) AS first_sale_date_for_product FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)",Retrieves the earliest sale_date for each product by ordering sales by date and taking the first value within each product partition.
"For each order, retrieve the latest order date for its corresponding customer.","SELECT order_id, customer_id, order_date, LAST_VALUE(order_date) OVER (PARTITION BY customer_id ORDER BY order_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_order_date_for_customer FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)","Retrieves the latest order_date for each customer by ordering orders by date and taking the last value within each customer partition, considering all rows."
"For each employee, calculate the difference between their salary and the average salary of their department.","SELECT employee_id, employee_name, department_id, salary, salary - AVG(salary) OVER (PARTITION BY department_id) AS salary_vs_dept_avg FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Subtracts the average salary of the department from each employee's salary.
"For each product, calculate its stock quantity as a percentage of the total stock quantity for its category.","SELECT product_id, product_name, category, stock_quantity, (stock_quantity * 100.0 / SUM(stock_quantity) OVER (PARTITION BY category)) AS percent_of_category_stock FROM products;","products (product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT)",Divides each product's stock quantity by the total stock quantity of its category to get a percentage.
"For each customer's order, calculate the number of days since their previous order.","SELECT order_id, customer_id, order_date, DATEDIFF(day, LAG(order_date) OVER (PARTITION BY customer_id ORDER BY order_date), order_date) AS days_since_prev_order FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)",Calculates the difference in days between the current order's date and the previous order's date for the same customer.
"For each employee, count how many employees within the same department have a salary strictly less than their own.","SELECT employee_id, employee_name, department_id, salary, COUNT(*) OVER (PARTITION BY department_id ORDER BY salary ASC ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS num_lower_salaries FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Counts all employees within the same department who have a salary lower than the current employee's salary.
"For each sale, find the maximum total_amount in the sales occurring within the last 30 days, considering only sales for the same product.","SELECT sale_id, product_id, sale_date, total_amount, MAX(total_amount) OVER (PARTITION BY product_id ORDER BY sale_date RANGE BETWEEN INTERVAL '30 DAY' PRECEDING AND CURRENT ROW) AS max_amount_last_30_days FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)",Calculates the maximum total_amount for each product within a 30-day window ending at the current sale date.
"For each order, find the minimum total_amount among the current order and the next 5 subsequent orders for the same customer.","SELECT order_id, customer_id, order_date, total_amount, MIN(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date ROWS BETWEEN CURRENT ROW AND 5 FOLLOWING) AS min_amount_next_5_orders FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)","Finds the minimum total_amount among the current order and the next 5 orders for the same customer, ordered by date."
Identify employees whose salary is the same as the previous employee's salary when ordered by employee ID.,"SELECT employee_id, employee_name, salary, CASE WHEN salary = LAG(salary) OVER (ORDER BY employee_id) THEN 'Yes' ELSE 'No' END AS is_same_as_prev_salary FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Checks if the current employee's salary is identical to the salary of the employee preceding them when ordered by employee ID.
"For each sale, calculate its total amount as a ratio to the very first sale amount recorded for that product.","SELECT sale_id, product_id, sale_date, total_amount, total_amount / FIRST_VALUE(total_amount) OVER (PARTITION BY product_id ORDER BY sale_date) AS ratio_to_first_sale FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)",Divides the current sale's total amount by the total amount of the first sale for the same product.
"For each employee, calculate the median salary of their department.","SELECT employee_id, employee_name, department_id, salary, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY salary) OVER (PARTITION BY department_id) AS dept_median_salary FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Calculates the 50th percentile (median) of salaries within each department. PERCENTILE_CONT interpolates if the median falls between two values.
"Assign a row number to all products, ordered by product name, to facilitate pagination.","SELECT product_id, product_name, ROW_NUMBER() OVER (ORDER BY product_name ASC) AS row_num FROM products;","products (product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT)","Assigns a sequential number to each product based on their name, useful for fetching specific pages of results."
"Rank product categories based on their average price, with the highest average price ranked first.","WITH CategoryAvgPrice AS (SELECT category, AVG(price) AS avg_price FROM products GROUP BY category) SELECT category, avg_price, RANK() OVER (ORDER BY avg_price DESC) AS category_avg_price_rank FROM CategoryAvgPrice;","products (product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT)","First calculates the average price for each product category, then ranks these categories based on their average price."
"For each order, check if the next order placed by the same customer (ordered by date) has a 'Shipped' status.","SELECT order_id, customer_id, order_date, status, LEAD(status) OVER (PARTITION BY customer_id ORDER BY order_date) AS next_order_status FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)","Retrieves the status of the next order placed by the same customer, ordered by order date."
"For each sale, calculate its total amount as a ratio to the average total amount of the previous 3 sales for the same product.","SELECT sale_id, product_id, sale_date, total_amount, total_amount / AVG(total_amount) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN 3 PRECEDING AND 1 PRECEDING) AS ratio_to_prev_3_avg FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)",Divides the current sale's total amount by the average of the three preceding sales for the same product.
"For each employee, show their rank by salary within the department, their salary compared to the department's average, and their cumulative salary within the department ordered by hire date.","SELECT employee_id, employee_name, department_id, salary, hire_date, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS dept_salary_rank, salary - AVG(salary) OVER (PARTITION BY department_id) AS salary_vs_dept_avg, SUM(salary) OVER (PARTITION BY department_id ORDER BY hire_date) AS cumulative_dept_salary FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","This query combines three window functions: RANK() for salary ranking, AVG() for comparison to department average, and SUM() for cumulative salary, all partitioned by department."
"For each student, find their score relative to the highest score in their course.","SELECT student_id, student_name, course_id, score, score - MAX(score) OVER (PARTITION BY course_id) AS score_vs_max_in_course FROM students;","students (student_id INT, student_name VARCHAR, course_id INT, score INT)",Calculates the difference between the student's score and the highest score achieved in their course.
Determine the first employee hired in each department.,"SELECT employee_id, employee_name, department_id, hire_date, FIRST_VALUE(employee_name) OVER (PARTITION BY department_id ORDER BY hire_date) AS first_hire_in_dept FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Retrieves the name of the employee who was hired first in each department, based on their hire date."
"For each product, identify if its price is above the average price of products in the same category.","SELECT product_id, product_name, category, price, CASE WHEN price > AVG(price) OVER (PARTITION BY category) THEN 'Above Average' ELSE 'Not Above Average' END AS price_status FROM products;","products (product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT)",Compares each product's price to the average price of products within its category.
"Calculate the cumulative quantity sold for each product across all sales, ordered by sale date.","SELECT sale_id, product_id, sale_date, quantity_sold, SUM(quantity_sold) OVER (PARTITION BY product_id ORDER BY sale_date) AS cumulative_quantity_sold FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)",Calculates the running total of quantity_sold for each product up to the current sale date.
Find the student with the lowest score in each course.,"SELECT student_id, student_name, course_id, score, LAST_VALUE(student_name) OVER (PARTITION BY course_id ORDER BY score ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS lowest_scoring_student FROM students;","students (student_id INT, student_name VARCHAR, course_id INT, score INT)",Retrieves the name of the student with the lowest score in each course by ordering scores ascending and taking the last value within an unbounded frame.
"For each employee, determine the rank of their hire date within their department, from earliest to latest.","SELECT employee_id, employee_name, department_id, hire_date, RANK() OVER (PARTITION BY department_id ORDER BY hire_date ASC) AS hire_date_rank_in_dept FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)","Ranks employees within each department based on their hire date, with the earliest hire date receiving rank 1."
"Calculate the average quantity sold per day across all sales, considering a 7-day moving window.","SELECT sale_date, AVG(quantity_sold) OVER (ORDER BY sale_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS seven_day_moving_avg_qty FROM sales;","sales (sale_id INT, product_id INT, sale_date DATE, quantity_sold INT, total_amount DECIMAL)","Computes the average quantity sold for the current day and the preceding 6 days, forming a 7-day moving average."
"For each order, get the total amount of the order placed two positions after it by the same customer, ordered by order date.","SELECT order_id, customer_id, order_date, total_amount, LEAD(total_amount, 2) OVER (PARTITION BY customer_id ORDER BY order_date) AS amount_two_orders_later FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)","Retrieves the total_amount of the order that is two positions after the current order for the same customer, ordered by date."
Calculate the difference between an employee's salary and the salary of the employee with the next highest salary in their department.,"SELECT employee_id, employee_name, department_id, salary, salary - LEAD(salary) OVER (PARTITION BY department_id ORDER BY salary ASC) AS diff_to_next_higher_salary FROM employees;","employees (employee_id INT, employee_name VARCHAR, department_id INT, salary DECIMAL, hire_date DATE)",Calculates the difference between an employee's salary and the salary of the next higher-paid employee in their department.
"For each product, determine the ratio of its price to the minimum price in its category.","SELECT product_id, product_name, category, price, price / MIN(price) OVER (PARTITION BY category) AS ratio_to_min_category_price FROM products;","products (product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT)",Divides each product's price by the minimum price found in its respective category.
"Assign a rank to each student based on their score within their course, handling ties by assigning the same rank and not skipping subsequent ranks.","SELECT student_id, student_name, course_id, score, DENSE_RANK() OVER (PARTITION BY course_id ORDER BY score DESC) AS score_dense_rank FROM students;","students (student_id INT, student_name VARCHAR, course_id INT, score INT)","Ranks students by score within each course. Students with the same score get the same rank, and no ranks are skipped."
Instruction,Query,Table Schema,Explanation
Find the names and salaries of employees who earn more than the average salary of all employees.,"SELECT name, salary FROM Employees WHERE salary > (SELECT AVG(salary) FROM Employees);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);",The inner subquery calculates the average salary of all employees. The outer query then selects employees whose individual salary is greater than this calculated average.
List all products whose price is greater than the maximum price of products in the 'Electronics' category.,"SELECT product_name, price FROM Products WHERE price > (SELECT MAX(price) FROM Products WHERE category = 'Electronics');","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));",The subquery finds the highest price among products in the 'Electronics' category. The outer query then retrieves products that have a price higher than this maximum.
Retrieve the names of customers who have placed an order.,SELECT customer_name FROM Customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM Orders);,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));","The subquery selects unique customer IDs from the Orders table. The outer query then selects the names of customers whose ID is present in this list, indicating they have placed at least one order."
Find the names of products that have never been ordered.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2)); CREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10, 2));","The subquery identifies all product IDs that exist in the Order_Items table (meaning they have been ordered). The outer query then selects product names for products whose ID is not in this list, identifying products that have never been ordered."
List departments that have at least one employee earning more than 60000.,SELECT department_name FROM Departments d WHERE EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id AND e.salary > 60000);,"CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","For each department in the outer query, the correlated subquery checks if there is any employee in that specific department with a salary greater than 60000. If such an employee exists, the department's name is selected."
Find departments that have no employees.,SELECT department_name FROM Departments d WHERE NOT EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id);,"CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","For each department in the outer query, the correlated subquery checks if there are any employees associated with that department. If no employees are found (NOT EXISTS is true), the department's name is selected."
Calculate the average total amount of orders placed by customers from 'New York'.,SELECT AVG(total_amount) FROM (SELECT o.total_amount FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.city = 'New York') AS NewYorkOrders;,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));",The inner query (derived table) first selects the total amounts of orders placed by customers residing in 'New York'. The outer query then calculates the average of these total amounts.
"For each employee, display their name, salary, and the difference from the average company salary.","SELECT name, salary, salary - (SELECT AVG(salary) FROM Employees) AS salary_difference FROM Employees;","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);","The subquery calculates the overall average salary once. For each employee, the outer query then displays their name, salary, and the computed difference between their salary and the company average."
List employees who earn more than any employee in department 3.,"SELECT name, salary FROM Employees WHERE salary > ANY (SELECT salary FROM Employees WHERE department_id = 3);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);",The subquery returns a list of salaries for all employees in department 3. The outer query selects employees whose salary is greater than at least one salary in that list. This is equivalent to salary > (SELECT MIN(salary) FROM Employees WHERE department_id = 3).
Find employees who earn more than all employees in department 1.,"SELECT name, salary FROM Employees WHERE salary > ALL (SELECT salary FROM Employees WHERE department_id = 1);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);",The subquery returns a list of salaries for all employees in department 1. The outer query selects employees whose salary is greater than every salary in that list. This is equivalent to salary > (SELECT MAX(salary) FROM Employees WHERE department_id = 1).
Find the name and salary of the highest-paid employee in each department.,"SELECT name, salary, department_id FROM Employees e WHERE salary = (SELECT MAX(salary) FROM Employees WHERE department_id = e.department_id);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);","For each employee in the outer query, the correlated subquery finds the maximum salary within that employee's specific department. The outer query then checks if the employee's salary matches this departmental maximum."
Find the names of students who are enrolled in courses with more than 3 credits.,SELECT student_name FROM Students WHERE student_id IN (SELECT student_id FROM Enrollments WHERE course_id IN (SELECT course_id FROM Courses WHERE credits > 3));,"CREATE TABLE Students (student_id INT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(50), gpa DECIMAL(3, 2)); CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(100), credits INT); CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, grade VARCHAR(2));","The innermost subquery identifies courses with more than 3 credits. The middle subquery then finds students enrolled in these courses. Finally, the outermost query retrieves the names of these students."
List departments where the average employee salary is above the overall company average salary.,SELECT d.department_name FROM Departments d JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING AVG(e.salary) > (SELECT AVG(salary) FROM Employees);,"CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","The subquery calculates the overall average salary for the company. The outer query groups employees by department, calculates the average salary for each department, and then filters these groups, keeping only those where the departmental average exceeds the overall company average."
Find the top 3 highest-paid employees.,"SELECT name, salary FROM (SELECT name, salary FROM Employees ORDER BY salary DESC LIMIT 3) AS TopEmployees;","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);",The inner subquery sorts all employees by salary in descending order and limits the result to the top 3. The outer query then selects the name and salary from this derived table.
Find product names that have been ordered by customers from 'London'.,SELECT p.product_name FROM Products p WHERE EXISTS (SELECT 1 FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE oi.product_id = p.product_id AND c.city = 'London');,"CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2)); CREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10, 2)); CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50));","For each product, the correlated subquery checks if there's an order item for that product associated with an order placed by a customer from 'London'. If such an order exists, the product name is selected."
Find all employees who have the same name and department as any other employee (for potential duplicate detection or shared roles).,"SELECT e1.name, e1.department_id FROM Employees e1 WHERE (e1.name, e1.department_id) IN (SELECT e2.name, e2.department_id FROM Employees e2 GROUP BY e2.name, e2.department_id HAVING COUNT(*) > 1);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);",The inner subquery identifies combinations of name and department_id that appear more than once in the Employees table. The outer query then selects employees whose name and department_id match any of these identified combinations.
"Display the number of products in the 'Books' category, and the total number of products.","SELECT (SELECT COUNT(*) FROM Products WHERE category = 'Books') AS BooksCount, (SELECT COUNT(*) FROM Products) AS TotalProductsCount;","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));","This query uses two scalar subqueries in the SELECT clause. One counts products in the 'Books' category, and the other counts all products, presenting both counts in a single row result."
Find the names of customers who have placed orders with a total amount greater than the average total order amount.,SELECT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.total_amount > (SELECT AVG(total_amount) FROM Orders);,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));",The inner subquery calculates the average total_amount across all orders. The outer query then joins Customers and Orders and filters for orders whose total_amount exceeds this calculated average.
List the names of customers who have ordered products from the 'Electronics' category.,SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders WHERE order_id IN (SELECT order_id FROM Order_Items WHERE product_id IN (SELECT product_id FROM Products WHERE category = 'Electronics')));,"CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2)); CREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10, 2)); CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50));","This uses a series of nested IN subqueries. It starts by finding 'Electronics' product IDs, then order IDs containing those products, then customer IDs associated with those orders, and finally the names of those customers."
Find the employee with the second highest salary.,"SELECT name, salary FROM Employees e1 WHERE 1 = (SELECT COUNT(DISTINCT salary) FROM Employees e2 WHERE e2.salary > e1.salary);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);","For each employee e1, the correlated subquery counts how many distinct salaries are greater than e1's salary. If this count is 1, it means e1's salary is the second highest (only one salary is greater than it)."
Find the department with the highest total salary.,"SELECT d.department_name FROM Departments d JOIN (SELECT department_id, SUM(salary) AS total_salary FROM Employees GROUP BY department_id) AS DeptSalaries ON d.department_id = DeptSalaries.department_id ORDER BY DeptSalaries.total_salary DESC LIMIT 1;","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));",The inner subquery calculates the total salary for each department. The outer query then joins this derived table with the Departments table to get the department name and orders by total salary to find the department with the highest sum.
Find employees who are not assigned to any department (assuming department_id can be NULL or not exist in Departments table).,SELECT name FROM Employees WHERE department_id NOT IN (SELECT department_id FROM Departments WHERE department_id IS NOT NULL);,"CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","The subquery selects all valid department IDs from the Departments table, explicitly excluding NULLs to prevent issues with NOT IN. The outer query then retrieves employees whose department_id is not in this list, effectively finding employees without a valid department assignment."
List orders placed on the same date as the earliest order ever placed.,"SELECT order_id, order_date FROM Orders WHERE order_date = (SELECT MIN(order_date) FROM Orders);","CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));",The subquery finds the earliest order_date from the Orders table. The outer query then selects all orders that were placed on this specific earliest date.
Find employees whose salary is above their own department's average salary.,"SELECT e.name, e.salary, e.department_id FROM Employees e WHERE e.salary > (SELECT AVG(salary) FROM Employees WHERE department_id = e.department_id);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);","For each employee, the correlated subquery calculates the average salary specifically for their department. The outer query then filters employees whose individual salary exceeds this departmental average."
List categories that have more than 5 products.,"SELECT CategoryCounts.category FROM (SELECT category, COUNT(product_id) AS product_count FROM Products GROUP BY category) AS CategoryCounts WHERE CategoryCounts.product_count > 5;","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));",The inner subquery groups products by category and counts the number of products in each. The outer query then filters this derived table to show only those categories where the product count is greater than 5.
Insert a new product named 'New Gadget' with a price equal to the average price of 'Electronics' products.,"INSERT INTO Products (product_name, category, price) VALUES ('New Gadget', 'Electronics', (SELECT AVG(price) FROM Products WHERE category = 'Electronics'));","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));","The subquery calculates the average price of 'Electronics' products. This calculated value is then used as the price for the new product being inserted. (Note: product_id would likely be auto-increment in a real schema, omitted for simplicity of example.)"
Increase the salary of employees in 'Sales' department by 10% of the average salary of employees in 'Marketing' department.,UPDATE Employees SET salary = salary + (SELECT AVG(salary) * 0.10 FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE d.department_name = 'Marketing') WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Sales');,"CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));",The first subquery calculates 10% of the average salary of employees in the 'Marketing' department. The second subquery finds the department_id for 'Sales'. The outer UPDATE statement then uses these values to adjust the salaries of employees in the 'Sales' department.
Delete all orders placed by customers from 'Paris' before 2023-01-01.,DELETE FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE city = 'Paris') AND order_date < '2023-01-01';,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));","The subquery retrieves the customer_ids of all customers residing in 'Paris'. The DELETE statement then removes orders placed by any of these identified customers, provided the order date is before '2023-01-01'."
"For each department, show the department name and the total number of employees in it.","SELECT d.department_name, (SELECT COUNT(*) FROM Employees e WHERE e.department_id = d.department_id) AS EmployeeCount FROM Departments d;","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","For each department in the outer query, the correlated scalar subquery counts the number of employees belonging to that specific department. This count is then displayed alongside the department name."
Find the product with the lowest price.,"SELECT product_name, price FROM Products WHERE price = (SELECT MIN(price) FROM Products);","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));",The subquery determines the minimum price among all products. The outer query then selects the product name and price for any product(s) that match this minimum price.
Find employees who were hired after the first employee in their department.,"SELECT e1.name, e1.hire_date, e1.department_id FROM Employees e1 WHERE e1.hire_date > (SELECT MIN(e2.hire_date) FROM Employees e2 WHERE e2.department_id = e1.department_id);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);","For each employee e1, the correlated subquery finds the earliest hire_date within e1's department. The outer query then filters for employees whose hire_date is later than this earliest date in their respective department."
"Display employee names and their salary status: 'Above Average', 'Below Average', or 'Average'.","SELECT name, salary, CASE WHEN salary > (SELECT AVG(salary) FROM Employees) THEN 'Above Average' WHEN salary < (SELECT AVG(salary) FROM Employees) THEN 'Below Average' ELSE 'Average' END AS SalaryStatus FROM Employees;","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);","The subquery calculates the overall average salary. This average is then used in a CASE statement to categorize each employee's salary as 'Above Average', 'Below Average', or 'Average'."
Find customers who placed more than one order on the same day.,"SELECT c.customer_name FROM Customers c JOIN (SELECT customer_id, order_date FROM Orders GROUP BY customer_id, order_date HAVING COUNT(order_id) > 1) AS MultipleOrders ON c.customer_id = MultipleOrders.customer_id;","CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));","The inner subquery groups orders by customer and date, identifying combinations where more than one order was placed. The outer query then joins this derived table with the Customers table to retrieve the names of these customers."
"For each product, show its name, price, and its price as a percentage of the maximum product price.","SELECT product_name, price, (price / (SELECT MAX(price) FROM Products)) * 100 AS PricePercentageOfMax FROM Products;","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));",The subquery calculates the maximum price of all products. The outer query then uses this value to calculate each product's price as a percentage of the maximum price.
List products whose price is greater than the average price of products in their respective category.,"SELECT p.product_name, p.price, p.category FROM Products p WHERE p.price > (SELECT AVG(price) FROM Products WHERE category = p.category);","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));","For each product p, the correlated subquery calculates the average price of products within p's specific category. The outer query then selects products whose individual price is greater than this category average."
Find employees who belong to a department that has at least one project.,SELECT e.name FROM Employees e WHERE EXISTS (SELECT 1 FROM Projects p WHERE p.department_id = e.department_id);,"CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE); CREATE TABLE Projects (project_id INT PRIMARY KEY, project_name VARCHAR(100), department_id INT, start_date DATE, end_date DATE, budget DECIMAL(15, 2));","For each employee, the correlated subquery checks if there's any project associated with their department. If a project exists for their department, the employee's name is selected."
Find students who are not enrolled in any course.,SELECT student_name FROM Students s WHERE NOT EXISTS (SELECT 1 FROM Enrollments e WHERE e.student_id = s.student_id);,"CREATE TABLE Students (student_id INT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(50), gpa DECIMAL(3, 2)); CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, grade VARCHAR(2));","For each student, the correlated subquery checks if there is any enrollment record for that student. If no enrollment records are found (NOT EXISTS is true), the student's name is selected."
Find the cumulative sum of order amounts by date.,"SELECT order_date, total_amount, (SELECT SUM(total_amount) FROM Orders o2 WHERE o2.order_date <= o1.order_date) AS CumulativeSum FROM Orders o1 ORDER BY order_date;","CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));","For each order o1, the correlated subquery calculates the sum of total_amount for all orders that occurred on or before o1's order_date, effectively providing a running total."
"For each customer, display their name and the number of days since their last order.","SELECT c.customer_name, (SELECT DATEDIFF(CURRENT_DATE, MAX(o.order_date)) FROM Orders o WHERE o.customer_id = c.customer_id) AS DaysSinceLastOrder FROM Customers c;","CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));","For each customer, the correlated subquery finds the maximum (most recent) order_date for that customer and calculates the difference in days between the current date and that last order date."
List products that were part of orders placed by customers from 'Germany'.,SELECT p.product_name FROM Products p WHERE p.product_id IN (SELECT oi.product_id FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id JOIN Customers c ON o.customer_id = c.customer_id WHERE c.country = 'Germany');,"CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2)); CREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10, 2)); CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50));",The subquery identifies product_ids from order items where the corresponding order was placed by a customer from 'Germany'. The outer query then selects the names of products whose ID is in this list.
"Retrieve product name and price, along with the total number of distinct categories available.","SELECT product_name, price, (SELECT COUNT(DISTINCT category) FROM Products) AS TotalDistinctCategories FROM Products;","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));",The scalar subquery calculates the total count of distinct product categories once. This fixed value is then displayed as an additional column for every row in the outer query's result.
Find the student with the highest GPA in each major.,"SELECT s.student_name, s.major, s.gpa FROM Students s JOIN (SELECT major, MAX(gpa) AS max_gpa FROM Students GROUP BY major) AS MaxGPAs ON s.major = MaxGPAs.major AND s.gpa = MaxGPAs.max_gpa;","CREATE TABLE Students (student_id INT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(50), gpa DECIMAL(3, 2));",The inner subquery finds the maximum GPA for each major. The outer query then joins Students with this derived table to select the students who have that maximum GPA in their respective major.
Find orders that are not the most recent order for their respective customer.,"SELECT o1.order_id, o1.customer_id, o1.order_date FROM Orders o1 WHERE o1.order_date < (SELECT MAX(o2.order_date) FROM Orders o2 WHERE o2.customer_id = o1.customer_id);","CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));","For each order o1, the correlated subquery finds the maximum order_date for the customer associated with o1. The outer query then selects o1 if its order_date is strictly earlier than that customer's latest order date."
Find products whose price is lower than all products in the 'Books' category.,"SELECT product_name, price FROM Products WHERE price < ALL (SELECT price FROM Products WHERE category = 'Books');","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));",The subquery returns all prices for products in the 'Books' category. The outer query selects products whose price is less than every price in that list. This is equivalent to price < (SELECT MIN(price) FROM Products WHERE category = 'Books').
Find products that are either priced above $500 or have been ordered more than 10 times in total.,"SELECT product_name FROM Products WHERE price > 500 UNION SELECT p.product_name FROM Products p JOIN (SELECT product_id, SUM(quantity) AS total_quantity FROM Order_Items GROUP BY product_id HAVING SUM(quantity) > 10) AS PopularProducts ON p.product_id = PopularProducts.product_id;","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2)); CREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10, 2));",This query uses UNION to combine two sets of results. The first part selects products with a price over $500. The second part uses a derived table to find products with total quantity ordered greater than 10 and then selects their names.
Find the average total amount of orders for customers who have placed at least 2 orders.,SELECT AVG(TotalAmount) FROM (SELECT SUM(total_amount) AS TotalAmount FROM Orders GROUP BY customer_id HAVING COUNT(order_id) >= 2) AS CustomerTotalAmounts;,"CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));","The innermost subquery groups orders by customer and sums their total_amount, but only for customers who have at least 2 orders. This result is then treated as a derived table. The outermost query then calculates the average of these TotalAmount values."
Find the name of the employee who earns the highest salary in their respective city (assuming city is a column in Employees).,"SELECT e1.name, e1.salary, e1.city FROM Employees e1 WHERE e1.salary = (SELECT MAX(e2.salary) FROM Employees e2 WHERE e2.city = e1.city);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE, city VARCHAR(50));","For each employee e1, the correlated subquery finds the maximum salary among all employees in e1's city. The outer query then selects employees whose salary matches this maximum for their city."
Find departments where all employees earn more than 50000.,SELECT department_name FROM Departments d WHERE NOT EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id AND e.salary <= 50000);,"CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));",This query uses NOT EXISTS to find departments where there isn't any employee whose salary is less than or equal to 50000. This effectively means all employees in that department earn more than 50000.
"For each order, display its ID, total amount, and the number of orders placed on the same day.","SELECT o1.order_id, o1.total_amount, (SELECT COUNT(*) FROM Orders o2 WHERE o2.order_date = o1.order_date) AS OrdersOnSameDay FROM Orders o1;","CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2));","For each order o1, the correlated scalar subquery counts how many orders were placed on the exact same date as o1. This count is then displayed along with the order details."
Find departments where the number of distinct employee salaries is greater than 2.,"SELECT d.department_name FROM Departments d JOIN (SELECT department_id, COUNT(DISTINCT salary) AS distinct_salaries FROM Employees GROUP BY department_id HAVING COUNT(DISTINCT salary) > 2) AS DeptSalaryCounts ON d.department_id = DeptSalaryCounts.department_id;","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100));","The inner subquery groups employees by department, counts the distinct salary values within each department, and filters for departments with more than 2 distinct salaries. The outer query then joins this derived table with the Departments table to retrieve the department names."
Find employees who have the same hiring year as 'John Doe'.,"SELECT name, hire_date FROM Employees WHERE YEAR(hire_date) = (SELECT YEAR(hire_date) FROM Employees WHERE name = 'John Doe');","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE);",The subquery finds the hiring year of the employee named 'John Doe'. The outer query then selects all employees whose hiring year matches this specific year.
List courses that have at least one student enrolled with a GPA above 3.5.,SELECT c.course_name FROM Courses c WHERE EXISTS (SELECT 1 FROM Enrollments e JOIN Students s ON e.student_id = s.student_id WHERE e.course_id = c.course_id AND s.gpa > 3.5);,"CREATE TABLE Students (student_id INT PRIMARY KEY, student_name VARCHAR(100), major VARCHAR(50), gpa DECIMAL(3, 2)); CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(100), credits INT); CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, grade VARCHAR(2));","For each course, the correlated subquery checks if there is any enrollment for that course by a student with a GPA greater than 3.5. If such an enrollment exists, the course name is selected."
Find customers who have ordered products from at least two different categories.,SELECT c.customer_name FROM Customers c WHERE 1 < (SELECT COUNT(DISTINCT p.category) FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.customer_id = c.customer_id);,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2)); CREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10, 2)); CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));","For each customer, the correlated subquery counts the distinct categories of products they have ordered. The outer query filters for customers where this count is greater than 1, indicating orders from at least two different categories."
List all products and indicate if their price is above the overall average price ('Yes'/'No').,"SELECT product_name, price, CASE WHEN price > (SELECT AVG(price) FROM Products) THEN 'Yes' ELSE 'No' END AS AboveAveragePrice FROM Products;","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));","The subquery calculates the overall average product price. For each product, a CASE statement uses this average to determine if the product's price is above average and assigns 'Yes' or 'No'."
Find departments that have a budget higher than the average budget of all projects.,SELECT d.department_name FROM Departments d JOIN Projects p ON d.department_id = p.department_id GROUP BY d.department_name HAVING AVG(p.budget) > (SELECT AVG(budget) FROM Projects);,"CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name VARCHAR(100), location VARCHAR(100)); CREATE TABLE Projects (project_id INT PRIMARY KEY, project_name VARCHAR(100), department_id INT, start_date DATE, end_date DATE, budget DECIMAL(15, 2));","The subquery calculates the overall average budget of all projects. The outer query groups projects by department, calculates the average budget for projects in each department, and then filters for departments whose average project budget is higher than the overall average."
Retrieve the names of employees who have the minimum salary in their respective job roles (assuming job_role is a column).,"SELECT e1.name, e1.salary, e1.job_role FROM Employees e1 WHERE e1.salary = (SELECT MIN(e2.salary) FROM Employees e2 WHERE e2.job_role = e1.job_role);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, name VARCHAR(100), department_id INT, salary DECIMAL(10, 2), hire_date DATE, job_role VARCHAR(50));","For each employee e1, the correlated subquery finds the minimum salary among all employees with the same job_role as e1. The outer query then selects employees whose salary matches this minimum for their job role."
Find the product category that has the most products.,"SELECT category FROM (SELECT category, COUNT(product_id) AS product_count FROM Products GROUP BY category) AS CategoryCounts ORDER BY product_count DESC LIMIT 1;","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));","The inner subquery groups products by category and counts them. The outer query treats this result as a derived table, sorts it by product count in descending order, and selects the category with the highest count."
List customers who have placed orders for products from every category.,SELECT c.customer_name FROM Customers c WHERE (SELECT COUNT(DISTINCT p.category) FROM Products p) = (SELECT COUNT(DISTINCT p2.category) FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p2 ON oi.product_id = p2.product_id WHERE o.customer_id = c.customer_id);,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), city VARCHAR(50), country VARCHAR(50)); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2)); CREATE TABLE Order_Items (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, unit_price DECIMAL(10, 2)); CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10, 2));",The outer query selects customers where the total count of distinct product categories (first subquery) equals the count of distinct product categories ordered by that specific customer (second correlated subquery). This identifies customers who have ordered from every available category.
Instruction,Query,Table Schema,Explanation
"List all employee names who are either in the 'Sales' department or have a salary greater than 60000, without duplicates.",SELECT name FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Sales') UNION SELECT name FROM Employees WHERE salary > 60000;,"Employees(employee_id, name, department_id, salary, hire_date, city, position); Departments(department_id, department_name, location);","Combines employee names from those in the 'Sales' department with those earning over 60000, ensuring each name appears only once."
Retrieve all customer IDs who have placed an order or are registered after 2022.,SELECT customer_id FROM Orders UNION SELECT customer_id FROM Customers WHERE registration_date > '2022-01-01';,"Customers(customer_id, name, email, city, registration_date); Orders(order_id, customer_id, order_date, total_amount);",Lists unique customer IDs who have made an order or registered in 2022 or later.
Show all product names that are either in the 'Electronics' category or have a price less than 100.,SELECT product_name FROM Products WHERE category = 'Electronics' UNION SELECT product_name FROM Products WHERE price < 100;,"Products(product_id, product_name, category, price, stock_quantity);",Returns unique product names that are either electronics or priced under 100.
"Get a combined list of all cities where employees reside and where departments are located, including duplicates.",SELECT city FROM Employees UNION ALL SELECT location FROM Departments;,"Employees(employee_id, name, department_id, salary, hire_date, city, position); Departments(department_id, department_name, location);","Merges all cities from employee addresses and department locations, retaining any duplicates."
Find the names of students who are either majoring in 'Computer Science' or enrolled in a 'Mathematics' course.,"SELECT first_name, last_name FROM Students WHERE major = 'Computer Science' UNION SELECT S.first_name, S.last_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE C.department = 'Mathematics';","Students(student_id, first_name, last_name, major, enroll_year); Courses(course_id, course_name, department, credits); Enrollments(enrollment_id, student_id, course_id, grade);",Retrieves distinct full names of students who are CS majors or are taking any course from the 'Mathematics' department.
List all project IDs that are either 'Active' or managed by department ID 101.,SELECT project_id FROM Projects WHERE status = 'Active' UNION SELECT project_id FROM Projects WHERE department_id = 101;,"Projects(project_id, project_name, department_id, status);",Combines unique project IDs that are currently active or assigned to department 101.
Display all employee IDs that have a 'Manager' position or were hired before 2020.,SELECT employee_id FROM Employees WHERE position = 'Manager' UNION SELECT employee_id FROM Employees WHERE hire_date < '2020-01-01';,"Employees(employee_id, name, department_id, salary, hire_date, city, position);",Provides unique employee IDs for those who are managers or started before 2020.
"Get a list of all product categories and department names, ensuring no duplicates.",SELECT category FROM Products UNION SELECT department_name FROM Departments;,"Products(product_id, product_name, category, price, stock_quantity); Departments(department_id, department_name, location);",Combines unique product categories and department names into a single list.
Show all suppliers' names located in 'New York' or who have an email ending with '.org'.,SELECT supplier_name FROM Suppliers WHERE city = 'New York' UNION SELECT supplier_name FROM Suppliers WHERE contact_email LIKE '%.org';,"Suppliers(supplier_id, supplier_name, city, contact_email);",Returns distinct names of suppliers based in New York or having an organization email.
Find all unique cities from customer and employee addresses.,SELECT city FROM Customers UNION SELECT city FROM Employees;,"Customers(customer_id, name, email, city, registration_date); Employees(employee_id, name, department_id, salary, hire_date, city, position);",Aggregates all distinct city names where either customers or employees are located.
"List all product IDs that are in stock in Warehouse 1 or Warehouse 2, including duplicates.",SELECT product_id FROM Inventory WHERE warehouse_id = 1 UNION ALL SELECT product_id FROM Inventory WHERE warehouse_id = 2;,"Inventory(product_id, warehouse_id, quantity);","Combines all product IDs from the inventories of Warehouse 1 and Warehouse 2, including products that might be in both."
Retrieve all unique names (first_name and last_name combined) of students who have 'A' grade in any course or are from the '2023' enrollment year.,SELECT S.first_name || ' ' || S.last_name AS full_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id WHERE E.grade = 'A' UNION SELECT first_name || ' ' || last_name AS full_name FROM Students WHERE enroll_year = 2023;,"Students(student_id, first_name, last_name, major, enroll_year); Enrollments(enrollment_id, student_id, course_id, grade);",Gets unique full names of students who achieved an 'A' grade or were enrolled in the year 2023.
Show department IDs that have either 'Active' projects or employees earning over 70000.,SELECT department_id FROM Projects WHERE status = 'Active' UNION SELECT department_id FROM Employees WHERE salary > 70000;,"Projects(project_id, project_name, department_id, status); Employees(employee_id, name, department_id, salary, hire_date, city, position);",Lists distinct department IDs that are associated with active projects or have employees with high salaries.
Find the IDs of products that have less than 50 units in stock or belong to the 'Apparel' category.,SELECT product_id FROM Products WHERE stock_quantity < 50 UNION SELECT product_id FROM Products WHERE category = 'Apparel';,"Products(product_id, product_name, category, price, stock_quantity);",Returns unique product IDs for items with low stock or belonging to the 'Apparel' category.
Display the emails of customers who placed orders in 2023 or have a registration date in 2023.,"SELECT C.email FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y', O.order_date) = '2023' UNION SELECT email FROM Customers WHERE STRFTIME('%Y', registration_date) = '2023';","Customers(customer_id, name, email, city, registration_date); Orders(order_id, customer_id, order_date, total_amount);",Provides unique email addresses of customers who either ordered or registered in 2023.
List all unique names of employees whose position is 'Analyst' or 'Engineer'.,SELECT name FROM Employees WHERE position = 'Analyst' UNION SELECT name FROM Employees WHERE position = 'Engineer';,"Employees(employee_id, name, department_id, salary, hire_date, city, position);",Combines unique names of employees holding either 'Analyst' or 'Engineer' positions.
Get all course IDs offered by the 'Computer Science' department or with more than 3 credits.,SELECT course_id FROM Courses WHERE department = 'Computer Science' UNION SELECT course_id FROM Courses WHERE credits > 3;,"Courses(course_id, course_name, department, credits);",Lists unique course IDs for courses from the CS department or those offering more than 3 credits.
Show project names that are 'Completed' or have a budget over 100000.,SELECT project_name FROM Projects WHERE status = 'Completed' UNION SELECT project_name FROM Projects WHERE budget > 100000;,"Projects(project_id, project_name, department_id, status, budget);",Returns unique names of projects that are completed or have a high budget. (Assuming 'budget' column is available for illustration).
Find all unique product_id that have been ordered by customers from 'London' or 'Paris'.,SELECT OI.product_id FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.city = 'London' UNION SELECT OI.product_id FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.city = 'Paris';,"Customers(customer_id, name, email, city, registration_date); Orders(order_id, customer_id, order_date, total_amount); Order_Items(order_item_id, order_id, product_id, quantity, price_per_unit);",Retrieves unique product IDs from orders placed by customers residing in either London or Paris.
List all departments that have employees hired in 2021 or have 'Research' in their name.,"SELECT D.department_name FROM Departments D JOIN Employees E ON D.department_id = E.department_id WHERE STRFTIME('%Y', E.hire_date) = '2021' UNION SELECT department_name FROM Departments WHERE department_name LIKE '%Research%';","Employees(employee_id, name, department_id, salary, hire_date, city, position); Departments(department_id, department_name, location);",Provides unique names of departments that hired employees in 2021 or whose name contains 'Research'.
Identify unique students who are enrolled in 'History' courses and 'Philosophy' courses.,SELECT S.student_id FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE C.department = 'History' INTERSECT SELECT S.student_id FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE C.department = 'Philosophy';,"Students(student_id, first_name, last_name, major, enroll_year); Courses(course_id, course_name, department, credits); Enrollments(enrollment_id, student_id, course_id, grade);","Finds student IDs that are present in both 'History' and 'Philosophy' course enrollments, meaning they are enrolled in at least one course from each department."
Find employees who are in the 'IT' department and also have a 'Developer' position.,SELECT employee_id FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'IT') INTERSECT SELECT employee_id FROM Employees WHERE position = 'Developer';,"Employees(employee_id, name, department_id, salary, hire_date, city, position); Departments(department_id, department_name, location);",Returns employee IDs of individuals who are both in the 'IT' department and hold a 'Developer' position.
List products that are 'Electronics' and have a price greater than 500.,SELECT product_id FROM Products WHERE category = 'Electronics' INTERSECT SELECT product_id FROM Products WHERE price > 500;,"Products(product_id, product_name, category, price, stock_quantity);",Identifies product IDs that meet both conditions: being an 'Electronics' product and costing more than 500.
Show customer IDs who have placed orders and also registered in 2023.,"SELECT customer_id FROM Orders INTERSECT SELECT customer_id FROM Customers WHERE STRFTIME('%Y', registration_date) = '2023';","Customers(customer_id, name, email, city, registration_date); Orders(order_id, customer_id, order_date, total_amount);",Retrieves customer IDs who have made at least one order and also registered during the year 2023.
Get the names of projects that are 'Active' and managed by department_id 102.,SELECT project_name FROM Projects WHERE status = 'Active' INTERSECT SELECT project_name FROM Projects WHERE department_id = 102;,"Projects(project_id, project_name, department_id, status);",Returns project names that are both currently 'Active' and are associated with department ID 102.
Find employees who are paid more than 80000 and also live in 'San Francisco'.,SELECT employee_id FROM Employees WHERE salary > 80000 INTERSECT SELECT employee_id FROM Employees WHERE city = 'San Francisco';,"Employees(employee_id, name, department_id, salary, hire_date, city, position);",Identifies employee IDs of individuals who earn over 80000 and reside in San Francisco.
List unique product IDs that are in stock in both Warehouse 'Main' and Warehouse 'Annex'.,SELECT product_id FROM Inventory I JOIN Warehouse W ON I.warehouse_id = W.warehouse_id WHERE W.warehouse_name = 'Main' INTERSECT SELECT product_id FROM Inventory I JOIN Warehouse W ON I.warehouse_id = W.warehouse_id WHERE W.warehouse_name = 'Annex';,"Inventory(product_id, warehouse_id, quantity); Warehouse(warehouse_id, warehouse_name, location);",Returns product IDs that are present in the inventory of both the 'Main' and 'Annex' warehouses.
Show student IDs that have a grade 'A' in a course and are majoring in 'Biology'.,SELECT S.student_id FROM Students S JOIN Enrollments E ON S.student_id = E.student_id WHERE E.grade = 'A' INTERSECT SELECT student_id FROM Students WHERE major = 'Biology';,"Students(student_id, first_name, last_name, major, enroll_year); Enrollments(enrollment_id, student_id, course_id, grade);",Finds student IDs who have received an 'A' grade in any course and are also pursuing a 'Biology' major.
Retrieve department IDs that have employees hired after 2020 and also have 'Office' in their location name.,SELECT department_id FROM Employees WHERE hire_date > '2020-12-31' INTERSECT SELECT department_id FROM Departments WHERE location LIKE '%Office%';,"Employees(employee_id, name, department_id, salary, hire_date, city, position); Departments(department_id, department_name, location);",Lists department IDs that have employees hired post-2020 and are located in places with 'Office' in their name.
Identify suppliers who are based in 'Los Angeles' and supply 'Electronics' products.,SELECT S.supplier_id FROM Suppliers S WHERE S.city = 'Los Angeles' INTERSECT SELECT P.supplier_id FROM Products P WHERE P.category = 'Electronics';,"Suppliers(supplier_id, supplier_name, city, contact_email); Products(product_id, product_name, category, price, stock_quantity, supplier_id);",Finds supplier IDs for suppliers who are in Los Angeles and are also associated with 'Electronics' products. (Assuming 'supplier_id' in Products for this query).
List all employees who are 'Managers' but are not in the 'Executive' department.,SELECT employee_id FROM Employees WHERE position = 'Manager' EXCEPT SELECT E.employee_id FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.department_name = 'Executive';,"Employees(employee_id, name, department_id, salary, hire_date, city, position); Departments(department_id, department_name, location);",Returns employee IDs of managers who are not assigned to the 'Executive' department.
Find customer IDs who have placed an order but have not registered in '2024'.,"SELECT customer_id FROM Orders EXCEPT SELECT customer_id FROM Customers WHERE STRFTIME('%Y', registration_date) = '2024';","Customers(customer_id, name, email, city, registration_date); Orders(order_id, customer_id, order_date, total_amount);",Identifies customer IDs that exist in the Orders table but do not have a registration date in 2024.
Show product IDs that are in the 'Books' category but are not currently in stock (quantity is 0).,SELECT product_id FROM Products WHERE category = 'Books' EXCEPT SELECT product_id FROM Products WHERE stock_quantity = 0;,"Products(product_id, product_name, category, price, stock_quantity);",Lists product IDs for books that are out of stock.
Get student IDs who are in 'Computer Science' major but have not enrolled in any 'Algorithms' course.,SELECT student_id FROM Students WHERE major = 'Computer Science' EXCEPT SELECT S.student_id FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE C.course_name = 'Algorithms';,"Students(student_id, first_name, last_name, major, enroll_year); Courses(course_id, course_name, department, credits); Enrollments(enrollment_id, student_id, course_id, grade);",Returns student IDs of CS majors who have not taken the 'Algorithms' course.
List project IDs that are 'In Progress' but are not assigned to department ID 103.,SELECT project_id FROM Projects WHERE status = 'In Progress' EXCEPT SELECT project_id FROM Projects WHERE department_id = 103;,"Projects(project_id, project_name, department_id, status);",Finds project IDs for projects that are ongoing but not managed by department 103.
Retrieve employee names who live in 'New York' but were hired before 2015.,SELECT name FROM Employees WHERE city = 'New York' EXCEPT SELECT name FROM Employees WHERE hire_date < '2015-01-01';,"Employees(employee_id, name, department_id, salary, hire_date, city, position);","Gets the names of New York employees, excluding those hired prior to 2015."
Show department names that have employees with a salary over 90000 but no projects marked as 'High Priority'.,SELECT D.department_name FROM Departments D JOIN Employees E ON D.department_id = E.department_id WHERE E.salary > 90000 EXCEPT SELECT D.department_name FROM Departments D JOIN Projects P ON D.department_id = P.department_id WHERE P.status = 'High Priority';,"Employees(employee_id, name, department_id, salary, hire_date, city, position); Departments(department_id, department_name, location); Projects(project_id, project_name, department_id, status);","Lists department names where there are highly paid employees, but no projects within that department are classified as 'High Priority'."
Find supplier IDs that supply products to 'California' but are not located in 'California' themselves.,SELECT P.supplier_id FROM Products P JOIN Inventory I ON P.product_id = I.product_id JOIN Warehouse W ON I.warehouse_id = W.warehouse_id WHERE W.location = 'California' EXCEPT SELECT supplier_id FROM Suppliers WHERE city = 'California';,"Suppliers(supplier_id, supplier_name, city, contact_email); Products(product_id, product_name, category, price, stock_quantity, supplier_id); Inventory(product_id, warehouse_id, quantity); Warehouse(warehouse_id, warehouse_name, location);","Returns supplier IDs for suppliers whose products are stored in California warehouses, but the suppliers themselves are not based in California. (Assumed product supplier_id in Products, and warehouse location is state)."
List unique product IDs that are in the 'Electronics' category but have not been part of any order placed after 2023.,SELECT product_id FROM Products WHERE category = 'Electronics' EXCEPT SELECT DISTINCT OI.product_id FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id WHERE O.order_date > '2023-12-31';,"Products(product_id, product_name, category, price, stock_quantity); Orders(order_id, customer_id, order_date, total_amount); Order_Items(order_item_id, order_id, product_id, quantity, price_per_unit);",Identifies product IDs of electronics that have not been ordered since the start of 2024.
Get the names of courses that are in the 'Science' department but have less than 4 credits.,SELECT course_name FROM Courses WHERE department = 'Science' EXCEPT SELECT course_name FROM Courses WHERE credits >= 4;,"Courses(course_id, course_name, department, credits);",Retrieves course names from the 'Science' department that offer fewer than 4 credits.
Find employees who joined after 2020 or have a salary less than 50000.,SELECT employee_id FROM Employees WHERE hire_date > '2020-12-31' UNION SELECT employee_id FROM Employees WHERE salary < 50000;,"Employees(employee_id, name, department_id, salary, hire_date, city, position);",Combines unique employee IDs of those hired after 2020 or earning under 50000.
Retrieve all customer names who live in 'Paris' or have registered in '2023'.,"SELECT name FROM Customers WHERE city = 'Paris' UNION SELECT name FROM Customers WHERE STRFTIME('%Y', registration_date) = '2023';","Customers(customer_id, name, email, city, registration_date);",Lists unique names of customers residing in Paris or registered in the year 2023.
Show all product_ids that are 'Gadgets' or have a price between 200 and 300.,SELECT product_id FROM Products WHERE category = 'Gadgets' UNION SELECT product_id FROM Products WHERE price BETWEEN 200 AND 300;,"Products(product_id, product_name, category, price, stock_quantity);",Returns unique product IDs that are either gadgets or fall within the 200-300 price range.
Get the full names of students who are majoring in 'Arts' or have received a 'B' grade in any course.,SELECT first_name || ' ' || last_name AS full_name FROM Students WHERE major = 'Arts' UNION SELECT S.first_name || ' ' || S.last_name AS full_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id WHERE E.grade = 'B';,"Students(student_id, first_name, last_name, major, enroll_year); Enrollments(enrollment_id, student_id, course_id, grade);",Lists unique full names of students who are 'Arts' majors or have obtained a 'B' grade.
Find all unique cities where employees work or where projects are being carried out.,SELECT city FROM Employees UNION SELECT D.location FROM Projects P JOIN Departments D ON P.department_id = D.department_id;,"Employees(employee_id, name, department_id, salary, hire_date, city, position); Projects(project_id, project_name, department_id, status); Departments(department_id, department_name, location);",Combines all distinct cities from employee residences and project locations.
Identify unique names of products that are in the 'Home & Garden' category and have more than 100 units in stock.,SELECT product_name FROM Products WHERE category = 'Home & Garden' INTERSECT SELECT product_name FROM Products WHERE stock_quantity > 100;,"Products(product_id, product_name, category, price, stock_quantity);",Returns product names that are both in the 'Home & Garden' category and have abundant stock.
List customer IDs who have placed an order with a total amount over 500 and are from 'New York'.,SELECT customer_id FROM Orders WHERE total_amount > 500 INTERSECT SELECT customer_id FROM Customers WHERE city = 'New York';,"Customers(customer_id, name, email, city, registration_date); Orders(order_id, customer_id, order_date, total_amount);",Finds customer IDs for those who made a large order and are located in New York.
Show all unique course IDs that are offered by the 'Engineering' department and have 'Advanced' in their course name.,SELECT course_id FROM Courses WHERE department = 'Engineering' INTERSECT SELECT course_id FROM Courses WHERE course_name LIKE '%Advanced%';,"Courses(course_id, course_name, department, credits);",Retrieves course IDs for engineering courses that contain 'Advanced' in their title.
Find employee IDs who were hired in 2022 and are located in 'London'.,"SELECT employee_id FROM Employees WHERE STRFTIME('%Y', hire_date) = '2022' INTERSECT SELECT employee_id FROM Employees WHERE city = 'London';","Employees(employee_id, name, department_id, salary, hire_date, city, position);",Returns employee IDs who joined in 2022 and are based in London.
List all departments that have at least one 'Active' project and at least one employee with a 'Senior' position.,SELECT department_id FROM Projects WHERE status = 'Active' INTERSECT SELECT department_id FROM Employees WHERE position LIKE 'Senior%';,"Projects(project_id, project_name, department_id, status); Employees(employee_id, name, department_id, salary, hire_date, city, position);",Identifies department IDs that are involved in active projects and also employ senior staff.
Get the names of suppliers who are in 'California' and supply products priced over 1000.,SELECT S.supplier_name FROM Suppliers S WHERE S.city = 'California' INTERSECT SELECT S.supplier_name FROM Suppliers S JOIN Products P ON S.supplier_id = P.supplier_id WHERE P.price > 1000;,"Suppliers(supplier_id, supplier_name, city, contact_email); Products(product_id, product_name, category, price, stock_quantity, supplier_id);",Finds unique names of suppliers based in California who also supply products costing over 1000. (Assumed supplier_id in Products).
Show product IDs that are in 'Apparel' category but have more than 200 units in stock.,SELECT product_id FROM Products WHERE category = 'Apparel' INTERSECT SELECT product_id FROM Products WHERE stock_quantity > 200;,"Products(product_id, product_name, category, price, stock_quantity);",Lists product IDs of apparel items that currently have high stock levels.
Find customer IDs who registered in 2023 but have not placed any orders.,"SELECT customer_id FROM Customers WHERE STRFTIME('%Y', registration_date) = '2023' EXCEPT SELECT customer_id FROM Orders;","Customers(customer_id, name, email, city, registration_date); Orders(order_id, customer_id, order_date, total_amount);",Returns customer IDs for those who registered in 2023 but are not found in the Orders table.
List all employees who are in the 'Marketing' department but are not assigned to any 'Digital Campaign' project.,SELECT E.employee_id FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.department_name = 'Marketing' EXCEPT SELECT EP.employee_id FROM EmployeeProjects EP JOIN Projects P ON EP.project_id = P.project_id WHERE P.project_name = 'Digital Campaign';,"Employees(employee_id, name, department_id, salary, hire_date, city, position); Departments(department_id, department_name, location); Projects(project_id, project_name, department_id, status); EmployeeProjects(employee_id, project_id);",Identifies employee IDs of marketing staff who are not part of the 'Digital Campaign' project. (Assumed EmployeeProjects join table for this).
Retrieve course IDs that are in the 'Art' department but have no students enrolled with a 'Pass' grade.,SELECT course_id FROM Courses WHERE department = 'Art' EXCEPT SELECT E.course_id FROM Enrollments E WHERE E.grade = 'Pass';,"Courses(course_id, course_name, department, credits); Enrollments(enrollment_id, student_id, course_id, grade);",Lists course IDs from the 'Art' department where no student has received a 'Pass' grade.
Show product names that have a stock quantity less than 100 but are not in the 'Electronics' category.,SELECT product_name FROM Products WHERE stock_quantity < 100 EXCEPT SELECT product_name FROM Products WHERE category = 'Electronics';,"Products(product_id, product_name, category, price, stock_quantity);","Returns product names that are low in stock, excluding those from the 'Electronics' category."
Find student IDs who are in their 'Freshman' year but have a 'D' or 'F' grade in any course.,"SELECT student_id FROM Students WHERE enroll_year = (SELECT MIN(enroll_year) FROM Students) EXCEPT SELECT S.student_id FROM Students S JOIN Enrollments E ON S.student_id = E.student_id WHERE E.grade IN ('D', 'F');","Students(student_id, first_name, last_name, major, enroll_year); Enrollments(enrollment_id, student_id, course_id, grade);",Identifies student IDs of freshmen who have not received a 'D' or 'F' grade in any course. (Assumes lowest enroll_year means freshman).
List project IDs that are 'Completed' but have a budget less than 50000.,SELECT project_id FROM Projects WHERE status = 'Completed' EXCEPT SELECT project_id FROM Projects WHERE budget >= 50000;,"Projects(project_id, project_name, department_id, status, budget);",Returns project IDs of completed projects that had a budget under 50000. (Assumed 'budget' column).
Get employee IDs who are 'Directors' but do not reside in 'California'.,SELECT employee_id FROM Employees WHERE position = 'Director' EXCEPT SELECT employee_id FROM Employees WHERE city = 'California';,"Employees(employee_id, name, department_id, salary, hire_date, city, position);",Lists employee IDs of directors who do not live in California. (Assumed city can be 'California' for state).
Show department names that have employees hired before 2018 but no active projects.,SELECT D.department_name FROM Departments D JOIN Employees E ON D.department_id = E.department_id WHERE E.hire_date < '2018-01-01' EXCEPT SELECT D.department_name FROM Departments D JOIN Projects P ON D.department_id = P.department_id WHERE P.status = 'Active';,"Employees(employee_id, name, department_id, salary, hire_date, city, position); Departments(department_id, department_name, location); Projects(project_id, project_name, department_id, status);",Returns department names that have employees hired pre-2018 but currently have no active projects.
Find supplier IDs who are in 'Texas' but do not supply products in the 'Automotive' category.,SELECT supplier_id FROM Suppliers WHERE city = 'Texas' EXCEPT SELECT P.supplier_id FROM Products P WHERE P.category = 'Automotive';,"Suppliers(supplier_id, supplier_name, city, contact_email); Products(product_id, product_name, category, price, stock_quantity, supplier_id);","Identifies supplier IDs based in Texas who do not provide 'Automotive' category products. (Assumed supplier_id in Products, city 'Texas' for state)."
List unique product IDs that are in Warehouse 'Central' but not in Warehouse 'East'.,SELECT product_id FROM Inventory I JOIN Warehouse W ON I.warehouse_id = W.warehouse_id WHERE W.warehouse_name = 'Central' EXCEPT SELECT product_id FROM Inventory I JOIN Warehouse W ON I.warehouse_id = W.warehouse_id WHERE W.warehouse_name = 'East';,"Inventory(product_id, warehouse_id, quantity); Warehouse(warehouse_id, warehouse_name, location);",Returns product IDs that are stocked in the 'Central' warehouse but not in the 'East' warehouse.
Instruction,Query,Table Schema,Explanation
Get the current date.,SELECT CURRENT_DATE;,N/A,This query uses the CURRENT_DATE function to retrieve the system's current date.
Retrieve the current date and time.,SELECT NOW();,N/A,This query uses the NOW() function (or CURRENT_TIMESTAMP in some SQL dialects) to retrieve the system's current date and time.
List the order IDs and the year they were placed from the 'orders' table.,"SELECT order_id, YEAR(order_date) AS order_year FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)",This query selects the order_id and extracts the year from the order_date column using the YEAR() function.
Find all employees hired in January.,"SELECT employee_id, first_name, last_name FROM employees WHERE MONTH(hire_date) = 1;","employees (employee_id INT, first_name VARCHAR(255), last_name VARCHAR(255), hire_date DATE, birth_date DATE, salary DECIMAL(10, 2))",This query filters employees where the month of their hire_date is 1 (January) using the MONTH() function.
Show the event names and the day of the month they occur.,"SELECT event_name, DAY(event_date) AS event_day FROM events;","events (event_id INT, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, duration_minutes INT)",This query selects the event_name and extracts the day of the month from the event_date using the DAY() function.
"For each order, calculate the date 7 days after the order date.","SELECT order_id, order_date, DATE_ADD(order_date, INTERVAL 7 DAY) AS future_date FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)",This query adds 7 days to the order_date using DATE_ADD() with an INTERVAL of 7 DAY.
Find all products whose manufacture date was at least 3 months ago from today.,"SELECT product_name FROM products WHERE manufacture_date <= DATE_SUB(CURRENT_DATE, INTERVAL 3 MONTH);","products (product_id INT, product_name VARCHAR(255), manufacture_date DATE, expiry_date DATE)","This query selects product names where the manufacture_date is less than or equal to the current date minus 3 months, using DATE_SUB()."
Display the event name and event date formatted as 'DD-MM-YYYY'.,"SELECT event_name, DATE_FORMAT(event_date, '%d-%m-%Y') AS formatted_date FROM events;","events (event_id INT, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, duration_minutes INT)",This query formats the event_date into 'DD-MM-YYYY' string using DATE_FORMAT().
Calculate the age of each employee in years based on their birth date.,"SELECT first_name, last_name, TIMESTAMPDIFF(YEAR, birth_date, CURRENT_DATE) AS age_in_years FROM employees;","employees (employee_id INT, first_name VARCHAR(255), last_name VARCHAR(255), hire_date DATE, birth_date DATE, salary DECIMAL(10, 2))",This query calculates the difference in years between birth_date and CURRENT_DATE using TIMESTAMPDIFF().
List all events that fall on a Sunday.,"SELECT event_name, event_date FROM events WHERE DAYOFWEEK(event_date) = 1;","events (event_id INT, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, duration_minutes INT)","This query filters events where the DAYOFWEEK() (1 for Sunday, 7 for Saturday in MySQL) of event_date is 1."
Get the number of minutes elapsed from a timestamp column 'log_timestamp'.,"SELECT log_id, MINUTE(log_timestamp) AS log_minute FROM log_data;","log_data (log_id INT, log_timestamp TIMESTAMP, message TEXT, user_id INT)",This query extracts the minute component from the log_timestamp column using the MINUTE() function.
Find the last day of the month for all 'order_date' values.,"SELECT order_id, order_date, LAST_DAY(order_date) AS month_end_date FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)",This query uses the LAST_DAY() function to find the last day of the month for each order_date.
Calculate the difference in days between 'delivery_date' and 'order_date' for all orders.,"SELECT order_id, DATEDIFF(delivery_date, order_date) AS days_to_deliver FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)",This query calculates the difference in days between two dates using the DATEDIFF() function.
Group event counts by month and year.,"SELECT YEAR(event_date) AS event_year, MONTH(event_date) AS event_month, COUNT(event_id) AS total_events FROM events GROUP BY event_year, event_month ORDER BY event_year, event_month;","events (event_id INT, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, duration_minutes INT)","This query groups events by their year and month, then counts the number of events in each group using YEAR() and MONTH() functions."
Get the current time.,SELECT CURRENT_TIME;,N/A,This query uses the CURRENT_TIME function to retrieve the system's current time.
Find all log entries that occurred during the hour of 10 AM.,"SELECT log_id, log_timestamp, message FROM log_data WHERE HOUR(log_timestamp) = 10;","log_data (log_id INT, log_timestamp TIMESTAMP, message TEXT, user_id INT)",This query filters log entries where the hour component of log_timestamp is 10 using the HOUR() function.
Convert a date string '2023-10-26' into a date type.,"SELECT STR_TO_DATE('2023-10-26', '%Y-%m-%d') AS converted_date;",N/A,This query converts a string representation of a date into a DATE data type using STR_TO_DATE() with a specified format.
"List employee names and their hire date formatted as 'MonthName DD, YYYY'.","SELECT first_name, last_name, DATE_FORMAT(hire_date, '%M %d, %Y') AS formatted_hire_date FROM employees;","employees (employee_id INT, first_name VARCHAR(255), last_name VARCHAR(255), hire_date DATE, birth_date DATE, salary DECIMAL(10, 2))","This query formats the hire_date using DATE_FORMAT() to display the full month name, day, and year."
Find the average duration of appointments in minutes.,SELECT AVG(duration_minutes) AS average_appointment_duration FROM appointments;,"appointments (appointment_id INT, patient_name VARCHAR(255), appointment_datetime DATETIME, duration_minutes INT, doctor_id INT)",This query calculates the average value of the duration_minutes column.
"Retrieve the day of the week (e.g., 'Monday', 'Tuesday') for each event date.","SELECT event_name, DAYNAME(event_date) AS day_of_week FROM events;","events (event_id INT, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, duration_minutes INT)",This query uses the DAYNAME() function to get the full name of the weekday for each event_date.
Select all orders placed in the first quarter of 2023.,"SELECT order_id, order_date FROM orders WHERE YEAR(order_date) = 2023 AND QUARTER(order_date) = 1;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)",This query filters orders from the year 2023 and the first quarter using YEAR() and QUARTER() functions.
Get the timestamp representing '2023-01-01 00:00:00'.,SELECT '2023-01-01 00:00:00'::TIMESTAMP AS specific_timestamp;,N/A,This query casts a string literal into a TIMESTAMP data type.
Add 5 hours and 30 minutes to a given time '10:00:00'.,"SELECT ADDTIME('10:00:00', '05:30:00') AS new_time;",N/A,This query adds a specified time interval (5 hours and 30 minutes) to a base time using ADDTIME().
Find the earliest hire date among all employees.,SELECT MIN(hire_date) AS earliest_hire_date FROM employees;,"employees (employee_id INT, first_name VARCHAR(255), last_name VARCHAR(255), hire_date DATE, birth_date DATE, salary DECIMAL(10, 2))",This query uses the MIN() aggregate function to find the earliest date in the hire_date column.
Find the latest order date.,SELECT MAX(order_date) AS latest_order_date FROM orders;,"orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)",This query uses the MAX() aggregate function to find the latest date in the order_date column.
List log entries that occurred yesterday.,"SELECT log_id, log_timestamp FROM log_data WHERE DATE(log_timestamp) = CURRENT_DATE - INTERVAL 1 DAY;","log_data (log_id INT, log_timestamp TIMESTAMP, message TEXT, user_id INT)",This query filters log entries by comparing the date part of log_timestamp with yesterday's date (CURRENT_DATE minus 1 day).
Calculate the time difference between event start and end times in hours.,"SELECT event_id, TIMEDIFF(end_time, start_time) AS duration_time FROM events;","events (event_id INT, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, duration_minutes INT)",This query calculates the difference between two time values (end_time and start_time) using TIMEDIFF().
Display employee birth dates in 'YYYY/MM/DD' format.,"SELECT employee_id, DATE_FORMAT(birth_date, '%Y/%m/%d') AS formatted_birth_date FROM employees;","employees (employee_id INT, first_name VARCHAR(255), last_name VARCHAR(255), hire_date DATE, birth_date DATE, salary DECIMAL(10, 2))",This query formats the birth_date into 'YYYY/MM/DD' string using DATE_FORMAT().
Find events that are scheduled for the next week (7 days from today).,"SELECT event_name, event_date FROM events WHERE event_date BETWEEN CURRENT_DATE AND DATE_ADD(CURRENT_DATE, INTERVAL 7 DAY);","events (event_id INT, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, duration_minutes INT)",This query selects events whose date falls within the range from today to 7 days from today using BETWEEN and DATE_ADD().
Get the week number of the year for each order date.,"SELECT order_id, WEEK(order_date) AS week_number FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)",This query extracts the week number of the year from order_date using the WEEK() function.
Calculate the difference in months between two dates for product expiry.,"SELECT product_id, TIMESTAMPDIFF(MONTH, manufacture_date, expiry_date) AS months_to_expire FROM products;","products (product_id INT, product_name VARCHAR(255), manufacture_date DATE, expiry_date DATE)",This query calculates the difference in months between manufacture_date and expiry_date using TIMESTAMPDIFF().
Show tasks that are overdue based on their due date.,"SELECT task_name, due_date FROM tasks WHERE due_date < CURRENT_DATE AND completed_date IS NULL;","tasks (task_id INT, task_name VARCHAR(255), due_date DATE, completed_date DATE, priority VARCHAR(50))",This query filters tasks whose due_date is before the current date and have not been completed yet.
Extract the hour from appointment_datetime.,"SELECT appointment_id, HOUR(appointment_datetime) AS appointment_hour FROM appointments;","appointments (appointment_id INT, patient_name VARCHAR(255), appointment_datetime DATETIME, duration_minutes INT, doctor_id INT)",This query extracts the hour component from the appointment_datetime column using the HOUR() function.
Count the number of log entries for each hour of the day.,"SELECT HOUR(log_timestamp) AS log_hour, COUNT(log_id) AS entry_count FROM log_data GROUP BY log_hour ORDER BY log_hour;","log_data (log_id INT, log_timestamp TIMESTAMP, message TEXT, user_id INT)",This query groups log entries by the hour of their timestamp and counts them using HOUR() and GROUP BY.
Retrieve the order ID and the day of the year the order was placed.,"SELECT order_id, DAYOFYEAR(order_date) AS day_of_year FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)",This query extracts the day of the year from order_date using the DAYOFYEAR() function.
List employees hired in the last 6 months.,"SELECT employee_id, first_name, hire_date FROM employees WHERE hire_date >= DATE_SUB(CURRENT_DATE, INTERVAL 6 MONTH);","employees (employee_id INT, first_name VARCHAR(255), last_name VARCHAR(255), hire_date DATE, birth_date DATE, salary DECIMAL(10, 2))",This query filters employees whose hire_date is within the last 6 months from the current date using DATE_SUB().
Find all events occurring on the 15th of any month.,"SELECT event_name, event_date FROM events WHERE DAY(event_date) = 15;","events (event_id INT, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, duration_minutes INT)",This query filters events where the day of the month for event_date is 15 using the DAY() function.
"Get the timestamp from a Unix epoch time (e.g., 1678886400).",SELECT FROM_UNIXTIME(1678886400) AS converted_timestamp;,N/A,This query converts a Unix epoch timestamp (seconds since 1970-01-01 00:00:00 UTC) to a readable datetime format using FROM_UNIXTIME().
Convert a datetime to Unix epoch time.,SELECT UNIX_TIMESTAMP('2023-03-15 12:00:00') AS epoch_time;,N/A,This query converts a datetime string to a Unix epoch timestamp (seconds since 1970-01-01 00:00:00 UTC) using UNIX_TIMESTAMP().
Retrieve sensor readings that occurred on a specific date '2023-01-20'.,"SELECT sensor_id, reading_time, temperature FROM sensors WHERE DATE(reading_time) = '2023-01-20';","sensors (sensor_id INT, reading_time DATETIME, temperature DECIMAL(5, 2), humidity DECIMAL(5, 2))",This query filters sensor readings by extracting the date part of reading_time and comparing it to a specific date.
Find the next Monday from a given date '2023-03-15'.,"SELECT NEXT_DAY('2023-03-15', 'MONDAY') AS next_monday;",N/A,"This query finds the date of the next occurrence of a specified weekday from a given date using NEXT_DAY(). (Note: NEXT_DAY is common in Oracle, similar logic can be achieved with date arithmetic in other DBs)."
List employees who celebrate their birthday this month.,"SELECT employee_id, first_name, last_name, birth_date FROM employees WHERE MONTH(birth_date) = MONTH(CURRENT_DATE);","employees (employee_id INT, first_name VARCHAR(255), last_name VARCHAR(255), hire_date DATE, birth_date DATE, salary DECIMAL(10, 2))",This query filters employees by comparing the month of their birth_date to the current month using MONTH() and CURRENT_DATE.
"Get the full date and time for event_id 101, rounded down to the nearest hour.","SELECT DATE_TRUNC('hour', appointment_datetime) AS rounded_datetime FROM appointments WHERE appointment_id = 101;","appointments (appointment_id INT, patient_name VARCHAR(255), appointment_datetime DATETIME, duration_minutes INT, doctor_id INT)",This query uses DATE_TRUNC() to truncate (round down) a datetime value to the nearest hour.
Count orders placed on weekends (Saturday or Sunday).,SELECT COUNT(order_id) FROM orders WHERE DAYOFWEEK(order_date) = 1 OR DAYOFWEEK(order_date) = 7;,"orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)","This query counts orders where the day of the week (DAYOFWEEK: 1=Sunday, 7=Saturday) is a weekend day."
Calculate the current time plus 30 minutes.,"SELECT ADDTIME(CURRENT_TIME, '00:30:00') AS time_after_30_mins;",N/A,This query adds 30 minutes to the current time using ADDTIME().
"Display event dates in a verbose format like 'Wednesday, October 26, 2023'.","SELECT event_name, DATE_FORMAT(event_date, '%W, %M %d, %Y') AS verbose_date FROM events;","events (event_id INT, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, duration_minutes INT)",This query formats the event_date into a verbose string including full weekday and month names using DATE_FORMAT().
Find the product that expires soonest.,"SELECT product_name, expiry_date FROM products ORDER BY expiry_date ASC LIMIT 1;","products (product_id INT, product_name VARCHAR(255), manufacture_date DATE, expiry_date DATE)",This query orders products by expiry_date in ascending order and limits to 1 to find the soonest expiring product.
Determine the fiscal quarter for each order date (assuming Q1 starts in January).,"SELECT order_id, order_date, QUARTER(order_date) AS fiscal_quarter FROM orders;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)",This query uses the QUARTER() function to determine which quarter of the year a given date falls into.
Select logs from the previous calendar year.,"SELECT log_id, log_timestamp FROM log_data WHERE YEAR(log_timestamp) = YEAR(CURRENT_DATE) - 1;","log_data (log_id INT, log_timestamp TIMESTAMP, message TEXT, user_id INT)",This query filters log entries by checking if their year matches the previous calendar year using YEAR() and CURRENT_DATE.
"Get the number of days in the month for a specific date (e.g., '2023-02-15').",SELECT DAY(LAST_DAY('2023-02-15')) AS days_in_month;,N/A,"This query first finds the last day of the month using LAST_DAY() and then extracts the day number, which represents the total days in that month."
Find all appointments scheduled for a specific doctor (doctor_id = 5) on a particular date '2023-11-01'.,"SELECT appointment_id, patient_name, appointment_datetime FROM appointments WHERE doctor_id = 5 AND DATE(appointment_datetime) = '2023-11-01';","appointments (appointment_id INT, patient_name VARCHAR(255), appointment_datetime DATETIME, duration_minutes INT, doctor_id INT)",This query filters appointments by doctor_id and by matching the date part of appointment_datetime to a specific date.
Show the number of days between an employee's hire date and their birthday if their birthday has passed this year.,"SELECT employee_id, DATEDIFF(CURRENT_DATE, DATE_FORMAT(birth_date, CONCAT(YEAR(CURRENT_DATE), '-%m-%d'))) AS days_since_birthday FROM employees WHERE MONTH(birth_date) < MONTH(CURRENT_DATE) OR (MONTH(birth_date) = MONTH(CURRENT_DATE) AND DAY(birth_date) <= DAY(CURRENT_DATE));","employees (employee_id INT, first_name VARCHAR(255), last_name VARCHAR(255), hire_date DATE, birth_date DATE, salary DECIMAL(10, 2))","This query calculates the number of days from the employee's birthday in the current year until today, for those whose birthday has already occurred this year. It constructs the birthday for the current year using DATE_FORMAT and CONCAT."
List all events that start and end on the same day.,"SELECT event_id, event_name FROM events WHERE DATE(start_time) = DATE(end_time);","events (event_id INT, event_name VARCHAR(255), event_date DATE, start_time TIME, end_time TIME, duration_minutes INT)",This query compares the date part of the start_time and end_time to find events that begin and end on the same calendar day.
Calculate the total amount of orders placed in each month of 2023.,"SELECT MONTH(order_date) AS order_month, SUM(total_amount) AS monthly_total FROM orders WHERE YEAR(order_date) = 2023 GROUP BY order_month ORDER BY order_month;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)",This query groups orders by month for the year 2023 and calculates the sum of total_amount for each month using MONTH() and SUM().
"Find employees whose birth date falls on a specific day of the week, e.g., 'Friday'.","SELECT employee_id, first_name, last_name, birth_date FROM employees WHERE DAYNAME(birth_date) = 'Friday';","employees (employee_id INT, first_name VARCHAR(255), last_name VARCHAR(255), hire_date DATE, birth_date DATE, salary DECIMAL(10, 2))",This query filters employees by checking if their birth_date falls on a Friday using the DAYNAME() function.
List all log entries from the first day of the current month.,"SELECT log_id, log_timestamp FROM log_data WHERE DATE(log_timestamp) = DATE_TRUNC('month', CURRENT_TIMESTAMP);","log_data (log_id INT, log_timestamp TIMESTAMP, message TEXT, user_id INT)",This query filters log entries where the date of the log_timestamp matches the first day of the current month using DATE_TRUNC().
"Get the date by adding 1 year, 2 months, and 10 days to '2022-01-01'.","SELECT DATE_ADD(DATE_ADD(DATE_ADD('2022-01-01', INTERVAL 1 YEAR), INTERVAL 2 MONTH), INTERVAL 10 DAY) AS calculated_date;",N/A,"This query demonstrates adding multiple date parts (years, months, days) to a base date by chaining DATE_ADD() functions."
Count how many products have already expired.,SELECT COUNT(product_id) FROM products WHERE expiry_date < CURRENT_DATE;,"products (product_id INT, product_name VARCHAR(255), manufacture_date DATE, expiry_date DATE)",This query counts products where their expiry_date is before the current date.
Find orders that were delivered on the same day they were ordered.,"SELECT order_id, order_date, delivery_date FROM orders WHERE DATEDIFF(delivery_date, order_date) = 0;","orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL(10, 2), delivery_date DATE)","This query selects orders where the difference in days between delivery_date and order_date is zero, indicating same-day delivery."
Retrieve employees whose hire date falls in the current year.,"SELECT employee_id, first_name, hire_date FROM employees WHERE YEAR(hire_date) = YEAR(CURRENT_DATE);","employees (employee_id INT, first_name VARCHAR(255), last_name VARCHAR(255), hire_date DATE, birth_date DATE, salary DECIMAL(10, 2))",This query filters employees by checking if the year of their hire_date is the same as the current year.
List sensor readings that occurred between 9 AM and 5 PM on any day.,"SELECT sensor_id, reading_time, temperature FROM sensors WHERE TIME(reading_time) BETWEEN '09:00:00' AND '17:00:00';","sensors (sensor_id INT, reading_time DATETIME, temperature DECIMAL(5, 2), humidity DECIMAL(5, 2))",This query filters sensor readings by extracting the time part of reading_time and checking if it falls within the specified time range.
Instruction,Query,Table Schema,Explanation
Retrieve all columns from the Employees table.,SELECT * FROM Employees;,"Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone_number VARCHAR, hire_date DATE, job_id INT, salary DECIMAL, department_id INT)","This query selects all columns ('*') from the 'Employees' table, effectively retrieving every piece of information about each employee."
Get the product name and price for all products.,"SELECT product_name, price FROM Products;","Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)",This query retrieves the 'product_name' and 'price' columns for all entries in the 'Products' table.
Find the first name and last name of all customers.,"SELECT first_name, last_name FROM Customers;","Customers(customer_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone VARCHAR, address VARCHAR, city VARCHAR, state VARCHAR, zip_code VARCHAR)",This query selects the 'first_name' and 'last_name' columns for every customer in the 'Customers' table.
List all order IDs and their respective order dates.,"SELECT order_id, order_date FROM Orders;","Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)",This query fetches the 'order_id' and 'order_date' for all orders recorded in the 'Orders' table.
Show all details for orders placed by customer ID 101.,SELECT * FROM Orders WHERE customer_id = 101;,"Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)","This query selects all columns from the 'Orders' table, but only for rows where the 'customer_id' is exactly 101."
Get the title and author of books published after 2000.,"SELECT title, author FROM Books WHERE publication_year > 2000;","Books(book_id INT, title VARCHAR, author VARCHAR, genre VARCHAR, publication_year INT, price DECIMAL, stock INT)","This query retrieves the 'title' and 'author' of books from the 'Books' table, filtering to include only those published after the year 2000."
List products that are in the 'Electronics' category.,SELECT * FROM Products WHERE category = 'Electronics';,"Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)",This query selects all product details from the 'Products' table where the 'category' is precisely 'Electronics'.
Find employees whose salary is greater than 60000.,"SELECT first_name, last_name, salary FROM Employees WHERE salary > 60000;","Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone_number VARCHAR, hire_date DATE, job_id INT, salary DECIMAL, department_id INT)","This query retrieves the names and salary of employees who earn more than 60000, from the 'Employees' table."
Get movies released in 2022.,"SELECT title, director FROM Movies WHERE release_year = 2022;","Movies(movie_id INT, title VARCHAR, director VARCHAR, release_year INT, genre VARCHAR, rating DECIMAL)",This query selects the title and director of movies from the 'Movies' table that were released specifically in the year 2022.
Show all students majoring in 'Computer Science'.,SELECT * FROM Students WHERE major = 'Computer Science';,"Students(student_id INT, first_name VARCHAR, last_name VARCHAR, date_of_birth DATE, major VARCHAR, enrollment_date DATE, gpa DECIMAL)",This query selects all information about students from the 'Students' table whose 'major' is 'Computer Science'.
Retrieve sales records where the quantity sold is less than 5.,SELECT * FROM Sales WHERE quantity_sold < 5;,"Sales(sale_id INT, product_id INT, customer_id INT, sale_date DATE, quantity_sold INT, total_price DECIMAL)",This query fetches all details for sales entries where the 'quantity_sold' is strictly less than 5.
List products that are out of stock (stock_quantity is 0).,SELECT product_name FROM Products WHERE stock_quantity = 0;,"Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)",This query selects only the names of products from the 'Products' table that have a 'stock_quantity' of 0.
Find employees whose last name starts with 'S'.,"SELECT first_name, last_name FROM Employees WHERE last_name LIKE 'S%';","Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone_number VARCHAR, hire_date DATE, job_id INT, salary DECIMAL, department_id INT)",This query selects the first and last names of employees whose 'last_name' begins with the letter 'S'.
Get customer emails for customers living in 'New York'.,SELECT email FROM Customers WHERE city = 'New York';,"Customers(customer_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone VARCHAR, address VARCHAR, city VARCHAR, state VARCHAR, zip_code VARCHAR)",This query retrieves the email addresses of customers who reside in 'New York' from the 'Customers' table.
Show orders with a total amount greater than or equal to 500.,"SELECT order_id, total_amount FROM Orders WHERE total_amount >= 500;","Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)",This query selects order IDs and their total amounts for orders where the 'total_amount' is 500 or more.
List all courses offered by the 'Math' department.,"SELECT course_name, credits FROM Courses WHERE department = 'Math';","Courses(course_id INT, course_name VARCHAR, department VARCHAR, credits INT, instructor VARCHAR)",This query retrieves the name and credits for courses from the 'Courses' table that belong to the 'Math' department.
Find vehicles made by 'Toyota' with a year after 2015.,"SELECT make, model, year FROM Vehicles WHERE make = 'Toyota' AND year > 2015;","Vehicles(vehicle_id INT, make VARCHAR, model VARCHAR, year INT, color VARCHAR, price DECIMAL, mileage INT)","This query selects the make, model, and year of vehicles where the 'make' is 'Toyota' AND the 'year' is greater than 2015."
"Get employees hired after January 1, 2020.","SELECT first_name, last_name, hire_date FROM Employees WHERE hire_date > '2020-01-01';","Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone_number VARCHAR, hire_date DATE, job_id INT, salary DECIMAL, department_id INT)","This query retrieves the names and hire dates of employees from the 'Employees' table whose 'hire_date' is after January 1, 2020."
"Retrieve product names and prices, ordered by price in ascending order.","SELECT product_name, price FROM Products ORDER BY price ASC;","Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)","This query selects the product name and price for all products, then sorts the results by 'price' in ascending order (lowest to highest)."
List the top 5 most expensive products.,"SELECT product_name, price FROM Products ORDER BY price DESC LIMIT 5;","Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)","This query selects product names and prices, orders them by 'price' in descending order (highest to lowest), and then limits the result to the top 5 entries."
Show the distinct categories of products.,SELECT DISTINCT category FROM Products;,"Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)",This query retrieves only the unique values from the 'category' column of the 'Products' table.
Find all products with a price between 50 and 100 (inclusive).,"SELECT product_name, price FROM Products WHERE price BETWEEN 50 AND 100;","Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)","This query selects the product name and price for products where the 'price' is within the range of 50 to 100, including both 50 and 100."
List employees in department 10 or 20.,"SELECT first_name, last_name, department_id FROM Employees WHERE department_id IN (10, 20);","Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone_number VARCHAR, hire_date DATE, job_id INT, salary DECIMAL, department_id INT)",This query selects the names and department IDs of employees who belong to either department 10 or department 20.
Get the names of all movies with a rating greater than 8.0.,SELECT title FROM Movies WHERE rating > 8.0;,"Movies(movie_id INT, title VARCHAR, director VARCHAR, release_year INT, genre VARCHAR, rating DECIMAL)",This query retrieves the titles of movies from the 'Movies' table that have a 'rating' higher than 8.0.
Show the email and phone number of customers whose first name is 'John'.,"SELECT email, phone FROM Customers WHERE first_name = 'John';","Customers(customer_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone VARCHAR, address VARCHAR, city VARCHAR, state VARCHAR, zip_code VARCHAR)",This query selects the 'email' and 'phone' of customers whose 'first_name' is exactly 'John'.
Retrieve sales records for product ID 501.,SELECT * FROM Sales WHERE product_id = 501;,"Sales(sale_id INT, product_id INT, customer_id INT, sale_date DATE, quantity_sold INT, total_price DECIMAL)","This query selects all columns from the 'Sales' table, but only for sales where the 'product_id' is 501."
Find books whose genre is 'Fantasy' and price is less than 20.,"SELECT title, author, price FROM Books WHERE genre = 'Fantasy' AND price < 20;","Books(book_id INT, title VARCHAR, author VARCHAR, genre VARCHAR, publication_year INT, price DECIMAL, stock INT)","This query retrieves the title, author, and price of books that are of 'Fantasy' genre AND cost less than 20."
List students whose GPA is between 3.5 and 4.0.,"SELECT first_name, last_name, gpa FROM Students WHERE gpa BETWEEN 3.5 AND 4.0;","Students(student_id INT, first_name VARCHAR, last_name VARCHAR, date_of_birth DATE, major VARCHAR, enrollment_date DATE, gpa DECIMAL)","This query selects the names and GPA of students whose 'gpa' falls within the range of 3.5 to 4.0, inclusive."
Get all products ordered by product name in descending order.,SELECT * FROM Products ORDER BY product_name DESC;,"Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)",This query selects all columns from the 'Products' table and orders the results by 'product_name' in descending alphabetical order.
Show the first 3 employees hired.,"SELECT first_name, last_name, hire_date FROM Employees ORDER BY hire_date ASC LIMIT 3;","Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone_number VARCHAR, hire_date DATE, job_id INT, salary DECIMAL, department_id INT)","This query selects names and hire dates, orders them by 'hire_date' in ascending order (earliest first), and then returns only the first 3 records."
Retrieve the movie title and release year for all genres except 'Horror'.,"SELECT title, release_year FROM Movies WHERE genre != 'Horror';","Movies(movie_id INT, title VARCHAR, director VARCHAR, release_year INT, genre VARCHAR, rating DECIMAL)",This query selects the title and release year of movies from the 'Movies' table where the 'genre' is not 'Horror'.
List customers whose phone number is not null.,"SELECT first_name, last_name, phone FROM Customers WHERE phone IS NOT NULL;","Customers(customer_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone VARCHAR, address VARCHAR, city VARCHAR, state VARCHAR, zip_code VARCHAR)","This query retrieves the names and phone numbers of customers who have a phone number recorded (i.e., it is not NULL)."
Find orders that are currently 'Pending'.,"SELECT order_id, order_date, total_amount FROM Orders WHERE status = 'Pending';","Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)","This query selects the ID, date, and total amount for orders that have a 'status' of 'Pending'."
Get courses with 3 or 4 credits.,"SELECT course_name, credits FROM Courses WHERE credits IN (3, 4);","Courses(course_id INT, course_name VARCHAR, department VARCHAR, credits INT, instructor VARCHAR)",This query selects the name and credits for courses where the 'credits' value is either 3 or 4.
Show all vehicles that are either 'Red' or 'Blue'.,"SELECT make, model, color FROM Vehicles WHERE color = 'Red' OR color = 'Blue';","Vehicles(vehicle_id INT, make VARCHAR, model VARCHAR, year INT, color VARCHAR, price DECIMAL, mileage INT)","This query selects the make, model, and color of vehicles whose 'color' is either 'Red' or 'Blue'."
Retrieve sales records from the year 2023.,SELECT * FROM Sales WHERE sale_date BETWEEN '2023-01-01' AND '2023-12-31';,"Sales(sale_id INT, product_id INT, customer_id INT, sale_date DATE, quantity_sold INT, total_price DECIMAL)",This query selects all sales records where the 'sale_date' falls within the calendar year 2023.
List employees whose email address contains 'example.com'.,"SELECT first_name, last_name, email FROM Employees WHERE email LIKE '%example.com%';","Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone_number VARCHAR, hire_date DATE, job_id INT, salary DECIMAL, department_id INT)",This query selects names and email addresses of employees whose 'email' contains the substring 'example.com'.
Find products whose name contains 'Laptop'.,"SELECT product_name, price FROM Products WHERE product_name LIKE '%Laptop%';","Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)",This query retrieves the name and price of products where the 'product_name' contains the word 'Laptop' anywhere within it.
Get the titles of books whose author is 'J.K. Rowling'.,SELECT title FROM Books WHERE author = 'J.K. Rowling';,"Books(book_id INT, title VARCHAR, author VARCHAR, genre VARCHAR, publication_year INT, price DECIMAL, stock INT)",This query selects the titles of books written by 'J.K. Rowling' from the 'Books' table.
Show all employees except those with job ID 5.,SELECT * FROM Employees WHERE job_id <> 5;,"Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone_number VARCHAR, hire_date DATE, job_id INT, salary DECIMAL, department_id INT)","This query selects all information for employees from the 'Employees' table, excluding those whose 'job_id' is 5."
List students whose enrollment date is before 2021.,"SELECT first_name, last_name, enrollment_date FROM Students WHERE enrollment_date < '2021-01-01';","Students(student_id INT, first_name VARCHAR, last_name VARCHAR, date_of_birth DATE, major VARCHAR, enrollment_date DATE, gpa DECIMAL)","This query retrieves the names and enrollment dates of students who enrolled before January 1, 2021."
Find the movie titles that are rated 'PG' or 'PG-13'.,"SELECT title FROM Movies WHERE rating_category IN ('PG', 'PG-13');","Movies(movie_id INT, title VARCHAR, director VARCHAR, release_year INT, genre VARCHAR, rating DECIMAL, rating_category VARCHAR)",This query selects the titles of movies from the 'Movies' table where the 'rating_category' is either 'PG' or 'PG-13'.
Get the distinct cities where customers live.,SELECT DISTINCT city FROM Customers;,"Customers(customer_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone VARCHAR, address VARCHAR, city VARCHAR, state VARCHAR, zip_code VARCHAR)",This query retrieves a unique list of all cities present in the 'Customers' table.
Show the vehicle make and model for cars priced under 25000.,"SELECT make, model FROM Vehicles WHERE price < 25000;","Vehicles(vehicle_id INT, make VARCHAR, model VARCHAR, year INT, color VARCHAR, price DECIMAL, mileage INT)",This query selects the make and model of vehicles from the 'Vehicles' table that have a 'price' less than 25000.
"List all sales records, ordered by total price in descending order.",SELECT * FROM Sales ORDER BY total_price DESC;,"Sales(sale_id INT, product_id INT, customer_id INT, sale_date DATE, quantity_sold INT, total_price DECIMAL)",This query selects all columns from the 'Sales' table and sorts the results by 'total_price' from highest to lowest.
Retrieve employees whose phone number is null.,"SELECT first_name, last_name FROM Employees WHERE phone_number IS NULL;","Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone_number VARCHAR, hire_date DATE, job_id INT, salary DECIMAL, department_id INT)",This query selects the names of employees who do not have a recorded 'phone_number'.
Find products with a stock quantity greater than 50 and less than 100.,"SELECT product_name, stock_quantity FROM Products WHERE stock_quantity > 50 AND stock_quantity < 100;","Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)",This query selects the name and stock quantity of products where the 'stock_quantity' is strictly between 50 and 100.
Get order IDs for orders that are 'Shipped' and were placed after '2023-01-01'.,SELECT order_id FROM Orders WHERE status = 'Shipped' AND order_date > '2023-01-01';,"Orders(order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status VARCHAR)","This query selects the 'order_id' for orders that have a 'status' of 'Shipped' AND were placed after January 1, 2023."
Show the course names from the 'History' or 'English' departments.,"SELECT course_name FROM Courses WHERE department IN ('History', 'English');","Courses(course_id INT, course_name VARCHAR, department VARCHAR, credits INT, instructor VARCHAR)",This query retrieves the 'course_name' for courses that belong to either the 'History' or 'English' departments.
List the most recent 10 sales records.,SELECT * FROM Sales ORDER BY sale_date DESC LIMIT 10;,"Sales(sale_id INT, product_id INT, customer_id INT, sale_date DATE, quantity_sold INT, total_price DECIMAL)","This query selects all sales records, orders them by 'sale_date' in descending order (most recent first), and returns only the first 10 entries."
Find books whose title contains the word 'Lord' and whose genre is 'Fantasy'.,"SELECT title, author FROM Books WHERE title LIKE '%Lord%' AND genre = 'Fantasy';","Books(book_id INT, title VARCHAR, author VARCHAR, genre VARCHAR, publication_year INT, price DECIMAL, stock INT)",This query selects the title and author of books where the 'title' contains 'Lord' AND the 'genre' is 'Fantasy'.
Get all customers whose address is in 'Main Street'.,"SELECT first_name, last_name, address FROM Customers WHERE address LIKE '%Main Street%';","Customers(customer_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone VARCHAR, address VARCHAR, city VARCHAR, state VARCHAR, zip_code VARCHAR)",This query retrieves the names and addresses of customers whose 'address' contains the phrase 'Main Street'.
Show employees who earn exactly 75000.,"SELECT first_name, last_name FROM Employees WHERE salary = 75000;","Employees(employee_id INT, first_name VARCHAR, last_name VARCHAR, email VARCHAR, phone_number VARCHAR, hire_date DATE, job_id INT, salary DECIMAL, department_id INT)",This query selects the first and last names of employees whose 'salary' is exactly 75000.
List products that are not in the 'Books' category.,"SELECT product_name, category FROM Products WHERE category <> 'Books';","Products(product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL, stock_quantity INT, supplier_id INT)",This query selects the product name and category for all products whose 'category' is not 'Books'.
Retrieve the names of all students whose GPA is below 2.5.,"SELECT first_name, last_name, gpa FROM Students WHERE gpa < 2.5;","Students(student_id INT, first_name VARCHAR, last_name VARCHAR, date_of_birth DATE, major VARCHAR, enrollment_date DATE, gpa DECIMAL)",This query retrieves the names and GPA of students whose 'gpa' is less than 2.5.
Find movies directed by 'Christopher Nolan' released after 2005.,"SELECT title, release_year FROM Movies WHERE director = 'Christopher Nolan' AND release_year > 2005;","Movies(movie_id INT, title VARCHAR, director VARCHAR, release_year INT, genre VARCHAR, rating DECIMAL)",This query selects the title and release year of movies directed by 'Christopher Nolan' that were released after 2005.
Instruction,Query,Table Schema,Explanation
Find all employees with a salary greater than 60000.,SELECT * FROM Employees WHERE salary > 60000;,"Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)",This query selects all columns from the Employees table where the salary is strictly greater than 60000. It uses the greater than (>) comparison operator in the WHERE clause.
List all products in the 'Electronics' category.,"SELECT product_name, price FROM Products WHERE category = 'Electronics';","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)",This query retrieves the product name and price for all products that belong to the 'Electronics' category. It uses the equality (=) operator to filter based on the 'category' column.
Show orders placed after '2023-01-01'.,"SELECT order_id, order_date, total_amount FROM Orders WHERE order_date > '2023-01-01';","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)","This query selects the order ID, order date, and total amount for orders that were placed after January 1, 2023. It uses the greater than (>) operator to compare dates."
Find students whose major is 'Computer Science' and GPA is greater than or equal to 3.5.,"SELECT first_name, last_name, gpa FROM Students WHERE major = 'Computer Science' AND gpa >= 3.5;","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)","This query selects the first name, last name, and GPA of students who are majoring in 'Computer Science' AND have a GPA of 3.5 or higher. It combines two conditions using the AND logical operator."
Retrieve books published before the year 2000.,"SELECT title, author FROM Books WHERE publication_year < 2000;","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query fetches the title and author of books that were published before the year 2000. It uses the less than (<) comparison operator on the 'publication_year' column.
List employees who are not in department 3 or 4.,"SELECT employee_id, first_name, department_id FROM Employees WHERE department_id NOT IN (3, 4);","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)",This query retrieves employees whose department ID is neither 3 nor 4. It uses the NOT IN operator to exclude values from a list.
Get products with a stock quantity of 0.,SELECT product_name FROM Products WHERE stock_quantity = 0;,"Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)","This query finds the names of products that are currently out of stock, meaning their stock quantity is 0. It uses the equality (=) operator."
Show orders with a total amount between 100 and 500.,"SELECT order_id, total_amount FROM Orders WHERE total_amount BETWEEN 100 AND 500;","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)",This query selects orders whose total amount falls inclusively between 100 and 500. The BETWEEN operator is used for range filtering.
Find students whose first name starts with 'A'.,"SELECT first_name, last_name FROM Students WHERE first_name LIKE 'A%';","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)",This query retrieves the first and last names of students whose first name begins with the letter 'A'. The LIKE operator with the '%' wildcard is used for pattern matching.
List books by 'Jane Austen' or 'Mark Twain'.,"SELECT title, author FROM Books WHERE author = 'Jane Austen' OR author = 'Mark Twain';","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query selects the title and author for books written by either 'Jane Austen' or 'Mark Twain'. The OR logical operator combines the two conditions.
Get employees whose last name is not 'Smith'.,"SELECT first_name, last_name FROM Employees WHERE last_name != 'Smith';","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)",This query retrieves employees whose last name is anything other than 'Smith'. It uses the not equal (!=) operator.
Find products with a price less than 100 or a stock quantity less than 10.,"SELECT product_name, price, stock_quantity FROM Products WHERE price < 100 OR stock_quantity < 10;","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)",This query selects products that either have a price under 100 OR a stock quantity under 10. The OR logical operator allows for either condition to be true.
Retrieve orders that are currently 'Pending'.,"SELECT order_id, customer_id FROM Orders WHERE status = 'Pending';","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)",This query fetches the order ID and customer ID for all orders that have a status of 'Pending'. It uses the equality (=) operator for string comparison.
Show students who were enrolled in '2022'.,"SELECT first_name, last_name FROM Students WHERE enrollment_date BETWEEN '2022-01-01' AND '2022-12-31';","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)","This query selects students whose enrollment date falls within the year 2022. The BETWEEN operator is used for a date range, covering the entire year."
List books whose title contains the word 'SQL'.,SELECT title FROM Books WHERE title LIKE '%SQL%';,"Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query finds books where the word 'SQL' appears anywhere in their title. The LIKE operator with '%' wildcards on both sides is used for substring matching.
Find employees hired in '2023' with a salary greater than 70000.,"SELECT first_name, last_name, salary, hire_date FROM Employees WHERE hire_date BETWEEN '2023-01-01' AND '2023-12-31' AND salary > 70000;","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)",This query selects employees hired in 2023 AND whose salary is greater than 70000. It combines a date range condition with a numeric comparison using the AND operator.
Get products that are not in the 'Food' category and have a price less than 50.,"SELECT product_name, category, price FROM Products WHERE category != 'Food' AND price < 50;","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)",This query retrieves products that are not classified as 'Food' AND have a price lower than 50. It uses both inequality (!=) and less than (<) operators combined with AND.
Show orders that are not 'Completed' and have a total amount less than 200.,"SELECT order_id, status, total_amount FROM Orders WHERE status <> 'Completed' AND total_amount < 200;","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)",This query selects orders that are not in the 'Completed' status (using <> for not equal) AND have a total amount less than 200. Both conditions must be true.
Find students who are in 'Physics' or 'Chemistry' major.,"SELECT first_name, last_name, major FROM Students WHERE major IN ('Physics', 'Chemistry');","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)",This query retrieves students whose major is either 'Physics' or 'Chemistry'. The IN operator is used to match values from a specified list.
"Retrieve books with a price between 20.00 and 40.00, inclusive.","SELECT title, price FROM Books WHERE price BETWEEN 20.00 AND 40.00;","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query selects books whose price is inclusively between 20.00 and 40.00. The BETWEEN operator specifies a numeric range.
List employees in department 10 whose salary is less than 50000.,"SELECT first_name, last_name, salary FROM Employees WHERE department_id = 10 AND salary < 50000;","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)","This query selects employees who are in department 10 AND earn less than 50000. Both conditions must be met, linked by AND."
Get products with 'Smart' in their name and price greater than 300.,"SELECT product_name, price FROM Products WHERE product_name LIKE '%Smart%' AND price > 300;","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)",This query retrieves products whose name contains 'Smart' AND whose price is greater than 300. It combines LIKE with a comparison operator using AND.
Show orders from customer ID 101 or 105.,"SELECT order_id, customer_id FROM Orders WHERE customer_id IN (101, 105);","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)",This query selects orders placed by customer ID 101 or customer ID 105. The IN operator is used for matching against a list of specific customer IDs.
Find students whose last name does not start with 'S'.,"SELECT first_name, last_name FROM Students WHERE last_name NOT LIKE 'S%';","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)",This query retrieves students whose last name does NOT begin with the letter 'S'. It uses the NOT LIKE operator for inverse pattern matching.
List books published exactly in 2010.,"SELECT title, publication_year FROM Books WHERE publication_year = 2010;","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query selects books that were published specifically in the year 2010. It uses the equality (=) operator for an exact match on the year.
Find employees who are not in department 5 and were hired after '2020-06-01'.,"SELECT employee_id, first_name, department_id, hire_date FROM Employees WHERE department_id != 5 AND hire_date > '2020-06-01';","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)","This query selects employees who are not in department 5 AND were hired after June 1, 2020. It combines an inequality and a date comparison with AND."
Get products with a price greater than 500 and a stock quantity less than 20.,"SELECT product_name, price, stock_quantity FROM Products WHERE price > 500 AND stock_quantity < 20;","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)","This query retrieves products that cost more than 500 AND have fewer than 20 items in stock. Both conditions must be true, linked by AND."
Show orders with a 'Shipped' or 'Delivered' status.,"SELECT order_id, status FROM Orders WHERE status IN ('Shipped', 'Delivered');","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)",This query selects orders that have a status of either 'Shipped' or 'Delivered'. The IN operator provides a concise way to check against multiple values.
Find students whose GPA is null.,"SELECT first_name, last_name FROM Students WHERE gpa IS NULL;","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)","This query retrieves students for whom the GPA value is not recorded (i.e., it is NULL). The IS NULL operator is used to check for null values."
List books published after 2015 that are in the 'Fantasy' genre.,"SELECT title, author, publication_year FROM Books WHERE publication_year > 2015 AND genre = 'Fantasy';","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query selects books published after 2015 AND belonging to the 'Fantasy' genre. It combines a year comparison and a string equality with AND.
Get employees with a salary that is not null.,"SELECT employee_id, first_name, salary FROM Employees WHERE salary IS NOT NULL;","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)","This query retrieves all employees for whom a salary value exists (i.e., it is not NULL). The IS NOT NULL operator checks for the presence of a value."
Find products with a category name that does not end with 's'.,"SELECT product_name, category FROM Products WHERE category NOT LIKE '%s';","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)",This query selects products whose category name does NOT end with the letter 's'. The NOT LIKE operator with the '%' wildcard is used for inverse pattern matching.
Show orders placed in January 2023.,"SELECT order_id, order_date FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-01-31';","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)",This query retrieves orders placed within the month of January 2023. The BETWEEN operator is used for a date range specific to a month.
List students whose major is not 'Engineering'.,"SELECT first_name, last_name, major FROM Students WHERE major <> 'Engineering';","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)",This query selects students whose major is anything other than 'Engineering'. It uses the not equal (<>) operator for string comparison.
Retrieve books by an author whose name starts with 'J' and genre is 'Mystery'.,"SELECT title, author FROM Books WHERE author LIKE 'J%' AND genre = 'Mystery';","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query selects books by authors whose name begins with 'J' AND the book's genre is 'Mystery'. It combines a LIKE condition and an equality condition with AND.
Find employees whose salary is less than or equal to 45000.,"SELECT first_name, last_name, salary FROM Employees WHERE salary <= 45000;","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)",This query selects employees with a salary that is less than or equal to 45000. It uses the less than or equal to (<=) comparison operator.
Get products with 'Laptop' in their name and stock quantity is greater than 0.,"SELECT product_name, stock_quantity FROM Products WHERE product_name LIKE '%Laptop%' AND stock_quantity > 0;","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)",This query retrieves products whose name contains 'Laptop' AND that have at least one item in stock. Both conditions must be satisfied.
Show orders with a total amount that is not between 50 and 200.,"SELECT order_id, total_amount FROM Orders WHERE total_amount NOT BETWEEN 50 AND 200;","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)",This query selects orders whose total amount is outside the inclusive range of 50 to 200. The NOT BETWEEN operator negates the range condition.
Find students enrolled after '2020-09-01' and having a GPA greater than 3.0.,"SELECT first_name, last_name, enrollment_date, gpa FROM Students WHERE enrollment_date > '2020-09-01' AND gpa > 3.0;","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)","This query selects students who enrolled after September 1, 2020, AND have a GPA higher than 3.0. Both date and numeric conditions are combined with AND."
List books with no specified genre.,"SELECT title, author FROM Books WHERE genre IS NULL;","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query retrieves books for which the genre information is missing (NULL). It uses the IS NULL operator to find records with null values in the 'genre' column.
Get employees whose first name is 'John' or 'Jane'.,"SELECT first_name, last_name FROM Employees WHERE first_name IN ('John', 'Jane');","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)",This query selects employees whose first name is either 'John' or 'Jane'. The IN operator checks for membership in a set of values.
Find products in 'Clothing' category with a price between 20 and 100.,"SELECT product_name, price FROM Products WHERE category = 'Clothing' AND price BETWEEN 20 AND 100;","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)",This query selects products from the 'Clothing' category AND whose price is within the 20 to 100 range. It combines an equality and a range condition.
Show orders from customer ID 100 and placed before '2023-03-01'.,"SELECT order_id, order_date FROM Orders WHERE customer_id = 100 AND order_date < '2023-03-01';","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)","This query retrieves orders made by customer ID 100 AND placed before March 1, 2023. It combines a numeric equality and a date comparison with AND."
List students who are not in 'Biology' or 'History' major.,"SELECT first_name, last_name, major FROM Students WHERE major NOT IN ('Biology', 'History');","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)",This query selects students whose major is neither 'Biology' nor 'History'. The NOT IN operator excludes values from a list.
Retrieve books whose title starts with 'The' and publication year is after 2005.,"SELECT title, publication_year FROM Books WHERE title LIKE 'The%' AND publication_year > 2005;","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query selects books whose title begins with 'The' AND were published after 2005. It combines a LIKE condition and a numeric comparison with AND.
Find employees hired in '2022' or '2023'.,"SELECT first_name, last_name, hire_date FROM Employees WHERE hire_date BETWEEN '2022-01-01' AND '2023-12-31';","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)",This query selects employees who were hired in either the year 2022 or 2023. The BETWEEN operator defines a comprehensive date range for these two years.
Get products whose name contains 'wireless' and stock quantity is exactly 10.,"SELECT product_name, stock_quantity FROM Products WHERE product_name LIKE '%wireless%' AND stock_quantity = 10;","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)",This query retrieves products whose name includes 'wireless' AND have precisely 10 items in stock. Both a pattern match and an exact match are required.
Show orders with a total amount greater than 1000 or status is 'Cancelled'.,"SELECT order_id, total_amount, status FROM Orders WHERE total_amount > 1000 OR status = 'Cancelled';","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)",This query selects orders where the total amount exceeds 1000 OR the order status is 'Cancelled'. Either condition being true will include the order.
Find students with a GPA less than 3.0 and enrolled after 2021.,"SELECT first_name, last_name, gpa, enrollment_date FROM Students WHERE gpa < 3.0 AND enrollment_date > '2021-12-31';","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)",This query retrieves students with a GPA under 3.0 AND who enrolled after the end of 2021. It combines a numeric comparison and a date comparison with AND.
List books by authors whose name ends with 's' and are not 'Fantasy' genre.,"SELECT title, author, genre FROM Books WHERE author LIKE '%s' AND genre != 'Fantasy';","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query selects books where the author's name ends with 's' AND the genre is not 'Fantasy'. It combines a LIKE pattern and an inequality with AND.
"Get employees in department 10 or 20, earning more than 55000.","SELECT first_name, last_name, department_id, salary FROM Employees WHERE (department_id = 10 OR department_id = 20) AND salary > 55000;","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)","This query selects employees who are in department 10 OR department 20, AND whose salary is greater than 55000. Parentheses ensure correct logical grouping."
Find products not in 'Books' or 'Movies' category.,"SELECT product_name, category FROM Products WHERE category NOT IN ('Books', 'Movies');","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)",This query selects products whose category is neither 'Books' nor 'Movies'. The NOT IN operator excludes items from the specified list.
Show orders placed in the first quarter of 2023 (Jan-Mar).,"SELECT order_id, order_date FROM Orders WHERE order_date >= '2023-01-01' AND order_date <= '2023-03-31';","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)","This query retrieves orders placed within the first quarter of 2023, specifically from January 1st to March 31st. It uses two comparison operators with AND for a date range."
List students whose major is 'Arts' or 'Humanities' and GPA is not null.,"SELECT first_name, last_name, major, gpa FROM Students WHERE (major = 'Arts' OR major = 'Humanities') AND gpa IS NOT NULL;","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)","This query selects students whose major is either 'Arts' or 'Humanities', AND whose GPA is recorded (not null). Parentheses group the OR condition."
Retrieve books with a price less than 15.00 and published after 2018.,"SELECT title, price, publication_year FROM Books WHERE price < 15.00 AND publication_year > 2018;","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)",This query fetches books that cost less than 15.00 AND were published after 2018. It combines a numeric comparison and a year comparison with AND.
Find employees whose first name starts with 'M' and are in department 5.,"SELECT first_name, last_name, department_id FROM Employees WHERE first_name LIKE 'M%' AND department_id = 5;","Employees (employee_id INT, first_name TEXT, last_name TEXT, department_id INT, salary DECIMAL, hire_date DATE)",This query selects employees whose first name begins with 'M' AND who belong to department 5. It combines a LIKE pattern and an equality condition with AND.
Get products with 'headphones' in their name and price between 50 and 200.,"SELECT product_name, price FROM Products WHERE product_name LIKE '%headphones%' AND price BETWEEN 50 AND 200;","Products (product_id INT, product_name TEXT, category TEXT, price DECIMAL, stock_quantity INT)",This query retrieves products whose name contains 'headphones' AND whose price is inclusively between 50 and 200. It combines LIKE with BETWEEN.
Show orders that are 'Completed' and total amount is exactly 0 (possibly free).,"SELECT order_id, total_amount FROM Orders WHERE status = 'Completed' AND total_amount = 0;","Orders (order_id INT, customer_id INT, order_date DATE, total_amount DECIMAL, status TEXT)",This query selects orders that are marked as 'Completed' AND have a total amount of 0. Both conditions must be met for an order to be included.
Find students with a GPA of 4.0 and enrolled in 2023.,"SELECT first_name, last_name, gpa, enrollment_date FROM Students WHERE gpa = 4.0 AND enrollment_date BETWEEN '2023-01-01' AND '2023-12-31';","Students (student_id INT, first_name TEXT, last_name TEXT, major TEXT, gpa DECIMAL, enrollment_date DATE)",This query retrieves students with a perfect GPA of 4.0 AND who enrolled during the year 2023. It combines an exact match and a date range.
List books by author 'Stephen King' or 'Agatha Christie' and published after 1980.,"SELECT title, author, publication_year FROM Books WHERE (author = 'Stephen King' OR author = 'Agatha Christie') AND publication_year > 1980;","Books (book_id INT, title TEXT, author TEXT, genre TEXT, publication_year INT, price DECIMAL)","This query selects books by either Stephen King or Agatha Christie, AND which were published after 1980. Parentheses group the author conditions."
Instruction,Query,Table Schema,Explanation
"Get the first name, last name, and department name for all employees.","SELECT E.first_name, E.last_name, D.department_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id;","Employees(employee_id, first_name, last_name, department_id), Departments(department_id, department_name)","This query uses an INNER JOIN to combine rows from the Employees table and the Departments table where the department_id matches in both tables, retrieving employee names and their respective department names."
List the names of employees who work in the 'IT' department.,"SELECT E.first_name, E.last_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.department_name = 'IT';","Employees(employee_id, first_name, last_name, department_id), Departments(department_id, department_name)",This query joins Employees and Departments and then filters the results to only include employees from the 'IT' department.
"Show all department names and the count of employees in each department, including departments with no employees.","SELECT D.department_name, COUNT(E.employee_id) AS num_employees FROM Departments D LEFT JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name;","Employees(employee_id, department_id), Departments(department_id, department_name)","This query uses a LEFT JOIN to ensure all departments are listed, even if they have no employees. COUNT(E.employee_id) will be 0 for departments without employees because the employee_id will be NULL for those rows."
"List all customers and their order IDs, including customers who have not placed any orders.","SELECT C.first_name, C.last_name, O.order_id FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id;","Customers(customer_id, first_name, last_name), Orders(order_id, customer_id)","This query uses a LEFT JOIN to retrieve all customers. If a customer has placed an order, their order ID will be shown; otherwise, the order ID will be NULL."
"Display all product names and the IDs of orders they are included in, even if a product has never been ordered.","SELECT P.product_name, OI.order_id FROM Order_Items OI RIGHT JOIN Products P ON OI.product_id = P.product_id;","Order_Items(order_item_id, order_id, product_id), Products(product_id, product_name)","This query uses a RIGHT JOIN to ensure all products are listed. If a product has been ordered, its associated order item ID will be shown; otherwise, the order item ID will be NULL."
"Get all employee names and all department names, showing where they match and where they don't (i.e., employees without a department, departments without employees).","SELECT E.first_name, E.last_name, D.department_name FROM Employees E FULL OUTER JOIN Departments D ON E.department_id = D.department_id;","Employees(employee_id, first_name, last_name, department_id), Departments(department_id, department_name)","This query uses a FULL OUTER JOIN to return all rows when there is a match in either the Employees or Departments table. If there's no match, NULL values are returned for columns from the table without a match."
Find employees who are not assigned to any department and departments that have no employees.,"SELECT E.first_name, E.last_name, D.department_name FROM Employees E FULL OUTER JOIN Departments D ON E.department_id = D.department_id WHERE E.employee_id IS NULL OR D.department_id IS NULL;","Employees(employee_id, first_name, last_name, department_id), Departments(department_id, department_name)",This query uses a FULL OUTER JOIN to get all records and then filters to show only those records where either an employee is not linked to a department (E.employee_id is NULL for rows coming only from Departments) or a department has no employees (D.department_id is NULL for rows coming only from Employees).
Generate all possible combinations of employees and projects.,"SELECT E.first_name, E.last_name, P.project_name FROM Employees E CROSS JOIN Projects P;","Employees(first_name, last_name), Projects(project_name)","This query performs a CROSS JOIN, which creates a Cartesian product of the two tables, resulting in every employee being paired with every project."
List pairs of employees who share the same manager.,"SELECT E1.first_name AS Employee1_FirstName, E1.last_name AS Employee1_LastName, E2.first_name AS Employee2_FirstName, E2.last_name AS Employee2_LastName FROM Employees E1 JOIN Employees E2 ON E1.manager_id = E2.manager_id AND E1.employee_id <> E2.employee_id;","Employees(employee_id, first_name, last_name, manager_id)",This query uses a self-join on the Employees table to find pairs of employees (E1 and E2) who have the same manager (manager_id) but are not the same employee (employee_id <> employee_id).
"For each manager, list their direct reports.","SELECT M.first_name AS Manager_FirstName, M.last_name AS Manager_LastName, E.first_name AS Employee_FirstName, E.last_name AS Employee_LastName FROM Employees E JOIN Employees M ON E.manager_id = M.employee_id;","Employees(employee_id, first_name, last_name, manager_id)",This query uses a self-join to link employees (E) to their managers (M) by matching the employee's manager_id to the manager's employee_id.
"Get the first name, last name of customers, their order dates, and the product IDs included in those orders.","SELECT C.first_name, C.last_name, O.order_date, OI.product_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id;","Customers(customer_id, first_name, last_name), Orders(order_id, customer_id, order_date), Order_Items(order_id, product_id)","This query joins three tables: Customers to Orders on customer_id, and then Orders to Order_Items on order_id, to retrieve customer names, order dates, and the products within those orders."
"Display customer names, their order IDs, and the names of products they ordered.","SELECT C.first_name, C.last_name, O.order_id, P.product_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id;","Customers(customer_id, first_name, last_name), Orders(order_id, customer_id), Order_Items(order_id, product_id), Products(product_id, product_name)","This query joins four tables to link customers to their orders, then to the items in those orders, and finally to the names of the products, providing a comprehensive view of customer purchases."
Calculate the total amount spent by each customer.,"SELECT C.first_name, C.last_name, SUM(O.total_amount) AS total_spent FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.first_name, C.last_name;","Customers(customer_id, first_name, last_name), Orders(order_id, customer_id, total_amount)","This query joins Customers with Orders, then groups the results by customer to sum the total_amount for each customer."
Find the names of customers who have not placed any orders.,"SELECT C.first_name, C.last_name FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_id IS NULL;","Customers(customer_id, first_name, last_name), Orders(order_id, customer_id)","This query uses a LEFT JOIN to include all customers, and then filters for rows where there is no matching order (O.order_id is NULL), effectively listing customers without orders."
List all book titles and their authors' full names.,"SELECT B.title, A.first_name, A.last_name FROM Books B JOIN Authors A ON B.author_id = A.author_id;","Books(book_id, title, author_id), Authors(author_id, first_name, last_name)",This query joins the Books table with the Authors table on their common author_id to retrieve book titles and their corresponding author names.
Get the titles of books published by 'Penguin Random House' after the year 2000.,SELECT B.title FROM Books B JOIN Publishers P ON B.publisher_id = P.publisher_id WHERE P.publisher_name = 'Penguin Random House' AND B.publication_year > 2000;,"Books(book_id, title, publisher_id, publication_year), Publishers(publisher_id, publisher_name)","This query joins Books and Publishers, then filters for books from 'Penguin Random House' published after 2000."
"List all product categories and the products belonging to them, including categories that currently have no products.","SELECT Cat.category_name, P.product_name FROM Categories Cat LEFT JOIN Products P ON Cat.category_id = P.category_id;","Categories(category_id, category_name), Products(product_id, product_name, category_id)","This query uses a LEFT JOIN to ensure all categories are listed. If a category has no products, the product_name will be NULL."
Find departments that have more than 5 employees and list their names and employee counts.,"SELECT D.department_name, COUNT(E.employee_id) AS num_employees FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name HAVING COUNT(E.employee_id) > 5;","Departments(department_id, department_name), Employees(employee_id, department_id)","This query joins Departments and Employees, groups by department, counts employees, and then filters to show only departments with more than 5 employees."
"List the total salary expenditure for each department, ordered from highest to lowest.","SELECT D.department_name, SUM(E.salary) AS total_salary_expenditure FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name ORDER BY total_salary_expenditure DESC;","Departments(department_id, department_name), Employees(employee_id, department_id, salary)","This query joins Departments and Employees, groups by department, sums the salaries, and orders the results by the total salary in descending order."
"Get the first name, last name of employees, their department name, and the city where their department is located.","SELECT E.first_name, E.last_name, D.department_name, L.city FROM Employees E JOIN Departments D ON E.department_id = D.department_id JOIN Locations L ON D.location_id = L.location_id;","Employees(employee_id, first_name, last_name, department_id), Departments(department_id, department_name, location_id), Locations(location_id, city)","This query links Employees to Departments, and then Departments to Locations to retrieve employee names, their department names, and the city of their department's location."
"Show all student names and the courses they are enrolled in, even if a student is not enrolled in any course.","SELECT S.first_name, S.last_name, C.course_name FROM Students S LEFT JOIN Enrollments E ON S.student_id = E.student_id LEFT JOIN Courses C ON E.course_id = C.course_id;","Students(student_id, first_name, last_name), Enrollments(enrollment_id, student_id, course_id), Courses(course_id, course_name)","This query uses two LEFT JOINs: first to link Students to Enrollments, ensuring all students are included, then to link Enrollments to Courses to get course names."
"For each job title, find the minimum and maximum salary of employees holding that job.","SELECT J.job_title, MIN(E.salary) AS min_salary, MAX(E.salary) AS max_salary FROM Jobs J JOIN Employees E ON J.job_id = E.job_id GROUP BY J.job_title;","Jobs(job_id, job_title), Employees(employee_id, job_id, salary)","This query joins Jobs and Employees, then groups by job title to find the minimum and maximum salaries for each."
Identify pairs of products that belong to the same category.,"SELECT P1.product_name AS Product1, P2.product_name AS Product2, C.category_name FROM Products P1 JOIN Products P2 ON P1.category_id = P2.category_id AND P1.product_id < P2.product_id JOIN Categories C ON P1.category_id = C.category_id;","Products(product_id, product_name, category_id), Categories(category_id, category_name)",This query self-joins the Products table to find pairs of products with the same category_id. The P1.product_id < P2.product_id condition prevents duplicate pairs and self-pairing. It also joins with Categories to show the category name.
List the titles of books and their authors for authors born after 1950.,"SELECT B.title, A.first_name, A.last_name FROM Books B JOIN Authors A ON B.author_id = A.author_id WHERE A.birth_year > 1950;","Books(book_id, title, author_id), Authors(author_id, first_name, last_name, birth_year)","This query joins Books and Authors, then filters for authors born after 1950."
Count the number of books published by each publisher.,"SELECT P.publisher_name, COUNT(B.book_id) AS num_books FROM Publishers P JOIN Books B ON P.publisher_id = B.publisher_id GROUP BY P.publisher_name;","Publishers(publisher_id, publisher_name), Books(book_id, publisher_id)","This query joins Publishers and Books, then groups by publisher name to count the books."
"List all publishers and count how many books they have published, including those who have published no books.","SELECT P.publisher_name, COUNT(B.book_id) AS num_books FROM Publishers P LEFT JOIN Books B ON P.publisher_id = B.publisher_id GROUP BY P.publisher_name;","Publishers(publisher_id, publisher_name), Books(book_id, publisher_id)","This query uses a LEFT JOIN to ensure all publishers are included, then counts books. Publishers without books will show a count of 0."
Get the details of orders placed by customers in March 2023.,"SELECT C.first_name, C.last_name, O.order_id, O.order_date, O.total_amount FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_date BETWEEN '2023-03-01' AND '2023-03-31';","Customers(customer_id, first_name, last_name), Orders(order_id, customer_id, order_date, total_amount)","This query joins Customers and Orders, then filters orders placed within March 2023."
Identify products that have been ordered by at least 3 distinct customers.,"SELECT P.product_name, COUNT(DISTINCT O.customer_id) AS distinct_customers_ordered FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id GROUP BY P.product_name HAVING COUNT(DISTINCT O.customer_id) >= 3;","Products(product_id, product_name), Order_Items(product_id, order_id), Orders(order_id, customer_id)","This query joins Products, Order_Items, and Orders, then groups by product name to count distinct customers who ordered each product, filtering for those with 3 or more distinct customers."
List all products that have never been included in any order.,SELECT P.product_name FROM Products P LEFT JOIN Order_Items OI ON P.product_id = OI.product_id WHERE OI.order_item_id IS NULL;,"Products(product_id, product_name), Order_Items(order_item_id, product_id)","This query uses a LEFT JOIN to include all products, then filters for products that have no corresponding entry in Order_Items (meaning they were never ordered)."
"Display the names of students, the courses they are enrolled in, and their grades.","SELECT S.first_name, S.last_name, C.course_name, E.grade FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id;","Students(student_id, first_name, last_name), Enrollments(student_id, course_id, grade), Courses(course_id, course_name)","This query joins Students to Enrollments, and Enrollments to Courses, to get a comprehensive view of student enrollments and grades."
Find all unique department names that have at least one employee.,SELECT DISTINCT D.department_name FROM Departments D JOIN Employees E ON D.department_id = E.department_id;,"Departments(department_id, department_name), Employees(employee_id, department_id)",This query joins Departments and Employees and then selects distinct department names to list only departments that have employees.
Identify pairs of projects that belong to the same department.,"SELECT P1.project_name AS Project1, P2.project_name AS Project2, D.department_name FROM Projects P1 JOIN Projects P2 ON P1.department_id = P2.department_id AND P1.project_id < P2.project_id JOIN Departments D ON P1.department_id = D.department_id;","Projects(project_id, project_name, department_id), Departments(department_id, department_name)","This query self-joins the Projects table to find pairs of projects within the same department, preventing duplicates and self-pairing using P1.project_id < P2.project_id, and then joins with Departments to show the department name."
Calculate the average price of products in each category.,"SELECT Cat.category_name, AVG(P.price) AS average_price FROM Categories Cat JOIN Products P ON Cat.category_id = P.category_id GROUP BY Cat.category_name;","Categories(category_id, category_name), Products(product_id, category_id, price)","This query joins Categories and Products, then groups by category name to calculate the average price of products within each category."
Get the top 5 most expensive products and their categories.,"SELECT P.product_name, P.price, Cat.category_name FROM Products P JOIN Categories Cat ON P.category_id = Cat.category_id ORDER BY P.price DESC LIMIT 5;","Products(product_id, product_name, category_id, price), Categories(category_id, category_name)","This query joins Products and Categories, orders the results by product price in descending order, and then limits the output to the top 5."
"List all courses and the number of students enrolled in each, including courses with no enrollments.","SELECT C.course_name, COUNT(E.student_id) AS num_students_enrolled FROM Courses C LEFT JOIN Enrollments E ON C.course_id = E.course_id GROUP BY C.course_name;","Courses(course_id, course_name), Enrollments(enrollment_id, course_id, student_id)","This query uses a LEFT JOIN to ensure all courses are listed. It then counts the number of student enrollments for each course, showing 0 for courses with no enrollments."
Count how many distinct authors have published books with each publisher.,"SELECT P.publisher_name, COUNT(DISTINCT B.author_id) AS num_distinct_authors FROM Publishers P JOIN Books B ON P.publisher_id = B.publisher_id GROUP BY P.publisher_name;","Publishers(publisher_id, publisher_name), Books(book_id, publisher_id, author_id)","This query joins Publishers and Books, then groups by publisher name to count the distinct authors associated with each publisher."
Find books written by 'Stephen King' and published by 'Doubleday'.,SELECT B.title FROM Books B JOIN Authors A ON B.author_id = A.author_id JOIN Publishers P ON B.publisher_id = P.publisher_id WHERE A.first_name = 'Stephen' AND A.last_name = 'King' AND P.publisher_name = 'Doubleday';,"Books(book_id, title, author_id, publisher_id), Authors(author_id, first_name, last_name), Publishers(publisher_id, publisher_name)","This query joins Books with Authors and Publishers, then filters by the author's name and publisher's name to find matching books."
List employees who do not manage anyone.,"SELECT E.first_name, E.last_name FROM Employees E LEFT JOIN Employees M ON E.employee_id = M.manager_id WHERE M.employee_id IS NULL;","Employees(employee_id, first_name, last_name, manager_id)","This query uses a LEFT JOIN to match employees (E) with those they manage (M). If an employee (E) has no matching entry in the manager_id column of another employee (M.employee_id is NULL), it means they don't manage anyone."
Find employees and the projects associated with their departments.,"SELECT E.first_name, E.last_name, P.project_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id JOIN Projects P ON D.department_id = P.department_id;","Employees(employee_id, first_name, last_name, department_id), Departments(department_id, project_id), Projects(project_id, project_name, department_id)","This query joins Employees to Departments, and then Departments to Projects to link employees to projects within their department."
"Get all students and all enrollment records, showing students without enrollments and enrollments without a matching student (if data inconsistency exists).","SELECT S.first_name, S.last_name, E.enrollment_id FROM Students S FULL OUTER JOIN Enrollments E ON S.student_id = E.student_id;","Students(student_id, first_name, last_name), Enrollments(enrollment_id, student_id)","This query uses a FULL OUTER JOIN between Students and Enrollments to retrieve all students and all enrollment records, including those students without enrollments and enrollments that might not have a matching student."
List the names of employees working in departments located in 'New York'.,"SELECT E.first_name, E.last_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id JOIN Locations L ON D.location_id = L.location_id WHERE L.city = 'New York';","Employees(first_name, last_name, department_id), Departments(department_id, location_id), Locations(location_id, city)","This query joins Employees, Departments, and Locations to find employees whose department is located in 'New York'."
"List all product categories and how many products are in them, including categories with no products.","SELECT C.category_name, COUNT(P.product_id) FROM Categories C LEFT JOIN Products P ON C.category_id = P.category_id GROUP BY C.category_name;","Categories(category_id, category_name), Products(product_id, category_id)","This query uses a LEFT JOIN to include all categories, then counts the products in each. Categories without products will show a count of 0."
Find customers who have placed orders for products containing 'Laptop' in their name.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name LIKE '%Laptop%';","Customers(customer_id, first_name, last_name), Orders(customer_id, order_id), Order_Items(order_id, product_id), Products(product_id, product_name)","This query joins Customers, Orders, Order_Items, and Products, then filters for products with 'Laptop' in their name, returning distinct customer names."
List book titles and their authors' full names for authors born in the 1960s.,"SELECT B.title, A.first_name, A.last_name FROM Books B JOIN Authors A ON B.author_id = A.author_id WHERE A.birth_year BETWEEN 1960 AND 1969;","Books(book_id, title, author_id), Authors(author_id, first_name, last_name, birth_year)","This query joins Books and Authors, then filters for authors born between 1960 and 1969."
"Show every customer and every product, linking them if the customer has ever ordered that specific product.","SELECT C.first_name, C.last_name, P.product_name FROM Customers C FULL OUTER JOIN Orders O ON C.customer_id = O.customer_id FULL OUTER JOIN Order_Items OI ON O.order_id = OI.order_id FULL OUTER JOIN Products P ON OI.product_id = P.product_id;","Customers(customer_id, first_name, last_name), Orders(customer_id, order_id), Order_Items(order_id, product_id), Products(product_id, product_name)","This query uses a series of FULL OUTER JOINs to attempt to link every customer to every product through orders, resulting in NULLs where no direct order relationship exists, demonstrating the exhaustive nature of FULL OUTER JOIN."
Calculate the average grade for each course.,"SELECT C.course_name, AVG(E.grade) AS average_grade FROM Courses C JOIN Enrollments E ON C.course_id = E.course_id GROUP BY C.course_name;","Courses(course_id, course_name), Enrollments(course_id, grade)","This query joins Courses and Enrollments, then groups by course name to calculate the average grade for each course."
List employees who earn more than their direct manager.,"SELECT E.first_name AS Employee_FirstName, E.last_name AS Employee_LastName, E.salary AS Employee_Salary, M.first_name AS Manager_FirstName, M.last_name AS Manager_LastName, M.salary AS Manager_Salary FROM Employees E JOIN Employees M ON E.manager_id = M.employee_id WHERE E.salary > M.salary;","Employees(employee_id, first_name, last_name, salary, manager_id)",This query uses a self-join to compare each employee's salary (E) with their manager's salary (M) and filters for employees who earn more.
List products that are 'Electronics' and have more than 100 units in stock.,"SELECT P.product_name, P.stock_quantity FROM Products P JOIN Categories Cat ON P.category_id = Cat.category_id WHERE Cat.category_name = 'Electronics' AND P.stock_quantity > 100;","Products(product_id, product_name, category_id, stock_quantity), Categories(category_id, category_name)","This query joins Products and Categories, then filters for products in the 'Electronics' category with a stock quantity greater than 100."
"List all job titles and the number of employees associated with each, including job titles that currently have no employees.","SELECT J.job_title, COUNT(E.employee_id) AS num_employees FROM Jobs J LEFT JOIN Employees E ON J.job_id = E.job_id GROUP BY J.job_title;","Jobs(job_id, job_title), Employees(employee_id, job_id)","This query uses a LEFT JOIN to ensure all job titles are listed, and then counts the number of employees associated with each job title. Job titles with no employees will show a count of 0."
Find books written by authors whose last name starts with 'S' and published by publishers located in 'New York'.,"SELECT B.title, A.first_name, A.last_name, P.publisher_name FROM Books B JOIN Authors A ON B.author_id = A.author_id JOIN Publishers P ON B.publisher_id = P.publisher_id WHERE A.last_name LIKE 'S%' AND P.city = 'New York';","Books(book_id, title, author_id, publisher_id), Authors(author_id, first_name, last_name), Publishers(publisher_id, publisher_name, city)","This query joins Books, Authors, and Publishers, then filters for authors whose last name starts with 'S' and publishers located in 'New York'."
Retrieve the names of all employees and the job titles they hold.,"SELECT E.first_name, E.last_name, J.job_title FROM Employees E JOIN Jobs J ON E.job_id = J.job_id;","Employees(employee_id, first_name, last_name, job_id), Jobs(job_id, job_title)",This query uses an INNER JOIN to combine information from the Employees table and the Jobs table to display employee names alongside their corresponding job titles.
"Find customers who have placed an order with a total amount greater than 500, along with their order IDs and total amounts.","SELECT C.first_name, C.last_name, O.order_id, O.total_amount FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.total_amount > 500;","Customers(customer_id, first_name, last_name), Orders(order_id, customer_id, total_amount)","This query joins Customers and Orders to link customers to their orders, then filters for orders where the total amount exceeds 500."
"List all authors and the titles of their books, including authors who have not yet published any books.","SELECT A.first_name, A.last_name, B.title FROM Authors A LEFT JOIN Books B ON A.author_id = B.author_id;","Authors(author_id, first_name, last_name), Books(book_id, title, author_id)","This query uses a LEFT JOIN to ensure all authors are listed. If an author has no books, the book title will be NULL."
"Display the product name, category name, and the quantity sold for each item in an order with order_id = 101.","SELECT P.product_name, Cat.category_name, OI.quantity FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id JOIN Categories Cat ON P.category_id = Cat.category_id WHERE OI.order_id = 101;","Order_Items(order_item_id, order_id, product_id, quantity), Products(product_id, product_name, category_id), Categories(category_id, category_name)","This query joins Order_Items with Products and Categories to get the product name, category name, and quantity for items within a specific order (order_id = 101)."
Instruction,Query,Table Schema,Explanation
Count the number of employees in each department.,"SELECT department_id, COUNT(employee_id) AS total_employees FROM employees GROUP BY department_id;","CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT);","This query counts the number of employees for each unique department ID, grouping the results by department_id."
Calculate the total sales for each product category.,"SELECT category_name, SUM(sales_amount) AS total_sales FROM products GROUP BY category_name;","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category_name VARCHAR(255), sales_amount DECIMAL(10,2));","This query sums up the sales_amount for each distinct product category, grouping the results by category_name."
Find the average salary for employees in each job title.,"SELECT job_title, AVG(salary) AS average_salary FROM employees GROUP BY job_title;","CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), job_title VARCHAR(255), salary DECIMAL(10,2));","This query calculates the average salary for each unique job title, grouping the results by job_title."
Determine the maximum order amount for each customer.,"SELECT customer_id, MAX(order_total) AS max_order_amount FROM orders GROUP BY customer_id;","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, order_total DECIMAL(10,2));","This query finds the highest order total for each distinct customer ID, grouping the results by customer_id."
Get the minimum product price for each supplier.,"SELECT supplier_id, MIN(price) AS min_price FROM products GROUP BY supplier_id;","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), supplier_id INT, price DECIMAL(10,2));","This query retrieves the lowest price for products associated with each unique supplier ID, grouping by supplier_id."
List the number of orders placed on each date.,"SELECT order_date, COUNT(order_id) AS orders_count FROM orders GROUP BY order_date;","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, order_total DECIMAL(10,2));","This query counts the total number of orders for each distinct order date, grouping the results by order_date."
Calculate the sum of quantities for each item in inventory.,"SELECT item_name, SUM(quantity) AS total_quantity FROM inventory GROUP BY item_name;","CREATE TABLE inventory (item_id INT PRIMARY KEY, item_name VARCHAR(255), quantity INT, warehouse_id INT);","This query sums the quantity of each distinct item name in the inventory, grouping the results by item_name."
Find the average rating for each movie genre.,"SELECT genre, AVG(rating) AS average_rating FROM movies GROUP BY genre;","CREATE TABLE movies (movie_id INT PRIMARY KEY, title VARCHAR(255), genre VARCHAR(255), rating DECIMAL(3,1));","This query calculates the average rating for each unique movie genre, grouping the results by genre."
Count the number of unique visitors per day.,"SELECT visit_date, COUNT(DISTINCT visitor_id) AS unique_visitors FROM website_visits GROUP BY visit_date;","CREATE TABLE website_visits (visit_id INT PRIMARY KEY, visitor_id INT, visit_date DATE, page_view INT);","This query counts the number of distinct visitors for each unique visit date, grouping the results by visit_date."
Get the total number of hours worked per project.,"SELECT project_id, SUM(hours_worked) AS total_hours FROM timesheets GROUP BY project_id;","CREATE TABLE timesheets (entry_id INT PRIMARY KEY, employee_id INT, project_id INT, hours_worked DECIMAL(5,2), work_date DATE);","This query sums the hours worked for each distinct project ID, grouping the results by project_id."
Identify departments with more than 5 employees.,"SELECT department_id, COUNT(employee_id) AS employee_count FROM employees GROUP BY department_id HAVING COUNT(employee_id) > 5;","CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2));",This query counts employees per department and then filters to show only departments where the employee count is greater than 5.
List customers whose total order value exceeds $1000.,"SELECT customer_id, SUM(order_total) AS total_spent FROM orders GROUP BY customer_id HAVING SUM(order_total) > 1000;","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, order_total DECIMAL(10,2));",This query calculates the total order value for each customer and then filters to show only customers whose total spending is greater than $1000.
Find product categories where the average price is less than $20.,"SELECT category_name, AVG(price) AS average_price FROM products GROUP BY category_name HAVING AVG(price) < 20;","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category_name VARCHAR(255), price DECIMAL(10,2));",This query computes the average price for each product category and then filters to show only categories where the average price is less than $20.
"Show the number of tasks for each status, but only for statuses with more than 2 tasks.","SELECT status, COUNT(task_id) AS task_count FROM tasks GROUP BY status HAVING COUNT(task_id) > 2;","CREATE TABLE tasks (task_id INT PRIMARY KEY, task_name VARCHAR(255), status VARCHAR(50), project_id INT);",This query counts the number of tasks for each status and then filters to show only statuses that have more than 2 tasks.
Get the total quantity of items sold per month.,"SELECT STRFTIME('%Y-%m', order_date) AS sales_month, SUM(quantity) AS total_quantity_sold FROM sales GROUP BY sales_month;","CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT, quantity INT, order_date DATE);",This query extracts the month and year from the order_date and then sums the quantity sold for each unique month.
Find the latest transaction date for each account.,"SELECT account_id, MAX(transaction_date) AS last_transaction FROM transactions GROUP BY account_id;","CREATE TABLE transactions (transaction_id INT PRIMARY KEY, account_id INT, transaction_date DATE, amount DECIMAL(10,2));","This query finds the most recent transaction date for each distinct account ID, grouping the results by account_id."
Count the number of songs by each artist.,"SELECT artist_name, COUNT(song_id) AS number_of_songs FROM songs GROUP BY artist_name;","CREATE TABLE songs (song_id INT PRIMARY KEY, song_title VARCHAR(255), artist_name VARCHAR(255), album_name VARCHAR(255));","This query counts the number of songs for each unique artist name, grouping the results by artist_name."
Calculate the average score for each student across all subjects.,"SELECT student_id, AVG(score) AS average_score FROM grades GROUP BY student_id;","CREATE TABLE grades (grade_id INT PRIMARY KEY, student_id INT, subject_id INT, score DECIMAL(5,2));","This query calculates the average score for each unique student ID, grouping the results by student_id."
Sum the revenue generated by each sales region.,"SELECT region, SUM(revenue) AS total_revenue FROM regional_sales GROUP BY region;","CREATE TABLE regional_sales (sale_id INT PRIMARY KEY, region VARCHAR(100), product_id INT, revenue DECIMAL(10,2));","This query sums the revenue for each distinct sales region, grouping the results by region."
"Find the number of books published by each author, only for authors with more than 3 books.","SELECT author_id, COUNT(book_id) AS num_books FROM books GROUP BY author_id HAVING COUNT(book_id) > 3;","CREATE TABLE books (book_id INT PRIMARY KEY, title VARCHAR(255), author_id INT, publication_year INT);",This query counts books per author and then filters to show only authors who have published more than 3 books.
Get the total stock quantity for each product warehouse combination.,"SELECT product_id, warehouse_id, SUM(stock_quantity) AS total_stock FROM warehouse_inventory GROUP BY product_id, warehouse_id;","CREATE TABLE warehouse_inventory (inventory_id INT PRIMARY KEY, product_id INT, warehouse_id INT, stock_quantity INT);","This query sums the stock quantity for each unique combination of product ID and warehouse ID, grouping by both columns."
Show the average and total quantity of items ordered per customer per month.,"SELECT customer_id, STRFTIME('%Y-%m', order_date) AS order_month, AVG(quantity) AS avg_quantity, SUM(quantity) AS total_quantity FROM order_items GROUP BY customer_id, order_month;","CREATE TABLE order_items (item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), order_date DATE, customer_id INT);","This query calculates the average and total quantity of items ordered for each customer for each month, grouping by customer_id and the extracted month."
List the number of flights departing from each airport and count only airports with more than 10 flights.,"SELECT departure_airport_code, COUNT(flight_id) AS flight_count FROM flights GROUP BY departure_airport_code HAVING COUNT(flight_id) > 10;","CREATE TABLE flights (flight_id INT PRIMARY KEY, flight_number VARCHAR(10), departure_airport_code VARCHAR(3), arrival_airport_code VARCHAR(3), departure_time DATETIME);",This query counts flights per departure airport and then filters to show only airports with more than 10 flights.
"Find the number of students enrolled in each course, and only display courses with at least 5 students.","SELECT course_id, COUNT(student_id) AS enrolled_students FROM enrollments GROUP BY course_id HAVING COUNT(student_id) >= 5;","CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date DATE);",This query counts the number of students enrolled in each course and then filters to show only courses with 5 or more enrolled students.
Calculate the average rating given to each product.,"SELECT product_id, AVG(rating) AS average_product_rating FROM product_reviews GROUP BY product_id;","CREATE TABLE product_reviews (review_id INT PRIMARY KEY, product_id INT, customer_id INT, rating INT, review_text TEXT);","This query calculates the average rating for each unique product ID, grouping the results by product_id."
Determine the total number of items in stock per warehouse.,"SELECT warehouse_id, SUM(quantity_in_stock) AS total_items_in_warehouse FROM stock GROUP BY warehouse_id;","CREATE TABLE stock (stock_id INT PRIMARY KEY, product_id INT, warehouse_id INT, quantity_in_stock INT);","This query sums the quantity of items in stock for each unique warehouse ID, grouping the results by warehouse_id."
Count the number of posts made by each user.,"SELECT user_id, COUNT(post_id) AS number_of_posts FROM posts GROUP BY user_id;","CREATE TABLE posts (post_id INT PRIMARY KEY, user_id INT, post_content TEXT, post_date DATETIME);","This query counts the number of posts made by each unique user ID, grouping the results by user_id."
Find the earliest and latest entry dates for each log type.,"SELECT log_type, MIN(entry_date) AS first_entry, MAX(entry_date) AS last_entry FROM system_logs GROUP BY log_type;","CREATE TABLE system_logs (log_id INT PRIMARY KEY, log_type VARCHAR(50), entry_date DATETIME, message TEXT);","This query finds the earliest and latest entry dates for each distinct log type, grouping the results by log_type."
Calculate the average call duration for each customer support agent.,"SELECT agent_id, AVG(call_duration_minutes) AS avg_call_duration FROM support_calls GROUP BY agent_id;","CREATE TABLE support_calls (call_id INT PRIMARY KEY, agent_id INT, customer_id INT, call_duration_minutes INT, call_date DATE);","This query calculates the average call duration for each unique customer support agent ID, grouping the results by agent_id."
Determine the number of unique products sold in each store.,"SELECT store_id, COUNT(DISTINCT product_id) AS unique_products_sold FROM sales_records GROUP BY store_id;","CREATE TABLE sales_records (sale_id INT PRIMARY KEY, store_id INT, product_id INT, sale_date DATE, quantity INT);","This query counts the number of distinct product IDs sold in each unique store ID, grouping the results by store_id."
"List the total points accumulated by each team, but only for teams with more than 50 points.","SELECT team_id, SUM(points) AS total_points FROM match_results GROUP BY team_id HAVING SUM(points) > 50;","CREATE TABLE match_results (match_id INT PRIMARY KEY, team_id INT, opponent_team_id INT, points INT, match_date DATE);",This query calculates the total points for each team and then filters to show only teams that have accumulated more than 50 points.
Count the number of active users per region.,"SELECT region, COUNT(user_id) AS active_users FROM users WHERE status = 'active' GROUP BY region;","CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), region VARCHAR(100), status VARCHAR(50));","This query counts the number of users where their status is 'active' for each unique region, grouping the results by region."
Find the number of orders each customer made in 2023.,"SELECT customer_id, COUNT(order_id) AS orders_in_2023 FROM orders WHERE STRFTIME('%Y', order_date) = '2023' GROUP BY customer_id;","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, order_total DECIMAL(10,2));","This query counts the orders for each customer made specifically in the year 2023, grouping the results by customer_id."
Calculate the total production cost for each product type.,"SELECT product_type, SUM(cost) AS total_production_cost FROM production GROUP BY product_type;","CREATE TABLE production (production_id INT PRIMARY KEY, product_id INT, product_type VARCHAR(100), cost DECIMAL(10,2), production_date DATE);","This query sums the production cost for each unique product type, grouping the results by product_type."
Determine the average response time for support tickets by priority level.,"SELECT priority_level, AVG(response_time_hours) AS avg_response_time FROM support_tickets GROUP BY priority_level;","CREATE TABLE support_tickets (ticket_id INT PRIMARY KEY, customer_id INT, priority_level VARCHAR(50), response_time_hours DECIMAL(5,2), created_date DATE);","This query calculates the average response time for each unique priority level of support tickets, grouping the results by priority_level."
Show the highest temperature recorded for each city.,"SELECT city, MAX(temperature_celsius) AS max_temperature FROM weather_data GROUP BY city;","CREATE TABLE weather_data (data_id INT PRIMARY KEY, city VARCHAR(100), record_date DATE, temperature_celsius DECIMAL(4,1));","This query finds the highest temperature recorded for each distinct city, grouping the results by city."
List the number of employees hired each year.,"SELECT STRFTIME('%Y', hire_date) AS hire_year, COUNT(employee_id) AS new_hires FROM employees GROUP BY hire_year;","CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), hire_date DATE, department_id INT);","This query extracts the year from the hire_date and counts the number of employees hired in each unique year, grouping by the extracted year."
Get the total budget spent on each project.,"SELECT project_id, SUM(amount_spent) AS total_budget_spent FROM project_expenses GROUP BY project_id;","CREATE TABLE project_expenses (expense_id INT PRIMARY KEY, project_id INT, expense_name VARCHAR(255), amount_spent DECIMAL(10,2), expense_date DATE);","This query sums the amount spent for each distinct project ID, grouping the results by project_id."
Find the number of distinct products in each order.,"SELECT order_id, COUNT(DISTINCT product_id) AS distinct_products_per_order FROM order_details GROUP BY order_id;","CREATE TABLE order_details (detail_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, price_per_unit DECIMAL(10,2));","This query counts the number of distinct product IDs for each unique order ID, grouping the results by order_id."
Calculate the average age of users in each country.,"SELECT country, AVG(age) AS average_age FROM users GROUP BY country;","CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), age INT, country VARCHAR(100));","This query calculates the average age for users in each unique country, grouping the results by country."
Show the total number of events for each event type that occurred in the last 30 days.,"SELECT event_type, COUNT(event_id) AS total_events FROM events WHERE event_date >= DATE('now', '-30 days') GROUP BY event_type;","CREATE TABLE events (event_id INT PRIMARY KEY, event_type VARCHAR(100), event_date DATE, description TEXT);","This query counts events for each type that occurred within the last 30 days, grouping the results by event_type."
"List the departments where the combined salary of employees is over $500,000.","SELECT department_id, SUM(salary) AS total_department_salary FROM employees GROUP BY department_id HAVING SUM(salary) > 500000;","CREATE TABLE employees (employee_id INT PRIMARY KEY, employee_name VARCHAR(255), department_id INT, salary DECIMAL(10,2));","This query sums the salaries for each department and then filters to show only departments where the total salary exceeds $500,000."
Determine the number of unique visitors to each page.,"SELECT page_url, COUNT(DISTINCT visitor_id) AS unique_visitors_per_page FROM page_views GROUP BY page_url;","CREATE TABLE page_views (view_id INT PRIMARY KEY, visitor_id INT, page_url VARCHAR(255), view_date DATETIME);","This query counts the number of distinct visitors for each unique page URL, grouping the results by page_url."
Get the total amount of donations for each donor.,"SELECT donor_id, SUM(donation_amount) AS total_donated FROM donations GROUP BY donor_id;","CREATE TABLE donations (donation_id INT PRIMARY KEY, donor_id INT, donation_amount DECIMAL(10,2), donation_date DATE);","This query sums the donation amount for each unique donor ID, grouping the results by donor_id."
Find the number of courses taught by each instructor.,"SELECT instructor_id, COUNT(course_id) AS courses_taught FROM courses GROUP BY instructor_id;","CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, credits INT);","This query counts the number of courses taught by each unique instructor ID, grouping the results by instructor_id."
Calculate the average age of pets for each pet type.,"SELECT pet_type, AVG(age_years) AS average_pet_age FROM pets GROUP BY pet_type;","CREATE TABLE pets (pet_id INT PRIMARY KEY, pet_name VARCHAR(255), pet_type VARCHAR(50), age_years INT, owner_id INT);","This query calculates the average age for pets of each unique pet type, grouping the results by pet_type."
Determine the maximum score obtained in each exam.,"SELECT exam_id, MAX(score) AS highest_score FROM exam_results GROUP BY exam_id;","CREATE TABLE exam_results (result_id INT PRIMARY KEY, exam_id INT, student_id INT, score DECIMAL(5,2), exam_date DATE);","This query finds the highest score obtained for each distinct exam ID, grouping the results by exam_id."
Count the number of vehicles of each make.,"SELECT make, COUNT(vehicle_id) AS number_of_vehicles FROM vehicles GROUP BY make;","CREATE TABLE vehicles (vehicle_id INT PRIMARY KEY, make VARCHAR(100), model VARCHAR(100), year INT, color VARCHAR(50));","This query counts the number of vehicles for each unique vehicle make, grouping the results by make."
Get the total duration of all projects managed by each manager.,"SELECT manager_id, SUM(duration_days) AS total_project_duration FROM projects GROUP BY manager_id;","CREATE TABLE projects (project_id INT PRIMARY KEY, project_name VARCHAR(255), manager_id INT, start_date DATE, end_date DATE, duration_days INT);","This query sums the duration of projects for each unique manager ID, grouping the results by manager_id."
"List the countries and the total number of cities recorded for each, only for countries with more than 3 cities.","SELECT country, COUNT(city_id) AS number_of_cities FROM cities GROUP BY country HAVING COUNT(city_id) > 3;","CREATE TABLE cities (city_id INT PRIMARY KEY, city_name VARCHAR(255), country VARCHAR(100), population INT);",This query counts the number of cities for each country and then filters to show only countries that have more than 3 cities recorded.
Find the average quantity sold for each product.,"SELECT product_id, AVG(quantity) AS average_quantity_sold FROM sales GROUP BY product_id;","CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT, quantity INT, sale_date DATE);","This query calculates the average quantity sold for each unique product, grouping the results by product_id."
Count the number of unique product categories purchased by each customer.,"SELECT customer_id, COUNT(DISTINCT category_id) AS unique_categories FROM customer_purchases GROUP BY customer_id;","CREATE TABLE customer_purchases (purchase_id INT PRIMARY KEY, customer_id INT, product_id INT, category_id INT);","This query counts the number of distinct product categories purchased by each customer, grouping by customer_id."
Calculate the total weight of shipments for each destination city.,"SELECT destination_city, SUM(weight_kg) AS total_weight FROM shipments GROUP BY destination_city;","CREATE TABLE shipments (shipment_id INT PRIMARY KEY, origin_city VARCHAR(100), destination_city VARCHAR(100), weight_kg DECIMAL(8,2));","This query sums the weight of shipments for each unique destination city, grouping the results by destination_city."
Determine the earliest and latest flight times for each route.,"SELECT origin_airport, destination_airport, MIN(departure_time) AS earliest_flight, MAX(departure_time) AS latest_flight FROM flights GROUP BY origin_airport, destination_airport;","CREATE TABLE flights (flight_id INT PRIMARY KEY, origin_airport VARCHAR(3), destination_airport VARCHAR(3), departure_time DATETIME);","This query finds the earliest and latest departure times for each unique combination of origin and destination airports, grouping by both columns."
"Count the number of tasks assigned to each project manager, only if they manage more than 5 tasks.","SELECT manager_id, COUNT(task_id) AS tasks_managed FROM tasks WHERE manager_id IS NOT NULL GROUP BY manager_id HAVING COUNT(task_id) > 5;","CREATE TABLE tasks (task_id INT PRIMARY KEY, task_name VARCHAR(255), manager_id INT, status VARCHAR(50));",This query counts tasks for each manager and then filters to show only managers who have more than 5 tasks assigned.
Get the average length of comments for each article.,"SELECT article_id, AVG(LENGTH(comment_text)) AS average_comment_length FROM comments GROUP BY article_id;","CREATE TABLE comments (comment_id INT PRIMARY KEY, article_id INT, user_id INT, comment_text TEXT, comment_date DATETIME);","This query calculates the average character length of comment_text for each unique article ID, grouping the results by article_id."
Show the number of distinct products delivered by each delivery driver.,"SELECT driver_id, COUNT(DISTINCT product_id) AS distinct_products_delivered FROM deliveries GROUP BY driver_id;","CREATE TABLE deliveries (delivery_id INT PRIMARY KEY, order_id INT, driver_id INT, product_id INT, delivery_date DATE);","This query counts the number of distinct products associated with each unique delivery driver, grouping the results by driver_id."
Calculate the total cost of parts used in each assembly.,"SELECT assembly_id, SUM(part_cost) AS total_assembly_cost FROM assembly_parts GROUP BY assembly_id;","CREATE TABLE assembly_parts (part_id INT PRIMARY KEY, assembly_id INT, part_name VARCHAR(255), part_cost DECIMAL(10,2));","This query sums the cost of parts for each unique assembly ID, grouping the results by assembly_id."
Instruction,Query,Table Schema,Explanation
Get the most expensive product for each category from the Products table.,"SELECT product_id, product_name, category, price FROM (SELECT product_id, product_name, category, price, ROW_NUMBER() OVER (PARTITION BY category ORDER BY price DESC) as rn FROM Products) AS subquery WHERE rn = 1;","CREATE TABLE Products (product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL);",This query uses ROW_NUMBER() to assign a unique rank to products within each category based on price in descending order. The outer query then filters for rank 1 to get the most expensive product per category.
"Rank employees by salary within each department, allowing for ties.","SELECT employee_id, employee_name, department, salary, RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS salary_rank FROM Employees;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL);","This query uses RANK() to assign a rank to employees within their respective departments based on salary. If two employees have the same salary, they will receive the same rank, and the next rank will be skipped."
Assign a dense rank to students based on their scores within each subject.,"SELECT student_id, student_name, subject, score, DENSE_RANK() OVER (PARTITION BY subject ORDER BY score DESC) AS score_dense_rank FROM Students;","CREATE TABLE Students (student_id INT, student_name VARCHAR, subject VARCHAR, score INT);","This query uses DENSE_RANK() to assign a rank to students within each subject based on their scores. Unlike RANK(), DENSE_RANK() does not skip ranks in case of ties."
Divide all products into 4 price quartiles.,"SELECT product_id, product_name, price, NTILE(4) OVER (ORDER BY price) AS price_quartile FROM Products;","CREATE TABLE Products (product_id INT, product_name VARCHAR, price DECIMAL);",This query uses NTILE(4) to divide all products into 4 equally sized groups (quartiles) based on their price. Products are ordered by price to ensure proper quartile assignment.
"For each day, show the sales amount and the sales amount for the next day.","SELECT sale_date, total_sales, LEAD(total_sales, 1) OVER (ORDER BY sale_date) AS next_day_sales FROM DailySales;","CREATE TABLE DailySales (sale_date DATE, total_sales DECIMAL);",This query uses LEAD() to retrieve the total sales value from the next row (next day) based on the sale_date order. This is useful for comparing sales day-over-day.
"Get each employee's current salary and their previous year's salary, if available.","SELECT employee_id, year, salary, LAG(salary, 1) OVER (PARTITION BY employee_id ORDER BY year) AS previous_year_salary FROM EmployeeSalaries;","CREATE TABLE EmployeeSalaries (employee_id INT, year INT, salary DECIMAL);",This query uses LAG() to retrieve the salary from the previous year for each employee. The PARTITION BY clause ensures that the LAG function operates independently for each employee.
Find the amount of the first transaction for each customer.,"SELECT transaction_id, customer_id, transaction_date, amount, FIRST_VALUE(amount) OVER (PARTITION BY customer_id ORDER BY transaction_date) AS first_transaction_amount FROM Transactions;","CREATE TABLE Transactions (transaction_id INT, customer_id INT, transaction_date DATE, amount DECIMAL);","This query uses FIRST_VALUE() to retrieve the amount of the first transaction for each customer, ordered by transaction date. The PARTITION BY customer_id ensures the function resets for each customer."
Retrieve the last login time for each user.,"SELECT login_id, user_id, login_time, LAST_VALUE(login_time) OVER (PARTITION BY user_id ORDER BY login_time ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_login_time FROM UserLogins;","CREATE TABLE UserLogins (login_id INT, user_id INT, login_time DATETIME);",This query uses LAST_VALUE() to find the latest login time for each user. The frame clause ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING is crucial to ensure LAST_VALUE considers all rows in the partition.
Find the second highest score for each class.,"SELECT student_id, class_name, score, NTH_VALUE(score, 2) OVER (PARTITION BY class_name ORDER BY score DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS second_highest_score FROM ClassScores;","CREATE TABLE ClassScores (student_id INT, class_name VARCHAR, score INT);","This query uses NTH_VALUE(score, 2) to retrieve the second highest score within each class. The frame clause ensures the function looks at all scores within the partition."
Calculate the running total of sales over time.,"SELECT sale_date, sales_amount, SUM(sales_amount) OVER (ORDER BY sale_date) AS running_total_sales FROM DailySales;","CREATE TABLE DailySales (sale_date DATE, sales_amount DECIMAL);","This query calculates a running total of sales_amount ordered by sale_date. For each row, it sums all sales_amount values from the beginning up to the current row."
Calculate a 7-day moving average of stock prices.,"SELECT trade_date, price, AVG(price) OVER (ORDER BY trade_date ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS seven_day_moving_average FROM StockPrices;","CREATE TABLE StockPrices (trade_date DATE, price DECIMAL);","This query calculates the average stock price over the current day and the preceding 6 days, creating a 7-day moving average. The ROWS BETWEEN 6 PRECEDING AND CURRENT ROW frame clause defines the moving window."
Count the total number of orders for each customer.,"SELECT order_id, customer_id, order_date, COUNT(order_id) OVER (PARTITION BY customer_id) AS total_customer_orders FROM Orders;","CREATE TABLE Orders (order_id INT, customer_id INT, order_date DATE, amount DECIMAL);",This query uses COUNT() as a window function to count the total number of orders for each customer. The PARTITION BY clause ensures the count is reset for every new customer.
Find the maximum score achieved in each group.,"SELECT student_id, group_id, score, MAX(score) OVER (PARTITION BY group_id) AS max_group_score FROM Scores;","CREATE TABLE Scores (student_id INT, group_id INT, score INT);",This query uses MAX() as a window function to find the maximum score within each group_id. The result includes the maximum score duplicated for every row belonging to that group.
Show the minimum price for each product across different regions.,"SELECT product_id, product_name, region, price, MIN(price) OVER (PARTITION BY product_id) AS min_product_price FROM ProductPrices;","CREATE TABLE ProductPrices (product_id INT, product_name VARCHAR, region VARCHAR, price DECIMAL);",This query uses MIN() as a window function to determine the lowest price for each product_id across all regions it's sold in.
Get the top 3 highest-paid employees in each department.,"SELECT employee_id, employee_name, department, salary FROM (SELECT employee_id, employee_name, department, salary, ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) AS rn FROM Employees) AS ranked_employees WHERE rn <= 3;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL);","This query first assigns a row number to employees within each department based on salary in descending order. Then, it filters the result to show only the top 3 employees (rn <= 3) for each department."
Calculate the percentile rank of each employee's salary within their department.,"SELECT employee_id, employee_name, department, salary, PERCENT_RANK() OVER (PARTITION BY department ORDER BY salary) AS salary_percentile_rank FROM Employees;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL);","This query calculates the percentile rank for each employee's salary within their department. A value of 0 indicates the lowest salary, and 1 indicates the highest salary in the partition."
Determine the cumulative distribution of student scores within each subject.,"SELECT student_id, subject, score, CUME_DIST() OVER (PARTITION BY subject ORDER BY score) AS score_cumulative_distribution FROM StudentScores;","CREATE TABLE StudentScores (student_id INT, subject VARCHAR, score INT);",This query calculates the cumulative distribution of scores for students within each subject. It represents the proportion of rows in the partition with a value less than or equal to the current row's value.
"For each user, count the number of events they have had up to each specific event.","SELECT event_id, user_id, event_timestamp, event_type, COUNT(event_id) OVER (PARTITION BY user_id ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_event_count FROM UserEvents;","CREATE TABLE UserEvents (event_id INT, user_id INT, event_timestamp DATETIME, event_type VARCHAR);","This query calculates a running count of events for each user, ordered by timestamp. The ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW frame ensures that the count includes all preceding events for that user."
Calculate each region's percentage of the total sales for a given year.,"SELECT sale_id, sale_date, region, amount, (amount * 100.0 / SUM(amount) OVER (PARTITION BY EXTRACT(YEAR FROM sale_date))) AS percentage_of_year_sales FROM Sales;","CREATE TABLE Sales (sale_id INT, sale_date DATE, region VARCHAR, amount DECIMAL);",This query calculates each sale's percentage relative to the total sales of its respective year. The SUM(amount) OVER (PARTITION BY EXTRACT(YEAR FROM sale_date)) computes the total sales for the year as a window function.
"For each sensor reading, find the difference from the previous reading.","SELECT reading_id, device_id, reading_timestamp, value, value - LAG(value, 1) OVER (PARTITION BY device_id ORDER BY reading_timestamp) AS difference_from_previous FROM SensorReadings;","CREATE TABLE SensorReadings (reading_id INT, device_id INT, reading_timestamp DATETIME, value DECIMAL);","This query calculates the difference between the current sensor reading and the previous reading for each device, ordered by timestamp. It highlights changes in values over time."
"For each product, show the price difference from its initial recorded price.","SELECT record_id, product_id, record_date, price, price - FIRST_VALUE(price) OVER (PARTITION BY product_id ORDER BY record_date) AS price_difference_from_initial FROM ProductPriceHistory;","CREATE TABLE ProductPriceHistory (record_id INT, product_id INT, record_date DATE, price DECIMAL);",This query calculates the difference between the current price and the very first recorded price for each product. FIRST_VALUE retrieves the initial price for the product's history.
Identify any missing transaction IDs for each customer in their transaction history.,"SELECT transaction_id, customer_id, transaction_date FROM (SELECT transaction_id, customer_id, transaction_date, transaction_id - ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY transaction_id) AS gap_check FROM CustomerTransactions) AS subquery WHERE gap_check <> 0;","CREATE TABLE CustomerTransactions (transaction_id INT, customer_id INT, transaction_date DATE);","This query identifies gaps in transaction IDs for each customer. If transaction_id - ROW_NUMBER() is not zero, it indicates a missing ID in the sequence for that customer."
Divide employees into 5 performance tiers based on their performance score.,"SELECT employee_id, performance_score, NTILE(5) OVER (ORDER BY performance_score DESC) AS performance_tier FROM EmployeePerformance;","CREATE TABLE EmployeePerformance (employee_id INT, performance_score INT);","This query uses NTILE(5) to categorize employees into 5 performance tiers based on their performance scores, with tier 1 being the highest performers."
Calculate the average temperature for the current day and the preceding 2 days.,"SELECT record_date, temperature, AVG(temperature) OVER (ORDER BY record_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS three_day_avg_temp FROM DailyTemperatures;","CREATE TABLE DailyTemperatures (record_date DATE, temperature DECIMAL);",This query computes a 3-day moving average of temperatures. The ROWS BETWEEN 2 PRECEDING AND CURRENT ROW frame specifies that the average should include the current day's temperature and the two previous days'.
Calculate the cumulative sum of points for each player in their game history.,"SELECT game_id, player_id, game_date, points_scored, SUM(points_scored) OVER (PARTITION BY player_id ORDER BY game_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_points FROM PlayerScores;","CREATE TABLE PlayerScores (game_id INT, player_id INT, game_date DATE, points_scored INT);","This query calculates the running total of points scored for each player, ordered by game date. The frame clause ensures all prior games for that player are included in the sum."
"For each order, show the customer's first purchase date.","SELECT order_id, customer_id, order_date, FIRST_VALUE(order_date) OVER (PARTITION BY customer_id ORDER BY order_date) AS first_purchase_date FROM Orders;","CREATE TABLE Orders (order_id INT, customer_id INT, order_date DATE, amount DECIMAL);","This query uses FIRST_VALUE() to retrieve the earliest order_date for each customer, effectively showing their first purchase date for every order they've made."
"For each transaction, show the amount of the customer's most recent transaction.","SELECT transaction_id, customer_id, transaction_date, amount, LAST_VALUE(amount) OVER (PARTITION BY customer_id ORDER BY transaction_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_transaction_amount FROM Transactions;","CREATE TABLE Transactions (transaction_id INT, customer_id INT, transaction_date DATE, amount DECIMAL);","This query uses LAST_VALUE() to find the amount of the latest transaction for each customer. The unbounded frame ensures it looks at all transactions for that customer, not just up to the current row."
"For each employee, show their salary and the average salary in their department.","SELECT employee_id, employee_name, department, salary, AVG(salary) OVER (PARTITION BY department) AS department_average_salary FROM Employees;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL);","This query uses AVG() as a window function to compute the average salary for each department. This average is then displayed for every employee within that department, allowing for easy comparison."
"For each user's event history, identify if the current event is chronologically after the previous one, and if not, indicate a break.","SELECT activity_id, user_id, activity_timestamp, CASE WHEN activity_timestamp < LAG(activity_timestamp, 1) OVER (PARTITION BY user_id ORDER BY activity_timestamp) THEN 'Break in sequence' ELSE 'Consecutive' END AS sequence_status FROM UserActivity;","CREATE TABLE UserActivity (activity_id INT, user_id INT, activity_timestamp DATETIME);","This query checks if the current activity timestamp is earlier than the previous one for a given user, indicating a potential break in the chronological sequence of events. LAG retrieves the timestamp of the preceding activity."
"Calculate the average price of products within a price range of +/- 100 of the current product's price, ordered by category.","SELECT product_id, category, price, AVG(price) OVER (PARTITION BY category ORDER BY price RANGE BETWEEN 100 PRECEDING AND 100 FOLLOWING) AS avg_price_within_range FROM ProductPrices;","CREATE TABLE ProductPrices (product_id INT, category VARCHAR, price DECIMAL);","This query calculates the average price of products within the same category whose price is within a range of +/- 100 of the current product's price. RANGE BETWEEN defines the window based on value, not row count."
"List the top 5 highest-selling products for each product category, allowing for ties.","SELECT product_id, product_name, category, sales_amount FROM (SELECT product_id, product_name, category, sales_amount, DENSE_RANK() OVER (PARTITION BY category ORDER BY sales_amount DESC) AS rnk FROM Sales) AS ranked_sales WHERE rnk <= 5;","CREATE TABLE Sales (product_id INT, product_name VARCHAR, category VARCHAR, sales_amount DECIMAL);","This query uses DENSE_RANK() to assign ranks to products within each category based on sales amount. It then filters for ranks up to 5, including all products that tie for the 5th position."
Calculate the sales growth percentage compared to the previous year for each product.,"SELECT product_id, sale_year, total_sales, (total_sales - LAG(total_sales, 1) OVER (PARTITION BY product_id ORDER BY sale_year)) * 100.0 / LAG(total_sales, 1) OVER (PARTITION BY product_id ORDER BY sale_year) AS sales_growth_percentage FROM ProductSales WHERE LAG(total_sales, 1) OVER (PARTITION BY product_id ORDER BY sale_year) IS NOT NULL;","CREATE TABLE ProductSales (product_id INT, sale_year INT, total_sales DECIMAL);",This query calculates the year-over-year sales growth percentage for each product. It uses LAG() to retrieve the previous year's sales for comparison.
"For each user session, identify the first and last event timestamps.","SELECT session_id, user_id, event_timestamp, event_type, FIRST_VALUE(event_timestamp) OVER (PARTITION BY session_id ORDER BY event_timestamp) AS session_start, LAST_VALUE(event_timestamp) OVER (PARTITION BY session_id ORDER BY event_timestamp ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_end FROM UserSessions;","CREATE TABLE UserSessions (session_id INT, user_id INT, event_timestamp DATETIME, event_type VARCHAR);",This query uses FIRST_VALUE() to get the earliest event timestamp and LAST_VALUE() with an unbounded frame to get the latest event timestamp for each session.
Calculate the cumulative average of exam scores for each student over time.,"SELECT student_id, exam_date, score, AVG(score) OVER (PARTITION BY student_id ORDER BY exam_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_average_score FROM ExamResults;","CREATE TABLE ExamResults (student_id INT, exam_date DATE, score INT);","This query calculates a running average of exam scores for each student, where the average includes all exams taken up to the current exam date."
Rank employees by their performance score within each manager's team.,"SELECT employee_id, employee_name, manager_id, performance_score, RANK() OVER (PARTITION BY manager_id ORDER BY performance_score DESC) AS manager_team_rank FROM Employees;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, manager_id INT, performance_score INT);","This query ranks employees by their performance score, but the ranking is scoped to employees under the same manager. PARTITION BY manager_id creates these groups."
"For each day, find the maximum temperature recorded up to that day.","SELECT record_date, temperature, MAX(temperature) OVER (ORDER BY record_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_max_temperature FROM WeatherData;","CREATE TABLE WeatherData (record_date DATE, temperature DECIMAL);",This query calculates the highest temperature observed from the beginning of the data up to and including the current record_date. It uses MAX() with an unbounded preceding frame.
"For each product, find the lowest price it has been offered at up to the current date.","SELECT offer_id, product_id, offer_date, price, MIN(price) OVER (PARTITION BY product_id ORDER BY offer_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_min_price FROM ProductOfferings;","CREATE TABLE ProductOfferings (offer_id INT, product_id INT, offer_date DATE, price DECIMAL);",This query calculates the minimum price for each product encountered so far in its offering history. It's a running minimum within each product's data.
Find the 3rd highest product price within each category.,"SELECT product_id, product_name, category, price, NTH_VALUE(price, 3) OVER (PARTITION BY category ORDER BY price DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS third_highest_price_in_category FROM Products;","CREATE TABLE Products (product_id INT, product_name VARCHAR, category VARCHAR, price DECIMAL);","This query uses NTH_VALUE() to retrieve the 3rd highest price for products within each category, considering all prices in the category for the window."
"Calculate the running total of expenses for each project, categorized by department.","SELECT expense_id, project_id, department, expense_date, amount, SUM(amount) OVER (PARTITION BY department, project_id ORDER BY expense_date) AS running_project_total FROM ProjectExpenses;","CREATE TABLE ProjectExpenses (expense_id INT, project_id INT, department VARCHAR, expense_date DATE, amount DECIMAL);","This query calculates a running sum of expenses, but it partitions the data first by department and then by project_id, ensuring the cumulative sum is independent for each project within each department."
"For each user, calculate the number of days since their previous activity.","SELECT activity_id, user_id, activity_date, (activity_date - LAG(activity_date, 1) OVER (PARTITION BY user_id ORDER BY activity_date)) AS days_since_last_activity FROM UserActivities;","CREATE TABLE UserActivities (activity_id INT, user_id INT, activity_date DATE);","This query calculates the number of days between the current activity and the previous activity for each user. LAG retrieves the previous activity date, and the date subtraction directly yields days in many SQL dialects."
"Find all duplicate rows based on employee name and hire date, keeping only one instance.","SELECT employee_id, employee_name, hire_date, salary FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY employee_name, hire_date ORDER BY employee_id) as rn FROM Employees) AS subquery WHERE rn = 1;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, hire_date DATE, salary DECIMAL);","This query identifies and keeps only the first occurrence of rows that have identical employee_name and hire_date values. ROW_NUMBER() assigns a rank within duplicates, and rn = 1 selects the unique one."
Calculate the running total of sales for each region within each month.,"SELECT sale_id, region, sale_date, amount, SUM(amount) OVER (PARTITION BY region, EXTRACT(YEAR FROM sale_date), EXTRACT(MONTH FROM sale_date) ORDER BY sale_date) AS monthly_running_total FROM RegionalSales;","CREATE TABLE RegionalSales (sale_id INT, region VARCHAR, sale_date DATE, amount DECIMAL);","This query calculates a cumulative sum of sales for each region, but the sum resets at the beginning of each new month. EXTRACT(YEAR FROM sale_date) and EXTRACT(MONTH FROM sale_date) are used to partition by month and year."
Compare a product's current quarter sales to its next quarter's sales.,"SELECT product_id, sale_year, sale_quarter, total_sales, LEAD(total_sales, 1) OVER (PARTITION BY product_id ORDER BY sale_year, sale_quarter) AS next_quarter_sales FROM ProductQuarterlySales;","CREATE TABLE ProductQuarterlySales (product_id INT, sale_year INT, sale_quarter INT, total_sales DECIMAL);","This query uses LEAD() to retrieve the total sales for the subsequent quarter for each product, ordered by year and quarter. This helps in analyzing quarter-over-quarter trends."
Calculate the Z-score for each student's score within their class.,"SELECT student_id, class_id, score, (score - AVG(score) OVER (PARTITION BY class_id)) / STDDEV(score) OVER (PARTITION BY class_id) AS z_score FROM StudentScores;","CREATE TABLE StudentScores (student_id INT, class_id INT, score INT);",This query calculates the Z-score for each student's score relative to their class's average and standard deviation. It uses AVG() and STDDEV() as window functions partitioned by class.
"Calculate the average sales of the previous 3 days, not including the current day's sales.","SELECT sale_date, sales_amount, AVG(sales_amount) OVER (ORDER BY sale_date ROWS BETWEEN 3 PRECEDING AND 1 PRECEDING) AS prev_three_day_avg_sales FROM DailySales;","CREATE TABLE DailySales (sale_date DATE, sales_amount DECIMAL);",This query calculates the average sales amount over the three days immediately preceding the current sale_date. The ROWS BETWEEN 3 PRECEDING AND 1 PRECEDING frame clause excludes the current day.
"Rank employees first by department, then by salary (descending), and finally by hire date (ascending) for tie-breaking.","SELECT employee_id, employee_name, department, salary, hire_date, RANK() OVER (PARTITION BY department ORDER BY salary DESC, hire_date ASC) AS employee_rank FROM Employees;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL, hire_date DATE);","This query ranks employees within each department. The primary sort is by salary (descending), and if salaries are tied, hire_date (ascending) is used to break the tie, ensuring consistent ranking."
"For each customer, show their purchase amount and the amount of their next purchase, defaulting to 0 if no next purchase.","SELECT purchase_id, customer_id, purchase_date, amount, LEAD(amount, 1, 0) OVER (PARTITION BY customer_id ORDER BY purchase_date) AS next_purchase_amount FROM Purchases;","CREATE TABLE Purchases (purchase_id INT, customer_id INT, purchase_date DATE, amount DECIMAL);","This query uses LEAD() to fetch the amount of the next purchase for each customer. If there is no next purchase (i.e., it's their last purchase), it defaults to 0 instead of NULL due to the 1, 0 arguments."
Calculate the cumulative percentage of total sales for each product over time.,"SELECT product_id, sale_date, daily_sales, SUM(daily_sales) OVER (PARTITION BY product_id ORDER BY sale_date) * 100.0 / SUM(daily_sales) OVER (PARTITION BY product_id) AS cumulative_sales_percentage FROM ProductDailySales;","CREATE TABLE ProductDailySales (product_id INT, sale_date DATE, daily_sales DECIMAL);","This query calculates, for each product, the percentage of its total sales that have occurred up to a given date. It uses a running sum for the numerator and the total sum for the entire product's history as the denominator."
"For each user, identify events that occurred more than 24 hours after their previous event.","SELECT event_id, user_id, event_timestamp FROM (SELECT event_id, user_id, event_timestamp, LAG(event_timestamp, 1) OVER (PARTITION BY user_id ORDER BY event_timestamp) AS prev_event_timestamp FROM UserEvents) AS T WHERE JULIANDAY(event_timestamp) - JULIANDAY(prev_event_timestamp) > 1;","CREATE TABLE UserEvents (event_id INT, user_id INT, event_timestamp DATETIME);","This query identifies events that have a gap of more than 24 hours from the previous event for the same user. LAG() retrieves the previous event's timestamp, and JULIANDAY (or similar date difference function) calculates the days between them."
Calculate the running total of daily temperatures.,"SELECT record_date, temperature, SUM(temperature) OVER (ORDER BY record_date) AS running_total_temperature FROM DailyTemperatures;","CREATE TABLE DailyTemperatures (record_date DATE, temperature DECIMAL);","This query calculates a cumulative sum of daily temperatures, where each row shows the total temperature accumulated up to that specific date."
Find the highest paid employee in each department using QUALIFY.,"SELECT employee_id, employee_name, department, salary FROM Employees QUALIFY ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) = 1;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL);","This query efficiently finds the highest-paid employee per department using the QUALIFY clause, which filters the results of a window function directly."
Get the third sales order for each customer.,"SELECT order_id, customer_id, order_date, amount FROM (SELECT order_id, customer_id, order_date, amount, ROW_NUMBER() OVER (PARTITION BY customer_id ORDER BY order_date) AS rn FROM Orders) AS subquery WHERE rn = 3;","CREATE TABLE Orders (order_id INT, customer_id INT, order_date DATE, amount DECIMAL);",This query uses ROW_NUMBER() to assign a sequential number to each order for a given customer based on order date. It then filters to return only the third order (rn = 3) for each customer.
Calculate the average order value for each customer across all their orders.,"SELECT order_id, customer_id, order_date, amount, AVG(amount) OVER (PARTITION BY customer_id) AS customer_average_order_value FROM Orders;","CREATE TABLE Orders (order_id INT, customer_id INT, order_date DATE, amount DECIMAL);",This query uses AVG() as a window function to compute the average order amount for each customer across all their orders. The average is displayed for every order by that customer.
Identify the top 10% of products by sales amount.,"SELECT product_id, product_name, sales_amount, NTILE(10) OVER (ORDER BY sales_amount DESC) AS sales_percentile_group FROM Products WHERE NTILE(10) OVER (ORDER BY sales_amount DESC) = 1;","CREATE TABLE Products (product_id INT, product_name VARCHAR, sales_amount DECIMAL);",This query uses NTILE(10) to divide products into 10 sales groups (deciles) based on sales amount in descending order. It then filters to show only the products in the top decile (group 1).
"For each stock, calculate the percentage change from the previous day's closing price.","SELECT stock_symbol, trade_date, close_price, (close_price - LAG(close_price, 1) OVER (PARTITION BY stock_symbol ORDER BY trade_date)) * 100.0 / LAG(close_price, 1) OVER (PARTITION BY stock_symbol ORDER BY trade_date) AS daily_price_change_percent FROM StockPrices WHERE LAG(close_price, 1) OVER (PARTITION BY stock_symbol ORDER BY trade_date) IS NOT NULL;","CREATE TABLE StockPrices (stock_symbol VARCHAR, trade_date DATE, close_price DECIMAL);",This query calculates the daily percentage change in closing price for each stock. It uses LAG() to fetch the previous day's closing price for the calculation.
Show the employee's salary and the minimum and maximum salaries within their department.,"SELECT employee_id, employee_name, department, salary, MIN(salary) OVER (PARTITION BY department) AS min_dept_salary, MAX(salary) OVER (PARTITION BY department) AS max_dept_salary FROM Employees;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL);","This query uses MIN() and MAX() as window functions to display the lowest and highest salaries within each employee's department, alongside their own salary."
"For each event, identify the event that occurred immediately before and immediately after it for the same user.","SELECT event_id, user_id, event_timestamp, LAG(event_id) OVER (PARTITION BY user_id ORDER BY event_timestamp) AS prev_event_id, LEAD(event_id) OVER (PARTITION BY user_id ORDER BY event_timestamp) AS next_event_id FROM UserEvents;","CREATE TABLE UserEvents (event_id INT, user_id INT, event_timestamp DATETIME);","This query uses LAG() and LEAD() to retrieve the event_id of the immediately preceding and succeeding events for each user, based on their event timestamp."
Calculate the running average of sales over a 5-day period.,"SELECT sale_date, sales_amount, AVG(sales_amount) OVER (ORDER BY sale_date ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS five_day_running_average FROM DailySales;","CREATE TABLE DailySales (sale_date DATE, sales_amount DECIMAL);","This query computes a 5-day running average of sales. For each date, it averages the sales of the current day and the preceding four days."
"Assign a rank to products based on their quantity sold, handling ties, within each warehouse.","SELECT product_id, warehouse_id, quantity_sold, RANK() OVER (PARTITION BY warehouse_id ORDER BY quantity_sold DESC) AS product_rank_in_warehouse FROM ProductSales;","CREATE TABLE ProductSales (product_id INT, warehouse_id INT, quantity_sold INT);","This query ranks products by quantity sold within each warehouse. RANK() ensures that products with the same quantity sold receive the same rank, with the next rank skipped."
"For each employee, calculate their salary as a percentage of their department's total salary.","SELECT employee_id, employee_name, department, salary, salary * 100.0 / SUM(salary) OVER (PARTITION BY department) AS percent_of_dept_salary FROM Employees;","CREATE TABLE Employees (employee_id INT, employee_name VARCHAR, department VARCHAR, salary DECIMAL);",This query calculates each employee's salary as a percentage of the total salary for their respective department. SUM(salary) OVER (PARTITION BY department) computes the departmental total.
"Get the top 2 products by sales amount per region, including ties.","SELECT product_id, region, sales_amount FROM (SELECT product_id, region, sales_amount, DENSE_RANK() OVER (PARTITION BY region ORDER BY sales_amount DESC) AS rnk FROM RegionalSales) AS ranked_sales WHERE rnk <= 2;","CREATE TABLE RegionalSales (product_id INT, region VARCHAR, sales_amount DECIMAL);","This query retrieves the top 2 products by sales amount for each region. DENSE_RANK() handles ties by assigning the same rank to products with equal sales amounts, and no ranks are skipped."
Instruction,Query,Table Schema,Explanation
Find the names of all employees who earn more than the average salary of all employees.,SELECT Name FROM Employees WHERE Salary > (SELECT AVG(Salary) FROM Employees);,"Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), Salary DECIMAL(10, 2), DeptID INT)",The subquery calculates the overall average salary from the Employees table. The outer query then selects employee names whose individual salary is greater than this calculated average.
List the names of departments that have at least one employee.,SELECT DeptName FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.DeptID = D.DeptID);,"Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50)), Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), DeptID INT)","For each department, the subquery checks if there's any employee record that matches its DeptID. If such an employee exists, the department name is included in the result."
Retrieve the titles of books published after the average publication year of all books.,SELECT Title FROM Books WHERE PublishedYear > (SELECT AVG(PublishedYear) FROM Books);,"Books(BookID INT PRIMARY KEY, Title VARCHAR(100), AuthorID INT, PublishedYear INT)",The subquery computes the average publication year across all books. The outer query then filters for books published in years later than this average.
Show the names of customers who have placed orders with a total amount greater than $1000.,SELECT Name FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE TotalAmount > 1000);,"Customers(CustomerID INT PRIMARY KEY, Name VARCHAR(50)), Orders(OrderID INT PRIMARY KEY, CustomerID INT, TotalAmount DECIMAL(10, 2))",The subquery identifies CustomerIDs from the Orders table where the order amount exceeds 1000. The outer query then retrieves the names of these customers.
Find the names of students who are enrolled in the 'Computer Science' department's courses.,SELECT S.StudentName FROM Students S WHERE S.StudentID IN (SELECT E.StudentID FROM Enrollments E JOIN Courses C ON E.CourseID = C.CourseID WHERE C.Department = 'Computer Science');,"Students(StudentID INT PRIMARY KEY, StudentName VARCHAR(50)), Enrollments(EnrollmentID INT PRIMARY KEY, StudentID INT, CourseID INT), Courses(CourseID INT PRIMARY KEY, CourseName VARCHAR(100), Department VARCHAR(50))",The inner query first finds all StudentIDs from enrollments linked to courses in the 'Computer Science' department. The outer query then selects the names of these students.
List employees who work in the same department as 'Alice Smith'.,SELECT Name FROM Employees WHERE DeptID = (SELECT DeptID FROM Employees WHERE Name = 'Alice Smith') AND Name <> 'Alice Smith';,"Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), DeptID INT)",The subquery finds the DeptID of the employee named 'Alice Smith'. The outer query then selects all other employees (excluding 'Alice Smith' herself) who share that DeptID.
Get the product names that have never been part of an order.,SELECT ProductName FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.ProductID = P.ProductID);,"Products(ProductID INT PRIMARY KEY, ProductName VARCHAR(100)), Order_Items(OrderItemID INT PRIMARY KEY, OrderID INT, ProductID INT)","For each product, the subquery checks if there's any corresponding entry in the Order_Items table. If no such entry exists (meaning it's never been ordered), the product name is returned."
Display department names and the maximum salary within each department.,"SELECT D.DeptName, (SELECT MAX(E.Salary) FROM Employees E WHERE E.DeptID = D.DeptID) AS MaxSalaryInDept FROM Departments D;","Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50)), Employees(EmpID INT PRIMARY KEY, Salary DECIMAL(10, 2), DeptID INT)","For each department, the correlated subquery calculates the maximum salary among employees belonging to that specific department, and this value is displayed alongside the department name."
Retrieve the names of authors who have published books after 2010 and whose country is 'USA'.,SELECT AuthorName FROM Authors A WHERE A.AuthorID IN (SELECT B.AuthorID FROM Books B WHERE B.PublishedYear > 2010) AND A.Country = 'USA';,"Authors(AuthorID INT PRIMARY KEY, AuthorName VARCHAR(100), Country VARCHAR(50)), Books(BookID INT PRIMARY KEY, AuthorID INT, PublishedYear INT)","The subquery identifies AuthorIDs of books published after 2010. The outer query then filters these authors, keeping only those whose country is 'USA'."
Find employees who earn less than the minimum salary in the 'IT' department.,SELECT Name FROM Employees WHERE Salary < (SELECT MIN(Salary) FROM Employees WHERE DeptID = (SELECT DeptID FROM Departments WHERE DeptName = 'IT'));,"Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), Salary DECIMAL(10, 2), DeptID INT), Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50))","This query uses a nested subquery. The innermost subquery finds the DeptID of the 'IT' department. The middle subquery then finds the minimum salary in that department. Finally, the outer query selects employees earning less than this minimum."
Show products whose price is higher than the average price of products in the 'Electronics' category.,SELECT ProductName FROM Products WHERE Price > (SELECT AVG(Price) FROM Products WHERE Category = 'Electronics');,"Products(ProductID INT PRIMARY KEY, ProductName VARCHAR(100), Price DECIMAL(10, 2), Category VARCHAR(50))",The subquery computes the average price specifically for products categorized as 'Electronics'. The outer query then selects products that have a higher price than this average.
List customers who have placed more than 5 orders.,SELECT C.Name FROM Customers C JOIN (SELECT CustomerID FROM Orders GROUP BY CustomerID HAVING COUNT(OrderID) > 5) AS HighVolumeCustomers ON C.CustomerID = HighVolumeCustomers.CustomerID;,"Customers(CustomerID INT PRIMARY KEY, Name VARCHAR(50)), Orders(OrderID INT PRIMARY KEY, CustomerID INT)",The subquery creates a derived table of CustomerIDs who have placed more than 5 orders. The outer query then joins this derived table with the Customers table to retrieve their names.
Retrieve course names that have no students currently enrolled.,SELECT CourseName FROM Courses C WHERE NOT EXISTS (SELECT 1 FROM Enrollments E WHERE E.CourseID = C.CourseID);,"Courses(CourseID INT PRIMARY KEY, CourseName VARCHAR(100)), Enrollments(EnrollmentID INT PRIMARY KEY, CourseID INT)","For each course, the subquery checks if there's any enrollment record matching its CourseID. If no such enrollment exists, the course name is included in the result."
Find the employee with the highest salary in each department.,"SELECT E.Name, E.Salary, D.DeptName FROM Employees E JOIN Departments D ON E.DeptID = D.DeptID WHERE E.Salary = (SELECT MAX(Salary) FROM Employees WHERE DeptID = E.DeptID);","Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), Salary DECIMAL(10, 2), DeptID INT), Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50))","This is a correlated subquery. For each employee, the subquery finds the maximum salary within that employee's department. The outer query then selects employees whose salary matches this departmental maximum."
Show authors who have published books in more than one genre.,SELECT A.AuthorName FROM Authors A WHERE A.AuthorID IN (SELECT AuthorID FROM Books GROUP BY AuthorID HAVING COUNT(DISTINCT Genre) > 1);,"Authors(AuthorID INT PRIMARY KEY, AuthorName VARCHAR(100)), Books(BookID INT PRIMARY KEY, AuthorID INT, Genre VARCHAR(50))",The subquery identifies AuthorIDs that have published books in more than one distinct genre. The outer query then retrieves the names of these authors.
"List the total number of orders for each customer, but only for customers who have spent more than $500 in total.","SELECT C.Name, (SELECT SUM(TotalAmount) FROM Orders O WHERE O.CustomerID = C.CustomerID) AS TotalSpent FROM Customers C WHERE C.CustomerID IN (SELECT CustomerID FROM Orders GROUP BY CustomerID HAVING SUM(TotalAmount) > 500);","Customers(CustomerID INT PRIMARY KEY, Name VARCHAR(50)), Orders(OrderID INT PRIMARY KEY, CustomerID INT, TotalAmount DECIMAL(10, 2))",The outer query selects customer names and their total spending (calculated by a correlated subquery). The `WHERE` clause uses another subquery to filter only customers whose total spending exceeds $500.
Find students whose birthdate is earlier than the birthdate of any student majoring in 'Physics'.,SELECT StudentName FROM Students WHERE BirthDate < ALL (SELECT BirthDate FROM Students WHERE Major = 'Physics');,"Students(StudentID INT PRIMARY KEY, StudentName VARCHAR(50), Major VARCHAR(50), BirthDate DATE)",The subquery returns all birthdates of students majoring in 'Physics'. The outer query selects students whose birthdate is earlier than the earliest birthdate among 'Physics' majors.
Retrieve projects that have no employees assigned to them.,SELECT ProjectName FROM Projects P WHERE NOT EXISTS (SELECT 1 FROM Employee_Projects EP WHERE EP.ProjectID = P.ProjectID);,"Projects(ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100)), Employee_Projects(EmpID INT, ProjectID INT, PRIMARY KEY (EmpID, ProjectID))","For each project, the subquery checks if there's any corresponding entry in the Employee_Projects table. If no such entry exists, the project name is returned."
"Show product categories and the number of products in each category, but only for categories with more than 10 products.","SELECT P.Category, COUNT(P.ProductID) AS ProductCount FROM Products P WHERE P.Category IN (SELECT Category FROM Products GROUP BY Category HAVING COUNT(ProductID) > 10) GROUP BY P.Category;","Products(ProductID INT PRIMARY KEY, ProductName VARCHAR(100), Category VARCHAR(50))",The subquery identifies categories that have more than 10 products. The outer query then counts products within these specific categories.
Get the names of employees who have a salary equal to the maximum salary in their own department.,SELECT E.Name FROM Employees E WHERE E.Salary = (SELECT MAX(Salary) FROM Employees WHERE DeptID = E.DeptID);,"Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), Salary DECIMAL(10, 2), DeptID INT)","This is a correlated subquery. For each employee, the subquery calculates the maximum salary in that employee's department. The outer query then checks if the employee's salary matches this maximum."
Find customers who have ordered 'Laptop' and 'Mouse' in separate orders.,SELECT C.Name FROM Customers C WHERE C.CustomerID IN (SELECT O.CustomerID FROM Orders O JOIN Order_Items OI ON O.OrderID = OI.OrderID JOIN Products P ON OI.ProductID = P.ProductID WHERE P.ProductName = 'Laptop') AND C.CustomerID IN (SELECT O.CustomerID FROM Orders O JOIN Order_Items OI ON O.OrderID = OI.OrderID JOIN Products P ON OI.ProductID = P.ProductID WHERE P.ProductName = 'Mouse');,"Customers(CustomerID INT PRIMARY KEY, Name VARCHAR(50)), Orders(OrderID INT PRIMARY KEY, CustomerID INT), Order_Items(OrderItemID INT PRIMARY KEY, OrderID INT, ProductID INT), Products(ProductID INT PRIMARY KEY, ProductName VARCHAR(100))","This query uses two separate subqueries joined by `AND`. The first subquery finds customers who ordered 'Laptop', and the second finds customers who ordered 'Mouse'. The outer query returns customers present in both lists."
List students who have a grade of 'A' in any course.,SELECT StudentName FROM Students WHERE StudentID IN (SELECT StudentID FROM Enrollments WHERE Grade = 'A');,"Students(StudentID INT PRIMARY KEY, StudentName VARCHAR(50)), Enrollments(EnrollmentID INT PRIMARY KEY, StudentID INT, Grade VARCHAR(2))",The subquery retrieves the StudentIDs of all students who have achieved a grade of 'A'. The outer query then selects the names corresponding to these StudentIDs.
Get the names of employees who are the only employee in their department.,SELECT Name FROM Employees E WHERE (SELECT COUNT(*) FROM Employees WHERE DeptID = E.DeptID) = 1;,"Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), DeptID INT)","This is a correlated subquery. For each employee, the subquery counts the total number of employees in their department. The outer query selects employees for whom this count is exactly one."
Show departments where the average salary is above the average salary of the 'HR' department.,SELECT D.DeptName FROM Departments D JOIN Employees E ON D.DeptID = E.DeptID GROUP BY D.DeptName HAVING AVG(E.Salary) > (SELECT AVG(Salary) FROM Employees WHERE DeptID = (SELECT DeptID FROM Departments WHERE DeptName = 'HR'));,"Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50)), Employees(EmpID INT PRIMARY KEY, Salary DECIMAL(10, 2), DeptID INT)",The innermost subquery finds the DeptID for 'HR'. The middle subquery calculates the average salary for the 'HR' department. The outer query then groups departments by name and filters them using `HAVING` based on whether their average salary exceeds the 'HR' department's average.
Retrieve the titles of books published by authors from 'UK'.,SELECT Title FROM Books WHERE AuthorID IN (SELECT AuthorID FROM Authors WHERE Country = 'UK');,"Books(BookID INT PRIMARY KEY, Title VARCHAR(100), AuthorID INT), Authors(AuthorID INT PRIMARY KEY, Country VARCHAR(50))",The subquery first finds the AuthorIDs of authors from the 'UK'. The outer query then selects the titles of books written by these identified authors.
Find customers who have placed an order on the same date as customer 'C001'.,SELECT DISTINCT C.Name FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID WHERE O.OrderDate IN (SELECT OrderDate FROM Orders WHERE CustomerID = 'C001') AND C.CustomerID <> 'C001';,"Customers(CustomerID VARCHAR(10) PRIMARY KEY, Name VARCHAR(50)), Orders(OrderID INT PRIMARY KEY, CustomerID VARCHAR(10), OrderDate DATE)",The subquery finds all order dates associated with customer 'C001'. The outer query then selects distinct names of other customers who also placed orders on any of those dates.
List students who have taken all courses offered by the 'Mathematics' department.,SELECT S.StudentName FROM Students S WHERE NOT EXISTS (SELECT C.CourseID FROM Courses C WHERE C.Department = 'Mathematics' EXCEPT SELECT E.CourseID FROM Enrollments E WHERE E.StudentID = S.StudentID);,"Students(StudentID INT PRIMARY KEY, StudentName VARCHAR(50)), Courses(CourseID INT PRIMARY KEY, Department VARCHAR(50)), Enrollments(EnrollmentID INT PRIMARY KEY, StudentID INT, CourseID INT)",This query uses `NOT EXISTS` with `EXCEPT` (or `MINUS` in some SQL dialects) to find students who haven't missed any 'Mathematics' courses. The inner subquery identifies any 'Mathematics' courses not taken by the current student.
Show the average salary of employees in departments that have more than 5 employees.,"SELECT D.DeptName, AVG(E.Salary) AS AverageSalary FROM Departments D JOIN Employees E ON D.DeptID = E.DeptID WHERE D.DeptID IN (SELECT DeptID FROM Employees GROUP BY DeptID HAVING COUNT(EmpID) > 5) GROUP BY D.DeptName;","Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50)), Employees(EmpID INT PRIMARY KEY, Salary DECIMAL(10, 2), DeptID INT)",The subquery identifies DeptIDs that have more than 5 employees. The outer query then calculates the average salary for employees within these selected departments.
Get products whose price is lower than the lowest priced product in the 'Books' category.,SELECT ProductName FROM Products WHERE Price < (SELECT MIN(Price) FROM Products WHERE Category = 'Books');,"Products(ProductID INT PRIMARY KEY, ProductName VARCHAR(100), Price DECIMAL(10, 2), Category VARCHAR(50))",The subquery finds the minimum price among products in the 'Books' category. The outer query then selects products with a price strictly less than this minimum.
Find employees who are paid more than at least one employee in the 'Marketing' department.,SELECT Name FROM Employees WHERE Salary > ANY (SELECT Salary FROM Employees WHERE DeptID = (SELECT DeptID FROM Departments WHERE DeptName = 'Marketing'));,"Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), Salary DECIMAL(10, 2), DeptID INT), Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50))","The subquery retrieves all salaries from the 'Marketing' department. The outer query then selects employees whose salary is greater than any salary in that list (i.e., greater than the minimum salary in 'Marketing')."
List the titles of books that have the same author as 'The Great Gatsby'.,SELECT Title FROM Books WHERE AuthorID = (SELECT AuthorID FROM Books WHERE Title = 'The Great Gatsby') AND Title <> 'The Great Gatsby';,"Books(BookID INT PRIMARY KEY, Title VARCHAR(100), AuthorID INT)",The subquery finds the AuthorID of the book titled 'The Great Gatsby'. The outer query then selects titles of other books written by the same author.
Show customers who have ordered products from at least two different categories.,SELECT C.Name FROM Customers C WHERE C.CustomerID IN (SELECT O.CustomerID FROM Orders O JOIN Order_Items OI ON O.OrderID = OI.OrderID JOIN Products P ON OI.ProductID = P.ProductID GROUP BY O.CustomerID HAVING COUNT(DISTINCT P.Category) >= 2);,"Customers(CustomerID INT PRIMARY KEY, Name VARCHAR(50)), Orders(OrderID INT PRIMARY KEY, CustomerID INT), Order_Items(OrderItemID INT PRIMARY KEY, OrderID INT, ProductID INT), Products(ProductID INT PRIMARY KEY, Category VARCHAR(50))",The subquery identifies CustomerIDs who have ordered products spanning two or more distinct categories. The outer query then retrieves the names of these customers.
Get the names of departments that have an average employee salary greater than $70000.,SELECT DeptName FROM Departments D WHERE (SELECT AVG(E.Salary) FROM Employees E WHERE E.DeptID = D.DeptID) > 70000;,"Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50)), Employees(EmpID INT PRIMARY KEY, Salary DECIMAL(10, 2), DeptID INT)","For each department, the correlated subquery calculates the average salary of its employees. The outer query then filters departments whose average salary exceeds $70000."
Find students whose major is the same as the major of student 'John Doe'.,SELECT StudentName FROM Students WHERE Major = (SELECT Major FROM Students WHERE StudentName = 'John Doe') AND StudentName <> 'John Doe';,"Students(StudentID INT PRIMARY KEY, StudentName VARCHAR(50), Major VARCHAR(50))",The subquery finds the major of the student named 'John Doe'. The outer query then selects the names of other students who share the same major.
Retrieve projects that have more hours worked on them than the 'Website Redesign' project.,"SELECT ProjectName FROM Projects P JOIN Employee_Projects EP ON P.ProjectID = EP.ProjectID GROUP BY P.ProjectID, P.ProjectName HAVING SUM(EP.HoursWorked) > (SELECT SUM(HoursWorked) FROM Employee_Projects WHERE ProjectID = (SELECT ProjectID FROM Projects WHERE ProjectName = 'Website Redesign'));","Projects(ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100)), Employee_Projects(EmpID INT, ProjectID INT, HoursWorked INT)",This query uses nested subqueries. The innermost subquery finds the ProjectID for 'Website Redesign'. The middle subquery sums hours for that project. The outer query then sums hours for all projects and filters based on whether their total hours exceed those of 'Website Redesign'.
"Show employees who have worked on at least one project with a budget over $1,000,000.",SELECT E.Name FROM Employees E WHERE E.EmpID IN (SELECT EP.EmpID FROM Employee_Projects EP JOIN Projects P ON EP.ProjectID = P.ProjectID WHERE P.Budget > 1000000);,"Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50)), Employee_Projects(EmpID INT, ProjectID INT), Projects(ProjectID INT PRIMARY KEY, Budget DECIMAL(12, 2))","The subquery identifies EmpIDs associated with projects that have a budget exceeding $1,000,000. The outer query then retrieves the names of these employees."
Get the names of customers who have not placed any orders in 2023.,SELECT Name FROM Customers C WHERE C.CustomerID NOT IN (SELECT CustomerID FROM Orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-12-31');,"Customers(CustomerID INT PRIMARY KEY, Name VARCHAR(50)), Orders(OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE)",The subquery finds CustomerIDs who placed at least one order in 2023. The outer query then selects names of customers whose CustomerID is NOT in this list.
List courses that have more credits than the 'Database Systems' course.,SELECT CourseName FROM Courses WHERE Credits > (SELECT Credits FROM Courses WHERE CourseName = 'Database Systems');,"Courses(CourseID INT PRIMARY KEY, CourseName VARCHAR(100), Credits INT)",The subquery finds the number of credits for the 'Database Systems' course. The outer query then selects courses that have more credits than this value.
Find employees whose salary is greater than the average salary of their department.,"SELECT E.Name, E.Salary, D.DeptName FROM Employees E JOIN Departments D ON E.DeptID = D.DeptID WHERE E.Salary > (SELECT AVG(Salary) FROM Employees WHERE DeptID = E.DeptID);","Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), Salary DECIMAL(10, 2), DeptID INT), Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50))","This is a correlated subquery. For each employee, the subquery calculates the average salary for their specific department. The outer query then selects employees whose salary is strictly greater than this departmental average."
"Show the number of books published by each author, but only for authors with more than 3 books.","SELECT A.AuthorName, (SELECT COUNT(B.BookID) FROM Books B WHERE B.AuthorID = A.AuthorID) AS NumberOfBooks FROM Authors A WHERE A.AuthorID IN (SELECT AuthorID FROM Books GROUP BY AuthorID HAVING COUNT(BookID) > 3);","Authors(AuthorID INT PRIMARY KEY, AuthorName VARCHAR(100)), Books(BookID INT PRIMARY KEY, AuthorID INT)","The `WHERE` clause's subquery identifies AuthorIDs who have published more than 3 books. The outer query then, for each of these authors, uses a correlated subquery to count their total books."
Retrieve employees whose salary is not the lowest in their department.,SELECT Name FROM Employees E WHERE E.Salary > (SELECT MIN(Salary) FROM Employees WHERE DeptID = E.DeptID);,"Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), Salary DECIMAL(10, 2), DeptID INT)","This correlated subquery finds the minimum salary for each employee's department. The outer query then selects employees whose salary is greater than this departmental minimum, meaning they are not the lowest paid."
List students who are not enrolled in any course.,SELECT StudentName FROM Students S WHERE NOT EXISTS (SELECT 1 FROM Enrollments E WHERE E.StudentID = S.StudentID);,"Students(StudentID INT PRIMARY KEY, StudentName VARCHAR(50)), Enrollments(EnrollmentID INT PRIMARY KEY, StudentID INT)","For each student, the subquery checks if there's any enrollment record matching their StudentID. If no such enrollment exists, the student name is returned."
Get the top 3 highest paid employees.,"SELECT T.Name, T.Salary FROM (SELECT Name, Salary FROM Employees ORDER BY Salary DESC) AS T LIMIT 3;","Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), Salary DECIMAL(10, 2))",The subquery creates a derived table `T` by sorting all employees by salary in descending order. The outer query then selects the top 3 rows from this derived table.
Find customers who have placed at least one order and whose total order amount is less than the average total order amount of all customers.,"SELECT C.Name FROM Customers C JOIN (SELECT CustomerID, SUM(TotalAmount) AS TotalSpent FROM Orders GROUP BY CustomerID) AS CustomerTotals ON C.CustomerID = CustomerTotals.CustomerID WHERE CustomerTotals.TotalSpent < (SELECT AVG(TotalAmount) FROM Orders);","Customers(CustomerID INT PRIMARY KEY, Name VARCHAR(50)), Orders(OrderID INT PRIMARY KEY, CustomerID INT, TotalAmount DECIMAL(10, 2))","The first subquery calculates the total spending for each customer, forming a derived table. The second subquery calculates the overall average order amount. The outer query then joins the customer details with their total spending and filters based on whether their total spending is less than the overall average."
List products that have been ordered in quantities greater than the average quantity for that specific product.,SELECT DISTINCT P.ProductName FROM Products P JOIN Order_Items OI ON P.ProductID = OI.ProductID WHERE OI.Quantity > (SELECT AVG(Quantity) FROM Order_Items WHERE ProductID = OI.ProductID);,"Products(ProductID INT PRIMARY KEY, ProductName VARCHAR(100)), Order_Items(OrderItemID INT PRIMARY KEY, ProductID INT, Quantity INT)","For each order item, the correlated subquery calculates the average quantity ordered for that specific product across all orders. The outer query then selects distinct product names where the current order item's quantity is greater than its own product's average ordered quantity."
"Find departments where all employees earn more than $50,000.",SELECT DeptName FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.DeptID = D.DeptID AND E.Salary <= 50000);,"Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50)), Employees(EmpID INT PRIMARY KEY, Salary DECIMAL(10, 2), DeptID INT)","For each department, the subquery checks if there's any employee who earns $50,000 or less. If no such employee exists (meaning all earn more), the department name is included."
Show the number of students enrolled in courses with more than 3 credits.,SELECT COUNT(DISTINCT E.StudentID) AS NumberOfStudents FROM Enrollments E WHERE E.CourseID IN (SELECT CourseID FROM Courses WHERE Credits > 3);,"Enrollments(EnrollmentID INT PRIMARY KEY, StudentID INT, CourseID INT), Courses(CourseID INT PRIMARY KEY, Credits INT)",The subquery identifies CourseIDs that have more than 3 credits. The outer query then counts the distinct StudentIDs who are enrolled in any of these identified courses.
Get the name of the department with the highest average salary.,SELECT D.DeptName FROM Departments D WHERE D.DeptID = (SELECT DeptID FROM Employees GROUP BY DeptID ORDER BY AVG(Salary) DESC LIMIT 1);,"Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50)), Employees(EmpID INT PRIMARY KEY, Salary DECIMAL(10, 2), DeptID INT)",The subquery identifies the DeptID that has the highest average salary. The outer query then retrieves the name of this specific department.
Find customers who have placed orders on every date that customer 'C002' placed an order.,SELECT C.Name FROM Customers C WHERE NOT EXISTS (SELECT O1.OrderDate FROM Orders O1 WHERE O1.CustomerID = 'C002' EXCEPT SELECT O2.OrderDate FROM Orders O2 WHERE O2.CustomerID = C.CustomerID);,"Customers(CustomerID VARCHAR(10) PRIMARY KEY, Name VARCHAR(50)), Orders(OrderID INT PRIMARY KEY, CustomerID VARCHAR(10), OrderDate DATE)","This query uses a 'double-negation' pattern. The inner subquery identifies any order dates of customer 'C002' that are NOT present in the orders of the current customer (`C.CustomerID`). If no such dates are found (meaning the current customer has all of C002's order dates), the customer's name is returned."
Show products that have a price greater than any product in the 'Food' category.,SELECT ProductName FROM Products WHERE Price > ANY (SELECT Price FROM Products WHERE Category = 'Food');,"Products(ProductID INT PRIMARY KEY, ProductName VARCHAR(100), Price DECIMAL(10, 2), Category VARCHAR(50))","The subquery returns all prices for 'Food' products. The outer query selects products whose price is greater than any price in that list (i.e., greater than the minimum price in the 'Food' category)."
List employees who work in departments located in 'New York'.,SELECT E.Name FROM Employees E WHERE E.DeptID IN (SELECT DeptID FROM Departments WHERE Location = 'New York');,"Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), DeptID INT), Departments(DeptID INT PRIMARY KEY, Location VARCHAR(50))",The subquery retrieves the DeptIDs of departments located in 'New York'. The outer query then selects the names of employees whose DeptID matches any of these.
Get the titles of books published by authors who have published more than 5 books.,SELECT B.Title FROM Books B WHERE B.AuthorID IN (SELECT AuthorID FROM Books GROUP BY AuthorID HAVING COUNT(BookID) > 5);,"Books(BookID INT PRIMARY KEY, Title VARCHAR(100), AuthorID INT)",The subquery identifies AuthorIDs who have published more than 5 books. The outer query then selects the titles of all books written by these authors.
Find students who have not achieved a grade of 'F' in any course.,SELECT StudentName FROM Students S WHERE S.StudentID NOT IN (SELECT StudentID FROM Enrollments WHERE Grade = 'F');,"Students(StudentID INT PRIMARY KEY, StudentName VARCHAR(50)), Enrollments(EnrollmentID INT PRIMARY KEY, StudentID INT, Grade VARCHAR(2))",The subquery identifies StudentIDs who have received a grade of 'F'. The outer query then selects the names of students whose StudentID is not found in this list.
Show the average project budget for projects that have at least one employee assigned.,SELECT AVG(P.Budget) FROM Projects P WHERE EXISTS (SELECT 1 FROM Employee_Projects EP WHERE EP.ProjectID = P.ProjectID);,"Projects(ProjectID INT PRIMARY KEY, Budget DECIMAL(12, 2)), Employee_Projects(EmpID INT, ProjectID INT)",The subquery checks for the existence of an employee assignment for each project. The outer query then calculates the average budget only for those projects that have at least one employee assigned.
Retrieve employees whose salary is in the top 10% of all salaries.,"SELECT Name, Salary FROM Employees WHERE Salary >= (SELECT MIN(Salary) FROM (SELECT Salary FROM Employees ORDER BY Salary DESC LIMIT (SELECT CEIL(COUNT(*) * 0.1) FROM Employees)) AS TopSalaries);","Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), Salary DECIMAL(10, 2))","This query uses nested subqueries to find the threshold for the top 10% of salaries. The innermost subquery calculates 10% of the total employee count. The next subquery gets the salaries of the top 10% employees. The outermost subquery then finds the minimum salary within this top 10% group, and the main query selects employees whose salary is greater than or equal to this threshold."
List customers whose city is the same as customer 'Alice Johnson'.,SELECT Name FROM Customers WHERE City = (SELECT City FROM Customers WHERE Name = 'Alice Johnson') AND Name <> 'Alice Johnson';,"Customers(CustomerID INT PRIMARY KEY, Name VARCHAR(50), City VARCHAR(50))",The subquery finds the city of the customer named 'Alice Johnson'. The outer query then selects the names of other customers who reside in the same city.
Get products that have been ordered more times than 'Product X'.,SELECT P.ProductName FROM Products P JOIN Order_Items OI ON P.ProductID = OI.ProductID GROUP BY P.ProductName HAVING COUNT(OI.OrderID) > (SELECT COUNT(OI2.OrderID) FROM Order_Items OI2 JOIN Products P2 ON OI2.ProductID = P2.ProductID WHERE P2.ProductName = 'Product X');,"Products(ProductID INT PRIMARY KEY, ProductName VARCHAR(100)), Order_Items(OrderItemID INT PRIMARY KEY, OrderID INT, ProductID INT)",The subquery calculates the total number of times 'Product X' has been ordered. The outer query then groups products by name and filters them using `HAVING` to include only those products that have a higher total order count.
Find students who have a higher grade point average (GPA) than the average GPA of all students.,"SELECT S.StudentName, (SELECT AVG(E.Grade) FROM Enrollments E WHERE E.StudentID = S.StudentID) AS StudentGPA FROM Students S WHERE (SELECT AVG(E.Grade) FROM Enrollments E WHERE E.StudentID = S.StudentID) > (SELECT AVG(Grade) FROM Enrollments);","Students(StudentID INT PRIMARY KEY, StudentName VARCHAR(50)), Enrollments(EnrollmentID INT PRIMARY KEY, StudentID INT, Grade DECIMAL(3,2))",This query uses correlated subqueries for the student's GPA and a non-correlated subquery for the overall average GPA. The `WHERE` clause filters students whose calculated GPA is greater than the overall average.
Retrieve the authors who have not published any books in the 'Fantasy' genre.,SELECT AuthorName FROM Authors A WHERE NOT EXISTS (SELECT 1 FROM Books B WHERE B.AuthorID = A.AuthorID AND B.Genre = 'Fantasy');,"Authors(AuthorID INT PRIMARY KEY, AuthorName VARCHAR(100)), Books(BookID INT PRIMARY KEY, AuthorID INT, Genre VARCHAR(50))","For each author, the subquery checks if they have published any book in the 'Fantasy' genre. If no such book exists, the author's name is returned."
"Show departments that have an average salary less than $40,000 but more than $30,000.",SELECT DeptName FROM Departments D WHERE (SELECT AVG(E.Salary) FROM Employees E WHERE E.DeptID = D.DeptID) < 40000 AND (SELECT AVG(E.Salary) FROM Employees E WHERE E.DeptID = D.DeptID) > 30000;,"Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50)), Employees(EmpID INT PRIMARY KEY, Salary DECIMAL(10, 2), DeptID INT)","For each department, a correlated subquery calculates its average employee salary. The outer query then filters departments whose average salary falls within the specified range (between $30,000 and $40,000)."
Get the titles of books that have a price lower than the price of 'The Catcher in the Rye'.,SELECT Title FROM Books WHERE Price < (SELECT Price FROM Books WHERE Title = 'The Catcher in the Rye');,"Books(BookID INT PRIMARY KEY, Title VARCHAR(100), Price DECIMAL(6, 2))",The subquery finds the price of the book titled 'The Catcher in the Rye'. The outer query then selects titles of books whose price is less than this specific value.
Find employees who joined after the last employee in the 'HR' department.,SELECT Name FROM Employees WHERE HireDate > (SELECT MAX(HireDate) FROM Employees WHERE DeptID = (SELECT DeptID FROM Departments WHERE DeptName = 'HR'));,"Employees(EmpID INT PRIMARY KEY, Name VARCHAR(50), HireDate DATE, DeptID INT), Departments(DeptID INT PRIMARY KEY, DeptName VARCHAR(50))","This query uses nested subqueries. The innermost subquery finds the DeptID of the 'HR' department. The middle subquery then finds the latest `HireDate` in that department. Finally, the outer query selects employees whose `HireDate` is after this date."
"List customer names and their total order amounts, but only for customers whose total order amount is among the top 5.","SELECT C.Name, T.TotalSpent FROM Customers C JOIN (SELECT CustomerID, SUM(TotalAmount) AS TotalSpent FROM Orders GROUP BY CustomerID ORDER BY SUM(TotalAmount) DESC LIMIT 5) AS T ON C.CustomerID = T.CustomerID;","Customers(CustomerID INT PRIMARY KEY, Name VARCHAR(50)), Orders(OrderID INT PRIMARY KEY, CustomerID INT, TotalAmount DECIMAL(10, 2))","The subquery calculates the total spending for each customer, orders them by spending, and selects the top 5. This forms a derived table `T`. The outer query then joins this derived table with the Customers table to retrieve the names and their total spending."
Show products that have never been ordered with a quantity greater than 5.,SELECT ProductName FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.ProductID = P.ProductID AND OI.Quantity > 5);,"Products(ProductID INT PRIMARY KEY, ProductName VARCHAR(100)), Order_Items(OrderItemID INT PRIMARY KEY, ProductID INT, Quantity INT)","For each product, the subquery checks if there's any order item for that product with a quantity greater than 5. If no such order item exists, the product name is returned."
Find the average salary of employees who are assigned to at least one project.,SELECT AVG(Salary) FROM Employees E WHERE EXISTS (SELECT 1 FROM Employee_Projects EP WHERE EP.EmpID = E.EmpID);,"Employees(EmpID INT PRIMARY KEY, Salary DECIMAL(10, 2)), Employee_Projects(EmpID INT, ProjectID INT)","For each employee, the subquery checks if they are listed in the Employee_Projects table. The outer query then calculates the average salary only for those employees who are assigned to at least one project."
List students who have taken all courses offered by their major department.,SELECT S.StudentName FROM Students S WHERE NOT EXISTS (SELECT C.CourseID FROM Courses C WHERE C.Department = S.Major EXCEPT SELECT E.CourseID FROM Enrollments E WHERE E.StudentID = S.StudentID);,"Students(StudentID INT PRIMARY KEY, StudentName VARCHAR(50), Major VARCHAR(50)), Courses(CourseID INT PRIMARY KEY, Department VARCHAR(50)), Enrollments(EnrollmentID INT PRIMARY KEY, StudentID INT, CourseID INT)","This is a correlated subquery using `NOT EXISTS` and `EXCEPT`. For each student, the subquery identifies courses offered by their major department that the student has NOT enrolled in. If this set is empty (meaning they've taken all courses), the student's name is returned."
Get the titles of books published in the same year as '1984'.,SELECT Title FROM Books WHERE PublishedYear = (SELECT PublishedYear FROM Books WHERE Title = '1984') AND Title <> '1984';,"Books(BookID INT PRIMARY KEY, Title VARCHAR(100), PublishedYear INT)",The subquery finds the publication year of the book '1984'. The outer query then selects titles of other books that were published in the same year.
Instruction,Query,Table Schema,Explanation
"List the names of employees from the 'Sales' department and employees hired after '2020-01-01', ensuring no duplicates.",SELECT name FROM Employees WHERE department = 'Sales' UNION SELECT name FROM Employees WHERE hire_date > '2020-01-01';,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))",This query combines names from two different conditions on the Employees table. UNION ensures that only distinct names appear in the final result.
"Get all names of employees from the 'HR' department and employees earning more than 60000, including any duplicates.",SELECT name FROM Employees WHERE department = 'HR' UNION ALL SELECT name FROM Employees WHERE salary > 60000;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query combines names from two different conditions on the Employees table. UNION ALL includes all matching rows, even if they are duplicates."
Find the names of employees who are both in the 'IT' department and have a salary less than 70000.,SELECT name FROM Employees WHERE department = 'IT' INTERSECT SELECT name FROM Employees WHERE salary < 70000;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))",This query finds names that exist in both sets of results: employees in 'IT' and employees with salary less than 70000. INTERSECT returns only common rows.
List the names of all employees except those who joined before '2019-01-01'.,SELECT name FROM Employees EXCEPT SELECT name FROM Employees WHERE hire_date < '2019-01-01';,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))",This query returns names from the first set (all employees) that are not present in the second set (employees hired before '2019-01-01').
Get a distinct list of all cities where either a customer or a supplier is located.,SELECT city FROM Customers UNION SELECT city FROM Suppliers;,"Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Suppliers (id INT, name VARCHAR(255), city VARCHAR(255), contact_person VARCHAR(255))","This query combines the city column from the Customers table with the city column from the Suppliers table, returning only unique city names."
"List all names and cities of both customers and suppliers, including duplicates.","SELECT name, city FROM Customers UNION ALL SELECT name, city FROM Suppliers;","Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Suppliers (id INT, name VARCHAR(255), city VARCHAR(255), contact_person VARCHAR(255))","This query combines the name and city columns from both Customers and Suppliers tables. UNION ALL retains all rows, including duplicates if a name-city pair exists in both tables or multiple times within one."
Find the cities that have both customers and suppliers.,SELECT city FROM Customers INTERSECT SELECT city FROM Suppliers;,"Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Suppliers (id INT, name VARCHAR(255), city VARCHAR(255), contact_person VARCHAR(255))",This query identifies cities that appear in both the Customers table's city list and the Suppliers table's city list.
List cities where customers are located but no suppliers are.,SELECT city FROM Customers EXCEPT SELECT city FROM Suppliers;,"Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Suppliers (id INT, name VARCHAR(255), city VARCHAR(255), contact_person VARCHAR(255))",This query returns cities found in the Customers table but not in the Suppliers table.
"Combine the names of employees earning more than 75000 with those in the 'Marketing' department, ordered alphabetically, removing duplicates.",SELECT name FROM Employees WHERE salary > 75000 UNION SELECT name FROM Employees WHERE department = 'Marketing' ORDER BY name;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query combines names from two filtered sets, removes duplicates using UNION, and then orders the final combined result by name."
"Get all email addresses of active users and registered users, including duplicates, sorted by email.",SELECT email FROM RegisteredUsers UNION ALL SELECT email FROM ActiveUsers ORDER BY email;,"RegisteredUsers (user_id INT, username VARCHAR(255), email VARCHAR(255), registration_date DATE, city VARCHAR(255)); ActiveUsers (user_id INT, username VARCHAR(255), email VARCHAR(255), last_login DATE)","This query combines all email addresses from both RegisteredUsers and ActiveUsers tables, including any duplicates, and then sorts the entire result set by email."
Find product categories that have products priced over 50.00 and also products named 'Laptop'.,SELECT category FROM Products WHERE price > 50.00 INTERSECT SELECT category FROM Products WHERE product_name = 'Laptop';,"Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2))",This query finds product categories that satisfy both conditions: having a product with price > 50.00 AND having a product named 'Laptop'.
List titles of movies released before 2000 that are not also in the 'Action' genre.,SELECT title FROM Movies WHERE release_year < 2000 EXCEPT SELECT title FROM Movies WHERE genre = 'Action';,"Movies (id INT, title VARCHAR(255), genre VARCHAR(255), release_year INT)","This query returns titles of movies released before 2000, excluding those that are specifically 'Action' genre."
"Get a combined list of employee names and customer names, presenting them all as 'PersonName', removing duplicates.",SELECT name AS PersonName FROM Employees UNION SELECT name AS PersonName FROM Customers;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255)); Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50))",This query combines the name column from Employees and Customers into a single result set under the alias PersonName. UNION ensures distinct names.
"List all product names and titles of books, labeling the column 'ItemName', including duplicates.",SELECT product_name AS ItemName FROM Products UNION ALL SELECT title AS ItemName FROM Books;,"Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2)); Books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(255), publication_year INT)","This query combines product names and book titles into a single column ItemName, including all entries even if duplicates exist."
Find all user IDs that are present in both the RegisteredUsers table and the ActiveUsers table.,SELECT user_id FROM RegisteredUsers INTERSECT SELECT user_id FROM ActiveUsers;,"RegisteredUsers (user_id INT, username VARCHAR(255), email VARCHAR(255), registration_date DATE, city VARCHAR(255)); ActiveUsers (user_id INT, username VARCHAR(255), email VARCHAR(255), last_login DATE)",This query identifies users who are both registered and have been active.
List the user IDs of registered users who are not currently active.,SELECT user_id FROM RegisteredUsers EXCEPT SELECT user_id FROM ActiveUsers;,"RegisteredUsers (user_id INT, username VARCHAR(255), email VARCHAR(255), registration_date DATE, city VARCHAR(255)); ActiveUsers (user_id INT, username VARCHAR(255), email VARCHAR(255), last_login DATE)",This query returns user IDs that are present in RegisteredUsers but not in ActiveUsers.
"Get a list of potential contact types: 'Email', 'Phone', 'Chat', and all unique contact methods from the Customers table.",SELECT 'Email' AS ContactType UNION SELECT 'Phone' UNION SELECT 'Chat' UNION SELECT DISTINCT contact_method FROM Customers;,"Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50))",This query combines several literal strings with distinct contact methods from the Customers table into a single result set.
"Get the total number of employees in the 'Engineering' department and the total number of employees hired in 2021, showing counts separately.",SELECT COUNT(*) AS EmployeeCount FROM Employees WHERE department = 'Engineering' UNION ALL SELECT COUNT(*) FROM Employees WHERE EXTRACT(YEAR FROM hire_date) = 2021;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query calculates two separate counts: employees in 'Engineering' and employees hired in 2021, and then combines these two single-row results."
Find products that have been sold AND returned.,SELECT product_id FROM Sales INTERSECT SELECT product_id FROM Returns;,"Sales (sale_id INT, product_id INT, sale_date DATE, quantity INT, total_price DECIMAL(10, 2)); Returns (return_id INT, product_id INT, return_date DATE, quantity INT, total_refund DECIMAL(10, 2))",This query identifies product IDs that appear in both the Sales table (meaning they were sold) and the Returns table (meaning they were returned).
List products that have been sold but never returned.,SELECT product_id FROM Sales EXCEPT SELECT product_id FROM Returns;,"Sales (sale_id INT, product_id INT, sale_date DATE, quantity INT, total_price DECIMAL(10, 2)); Returns (return_id INT, product_id INT, return_date DATE, quantity INT, total_refund DECIMAL(10, 2))",This query returns product IDs from the Sales table that do not have a corresponding entry in the Returns table.
Show distinct employee IDs of those with a salary above 80000 or who have a name starting with 'J'.,SELECT employee_id FROM Employees WHERE salary > 80000 UNION SELECT employee_id FROM Employees WHERE name LIKE 'J%';,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))",This query combines employee IDs based on two conditions using UNION to ensure uniqueness: high salary or name starting with 'J'.
"List all book titles from the 'Fiction' genre and all titles published after 2010, including duplicates.",SELECT title FROM Books WHERE genre = 'Fiction' UNION ALL SELECT title FROM Books WHERE publication_year > 2010;,"Books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(255), publication_year INT)",This query combines titles based on two conditions using UNION ALL to include all matching rows: 'Fiction' genre or publication year after 2010.
Find unique names of authors who wrote a 'Mystery' book and also a book published before 1990.,SELECT author FROM Books WHERE genre = 'Mystery' INTERSECT SELECT author FROM Books WHERE publication_year < 1990;,"Books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(255), publication_year INT)",This query finds authors who appear in both the set of authors of 'Mystery' books and the set of authors of books published before 1990.
"Retrieve employee names who are in the 'Finance' department but are not senior employees (e.g., salary less than 90000).",SELECT name FROM Employees WHERE department = 'Finance' EXCEPT SELECT name FROM Employees WHERE salary >= 90000;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query returns names of employees in 'Finance' department, excluding those whose salary is 90000 or more."
"List all customer emails and employee emails, including nulls, as 'Contact_Info', ensuring distinct values.",SELECT email AS Contact_Info FROM Customers UNION SELECT email AS Contact_Info FROM Employees;,"Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))",This query combines distinct email addresses from Customers and Employees tables. NULL values are treated as distinct from non-NULL values by UNION.
"List all customer emails and employee emails, including nulls, as 'Contact_Info', allowing duplicates.",SELECT email AS Contact_Info FROM Customers UNION ALL SELECT email AS Contact_Info FROM Employees;,"Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query combines all email addresses from Customers and Employees tables, including duplicates and NULL values."
Find the product_id for products that are both listed in Products and have associated sales records.,SELECT product_id FROM Products INTERSECT SELECT product_id FROM Sales;,"Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2)); Sales (sale_id INT, product_id INT, sale_date DATE, quantity INT, total_price DECIMAL(10, 2))","This query returns product IDs that exist in both the Products table and the Sales table, indicating they have been sold."
Identify product_id for products that are listed in Products but have no sales records.,SELECT product_id FROM Products EXCEPT SELECT product_id FROM Sales;,"Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2)); Sales (sale_id INT, product_id INT, sale_date DATE, quantity INT, total_price DECIMAL(10, 2))","This query returns product IDs that are present in the Products table but not found in the Sales table, indicating unsold products."
"List employee names and customer names, formatted as 'Name (Employee)' or 'Name (Customer)', removing duplicates.",SELECT name || ' (Employee)' AS FullName FROM Employees UNION SELECT name || ' (Customer)' AS FullName FROM Customers;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255)); Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50))","This query combines formatted names from both Employees and Customers tables into a single column FullName, with UNION ensuring unique entries."
"List employee names and customer names, formatted as 'Name (Employee)' or 'Name (Customer)', allowing duplicates.",SELECT name || ' (Employee)' AS FullName FROM Employees UNION ALL SELECT name || ' (Customer)' AS FullName FROM Customers;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255)); Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50))","This query combines formatted names from both Employees and Customers tables into a single column FullName, with UNION ALL including all entries."
Find names of individuals who are listed as both a contact person for a customer and a contact person for a supplier.,SELECT contact_person FROM Customers INTERSECT SELECT contact_person FROM Suppliers;,"Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Suppliers (id INT, name VARCHAR(255), city VARCHAR(255), contact_person VARCHAR(255))",This query identifies contact persons who are associated with both customers and suppliers.
"List names of contact persons who are exclusively associated with customers, not suppliers.",SELECT contact_person FROM Customers EXCEPT SELECT contact_person FROM Suppliers;,"Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Suppliers (id INT, name VARCHAR(255), city VARCHAR(255), contact_person VARCHAR(255))",This query returns contact person names from Customers that do not appear in Suppliers.
Find distinct employee IDs for those in 'HR' department OR those hired after 2022.,SELECT employee_id FROM Employees WHERE department = 'HR' UNION SELECT employee_id FROM Employees WHERE hire_date > '2022-12-31';,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query combines employee IDs from two separate conditions using UNION to ensure unique results. Although OR could achieve this for a single table, UNION demonstrates set operation usage."
Find employee IDs that belong to the 'IT' department AND have a salary greater than 85000.,SELECT employee_id FROM Employees WHERE department = 'IT' INTERSECT SELECT employee_id FROM Employees WHERE salary > 85000;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query finds employee IDs that are present in both the set of 'IT' employees and the set of high-salary employees, demonstrating INTERSECT for AND-like conditions across two queries."
Find employee IDs who are not in the 'Sales' department.,SELECT employee_id FROM Employees EXCEPT SELECT employee_id FROM Employees WHERE department = 'Sales';,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query returns all employee IDs, excluding those whose department is 'Sales', demonstrating EXCEPT for 'not in' scenarios."
"List all distinct categories from Products and all categories from ProductReviews, including duplicates for the review categories.",SELECT DISTINCT category FROM Products UNION ALL SELECT category_reviewed FROM ProductReviews;,"Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2)); ProductReviews (review_id INT, product_id INT, rating INT, category_reviewed VARCHAR(255))","This query combines unique product categories with all categories from product reviews. UNION ALL includes duplicates from the second set, and distinct applies only to the first part."
"Get a list of distinct names from Employees, Customers, and Authors.",SELECT name FROM Employees UNION SELECT name FROM Customers UNION SELECT author_name FROM Authors;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255)); Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Authors (author_id INT, author_name VARCHAR(255), country VARCHAR(255))","This query combines names from three different tables, ensuring all resulting names are distinct."
"Get a list of all names from Employees, Customers, and Authors, allowing duplicates.",SELECT name FROM Employees UNION ALL SELECT name FROM Customers UNION ALL SELECT author_name FROM Authors;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255)); Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Authors (author_id INT, author_name VARCHAR(255), country VARCHAR(255))","This query combines names from three different tables, including all entries and allowing for duplicates."
"Find cities that have customers, suppliers, and registered users.",SELECT city FROM Customers INTERSECT SELECT city FROM Suppliers INTERSECT SELECT city FROM RegisteredUsers;,"Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50)); Suppliers (id INT, name VARCHAR(255), city VARCHAR(255), contact_person VARCHAR(255)); RegisteredUsers (user_id INT, username VARCHAR(255), email VARCHAR(255), registration_date DATE, city VARCHAR(255))","This query finds cities that are common across all three tables: Customers, Suppliers, and RegisteredUsers."
"List product_id of products sold, but not returned, and are also not associated with any 'Electronics' category.",SELECT product_id FROM Sales EXCEPT SELECT product_id FROM Returns EXCEPT SELECT product_id FROM Products WHERE category = 'Electronics';,"Sales (sale_id INT, product_id INT, sale_date DATE, quantity INT, total_price DECIMAL(10, 2)); Returns (return_id INT, product_id INT, return_date DATE, quantity INT, total_refund DECIMAL(10, 2)); Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2))","This query first finds products that were sold but not returned, then from that result, it removes products that belong to the 'Electronics' category."
"Get a combined list of employee salaries and product prices, as 'Value', removing duplicates.",SELECT salary AS Value FROM Employees UNION SELECT price AS Value FROM Products;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255)); Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2))","This query combines distinct salary values from Employees and price values from Products into a single column Value. Both are numeric types, so they are compatible."
"Get a combined list of employee salaries and product prices, as 'Value', allowing duplicates.",SELECT salary AS Value FROM Employees UNION ALL SELECT price AS Value FROM Products;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255)); Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2))","This query combines all salary values from Employees and price values from Products into a single column Value, including all entries."
Find employee IDs who joined in 2020 AND are in the 'HR' department.,SELECT employee_id FROM Employees WHERE EXTRACT(YEAR FROM hire_date) = 2020 INTERSECT SELECT employee_id FROM Employees WHERE department = 'HR';,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))",This query uses INTERSECT to find employee IDs that satisfy both conditions: hired in 2020 and belonging to the 'HR' department.
"Find employee IDs who have a salary greater than 100000, but are not in the 'Management' department.",SELECT employee_id FROM Employees WHERE salary > 100000 EXCEPT SELECT employee_id FROM Employees WHERE department = 'Management';,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query returns employee IDs of those earning more than 100000, excluding any of them who are in the 'Management' department."
List distinct product names that contain 'Pro' in their name or belong to the 'Software' category.,SELECT product_name FROM Products WHERE product_name LIKE '%Pro%' UNION SELECT product_name FROM Products WHERE category = 'Software';,"Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2))",This query combines distinct product names based on whether their name contains 'Pro' or their category is 'Software'.
Get all order IDs placed in January 2023 and all order IDs placed in February 2023.,SELECT order_id FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-01-31' UNION ALL SELECT order_id FROM Orders WHERE order_date BETWEEN '2023-02-01' AND '2023-02-28';,"Orders (order_id INT, customer_id INT, product_id INT, order_date DATE, quantity INT)","This query combines all order IDs from two specific date ranges (January and February 2023), including any duplicates if an order somehow falls into both (unlikely for dates, but possible for other overlapping conditions)."
Find titles of movies that were released in both the 1990s (1990-1999) and are also listed as being from the 'Comedy' genre.,SELECT title FROM Movies WHERE release_year BETWEEN 1990 AND 1999 INTERSECT SELECT title FROM Movies WHERE genre = 'Comedy';,"Movies (id INT, title VARCHAR(255), genre VARCHAR(255), release_year INT)",This query identifies movie titles that meet both criteria: released in the 1990s AND are of the 'Comedy' genre.
"List departments that have more than 5 employees, excluding the 'Marketing' department.",SELECT department FROM Employees GROUP BY department HAVING COUNT(*) > 5 EXCEPT SELECT 'Marketing';,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query first finds departments with more than 5 employees, then removes 'Marketing' from that list."
Get a distinct list of product names that were either part of an order placed by customer ID 101 or were returned after 2023-06-01.,SELECT P.product_name FROM Products P JOIN Orders O ON P.product_id = O.product_id WHERE O.customer_id = 101 UNION SELECT P.product_name FROM Products P JOIN Returns R ON P.product_id = R.product_id WHERE R.return_date > '2023-06-01';,"Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2)); Orders (order_id INT, customer_id INT, product_id INT, order_date DATE, quantity INT); Returns (return_id INT, product_id INT, return_date DATE, quantity INT, total_refund DECIMAL(10, 2))","This query combines distinct product names from two different scenarios: products ordered by customer 101, and products returned after a specific date."
Find product categories that have an average price over 100 AND have at least 5 products.,SELECT category FROM Products GROUP BY category HAVING AVG(price) > 100 INTERSECT SELECT category FROM Products GROUP BY category HAVING COUNT(product_id) >= 5;,"Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2))",This query identifies product categories that satisfy two aggregate conditions: their average price is greater than 100 AND they contain 5 or more products.
List all unique names of active users and registered users whose username starts with 'A'.,SELECT username FROM ActiveUsers WHERE username LIKE 'A%' UNION SELECT username FROM RegisteredUsers WHERE username LIKE 'A%';,"RegisteredUsers (user_id INT, username VARCHAR(255), email VARCHAR(255), registration_date DATE, city VARCHAR(255)); ActiveUsers (user_id INT, username VARCHAR(255), email VARCHAR(255), last_login DATE)",This query combines unique usernames that start with 'A' from both ActiveUsers and RegisteredUsers tables.
"Show all product IDs sold in 2023, and all product IDs returned in 2023, including duplicates.",SELECT product_id FROM Sales WHERE EXTRACT(YEAR FROM sale_date) = 2023 UNION ALL SELECT product_id FROM Returns WHERE EXTRACT(YEAR FROM return_date) = 2023;,"Sales (sale_id INT, product_id INT, sale_date DATE, quantity INT, total_price DECIMAL(10, 2)); Returns (return_id INT, product_id INT, return_date DATE, quantity INT, total_refund DECIMAL(10, 2))","This query lists all product IDs that were sold in 2023 and all product IDs that were returned in 2023, keeping duplicates."
"Find the product IDs that have been sold but not returned, where the sale amount was greater than 50.",SELECT product_id FROM Sales WHERE total_price > 50 EXCEPT SELECT product_id FROM Returns;,"Sales (sale_id INT, product_id INT, sale_date DATE, quantity INT, total_price DECIMAL(10, 2)); Returns (return_id INT, product_id INT, return_date DATE, quantity INT, total_refund DECIMAL(10, 2))","This query first filters sales for those with a total price over 50, then removes any product IDs from that list that also appear in the Returns table."
List distinct genres from movies released after 2005 and genres from TV shows with more than 3 seasons.,SELECT genre FROM Movies WHERE release_year > 2005 UNION SELECT genre FROM TVShows WHERE seasons > 3;,"Movies (id INT, title VARCHAR(255), genre VARCHAR(255), release_year INT); TVShows (id INT, title VARCHAR(255), genre VARCHAR(255), seasons INT)",This query combines distinct genres from movies released after 2005 with distinct genres from TV shows that have more than 3 seasons.
"Get a list of all customer IDs from 'New York' and all customer IDs with emails ending in '.org', allowing duplicates.",SELECT id FROM Customers WHERE city = 'New York' UNION ALL SELECT id FROM Customers WHERE email LIKE '%.org';,"Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50))","This query combines all customer IDs from 'New York' and those with '.org' emails, including duplicates if a customer meets both criteria."
Find customer IDs that have placed an order AND are registered users.,SELECT customer_id FROM Orders INTERSECT SELECT user_id FROM RegisteredUsers;,"Orders (order_id INT, customer_id INT, product_id INT, order_date DATE, quantity INT); RegisteredUsers (user_id INT, username VARCHAR(255), email VARCHAR(255), registration_date DATE, city VARCHAR(255))","This query identifies IDs that are present in both the Orders table (as customer_id) and the RegisteredUsers table (as user_id), indicating customers who are also registered users."
List product categories that have products with a price less than 20 but no products with a price greater than 50.,SELECT category FROM Products WHERE price < 20 EXCEPT SELECT category FROM Products WHERE price > 50;,"Products (product_id INT, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10, 2))","This query returns product categories that contain items priced under 20, but not items priced over 50. It's not about the category itself, but categories that satisfy the first condition and NOT the second."
Retrieve all distinct publication years of books and release years of movies.,SELECT publication_year FROM Books UNION SELECT release_year FROM Movies;,"Books (book_id INT, title VARCHAR(255), author VARCHAR(255), genre VARCHAR(255), publication_year INT); Movies (id INT, title VARCHAR(255), genre VARCHAR(255), release_year INT)",This query combines all distinct publication years from books and release years from movies into a single result set.
Show all distinct employee names who work in 'Sales' or 'Marketing' departments.,SELECT name FROM Employees WHERE department = 'Sales' UNION SELECT name FROM Employees WHERE department = 'Marketing';,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))",This query combines distinct employee names from the 'Sales' department with those from the 'Marketing' department.
Get the names of employees whose hire date is in 2021 and whose salary is above 70000.,SELECT name FROM Employees WHERE EXTRACT(YEAR FROM hire_date) = 2021 INTERSECT SELECT name FROM Employees WHERE salary > 70000;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))",This query finds the names of employees who satisfy both conditions: hired in 2021 AND earn more than 70000.
List the names of employees who are not in 'HR' and also not in 'IT' departments.,SELECT name FROM Employees EXCEPT SELECT name FROM Employees WHERE department = 'HR' UNION ALL SELECT name FROM Employees WHERE department = 'IT';,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255))","This query returns all employee names, then subtracts any names that are either in the 'HR' department or the 'IT' department. UNION ALL is used internally to combine the 'to-be-excluded' sets."
Find distinct names that appear as an employee and also as a customer.,SELECT name FROM Employees INTERSECT SELECT name FROM Customers;,"Employees (employee_id INT, name VARCHAR(255), department VARCHAR(255), salary DECIMAL(10, 2), hire_date DATE, email VARCHAR(255)); Customers (id INT, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255), contact_person VARCHAR(255), contact_method VARCHAR(50))",This query identifies names that are present in both the Employees table and the Customers table.
List all products that have reviews but have never been sold.,SELECT product_id FROM ProductReviews EXCEPT SELECT product_id FROM Sales;,"ProductReviews (review_id INT, product_id INT, rating INT, category_reviewed VARCHAR(255)); Sales (sale_id INT, product_id INT, sale_date DATE, quantity INT, total_price DECIMAL(10, 2))",This query returns product IDs that have entries in ProductReviews but do not have corresponding entries in Sales.
Instruction,Query,Table Schema,Explanation
Get the current date.,SELECT CURRENT_DATE;,N/A,Retrieves the current date from the system.
Get the current timestamp.,SELECT CURRENT_TIMESTAMP;,N/A,Retrieves the current date and time with timezone information from the system.
Extract the year from the event_timestamp column in the events table.,"SELECT event_id, EXTRACT(YEAR FROM event_timestamp) AS event_year FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_timestamp TIMESTAMP);",Uses the EXTRACT function to get the year component from a timestamp column.
Extract the month number from the event_date column for each event.,"SELECT event_id, EXTRACT(MONTH FROM event_date) AS event_month FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);",Uses the EXTRACT function to get the month number (1-12) from a date column.
Extract the day of the month from the event_date column.,"SELECT event_id, EXTRACT(DAY FROM event_date) AS event_day FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);",Uses the EXTRACT function to get the day of the month from a date column.
Extract the hour from the event_timestamp column.,"SELECT event_id, EXTRACT(HOUR FROM event_timestamp) AS event_hour FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_timestamp TIMESTAMP);",Uses the EXTRACT function to get the hour component from a timestamp column.
Extract the minute from the event_timestamp column.,"SELECT event_id, EXTRACT(MINUTE FROM event_timestamp) AS event_minute FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_timestamp TIMESTAMP);",Uses the EXTRACT function to get the minute component from a timestamp column.
Extract the second from the event_timestamp column.,"SELECT event_id, EXTRACT(SECOND FROM event_timestamp) AS event_second FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_timestamp TIMESTAMP);",Uses the EXTRACT function to get the second component from a timestamp column.
Add 5 days to the event_date for each event.,"SELECT event_id, event_date, event_date + INTERVAL '5' DAY AS five_days_later FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);",Adds a 5-day interval to the event_date using INTERVAL arithmetic.
Subtract 3 months from the event_date for each event.,"SELECT event_id, event_date, event_date - INTERVAL '3' MONTH AS three_months_earlier FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);",Subtracts a 3-month interval from the event_date using INTERVAL arithmetic.
Add 2 years to the event_timestamp for each event.,"SELECT event_id, event_timestamp, event_timestamp + INTERVAL '2' YEAR AS two_years_later FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_timestamp TIMESTAMP);",Adds a 2-year interval to the event_timestamp using INTERVAL arithmetic.
Calculate the difference in days between '2023-01-15' and '2023-01-01'.,SELECT '2023-01-15'::DATE - '2023-01-01'::DATE AS days_difference;,N/A,"Calculates the difference between two date literals, resulting in the number of days. (PostgreSQL syntax)"
Calculate the difference in minutes between event_end_time and event_start_time for each event.,"SELECT event_id, EXTRACT(EPOCH FROM (event_end_time - event_start_time)) / 60 AS duration_in_minutes FROM events;","CREATE TABLE events (event_id INTEGER, event_start_time TIME, event_end_time TIME);","Calculates the time difference, converts it to epoch seconds, and then divides by 60 to get minutes."
Format the event_date as 'YYYY/MM/DD'.,"SELECT event_id, TO_CHAR(event_date, 'YYYY/MM/DD') AS formatted_date FROM events;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Uses the TO_CHAR function to format the date into a specific string pattern.
Format the event_timestamp as 'HH:MI:SS AM/PM'.,"SELECT event_id, TO_CHAR(event_timestamp, 'HH:MI:SS AM') AS formatted_time FROM events;","CREATE TABLE events (event_id INTEGER, event_timestamp TIMESTAMP);",Uses the TO_CHAR function to format the timestamp's time part into a 12-hour format with AM/PM.
"Get the day of the week (1=Sunday, 7=Saturday) for each event_date.","SELECT event_id, EXTRACT(DOW FROM event_date) AS day_of_week FROM events;","CREATE TABLE events (event_id INTEGER, event_date DATE);","Uses EXTRACT(DOW FROM ...) to get the day of the week as a number, where 0 is Sunday and 6 is Saturday (in PostgreSQL). The query adjusts to 1-7 for clarity."
Get the week number of the year for each event_date.,"SELECT event_id, EXTRACT(WEEK FROM event_date) AS week_of_year FROM events;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Uses EXTRACT(WEEK FROM ...) to get the week number (1-53) within the year.
Get the day of the year for each event_date.,"SELECT event_id, EXTRACT(DOY FROM event_date) AS day_of_year FROM events;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Uses EXTRACT(DOY FROM ...) to get the day number (1-366) within the year.
Find the last day of the month for each event_date.,"SELECT event_id, (DATE_TRUNC('MONTH', event_date) + INTERVAL '1 MONTH' - INTERVAL '1 DAY')::DATE AS last_day_of_month FROM events;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Calculates the last day of the month by finding the first day of the next month and subtracting one day.
Find the first day of the month for each event_date.,"SELECT event_id, DATE_TRUNC('MONTH', event_date)::DATE AS first_day_of_month FROM events;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Uses DATE_TRUNC to truncate the date to the beginning of the month.
Get the current time.,SELECT CURRENT_TIME;,N/A,Retrieves the current time with timezone information from the system.
Convert a string '2023-04-25' to a date type.,SELECT '2023-04-25'::DATE AS converted_date;,N/A,Casts a string literal to a DATE data type.
Convert a string '2023-04-25 10:30:00' to a timestamp type.,SELECT '2023-04-25 10:30:00'::TIMESTAMP AS converted_timestamp;,N/A,Casts a string literal to a TIMESTAMP data type.
Calculate the age (interval) from event_timestamp to the current timestamp.,"SELECT event_id, AGE(CURRENT_TIMESTAMP, event_timestamp) AS event_age FROM events;","CREATE TABLE events (event_id INTEGER, event_timestamp TIMESTAMP);","Uses the AGE function to calculate the difference between two timestamps, returning an interval (e.g., '1 year 2 months 3 days')."
Truncate event_timestamp to the nearest hour.,"SELECT event_id, DATE_TRUNC('HOUR', event_timestamp) AS hourly_timestamp FROM events;","CREATE TABLE events (event_id INTEGER, event_timestamp TIMESTAMP);",Uses DATE_TRUNC to round down the timestamp to the beginning of the hour.
Truncate event_timestamp to the nearest day.,"SELECT event_id, DATE_TRUNC('DAY', event_timestamp) AS daily_timestamp FROM events;","CREATE TABLE events (event_id INTEGER, event_timestamp TIMESTAMP);",Uses DATE_TRUNC to round down the timestamp to the beginning of the day (midnight).
List events that occurred in January 2023.,"SELECT event_id, event_name, event_date FROM events WHERE EXTRACT(YEAR FROM event_date) = 2023 AND EXTRACT(MONTH FROM event_date) = 1;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);",Filters events by extracting the year and month components from the event_date.
Find events scheduled for a Monday.,"SELECT event_id, event_name, event_date FROM events WHERE EXTRACT(DOW FROM event_date) = 1;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);","Filters events where the day of the week (DOW) is 1 (Monday in PostgreSQL, where 0 is Sunday)."
"Calculate the duration of each event in seconds, given start and end timestamps.","SELECT event_id, EXTRACT(EPOCH FROM (event_end_time - event_start_time)) AS duration_seconds FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_start_time TIMESTAMP, event_end_time TIMESTAMP);","Subtracts the start timestamp from the end timestamp to get an interval, then extracts the total seconds (epoch) from that interval."
Find events that started before '2023-06-01'.,"SELECT event_id, event_name, event_timestamp FROM events WHERE event_timestamp < '2023-06-01'::TIMESTAMP;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_timestamp TIMESTAMP);",Filters events based on the comparison of the event_timestamp with a specific timestamp literal.
Find events that occurred between '2023-01-01' and '2023-03-31' (inclusive).,"SELECT event_id, event_name, event_date FROM events WHERE event_date BETWEEN '2023-01-01' AND '2023-03-31';","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);",Uses the BETWEEN operator to filter events within a specified date range.
Display the event timestamp adjusted to 'America/New_York' timezone.,"SELECT event_id, event_name, event_timestamp AT TIME ZONE 'America/New_York' AS ny_timestamp FROM events;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_timestamp TIMESTAMP WITH TIME ZONE);",Converts a timestamp (assuming it's TIMESTAMP WITH TIME ZONE or UTC) to a specific timezone using AT TIME ZONE.
Get the current date and time in UTC.,SELECT NOW() AT TIME ZONE 'UTC' AS current_utc_timestamp;,N/A,Retrieves the current timestamp and converts it to the UTC timezone.
Get the current local timestamp without time zone information.,SELECT LOCALTIMESTAMP;,N/A,"Retrieves the current timestamp in the local timezone, without explicit timezone offset."
Get the age of each event in days since its event_date relative to a fixed date '2024-01-01'.,"SELECT event_id, '2024-01-01'::DATE - event_date AS days_since_event FROM events;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Calculates the difference in days between a fixed date and the event_date.
Find events that have a duration longer than 60 minutes.,"SELECT event_id, event_name FROM events WHERE duration_minutes > 60;","CREATE TABLE events (event_id INTEGER, event_name TEXT, duration_minutes INTEGER);",Filters events based on a direct comparison with the duration_minutes column.
Order events by their event_date in descending order.,"SELECT event_id, event_name, event_date FROM events ORDER BY event_date DESC;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);",Sorts the events by their event_date in reverse chronological order.
Group events by year and count the number of events each year.,"SELECT EXTRACT(YEAR FROM event_date) AS event_year, COUNT(event_id) AS event_count FROM events GROUP BY event_year ORDER BY event_year;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Groups events by their year extracted from the event_date and counts them.
"Get the name of the day of the week (e.g., 'Monday') for each event_date.","SELECT event_id, TO_CHAR(event_date, 'Day') AS day_name FROM events;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Uses TO_CHAR with the 'Day' format specifier to get the full name of the day of the week.
Find events where event_date is in the future relative to the current date.,"SELECT event_id, event_name, event_date FROM events WHERE event_date > CURRENT_DATE;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);",Filters events where the event_date is later than the current system date.
"Find events that occurred on a specific date, '2023-05-10'.","SELECT event_id, event_name, event_date FROM events WHERE event_date = '2023-05-10';","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);",Filters events to retrieve only those that match a specific date.
Determine if the event_date is a weekend day (Saturday or Sunday).,"SELECT event_id, event_date, (EXTRACT(DOW FROM event_date) = 0 OR EXTRACT(DOW FROM event_date) = 6) AS is_weekend FROM events;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Checks if the day of the week (DOW) is 0 (Sunday) or 6 (Saturday) to identify weekend days.
Add 3 hours and 30 minutes to event_timestamp.,"SELECT event_id, event_timestamp, event_timestamp + INTERVAL '3 hours 30 minutes' AS new_timestamp FROM events;","CREATE TABLE events (event_id INTEGER, event_timestamp TIMESTAMP);",Adds a combined interval of hours and minutes to a timestamp.
Truncate the event_timestamp to the start of the week (Sunday).,"SELECT event_id, DATE_TRUNC('WEEK', event_timestamp) AS start_of_week FROM events;","CREATE TABLE events (event_id INTEGER, event_timestamp TIMESTAMP);",Uses DATE_TRUNC to find the timestamp at the beginning of the week (Sunday by default in PostgreSQL).
Calculate the difference between two timestamps in hours.,"SELECT event_id, EXTRACT(EPOCH FROM (event_end_time - event_start_time)) / 3600 AS duration_hours FROM events;","CREATE TABLE events (event_id INTEGER, event_start_time TIMESTAMP, event_end_time TIMESTAMP);",Calculates the difference between two timestamps in seconds (epoch) and divides by 3600 to convert to hours.
Find the average duration_minutes of all events.,SELECT AVG(duration_minutes) AS average_duration FROM events;,"CREATE TABLE events (event_id INTEGER, duration_minutes INTEGER);",Calculates the average value of the duration_minutes column.
"Count events for each month of the year, regardless of the year.","SELECT EXTRACT(MONTH FROM event_date) AS month_number, COUNT(event_id) AS event_count FROM events GROUP BY month_number ORDER BY month_number;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Groups events by their month number and counts the occurrences for each month.
List events that occurred in the current year.,"SELECT event_id, event_name, event_date FROM events WHERE EXTRACT(YEAR FROM event_date) = EXTRACT(YEAR FROM CURRENT_DATE);","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_date DATE);",Filters events by comparing their year with the year of the current date.
Find the earliest event_date.,SELECT MIN(event_date) AS earliest_event_date FROM events;,"CREATE TABLE events (event_id INTEGER, event_date DATE);",Uses the MIN aggregate function to find the earliest date in the event_date column.
Find the latest event_timestamp.,SELECT MAX(event_timestamp) AS latest_event_timestamp FROM events;,"CREATE TABLE events (event_id INTEGER, event_timestamp TIMESTAMP);",Uses the MAX aggregate function to find the latest timestamp in the event_timestamp column.
Format the current timestamp to 'DD-MON-YYYY HH24:MI:SS'.,"SELECT TO_CHAR(CURRENT_TIMESTAMP, 'DD-MON-YYYY HH24:MI:SS') AS formatted_current_time;",N/A,Formats the current system timestamp into a custom string representation.
Get the quarter of the year (1-4) for each event_date.,"SELECT event_id, EXTRACT(QUARTER FROM event_date) AS event_quarter FROM events;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Uses EXTRACT(QUARTER FROM ...) to get the quarter number (1-4) from a date.
"Count events per day of the week (e.g., how many on Monday, Tuesday, etc.).","SELECT TO_CHAR(event_date, 'Day') AS day_name, COUNT(event_id) AS event_count FROM events GROUP BY day_name ORDER BY EXTRACT(DOW FROM event_date);","CREATE TABLE events (event_id INTEGER, event_date DATE);","Groups events by the day name extracted from the date and counts them, then orders by the numeric day of week for consistent ordering."
Add 10 minutes to event_start_time.,"SELECT event_id, event_start_time, event_start_time + INTERVAL '10 minutes' AS new_start_time FROM events;","CREATE TABLE events (event_id INTEGER, event_start_time TIME);",Adds a 10-minute interval to a time value.
List events that started after 09:00 AM on any given day.,"SELECT event_id, event_name, event_start_time FROM events WHERE event_start_time > '09:00:00'::TIME;","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_start_time TIME);",Filters events where the event_start_time is later than 09:00 AM.
"Group events by month and year, then count them.","SELECT TO_CHAR(event_date, 'YYYY-MM') AS year_month, COUNT(event_id) AS event_count FROM events GROUP BY year_month ORDER BY year_month;","CREATE TABLE events (event_id INTEGER, event_date DATE);",Groups events by a combined year-month string representation and counts them.
"Calculate the number of complete months between two dates, '2023-01-15' and '2023-07-10'.","SELECT AGE('2023-07-10'::DATE, '2023-01-15'::DATE) AS months_diff;",N/A,"Uses AGE function to calculate the difference between two dates, which returns an interval from which month components can be inferred (though not directly 'complete months' in all SQL dialects consistently without further extraction)."
Find events whose event_timestamp falls within the last 30 days from the current date.,"SELECT event_id, event_name, event_timestamp FROM events WHERE event_timestamp >= CURRENT_DATE - INTERVAL '30 days';","CREATE TABLE events (event_id INTEGER, event_name TEXT, event_timestamp TIMESTAMP);",Filters events by checking if their timestamp is greater than or equal to the current date minus 30 days.
