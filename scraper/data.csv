Instruction,Query,Table Schema,Explanation
Retrieve all information about products.,SELECT * FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Selects all columns and all rows from the Products table.
List the names and prices of all products.,"SELECT product_name, price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Retrieves only the product_name and price columns from the Products table.
Show the product name as 'Item Name' and its price as 'Unit Price'.,"SELECT product_name AS ""Item Name"", price AS ""Unit Price"" FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Selects the product_name column and renames it to 'Item Name', and price column renamed to 'Unit Price' from the Products table."
Get the product name and category using a table alias for the Products table.,"SELECT p.product_name, p.category FROM Products AS p;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Selects product_name and category columns from the Products table, using 'p' as an alias for the table name."
Find all unique categories of products.,SELECT DISTINCT category FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Retrieves only the unique values from the category column in the Products table.
Display the employee's full name as 'Employee Full Name' and their email address as 'Contact Email'.,"SELECT first_name || ' ' || last_name AS ""Employee Full Name"", email AS ""Contact Email"" FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER);","Concatenates first_name and last_name to create an 'Employee Full Name' column, and renames email to 'Contact Email' from the Employees table."
"List product names and their prices after applying a 10% discount, labeled as 'Discounted Price'.","SELECT product_name, price * 0.90 AS ""Discounted Price"" FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Selects product_name and calculates a new column 'Discounted Price' by applying a 10% discount to the price column from the Products table.
Show customer's full name and their complete contact info (address and email) labeled as 'Full Contact Info'.,"SELECT first_name || ' ' || last_name AS ""Customer Name"", address || ' (' || email || ')' AS ""Full Contact Info"" FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, address TEXT);","Creates a 'Customer Name' by concatenating first_name and last_name, and a 'Full Contact Info' by concatenating address and email for each customer."
"Retrieve the order ID, customer's first name, and total amount for each order, using aliases for tables.","SELECT o.order_id, c.first_name AS ""CustomerFirstName"", o.total_amount FROM Orders AS o JOIN Customers AS c ON o.customer_id = c.customer_id;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, address TEXT);","Joins the Orders and Customers tables on customer_id and selects order_id, the customer's first_name (aliased as 'CustomerFirstName'), and total_amount using table aliases."
"List product names and their stock status: 'In Stock' if quantity > 0, 'Out of Stock' otherwise, labeled as 'Availability'.","SELECT product_name, CASE WHEN stock_quantity > 0 THEN 'In Stock' ELSE 'Out of Stock' END AS ""Availability"" FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Selects product_name and creates a new column 'Availability' based on the stock_quantity: 'In Stock' if positive, 'Out of Stock' otherwise."
Find the names and prices of products in the 'Electronics' category that cost more than 500.,"SELECT product_name, price FROM Products WHERE category = 'Electronics' AND price > 500.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query selects the product name and price from the 'Products' table, filtering for rows where the 'category' is 'Electronics' AND the 'price' is greater than 500.00."
"List all orders that are either 'Pending' or 'Shipped', along with their total amount.","SELECT order_id, total_amount, status FROM Orders WHERE status = 'Pending' OR status = 'Shipped';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query retrieves the order ID, total amount, and status from the 'Orders' table for all orders that have a 'status' of either 'Pending' OR 'Shipped'."
Show all customer details for customers who are NOT from 'USA'.,"SELECT customer_id, first_name, last_name, email, country FROM Customers WHERE NOT country = 'USA';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, country TEXT);","This query fetches all details (customer ID, first name, last name, email, and country) for customers whose 'country' is NOT 'USA'."
"Get the names of employees hired between January 1, 2020, and December 31, 2022.","SELECT first_name, last_name, hire_date FROM Employees WHERE hire_date BETWEEN '2020-01-01' AND '2022-12-31';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query selects the first name, last name, and hire date of employees from the 'Employees' table whose 'hire_date' falls within the specified range (inclusive)."
"Find products whose category is 'Books', 'Movies', or 'Music'.","SELECT product_name, category FROM Products WHERE category IN ('Books', 'Movies', 'Music');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query selects the product name and category from the 'Products' table for items whose 'category' matches any of the values in the provided list ('Books', 'Movies', 'Music')."
Retrieve customer emails for customers whose last name starts with 'Sm'.,SELECT email FROM Customers WHERE last_name LIKE 'Sm%';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, country TEXT);",This query retrieves the 'email' address of customers from the 'Customers' table where their 'last_name' begins with the letters 'Sm'.
List products that do not have a specified category.,"SELECT product_name, category FROM Products WHERE category IS NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query selects the product name and category from the 'Products' table for products where the 'category' field is NULL (i.e., not specified or missing)."
Show products with stock quantity less than 10 AND (price greater than 100 OR category is 'Electronics').,"SELECT product_name, stock_quantity, price, category FROM Products WHERE stock_quantity < 10 AND (price > 100.00 OR category = 'Electronics');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query selects product details where the 'stock_quantity' is less than 10, AND (the 'price' is greater than 100 OR the 'category' is 'Electronics'). Parentheses enforce the logical grouping."
Find the names of products that are from the same category as 'Laptop'.,SELECT product_name FROM Products WHERE category = (SELECT category FROM Products WHERE product_name = 'Laptop' LIMIT 1) AND product_name <> 'Laptop';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query first finds the category of the product named 'Laptop' using a subquery, then selects all other product names that belong to that same category."
List employees whose salary is in the top 10% of their department's average salary and joined after 2021.,"SELECT E.first_name, E.last_name, E.salary, E.department, E.hire_date FROM Employees E JOIN (SELECT department, AVG(salary) AS avg_dept_salary FROM Employees GROUP BY department) AS DeptAvg ON E.department = DeptAvg.department WHERE E.salary > DeptAvg.avg_dept_salary * 0.9 AND E.hire_date > '2021-12-31';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query joins the Employees table with a subquery that calculates the average salary per department. It then filters for employees whose salary is greater than 90% of their department's average salary AND whose hire date is after December 31, 2021."
"List the first name, last name of all customers and their corresponding order IDs.","SELECT C.first_name, C.last_name, O.order_id FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, status TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query retrieves the first name, last name of customers and their order IDs by joining the Customers table with the Orders table on the common customer_id column."
Find the names of products that have been ordered with a quantity greater than 5 in any single order item.,SELECT P.product_name FROM Products AS P INNER JOIN Order_Items AS OI ON P.product_id = OI.product_id WHERE OI.quantity > 5;,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT NOT NULL, price REAL NOT NULL, stock_quantity INTEGER NOT NULL ); CREATE TABLE Order_Items ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) );",This query selects the names of products by joining the Products table with the Order_Items table and filters for items where the ordered quantity is greater than 5.
Calculate the total number of orders placed by each customer.,"SELECT C.first_name, C.last_name, COUNT(O.order_id) AS total_orders FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.first_name, C.last_name;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, status TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );",This query counts the total orders for each customer by joining Customers and Orders tables and grouping the results by customer ID and name.
Show the five most recent orders along with the customer's full name.,"SELECT C.first_name, C.last_name, O.order_id, O.order_date FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id ORDER BY O.order_date DESC LIMIT 5;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, status TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query retrieves the first name, last name, order ID, and order date for the 5 most recent orders by joining Customers and Orders tables and ordering by order_date in descending order."
Find the names of customers who have purchased products from the 'Electronics' category.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id WHERE P.category = 'Electronics';","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, status TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE Order_Items ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) ); CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT NOT NULL, price REAL NOT NULL, stock_quantity INTEGER NOT NULL );","This query finds the distinct names of customers who bought products in the 'Electronics' category by joining Customers, Orders, Order_Items, and Products tables."
List employees who were hired in the same year as any employee from the 'Marketing' department.,"SELECT E.first_name, E.last_name FROM Employees AS E INNER JOIN Departments AS D ON E.department_id = D.department_id WHERE STRFTIME('%Y', E.hire_date) IN (SELECT STRFTIME('%Y', E2.hire_date) FROM Employees AS E2 INNER JOIN Departments AS D2 ON E2.department_id = D2.department_id WHERE D2.department_name = 'Marketing');","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL NOT NULL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) ); CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT );",This query selects employees whose hire year matches the hire year of any employee in the 'Marketing' department. It uses an INNER JOIN and a subquery with STRFTIME for year extraction.
"For each order, show the order ID, customer's name, and the total value of products with more than 2 items in that order.","SELECT O.order_id, C.first_name, C.last_name, SUM(OI.quantity * OI.unit_price) AS total_high_quantity_value FROM Orders AS O INNER JOIN Customers AS C ON O.customer_id = C.customer_id INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id WHERE OI.quantity > 2 GROUP BY O.order_id, C.first_name, C.last_name;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, status TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE Order_Items ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) );","This query calculates the sum of (quantity * unit_price) for order items where quantity is greater than 2, grouped by order and customer, by joining Orders, Customers, and Order_Items tables."
List all unique department names that have at least one employee earning more than 60000.,SELECT DISTINCT D.department_name FROM Departments AS D INNER JOIN Employees AS E ON D.department_id = E.department_id WHERE E.salary > 60000;,"CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL NOT NULL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) ); CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT );","This query selects the unique names of departments that have at least one employee whose salary is greater than 60000, by joining Departments and Employees tables."
Find departments where the average salary of employees is greater than 75000.,"SELECT D.department_name, AVG(E.salary) AS average_salary FROM Departments AS D INNER JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name HAVING AVG(E.salary) > 75000;","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL NOT NULL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) ); CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT );","This query calculates the average salary for each department and then filters to show only departments where this average salary is greater than 75000, using an INNER JOIN and HAVING clause."
"For each customer, list their full name and the total number of distinct products they have ordered.","SELECT C.first_name, C.last_name, COUNT(DISTINCT OI.product_id) AS distinct_products_ordered FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id GROUP BY C.customer_id, C.first_name, C.last_name;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, status TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE Order_Items ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) );","This query calculates the count of distinct products ordered by each customer by joining Customers, Orders, and Order_Items tables and grouping the results by customer."
"List all customers and the details of their orders, including customers who have not placed any orders.","SELECT C.customer_name, O.order_id, O.order_date, O.total_amount FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Retrieves all customers from the Customers table and matches them with their corresponding orders from the Orders table. If a customer has no orders, their details will still appear, with NULL values for the order-related columns."
"Show all products along with their supplier's name, but only for suppliers located in 'USA'. Include products that do not have a supplier or whose supplier is not from 'USA'.","SELECT P.product_name, S.supplier_name, S.country FROM Products P LEFT JOIN Suppliers S ON P.supplier_id = S.supplier_id WHERE S.country = 'USA' OR S.country IS NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, supplier_id INTEGER);CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, country TEXT);",Selects all products and attempts to join them with their suppliers. The WHERE clause filters to show only products associated with 'USA' suppliers or products that have no associated supplier (where S.country would be NULL).
"For each customer, count the number of orders they have placed. Include customers who have placed no orders, showing a count of 0.","SELECT C.customer_name, COUNT(O.order_id) AS total_orders FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Joins customers with their orders. By using COUNT(O.order_id) and grouping by customer, it counts orders. For customers with no orders, O.order_id will be NULL, and COUNT() on a column ignores NULLs, resulting in a count of 0 for that customer."
"List all departments and their total employee salary. Include departments with no employees, showing a total salary of 0. Only include departments where the total salary is greater than 1000 or which have no employees.","SELECT D.department_name, COALESCE(SUM(E.salary), 0) AS total_department_salary FROM Departments D LEFT JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_id, D.department_name HAVING COALESCE(SUM(E.salary), 0) > 1000 OR SUM(E.salary) IS NULL;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);","Joins departments with employees and calculates the sum of salaries for each department. COALESCE(SUM(E.salary), 0) ensures that departments with no employees show 0 for total salary. The HAVING clause filters for departments where the calculated total salary is greater than 1000, or for departments that had no employees (meaning SUM(E.salary) was NULL before COALESCE)."
"Retrieve all book titles, their author's name, and the author's nationality. Include books that do not have an author.","SELECT B.title, A.author_name, A.nationality FROM Books B LEFT JOIN Authors A ON B.author_id = A.author_id;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER);CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, nationality TEXT);","Selects all books from the Books table and attempts to match them with authors from the Authors table based on author_id. If a book has no matching author (or author_id is NULL), the book title will still be listed with NULL values for author_name and nationality."
"Show all employees and all projects, including employees not assigned to any project and projects with no assigned employees.","SELECT E.employee_name, P.project_name FROM Employees E LEFT JOIN EmployeeProjects EP ON E.employee_id = EP.employee_id LEFT JOIN Projects P ON EP.project_id = P.project_id UNION ALL SELECT E.employee_name, P.project_name FROM Projects P LEFT JOIN EmployeeProjects EP ON P.project_id = EP.project_id LEFT JOIN Employees E ON EP.employee_id = E.employee_id WHERE E.employee_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT);CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT);CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, PRIMARY KEY (employee_id, project_id));","Emulates a FULL OUTER JOIN. The first SELECT gets all employees and their associated projects (if any). The second SELECT gets all projects and their associated employees (if any), then filters to only include rows where the employee was not found in the first part (i.e., projects without an employee listed in the initial left join). UNION ALL combines these results."
"List all customers and all products, showing which products each customer purchased. Include customers who bought nothing and products that were not purchased by anyone. Limit the results to products in the 'Electronics' category.","SELECT C.customer_name, P.product_name FROM Customers C LEFT JOIN Purchases PU ON C.customer_id = PU.customer_id LEFT JOIN Products PR ON PU.product_id = PR.product_id WHERE PR.category = 'Electronics' OR PR.product_id IS NULL UNION ALL SELECT C.customer_name, P.product_name FROM Products P LEFT JOIN Purchases PU ON P.product_id = PU.product_id LEFT JOIN Customers C ON PU.customer_id = C.customer_id WHERE C.customer_id IS NULL AND P.category = 'Electronics';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT);CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);CREATE TABLE Purchases (purchase_id INTEGER PRIMARY KEY, customer_id INTEGER, product_id INTEGER, purchase_date TEXT);","This query emulates a FULL OUTER JOIN between Customers and Products via Purchases. The first part gets all customers and their purchased 'Electronics' products. The second part gets all 'Electronics' products and their purchasers, filtering for products not linked in the first part (i.e., unpurchased 'Electronics' products). The results are combined."
Find the names of all employees who are not assigned to any project.,SELECT E.employee_name FROM Employees E LEFT JOIN EmployeeProjects EP ON E.employee_id = EP.employee_id WHERE EP.project_id IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT);CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT);CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, PRIMARY KEY (employee_id, project_id));","Joins the Employees table with the EmployeeProjects bridge table. A LEFT JOIN ensures all employees are included. The WHERE clause filters the results to only show employees for whom there is no matching entry in EmployeeProjects (i.e., EP.project_id is NULL), indicating they are not assigned to any project."
"List all product categories and the count of products in each category. Include categories that have no products, showing a count of 0.","SELECT C.category_name, COUNT(P.product_id) AS product_count FROM Categories C LEFT JOIN Products P ON C.category_id = P.category_id GROUP BY C.category_id, C.category_name;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER);","Selects all categories and performs a LEFT JOIN with the Products table. COUNT(P.product_id) correctly counts products for categories that have them. For categories without any products, P.product_id will be NULL, and COUNT() will treat these as 0, effectively showing 0 for those categories."
"List all movies and all actors, showing movie titles and actor names. Include movies with no actors and actors with no movies.","SELECT M.movie_title, A.actor_name FROM Movies M LEFT JOIN MovieActors MA ON M.movie_id = MA.movie_id LEFT JOIN Actors A ON MA.actor_id = A.actor_id UNION ALL SELECT M.movie_title, A.actor_name FROM Actors A LEFT JOIN MovieActors MA ON A.actor_id = MA.actor_id LEFT JOIN Movies M ON MA.movie_id = M.movie_id WHERE M.movie_id IS NULL;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, movie_title TEXT);CREATE TABLE Actors (actor_id INTEGER PRIMARY KEY, actor_name TEXT);CREATE TABLE MovieActors (movie_id INTEGER, actor_id INTEGER, PRIMARY KEY (movie_id, actor_id));","Emulates a FULL OUTER JOIN between Movies and Actors through the MovieActors junction table. The first part selects all movies and their associated actors. The second part selects all actors and their associated movies, but only includes actors who were not linked to any movie in the first part (i.e., actors without movies). The UNION ALL combines these results to show all movies and all actors, whether they are linked or not."
Find departments with more than 5 employees.,"SELECT department, COUNT(employee_id) AS num_employees FROM Employees GROUP BY department HAVING num_employees > 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query counts the number of employees in each department and then filters to show only those departments that have more than 5 employees.
List categories where the total revenue from sales exceeds 10000.,"SELECT category, SUM(revenue) AS total_category_revenue FROM Sales JOIN Products ON Sales.product_id = Products.product_id GROUP BY category HAVING total_category_revenue > 10000;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity INTEGER, revenue REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query calculates the total revenue for each product category by joining Sales and Products tables, and then filters to include only categories with a total revenue greater than 10000."
"Show cities where the average order amount is less than 500, considering only 'completed' orders.","SELECT T2.city, AVG(T1.total_amount) AS avg_order_amount FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.status = 'completed' GROUP BY T2.city HAVING avg_order_amount < 500;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins orders with customer information, filters for 'completed' orders, calculates the average order amount for each city, and then displays only those cities where the average is less than 500."
Find authors and genres where an author has published more than 2 books in that specific genre.,"SELECT T1.author_name, T2.genre, COUNT(T2.book_id) AS num_books FROM Authors AS T1 JOIN Books AS T2 ON T1.author_id = T2.author_id GROUP BY T1.author_name, T2.genre HAVING num_books > 2;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre TEXT, price REAL, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query counts books per author and genre combination, and then filters to show only those combinations where an author has published more than 2 books within that specific genre."
List departments where the minimum salary is above 40000 and the average salary is below 70000.,"SELECT department, MIN(salary) AS min_dept_salary, AVG(salary) AS avg_dept_salary FROM Employees GROUP BY department HAVING min_dept_salary > 40000 AND avg_dept_salary < 70000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query calculates the minimum and average salary for each department and then filters to include departments where the lowest salary is over 40000 and the average salary is under 70000.
Identify customers who have placed at least 3 orders and their total spending exceeds 1000.,"SELECT C.customer_name, COUNT(O.order_id) AS order_count, SUM(O.total_amount) AS total_spending FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_id HAVING order_count >= 3 AND total_spending > 1000;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins customer and order information, groups by customer to count their orders and sum their spending, then filters for customers who have placed 3 or more orders and spent over 1000 in total."
Find years in which more than 50 sales occurred and the average quantity sold per sale was at least 10.,"SELECT STRFTIME('%Y', sale_date) AS sale_year, COUNT(sale_id) AS num_sales, AVG(quantity) AS avg_quantity_sold FROM Sales GROUP BY sale_year HAVING num_sales > 50 AND avg_quantity_sold >= 10;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity INTEGER, revenue REAL);","This query extracts the year from the sale date, counts total sales and calculates average quantity sold per year, then filters to include years with more than 50 sales and an average quantity sold of 10 or more."
List categories where the total revenue is greater than the overall average total revenue per category.,"SELECT T2.category, SUM(T1.revenue) AS category_revenue FROM Sales AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.category HAVING category_revenue > (SELECT AVG(sub.total_category_revenue) FROM (SELECT SUM(S.revenue) AS total_category_revenue FROM Sales AS S JOIN Products AS P ON S.product_id = P.product_id GROUP BY P.category) AS sub);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity INTEGER, revenue REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query calculates the total revenue for each product category. It then uses a subquery to determine the average of these total category revenues across all categories. Finally, it filters the results to show only those categories whose total revenue exceeds this overall average."
"From the 'Electronics' category, find product names that have been sold at least 50 times in total.","SELECT T1.product_name, SUM(T2.quantity) AS total_quantity_sold FROM Products AS T1 JOIN Sales AS T2 ON T1.product_id = T2.product_id WHERE T1.category = 'Electronics' GROUP BY T1.product_name HAVING total_quantity_sold >= 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity INTEGER, revenue REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query first filters sales for products in the 'Electronics' category. Then, it groups the remaining sales by product name to sum the total quantity sold for each. Finally, it filters again, keeping only those products where the total quantity sold is 50 or more."
Identify departments where the average salary is either above 60000 or the count of employees who earn more than 75000 is at least 3.,"SELECT department, AVG(salary) AS avg_salary, COUNT(CASE WHEN salary > 75000 THEN employee_id ELSE NULL END) AS high_earner_count FROM Employees GROUP BY department HAVING avg_salary > 60000 OR high_earner_count >= 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query calculates the average salary and counts employees earning over 75000 for each department. It then filters departments based on two conditions: either the average salary is over 60000, or there are at least 3 employees earning more than 75000."
"For each department, list employees along with a row number based on their salary in ascending order.","SELECT employee_id, employee_name, department_id, salary, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary ASC) AS rn FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);","This query assigns a unique sequential row number to each employee within their respective department, ordered by their salary from lowest to highest. It uses `ROW_NUMBER()` with `PARTITION BY department_id` to reset the numbering for each department and `ORDER BY salary ASC` to define the order within the partition."
"Rank products within each product category based on their sales amount. If two products have the same sales, they should receive the same rank, and the next rank should skip.","SELECT product_id, product_name, category, sales_amount, RANK() OVER (PARTITION BY category ORDER BY sales_amount DESC) AS product_rank FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, sales_amount REAL);","This query ranks products within each category based on their sales amount in descending order. `RANK()` assigns the same rank to products with identical sales amounts and then skips the subsequent rank numbers. For example, if two products are ranked 1st, the next product will be ranked 3rd."
"Assign a dense rank to employees based on their hire date, within each department. Ties should receive the same rank, and no ranks should be skipped.","SELECT employee_id, employee_name, department_id, hire_date, DENSE_RANK() OVER (PARTITION BY department_id ORDER BY hire_date ASC) AS hire_dense_rank FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, hire_date TEXT);","This query assigns a dense rank to employees within each department based on their hire date. `DENSE_RANK()` is similar to `RANK()` but does not skip rank numbers when there are ties. If two employees are tied for rank 1, the next rank will be 2, not 3."
"Divide all students into 3 groups (ntiles) based on their test scores, ordered from highest to lowest.","SELECT student_id, student_name, test_score, NTILE(3) OVER (ORDER BY test_score DESC) AS score_group FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, test_score INTEGER);","This query divides all students into 3 equally sized groups based on their test scores, with the highest scores in group 1 and lowest in group 3. `NTILE(3)` distributes rows into the specified number of groups."
"For each stock, retrieve the closing price from the previous trading day. If there is no previous day, use 0.","SELECT stock_id, trade_date, close_price, LAG(close_price, 1, 0) OVER (PARTITION BY stock_id ORDER BY trade_date ASC) AS previous_day_close FROM StockPrices;","CREATE TABLE StockPrices (stock_id INTEGER, trade_date TEXT, close_price REAL, PRIMARY KEY (stock_id, trade_date));","This query uses the `LAG()` window function to fetch the `close_price` from the row immediately preceding the current row within the same `stock_id` partition, ordered by `trade_date`. The `1` indicates to look back one row, and `0` is the default value if no preceding row exists."
"For each customer, find the date of their next order. If there is no next order, return '9999-12-31'.","SELECT order_id, customer_id, order_date, LEAD(order_date, 1, '9999-12-31') OVER (PARTITION BY customer_id ORDER BY order_date ASC) AS next_order_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query uses the `LEAD()` window function to retrieve the `order_date` from the row immediately following the current row within the same `customer_id` partition, ordered by `order_date`. The `1` indicates to look forward one row, and `'9999-12-31'` is the default value if no subsequent row exists."
"Calculate the running total of sales for each salesperson, ordered by sales date.","SELECT sale_id, salesperson_id, sale_date, amount, SUM(amount) OVER (PARTITION BY salesperson_id ORDER BY sale_date ASC) AS running_total_sales FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, salesperson_id INTEGER, sale_date TEXT, amount REAL);","This query calculates a running total of `amount` for each salesperson. `SUM(amount) OVER (PARTITION BY salesperson_id ORDER BY sale_date ASC)` sums all `amount` values up to and including the current row for each salesperson, ordered by the `sale_date`."
"For each product, calculate the 3-day moving average of daily sales.","SELECT product_id, sale_date, quantity_sold, AVG(quantity_sold) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS three_day_avg_sales FROM DailySales;","CREATE TABLE DailySales (product_id INTEGER, sale_date TEXT, quantity_sold INTEGER, PRIMARY KEY (product_id, sale_date));","This query calculates a 3-day moving average of `quantity_sold` for each product. The `ROWS BETWEEN 2 PRECEDING AND CURRENT ROW` frame clause specifies that the average should be calculated over the current row and the two preceding rows within each `product_id` partition, ordered by `sale_date`."
"For each customer, find their first and last order date.","SELECT DISTINCT customer_id, FIRST_VALUE(order_date) OVER (PARTITION BY customer_id ORDER BY order_date ASC) AS first_order_date, LAST_VALUE(order_date) OVER (PARTITION BY customer_id ORDER BY order_date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_order_date FROM CustomerOrders;","CREATE TABLE CustomerOrders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, order_amount REAL);",This query retrieves the first and last order dates for each customer. `FIRST_VALUE()` gets the `order_date` of the first order in the partition. `LAST_VALUE()` with `ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING` ensures it retrieves the `order_date` of the last order across the entire customer's order history.
Find the top 3 products with the highest sales in each product category.,"SELECT product_id, product_name, category, total_sales FROM (SELECT product_id, product_name, category, total_sales, ROW_NUMBER() OVER (PARTITION BY category ORDER BY total_sales DESC) AS rn FROM ProductSales) WHERE rn <= 3;","CREATE TABLE ProductSales (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, total_sales REAL);","This query first assigns a row number to each product within its category, ordered by `total_sales` in descending order. Then, it filters the results to only include products where the assigned row number is 3 or less, effectively returning the top 3 products by sales for each category."
List the names of all products that have been included in any customer order.,SELECT product_name FROM Products WHERE product_id IN (SELECT product_id FROM OrderItems);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query uses an uncorrelated subquery to first retrieve a list of all product_ids that exist in the OrderItems table. The outer query then selects product names from the Products table where their product_id is found within this list.
Find the names and prices of products that are more expensive than the average price of all products in the database.,"SELECT product_name, price FROM Products WHERE price > (SELECT AVG(price) FROM Products);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER);",An uncorrelated scalar subquery is used to calculate the overall average price of all products. The outer query then filters the Products table to return only those products whose price is greater than this calculated average.
Get the first and last names of customers who have a total order amount greater than 500 across all their orders.,"SELECT c.first_name, c.last_name FROM Customers c JOIN (SELECT customer_id, SUM(total_amount) AS total_spent FROM Orders GROUP BY customer_id HAVING SUM(total_amount) > 500) AS high_value_customers ON c.customer_id = high_value_customers.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses an uncorrelated subquery in the FROM clause, creating a derived table named 'high_value_customers'. This derived table identifies customers whose total order amount exceeds 500. The outer query then joins this derived table with the Customers table to retrieve the names of these customers."
Find the names of products that have never been ordered by any customer.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM OrderItems);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","An uncorrelated subquery first retrieves all product_ids that have appeared in the OrderItems table. The outer query then selects product names from the Products table where their product_id is NOT present in the list returned by the subquery, effectively finding products that haven't been ordered."
"For each product, list its name, its individual price, and the overall average price of all products in the database.","SELECT product_name, price, (SELECT AVG(price) FROM Products) AS overall_avg_price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER);","This query includes an uncorrelated scalar subquery in the SELECT clause. For every row in the Products table, this subquery calculates the average price of all products once and returns it as a new column, 'overall_avg_price', alongside each product's name and price."
Find the names of departments that have at least one employee earning more than 60000.,SELECT department_name FROM Departments d WHERE EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id AND e.salary > 60000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL UNIQUE, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL NOT NULL, hire_date TEXT NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query uses a correlated subquery with EXISTS. For each department in the outer query, the subquery checks if there is at least one employee within that specific department (matching `d.department_id = e.department_id`) who earns more than 60000. If such an employee exists, the department's name is returned."
"For each employee, list their first name, last name, and the average salary of their respective department.","SELECT first_name, last_name, (SELECT AVG(salary) FROM Employees e2 WHERE e2.department_id = e1.department_id) AS department_avg_salary FROM Employees e1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL NOT NULL, hire_date TEXT NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query uses a correlated scalar subquery in the SELECT clause. For each employee (e1) in the outer query, the subquery calculates the average salary only for employees (e2) who belong to the same department as e1. This average salary is then returned as a new column for each employee."
Find employees who earn more than the average salary of their own department.,"SELECT first_name, last_name, salary, department_id FROM Employees e1 WHERE salary > (SELECT AVG(salary) FROM Employees e2 WHERE e2.department_id = e1.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL NOT NULL, hire_date TEXT NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query uses a correlated scalar subquery in the WHERE clause. For each employee (e1) from the outer query, the subquery calculates the average salary of their specific department. The outer query then filters employees whose individual salary is greater than the average salary of their own department."
List departments that currently have no employees assigned to them.,SELECT department_name FROM Departments d WHERE NOT EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL UNIQUE, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL NOT NULL, hire_date TEXT NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query uses a correlated subquery with NOT EXISTS. For each department in the outer query, the subquery checks if there are NO employees associated with that specific department's ID. If no employees are found for a department, its name is returned."
Find products where the quantity ordered in any single order item is greater than the average quantity ordered for that specific product across all order items.,"SELECT p.product_name, oi.quantity, oi.order_id FROM Products p JOIN OrderItems oi ON p.product_id = oi.product_id WHERE oi.quantity > (SELECT AVG(oi2.quantity) FROM OrderItems oi2 WHERE oi2.product_id = oi.product_id);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query joins Products with OrderItems. For each order item, a correlated subquery calculates the average quantity for that specific product across all its order entries. The outer query then filters for order items where the individual quantity is higher than the product-specific average."
"List all product names from either the 'Electronics' or 'Books' category, allowing for duplicates if a product somehow appears in both lists.",SELECT ProductName FROM Products WHERE Category = 'Electronics' UNION ALL SELECT ProductName FROM Products WHERE Category = 'Books';,"CREATE TABLE Products ( ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Category TEXT NOT NULL, Price REAL );","This query retrieves product names categorized as 'Electronics' and combines them with product names categorized as 'Books'. `UNION ALL` is used to include all matching rows from both queries, even if there are duplicates."
Show the distinct first and last names of all employees who work in either the 'Sales' or 'Marketing' department.,"SELECT FirstName, LastName FROM Employees WHERE Department = 'Sales' UNION SELECT FirstName, LastName FROM Employees WHERE Department = 'Marketing';","CREATE TABLE Employees ( EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, Department TEXT NOT NULL, Role TEXT, Salary REAL );",This query selects the first and last names of employees from the 'Sales' department and combines them with those from the 'Marketing' department. `UNION` ensures that only distinct combinations of first and last names are returned.
Find the names of customers who placed orders in both the year 2022 and the year 2023.,"SELECT C.CustomerName FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID WHERE strftime('%Y', O.OrderDate) = '2022' INTERSECT SELECT C.CustomerName FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID WHERE strftime('%Y', O.OrderDate) = '2023';","CREATE TABLE Customers ( CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL, Email TEXT ); CREATE TABLE Orders ( OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT NOT NULL, TotalAmount REAL, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) );",This query identifies customers who have placed at least one order in 2022 and also at least one order in 2023. `INTERSECT` returns only the customer names that are present in the results of both subqueries.
List all product IDs that have appeared in any order but are currently not marked as 'In Stock'.,SELECT ProductID FROM OrderDetails EXCEPT SELECT ProductID FROM Products WHERE StockStatus = 'In Stock';,"CREATE TABLE Products ( ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, StockStatus TEXT NOT NULL ); CREATE TABLE OrderDetails ( OrderDetailID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, FOREIGN KEY (ProductID) REFERENCES Products(ProductID) );",This query finds product IDs that are present in the `OrderDetails` table (meaning they have been ordered) but are not found in the `Products` table with a 'StockStatus' of 'In Stock'. `EXCEPT` returns the rows from the first query that are not in the second.
Get a combined list of all unique cities where either customers or suppliers are located.,SELECT City FROM Customers UNION SELECT City FROM Suppliers;,"CREATE TABLE Customers ( CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT NOT NULL ); CREATE TABLE Suppliers ( SupplierID INTEGER PRIMARY KEY, SupplierName TEXT, City TEXT NOT NULL );","This query combines the distinct cities from the `Customers` table with the distinct cities from the `Suppliers` table. `UNION` automatically removes duplicate city names, providing a list of unique cities across both tables."
Identify employees who are managers in the 'IT' department AND have a salary greater than 80000.,"SELECT EmployeeID, FirstName, LastName FROM Employees WHERE Department = 'IT' AND Role = 'Manager' INTERSECT SELECT EmployeeID, FirstName, LastName FROM Employees WHERE Salary > 80000;","CREATE TABLE Employees ( EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, Department TEXT NOT NULL, Role TEXT, Salary REAL );",This query uses `INTERSECT` to find employees who meet two separate conditions: being an 'IT' 'Manager' and having a salary greater than 80000. It returns only the employee details common to both sets of results.
Find the names of students who have enrolled in any course but have not yet submitted their final project.,SELECT S.StudentName FROM Students S JOIN Enrollments E ON S.StudentID = E.StudentID EXCEPT SELECT S.StudentName FROM Students S JOIN ProjectSubmissions PS ON S.StudentID = PS.StudentID;,"CREATE TABLE Students ( StudentID INTEGER PRIMARY KEY, StudentName TEXT NOT NULL ); CREATE TABLE Enrollments ( EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, FOREIGN KEY (StudentID) REFERENCES Students(StudentID) ); CREATE TABLE ProjectSubmissions ( SubmissionID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, SubmissionDate TEXT, FOREIGN KEY (StudentID) REFERENCES Students(StudentID) );","This query first lists the names of all students who have an enrollment record. Then, it subtracts the names of students who have a project submission record, effectively returning students who are enrolled but haven't submitted a project. `EXCEPT` performs this set difference."
"Display a combined list of all product names and product category names, including duplicates.",SELECT ProductName AS Name FROM Products UNION ALL SELECT CategoryName AS Name FROM ProductCategories;,"CREATE TABLE Products ( ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, CategoryID INTEGER, FOREIGN KEY (CategoryID) REFERENCES ProductCategories(CategoryID) ); CREATE TABLE ProductCategories ( CategoryID INTEGER PRIMARY KEY, CategoryName TEXT NOT NULL );","This query retrieves all `ProductName` entries from the `Products` table and all `CategoryName` entries from the `ProductCategories` table. `UNION ALL` combines these two sets of names into a single list, allowing for potential duplicates."
List the IDs of courses that are offered in both the 'Spring 2023' semester and the 'Fall 2023' semester.,SELECT CourseID FROM Courses WHERE Semester = 'Spring 2023' INTERSECT SELECT CourseID FROM Courses WHERE Semester = 'Fall 2023';,"CREATE TABLE Courses ( CourseID INTEGER PRIMARY KEY, CourseName TEXT NOT NULL, Semester TEXT NOT NULL );",This query identifies courses that are listed for the 'Spring 2023' semester and also for the 'Fall 2023' semester. `INTERSECT` returns only the `CourseID` values that appear in both result sets.
Find the Customer IDs and names of customers who are registered in the 'Loyalty Program' but have never placed an order.,"SELECT CustomerID, CustomerName FROM Customers WHERE IsLoyaltyMember = 1 EXCEPT SELECT CustomerID, CustomerName FROM Orders;","CREATE TABLE Customers ( CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL, Email TEXT, IsLoyaltyMember BOOLEAN ); CREATE TABLE Orders ( OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT NOT NULL, TotalAmount REAL, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) );","This query first selects the CustomerID and CustomerName of all customers marked as loyalty members. Then, it removes any of those customers who also appear in the `Orders` table, effectively listing loyalty members who have no associated orders. `EXCEPT` provides this difference."
Show all orders placed today.,"SELECT OrderID, CustomerID, TotalAmount FROM Orders WHERE OrderDate = DATE('now');","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Selects all orders where the OrderDate matches the current date.
Calculate the total sales for each month in the year 2023.,"SELECT STRFTIME('%Y-%m', OrderDate) AS OrderMonth, SUM(TotalAmount) AS MonthlySales FROM Orders WHERE STRFTIME('%Y', OrderDate) = '2023' GROUP BY OrderMonth ORDER BY OrderMonth;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Groups orders by month and calculates the sum of TotalAmount for each month in 2023.
"For each user, display their username and the number of days since their last login.","SELECT Username, julianday('now') - julianday(LastLoginDate) AS DaysSinceLastLogin FROM Users;","CREATE TABLE Users (UserID INTEGER PRIMARY KEY, Username TEXT, RegistrationDate TEXT, LastLoginDate TEXT);",Calculates the difference in days between the current date and each user's LastLoginDate.
List all events showing their name and event date formatted as YYYY/MM/DD.,"SELECT EventName, STRFTIME('%Y/%m/%d', EventDate) AS FormattedEventDate FROM Events;","CREATE TABLE Events (EventID INTEGER PRIMARY KEY, EventName TEXT, EventDate TEXT, Location TEXT);",Selects event names and formats their EventDate into a 'YYYY/MM/DD' string.
Find all orders placed within the last 7 days.,"SELECT OrderID, OrderDate, TotalAmount FROM Orders WHERE OrderDate >= DATE('now', '-7 days');","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Retrieves orders where OrderDate is greater than or equal to the date 7 days ago from today.
Get the usernames of all users who registered in the year 2022.,"SELECT Username FROM Users WHERE STRFTIME('%Y', RegistrationDate) = '2022';","CREATE TABLE Users (UserID INTEGER PRIMARY KEY, Username TEXT, RegistrationDate TEXT, LastLoginDate TEXT);",Selects usernames of users whose RegistrationDate falls within the year 2022.
What is the earliest and latest order date recorded in the system?,"SELECT MIN(OrderDate) AS EarliestOrder, MAX(OrderDate) AS LatestOrder FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Finds the minimum and maximum OrderDate from the Orders table.
Calculate the daily average temperature from sensor data.,"SELECT STRFTIME('%Y-%m-%d', ReadingTime) AS ReadingDay, AVG(Temperature) AS AverageDailyTemperature FROM SensorData GROUP BY ReadingDay ORDER BY ReadingDay;","CREATE TABLE SensorData (SensorID INTEGER, ReadingTime TEXT, Temperature REAL);",Groups sensor readings by day and calculates the average temperature for each day.
List the Customer IDs of customers who placed at least one order in January 2023.,"SELECT DISTINCT CustomerID FROM Orders WHERE STRFTIME('%Y-%m', OrderDate) = '2023-01';","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Selects unique CustomerIDs from orders placed in January 2023.
"For each customer, calculate their age in years based on their date of birth.","SELECT CustomerID, FirstName, LastName, CAST(julianday('now') - julianday(DateOfBirth) AS INTEGER) / 365 AS AgeInYears FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT);","Calculates the difference in days between the current date and DateOfBirth, then divides by 365 to estimate age in years (truncating decimal part for whole years)."
List all products ordered by their price in ascending order.,"SELECT product_name, price FROM Products ORDER BY price ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, cost REAL, category_id INTEGER, last_updated_date TEXT);","This query retrieves the name and price of all products, sorted from the lowest price to the highest."
"Show all customers, sorted by their last name in descending alphabetical order.","SELECT customer_id, first_name, last_name FROM Customers ORDER BY last_name DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","This query fetches the ID, first name, and last name of all customers, ordered from Z to A by their last name."
"Retrieve all orders, first sorted by order date from newest to oldest, and then by total amount from highest to lowest for orders on the same date.","SELECT order_id, customer_id, order_date, total_amount FROM Orders ORDER BY order_date DESC, total_amount DESC;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query selects all order details, prioritizing sorting by the most recent order date. For orders placed on the same day, they are further sorted by their total amount, from largest to smallest."
Find the 5 most expensive products.,"SELECT product_name, price FROM Products ORDER BY price DESC LIMIT 5;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, cost REAL, category_id INTEGER, last_updated_date TEXT);","This query selects the names and prices of products, sorts them by price in descending order, and then returns only the top 5 results, effectively finding the 5 most expensive products."
"Get the 3rd, 4th, and 5th most recently registered customers.","SELECT first_name, last_name, registration_date FROM Customers ORDER BY registration_date DESC LIMIT 3 OFFSET 2;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","This query retrieves customer names and registration dates, sorted by the most recent registration. It then skips the first 2 results and returns the next 3, providing the 3rd, 4th, and 5th most recently registered customers."
Identify the department with the highest average employee salary.,"SELECT D.department_name, AVG(E.salary) AS avg_salary FROM Employees AS E JOIN Departments AS D ON E.department_id = D.department_id GROUP BY D.department_name ORDER BY avg_salary DESC LIMIT 1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, hire_date TEXT, commission_pct REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","This query joins employees with departments, calculates the average salary for each department, orders them by average salary from highest to lowest, and then returns only the top department."
List the top 3 customers who have placed the highest total amount of orders.,"SELECT C.first_name, C.last_name, SUM(O.total_amount) AS total_spent FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.first_name, C.last_name ORDER BY total_spent DESC LIMIT 3;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query joins customers with their orders, calculates the total amount spent by each customer, orders them from highest spending to lowest, and returns the top 3 customers."
"Show employees ordered by their commission percentage from lowest to highest, but with employees having no commission listed last.","SELECT employee_id, first_name, last_name, commission_pct FROM Employees ORDER BY CASE WHEN commission_pct IS NULL THEN 1 ELSE 0 END, commission_pct ASC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, hire_date TEXT, commission_pct REAL, department_id INTEGER);","This query retrieves employee details, sorting them by commission percentage. It uses a CASE statement to ensure that employees with a NULL commission percentage are always listed after those with a value, followed by an ascending sort on the commission percentage itself."
List products ordered by their profit margin (price minus cost) from highest to lowest.,"SELECT product_name, price, cost, (price - cost) AS profit_margin FROM Products ORDER BY profit_margin DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, cost REAL, category_id INTEGER, last_updated_date TEXT);","This query selects product names, prices, costs, and calculates a 'profit_margin' for each. It then sorts the results by this calculated profit margin in descending order, showing the most profitable products first."
Find the 4 most recently updated distinct product categories.,SELECT DISTINCT C.category_name FROM Products AS P JOIN Categories AS C ON P.category_id = C.category_id ORDER BY P.last_updated_date DESC LIMIT 4;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, cost REAL, category_id INTEGER, last_updated_date TEXT); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);","This query joins products with categories, then selects distinct category names. It sorts these categories based on the most recent update date of any product within that category, and finally returns the top 4 most recently updated distinct categories."
Find all products whose names start with 'Eco' and whose price is between 10.00 and 50.00.,"SELECT ProductID, ProductName, Price FROM Products WHERE ProductName LIKE 'Eco%' AND Price BETWEEN 10.00 AND 50.00;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Category TEXT, Price REAL, StockQuantity INTEGER);","This query retrieves the ProductID, ProductName, and Price from the Products table for all products where the ProductName starts with 'Eco' and the Price is within the range of 10.00 to 50.00, inclusive."
List all customers from 'New York' or 'Los Angeles' who have placed an order.,"SELECT CustomerID, CustomerName, City FROM Customers WHERE City IN ('New York', 'Los Angeles') AND EXISTS (SELECT 1 FROM Orders WHERE Orders.CustomerID = Customers.CustomerID);","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL, City TEXT, State TEXT, PostalCode TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));","This query selects customers from the Cities 'New York' or 'Los Angeles' who also have at least one corresponding entry in the Orders table, ensuring they have placed an order. The EXISTS operator efficiently checks for the presence of related orders without returning any order data."
Show all employees whose job title contains 'Manager' or 'Director' and were hired in the year 2022.,"SELECT EmployeeID, FirstName, LastName, JobTitle, HireDate FROM Employees WHERE (JobTitle LIKE '%Manager%' OR JobTitle LIKE '%Director%') AND HireDate BETWEEN '2022-01-01' AND '2022-12-31';","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, JobTitle TEXT, Department TEXT, HireDate TEXT);",This query fetches employees whose job title includes either 'Manager' or 'Director' and whose hiring date falls within the calendar year 2022.
Find the names of departments that have at least one employee whose name starts with 'J'.,SELECT DISTINCT DepartmentName FROM Departments WHERE EXISTS (SELECT 1 FROM Employees WHERE Employees.DepartmentID = Departments.DepartmentID AND Employees.FirstName LIKE 'J%');,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT NOT NULL); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, DepartmentID INTEGER, FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID));",This query retrieves the names of departments that have at least one employee whose first name begins with the letter 'J'. The EXISTS operator checks for the existence of such an employee within each department.
"Retrieve all orders placed between '2023-01-15' and '2023-03-15' for customers with CustomerID 101, 103, or 105.","SELECT OrderID, CustomerID, OrderDate, TotalAmount FROM Orders WHERE OrderDate BETWEEN '2023-01-15' AND '2023-03-15' AND CustomerID IN (101, 103, 105);","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query selects orders that were placed within a specific date range (January 15, 2023, to March 15, 2023) and belong to a predefined list of CustomerIDs (101, 103, 105)."
List all products that have never been part of any order item.,"SELECT ProductID, ProductName FROM Products WHERE NOT EXISTS (SELECT 1 FROM OrderItems WHERE OrderItems.ProductID = Products.ProductID);","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Price REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, FOREIGN KEY (ProductID) REFERENCES Products(ProductID));","This query returns products that do not have any corresponding entry in the OrderItems table, indicating they have never been ordered. The NOT EXISTS operator efficiently checks for the absence of related records."
Find unique cities where customers live whose name does not contain 'Smith' and whose customer ID is not between 200 and 300.,SELECT DISTINCT City FROM Customers WHERE CustomerName NOT LIKE '%Smith%' AND CustomerID NOT BETWEEN 200 AND 300;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL, City TEXT, State TEXT);",This query retrieves unique city names for customers whose names do not contain 'Smith' and whose CustomerID is not within the range of 200 to 300 (exclusive of 200 and 300 boundaries for NOT BETWEEN).
Get the names of suppliers who supply products in the 'Electronics' or 'Appliances' category.,"SELECT DISTINCT S.SupplierName FROM Suppliers S JOIN Products P ON S.SupplierID = P.SupplierID WHERE P.Category IN ('Electronics', 'Appliances');","CREATE TABLE Suppliers (SupplierID INTEGER PRIMARY KEY, SupplierName TEXT NOT NULL); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, SupplierID INTEGER, Category TEXT, FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID));",This query joins the Suppliers and Products tables to find the names of suppliers who provide products belonging to either the 'Electronics' or 'Appliances' category.
"Find all books whose title contains 'SQL' or 'Database', and were published after '2020-01-01'.","SELECT BookID, Title, Author, PublicationDate FROM Books WHERE (Title LIKE '%SQL%' OR Title LIKE '%Database%') AND PublicationDate > '2020-01-01';","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT NOT NULL, Author TEXT, PublicationDate TEXT, Genre TEXT);","This query selects books where the title contains either 'SQL' or 'Database' (case-insensitive depends on collation) and the publication date is after January 1, 2020."
List projects that have tasks scheduled to start in the current month.,"SELECT DISTINCT P.ProjectName FROM Projects P WHERE EXISTS (SELECT 1 FROM Tasks T WHERE T.ProjectID = P.ProjectID AND T.StartDate BETWEEN DATE('now', 'start of month') AND DATE('now', 'start of month', '+1 month', '-1 day'));","CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT NOT NULL, Status TEXT); CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, ProjectID INTEGER, TaskName TEXT, StartDate TEXT, EndDate TEXT, FOREIGN KEY (ProjectID) REFERENCES Projects(ProjectID));",This query retrieves the names of projects that have at least one task whose start date falls within the current calendar month. It uses SQLite's DATE function to dynamically determine the start and end dates of the current month.
Find customers who have placed at least one order.,SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders);,"Customers(CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); Orders(OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);","This query uses a subquery in the WHERE clause to first find all unique CustomerIDs from the Orders table, and then selects the CustomerName from the Customers table for all matching CustomerIDs."
List products with a price higher than the average price of all products.,"SELECT ProductName, Price FROM Products WHERE Price > (SELECT AVG(Price) FROM Products);","Products(ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER);",The inner subquery calculates the average price of all products. The outer query then selects products whose individual price is greater than this calculated average.
Show the total number of orders for each customer along with their name.,"SELECT c.CustomerName, o.TotalOrders FROM Customers c JOIN (SELECT CustomerID, COUNT(OrderID) AS TotalOrders FROM Orders GROUP BY CustomerID) o ON c.CustomerID = o.CustomerID;","Customers(CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); Orders(OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);","A subquery in the FROM clause creates a temporary, derived table named 'o' that calculates the total number of orders for each CustomerID. This derived table is then joined with the 'Customers' table using CustomerID to retrieve the customer's name."
Get the name of each product and the total quantity ordered for that product across all orders.,"SELECT ProductName, (SELECT SUM(Quantity) FROM OrderDetails od WHERE od.ProductID = p.ProductID) AS TotalOrderedQuantity FROM Products p;","Products(ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL); OrderDetails(OrderDetailID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","For each product in the 'Products' table, a scalar subquery is executed in the SELECT clause. This subquery calculates the sum of quantities from 'OrderDetails' for the specific product (correlated by ProductID), returning a single value for each product row."
Find employees who have processed orders with a total value greater than 1000.,SELECT EmployeeName FROM Employees e WHERE EXISTS (SELECT 1 FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID WHERE o.EmployeeID = e.EmployeeID GROUP BY o.OrderID HAVING SUM(od.Quantity * od.Price) > 1000);,"Employees(EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT); Orders(OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, EmployeeID INTEGER, OrderDate TEXT); OrderDetails(OrderDetailID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, Price REAL);","This query uses a correlated subquery with EXISTS. For each employee, the subquery checks if there is any order managed by that employee where the sum of (quantity * price) for all items in that specific order exceeds 1000. If such an order exists, the employee's name is selected."
"List the top 3 customers by their total order value, showing their name and total value.","SELECT c.CustomerName, t.TotalOrderValue FROM Customers c JOIN (SELECT CustomerID, SUM(Quantity * Price) AS TotalOrderValue FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID GROUP BY CustomerID ORDER BY TotalOrderValue DESC LIMIT 3) t ON c.CustomerID = t.CustomerID;","Customers(CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); Orders(OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT); OrderDetails(OrderDetailID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, Price REAL);","A subquery in the FROM clause first calculates the total order value for each customer, orders them by this value in descending order, and then limits the result to the top 3. The outer query then joins this derived table with the 'Customers' table to retrieve the names of these top customers."
Identify products whose quantity in stock is less than 50% of the maximum stock quantity available for any product.,"SELECT ProductName, StockQuantity FROM Products WHERE StockQuantity < (SELECT MAX(StockQuantity) * 0.5 FROM Products);","Products(ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER);",The inner subquery determines the maximum stock quantity among all products. The outer query then filters for products whose own stock quantity is less than half of this maximum value.
"For each order, show its OrderID, OrderDate, and the number of days since the earliest order in the system.","SELECT OrderID, OrderDate, JULIANDAY(OrderDate) - JULIANDAY((SELECT MIN(OrderDate) FROM Orders)) AS DaysSinceFirstOrder FROM Orders;","Orders(OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);",A scalar subquery in the SELECT clause finds the absolute earliest 'OrderDate' from the 'Orders' table. The outer query then calculates the difference in days between each order's date and this earliest date using SQLite's JULIANDAY function.
Find employees who have managed orders placed after 2022-01-01 and also have an average order value greater than 500 across all their managed orders.,SELECT EmployeeName FROM Employees e WHERE EmployeeID IN (SELECT EmployeeID FROM Orders WHERE OrderDate > '2022-01-01') AND EmployeeID IN (SELECT o.EmployeeID FROM Orders o JOIN OrderDetails od ON o.OrderID = od.OrderID GROUP BY o.EmployeeID HAVING SUM(od.Quantity * od.Price) / COUNT(DISTINCT o.OrderID) > 500);,"Employees(EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT); Orders(OrderID INTEGER PRIMARY KEY, EmployeeID INTEGER, OrderDate TEXT); OrderDetails(OrderDetailID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, Price REAL);","This query uses two separate subqueries in the WHERE clause, combined with an AND operator. The first subquery identifies employees with orders placed after '2022-01-01'. The second subquery calculates the average order value for each employee and identifies those whose average is greater than 500. Only employees satisfying both conditions are selected."
Get the names of departments that have more than 5 employees whose salary is above the company-wide average salary.,"SELECT d.DepartmentName FROM Departments d JOIN (SELECT DepartmentID, COUNT(EmployeeID) AS HighEarnersCount FROM Employees WHERE Salary > (SELECT AVG(Salary) FROM Employees) GROUP BY DepartmentID HAVING HighEarnersCount > 5) AS HighEarningDepartments ON d.DepartmentID = HighEarningDepartments.DepartmentID;","Departments(DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); Employees(EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, Salary REAL);","The innermost subquery finds the average salary across all employees. The derived table (inner JOIN subquery) then identifies employees earning above this average, groups them by department, and counts them. Finally, it filters for departments with more than 5 such employees. The outer query joins this result with the 'Departments' table to get the department names."
List the names of all employees who have not yet been assigned to a department.,SELECT employee_name FROM Employees WHERE department_id IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,employee_name TEXT NOT NULL,department_id INTEGER);","Selects employees where the department_id column explicitly contains a NULL value, indicating no department assignment."
Retrieve the names and colors of all products that have a specified color.,"SELECT product_name, color FROM Products WHERE color IS NOT NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY,product_name TEXT NOT NULL,price REAL,color TEXT);","Filters products to include only those where the color column is not NULL, meaning a color has been assigned."
"Show the name and price of each product. If a product's price is not available, display 'Price Not Available'.","SELECT product_name, COALESCE(price, 'Price Not Available') AS display_price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY,product_name TEXT NOT NULL,price REAL,color TEXT);","Retrieves product names and uses COALESCE to display the actual price if it's not NULL, otherwise shows the string 'Price Not Available'."
"For each customer, get their primary email. If the primary email is missing, use their secondary email. If both are missing, show 'No Contact Email'.","SELECT customer_name, COALESCE(primary_email, secondary_email, 'No Contact Email') AS contact_email FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY,customer_name TEXT NOT NULL,primary_email TEXT,secondary_email TEXT);","Uses COALESCE to return the first non-NULL expression from the list: primary_email, then secondary_email, and finally the literal string 'No Contact Email'."
"Calculate the total quantity sold for each item, treating any missing quantity as zero.","SELECT item_id, SUM(IFNULL(quantity, 0)) AS total_quantity_sold FROM OrderItems GROUP BY item_id;","CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY,order_id INTEGER NOT NULL,item_id INTEGER NOT NULL,quantity INTEGER);","Groups order items by item_id and calculates the sum of quantity. IFNULL(quantity, 0) replaces any NULL quantity values with 0 before summing."
"Find the order IDs and customer names for orders that have not yet been shipped (i.e., delivery date is NULL).","SELECT o.order_id, c.customer_name FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE o.delivery_date IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY,customer_name TEXT NOT NULL);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY,customer_id INTEGER NOT NULL,order_date TEXT NOT NULL,delivery_date TEXT,FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","Joins Orders and Customers tables and filters for orders where the delivery_date column is NULL, indicating they have not yet been shipped."
"Report the total sales amount for each sales region. If a sales region is not specified (NULL), group it under 'Unassigned Region'.","SELECT COALESCE(sales_region, 'Unassigned Region') AS region, SUM(sale_amount) AS total_sales FROM SalesRecords GROUP BY COALESCE(sales_region, 'Unassigned Region');","CREATE TABLE SalesRecords (sale_id INTEGER PRIMARY KEY,sales_region TEXT,sale_amount REAL NOT NULL,sale_date TEXT NOT NULL);","Groups sales records by sales_region. COALESCE(sales_region, 'Unassigned Region') ensures that NULL values in sales_region are treated as 'Unassigned Region' for grouping and display."
List the names of all customers who have placed at least one order but do not have a shipping address on record.,SELECT c.customer_name FROM Customers c WHERE c.customer_id IN (SELECT DISTINCT customer_id FROM Orders) AND c.shipping_address IS NULL;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY,customer_name TEXT NOT NULL,shipping_address TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY,customer_id INTEGER NOT NULL,order_date TEXT NOT NULL,FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",Selects customer names from the Customers table. It uses a subquery to find customer_ids present in the Orders table (meaning they've placed an order) and then further filters these customers to only include those where their shipping_address is NULL.
"Display employee names and their phone numbers. If a phone number is missing, show 'No Phone Available'.","SELECT employee_name, COALESCE(phone_number, 'No Phone Available') AS contact_phone FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,employee_name TEXT NOT NULL,phone_number TEXT,email TEXT);","Selects employee names and uses COALESCE to display the phone_number if available, otherwise it defaults to the string 'No Phone Available'."
"For each project, display its name, the estimated completion date, or 'In Progress' if the date is not set. Only show projects that have an assigned project manager.","SELECT project_name, COALESCE(completion_date, 'In Progress') AS status FROM Projects WHERE manager_id IS NOT NULL;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY,project_name TEXT NOT NULL,manager_id INTEGER,start_date TEXT NOT NULL,completion_date TEXT);","Selects project names and uses COALESCE to show the completion_date if it exists, or 'In Progress' otherwise. The results are filtered to include only projects where a manager_id has been assigned (i.e., manager_id is not NULL)."
"Find the names and emails of customers who registered after January 1, 2023.","WITH RecentCustomers AS (SELECT customer_id, first_name, last_name, email FROM Customers WHERE registration_date > '2023-01-01') SELECT first_name, last_name, email FROM RecentCustomers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","This query uses a Common Table Expression (CTE) named `RecentCustomers` to first select all customers who registered after '2023-01-01'. Then, it selects the first name, last name, and email from this filtered set of customers."
Calculate the total quantity of products sold for each product category.,"WITH ProductSales AS (SELECT p.category, oi.quantity FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id) SELECT category, SUM(quantity) AS TotalQuantitySold FROM ProductSales GROUP BY category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);",The query defines a CTE `ProductSales` that joins `Products` and `Order_Items` to link product categories with sales quantities. It then sums the `quantity` for each `category` from this CTE to get the total quantity sold per category.
List the names of customers who placed orders in March 2023 and the total amount they spent in that month.,"WITH MarchOrders AS (SELECT customer_id, total_amount FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-03'), CustomerSpending AS (SELECT customer_id, SUM(total_amount) AS MonthlyTotal FROM MarchOrders GROUP BY customer_id) SELECT c.first_name, c.last_name, cs.MonthlyTotal FROM Customers c JOIN CustomerSpending cs ON c.customer_id = cs.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query uses two CTEs. `MarchOrders` filters orders to only include those from March 2023. `CustomerSpending` then aggregates the total amount spent by each customer from `MarchOrders`. Finally, it joins `Customers` with `CustomerSpending` to retrieve the customer names and their total spending for March 2023."
"For each product category, find the product with the highest stock quantity.","WITH RankedProducts AS (SELECT product_id, product_name, category, stock_quantity, ROW_NUMBER() OVER(PARTITION BY category ORDER BY stock_quantity DESC) AS rn FROM Products) SELECT product_name, category, stock_quantity FROM RankedProducts WHERE rn = 1;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","The `RankedProducts` CTE assigns a rank to each product within its category based on `stock_quantity` in descending order. The outer query then selects only those products where the rank is 1, effectively picking the product with the highest stock quantity per category."
"Retrieve the full hierarchy of employees, showing who reports to whom.","WITH RECURSIVE EmployeeHierarchy AS (SELECT employee_id, name, manager_id, name AS manager_name, 0 AS level FROM Employees WHERE manager_id IS NULL UNION ALL SELECT e.employee_id, e.name, e.manager_id, eh.name AS manager_name, eh.level + 1 FROM Employees e JOIN EmployeeHierarchy eh ON e.manager_id = eh.employee_id) SELECT employee_id, name, manager_name, level FROM EmployeeHierarchy ORDER BY level, name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, manager_id INTEGER, position TEXT);","This query uses a recursive CTE `EmployeeHierarchy`. The initial part selects top-level employees (managers with no manager). The recursive part then joins `Employees` with the CTE to find direct reports, incrementing the `level` for each step down the hierarchy, until all employees and their respective managers are listed."
"Show the average total amount of orders placed by customers, but only for orders with a total amount greater than 50.",SELECT AVG(FilteredOrders.total_amount) AS AverageHighOrderAmount FROM (SELECT total_amount FROM Orders WHERE total_amount > 50) AS FilteredOrders;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query uses a derived table (a subquery in the FROM clause) named `FilteredOrders`. This subquery first selects `total_amount` for all orders where the `total_amount` is greater than 50. The outer query then calculates the average of these filtered amounts.
Find the customer IDs and their total order count for customers who have placed at least 3 orders and their combined total order amount is over 500.,"WITH CustomerOrderSummary AS (SELECT customer_id, COUNT(order_id) AS OrderCount, SUM(total_amount) AS TotalSpent FROM Orders GROUP BY customer_id) SELECT cs.customer_id, cs.OrderCount, cs.TotalSpent FROM CustomerOrderSummary cs JOIN Customers c ON cs.customer_id = c.customer_id WHERE cs.OrderCount >= 3 AND cs.TotalSpent > 500;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",The `CustomerOrderSummary` CTE aggregates the order count and total spent for each customer from the `Orders` table. The main query then joins this summary with the `Customers` table and filters for customers who meet both criteria: at least 3 orders and a total spending over 500.
Calculate the total sales amount for each day in October 2023.,"WITH DailySales AS (SELECT STRFTIME('%Y-%m-%d', order_date) AS SaleDate, SUM(total_amount) AS DailyTotal FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-10' GROUP BY SaleDate) SELECT SaleDate, DailyTotal FROM DailySales ORDER BY SaleDate;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","The `DailySales` CTE extracts the date from `order_date` for each order in October 2023 and calculates the sum of `total_amount` for each unique date. The final query simply selects these daily sales figures, ordered by date."
Compute the running total of sales for each day in November 2023.,"WITH DailySales AS (SELECT STRFTIME('%Y-%m-%d', order_date) AS SaleDate, SUM(total_amount) AS DailyTotal FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-11' GROUP BY SaleDate ORDER BY SaleDate) SELECT SaleDate, DailyTotal, SUM(DailyTotal) OVER (ORDER BY SaleDate) AS RunningTotalSales FROM DailySales;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","First, the `DailySales` CTE calculates the total sales for each day in November 2023. Then, the outer query uses a window function `SUM(...) OVER (ORDER BY SaleDate)` to compute the running total of `DailyTotal` as it progresses through the sorted dates."
List the names of customers who have not placed any orders yet.,"WITH OrderedCustomers AS (SELECT DISTINCT customer_id FROM Orders) SELECT c.first_name, c.last_name FROM Customers c WHERE c.customer_id NOT IN (SELECT customer_id FROM OrderedCustomers);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query defines a CTE `OrderedCustomers` to get a distinct list of all customer IDs who have placed orders. The final query then selects the first name and last name from the `Customers` table, filtering for those customer IDs that are not present in the `OrderedCustomers` CTE."
"Assign a letter grade (A, B, C, D, F) to each student based on their exam score. Scores 90+ are A, 80-89 are B, 70-79 are C, 60-69 are D, and below 60 is F.","SELECT s.Name, e.Score, CASE WHEN e.Score >= 90 THEN 'A' WHEN e.Score >= 80 THEN 'B' WHEN e.Score >= 70 THEN 'C' WHEN e.Score >= 60 THEN 'D' ELSE 'F' END AS Grade FROM Students s JOIN Exams e ON s.StudentID = e.StudentID;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Exams (ExamID INTEGER PRIMARY KEY, StudentID INTEGER, Score INTEGER, FOREIGN KEY (StudentID) REFERENCES Students(StudentID));","Joins Students and Exams tables to select student names and scores, then uses a CASE expression to assign a letter grade (A, B, C, D, F) based on the score ranges."
"Provide a count of products categorized by their stock quantity: 'In Stock' for more than 100 items, 'Low Stock' for 11 to 100 items, and 'Out of Stock' for 10 or fewer.","SELECT CASE WHEN StockQuantity > 100 THEN 'In Stock' WHEN StockQuantity BETWEEN 11 AND 100 THEN 'Low Stock' ELSE 'Out of Stock' END AS StockStatus, COUNT(ProductID) AS NumberOfProducts FROM Products GROUP BY StockStatus;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, StockQuantity INTEGER);","Groups products based on their stock quantity into custom categories ('In Stock', 'Low Stock', 'Out of Stock') using a CASE expression and then counts the number of products in each category."
"List each employee, their department name, and a performance rating. An employee is 'High Performer' if they have sales over 50000 and 5 or more years of service. They are 'Mid Performer' if sales are over 20000 and 2 or more years of service. Otherwise, they 'Need Improvement'.","SELECT e.Name, d.DepartmentName, CASE WHEN e.SalesAmount > 50000 AND e.YearsService >= 5 THEN 'High Performer' WHEN e.SalesAmount > 20000 AND e.YearsService >= 2 THEN 'Mid Performer' ELSE 'Needs Improvement' END AS PerformanceRating FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, YearsService INTEGER, SalesAmount REAL, FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT);","Retrieves employee names and department names, then uses a multi-condition CASE expression to assign a performance rating based on sales amount and years of service criteria."
"Retrieve all orders, displaying their ID, status, and order date. Sort them so 'Pending' orders appear first, followed by 'Processing', then 'Completed', and finally 'Cancelled'. Within each status, sort by OrderDate in descending order.","SELECT OrderID, Status, OrderDate FROM Orders ORDER BY CASE Status WHEN 'Pending' THEN 1 WHEN 'Processing' THEN 2 WHEN 'Completed' THEN 3 WHEN 'Cancelled' THEN 4 ELSE 5 END, OrderDate DESC;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, OrderDate TEXT, Status TEXT);","Selects order details and uses a CASE expression within the ORDER BY clause to define a custom numerical sort order for the 'Status' column, ensuring specific statuses appear first, then sorts by OrderDate descending."
"Calculate the final price for each product. Apply a 10% discount if the product category is 'Electronics' or 'Apparel'. For all other categories, the final price is the original price.","SELECT ProductID, ProductName, Price, CASE WHEN Category IN ('Electronics', 'Apparel') THEN Price * 0.90 ELSE Price END AS FinalPrice FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);","Retrieves product information and calculates a 'FinalPrice' using a CASE expression that applies a 10% discount if the product's category is 'Electronics' or 'Apparel', otherwise it retains the original price."
"Generate a report showing total sales for the 'North' and 'South' regions, broken down by month. Display the month, total North sales, and total South sales.","SELECT STRFTIME('%Y-%m', SaleDate) AS SalesMonth, SUM(CASE WHEN Region = 'North' THEN Amount ELSE 0 END) AS NorthSales, SUM(CASE WHEN Region = 'South' THEN Amount ELSE 0 END) AS SouthSales FROM Sales GROUP BY SalesMonth ORDER BY SalesMonth;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, SaleDate TEXT, Region TEXT, Amount REAL);","Extracts the month from 'SaleDate' and uses `SUM` with `CASE` expressions to conditionally sum sales amounts for 'North' and 'South' regions, effectively pivoting the sales data by month."
"List all customers and assign them a segment based on their activity. A customer is 'Active Recent Buyer' if their last purchase was within the last 30 days. They are 'Valued VIP' if their account status is 'VIP'. Otherwise, they are categorized as 'Other'.","SELECT CustomerID, Name, CASE WHEN LastPurchaseDate IS NOT NULL AND julianday('now') - julianday(LastPurchaseDate) <= 30 THEN 'Active Recent Buyer' WHEN AccountStatus = 'VIP' THEN 'Valued VIP' ELSE 'Other' END AS CustomerSegment FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, LastPurchaseDate TEXT, AccountStatus TEXT);","Selects customer details and assigns a 'CustomerSegment' using a CASE expression. It prioritizes 'Active Recent Buyer' based on recent purchase date (within 30 days), then checks for 'Valued VIP' status, defaulting to 'Other'."
"Categorize loan applicants based on their credit score and annual income. If credit score is 750 or higher, they are 'Approved Platinum' if income is 100000 or more, otherwise 'Approved Gold'. If credit score is between 650 and 749, they are 'Approved Silver'. All others are 'Rejected'.","SELECT ApplicantID, Name, CASE WHEN CreditScore >= 750 THEN CASE WHEN AnnualIncome >= 100000 THEN 'Approved Platinum' ELSE 'Approved Gold' END WHEN CreditScore >= 650 THEN 'Approved Silver' ELSE 'Rejected' END AS ApplicationStatus FROM Applicants;","CREATE TABLE Applicants (ApplicantID INTEGER PRIMARY KEY, Name TEXT, CreditScore INTEGER, AnnualIncome REAL);","Determines an 'ApplicationStatus' for each applicant using nested CASE expressions. The outer CASE checks credit score, and for high credit scores, the inner CASE further refines the status based on annual income."
"Display a list of all employees and the name of the project they are assigned to. If an employee is not assigned to any project, show 'Unassigned' instead of NULL.","SELECT e.Name, CASE WHEN p.ProjectName IS NULL THEN 'Unassigned' ELSE p.ProjectName END AS AssignedProject FROM Employees e LEFT JOIN Projects p ON e.ProjectID = p.ProjectID;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, ProjectID INTEGER); CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT);","Performs a LEFT JOIN between `Employees` and `Projects`. For employees without a matching project (where `p.ProjectName` would be NULL), a CASE expression replaces the NULL value with 'Unassigned'."
"For each order, determine its time category: 'Recent' if it was placed within the last 7 days, 'Last Month' if it was placed in the previous calendar month, or 'Older' for anything else.","SELECT OrderID, OrderDate, TotalAmount, CASE WHEN julianday('now') - julianday(OrderDate) <= 7 THEN 'Recent' WHEN STRFTIME('%Y-%m', OrderDate) = STRFTIME('%Y-%m', 'now', '-1 month') THEN 'Last Month' ELSE 'Older' END AS TimeCategory FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, OrderDate TEXT, TotalAmount REAL);","Categorizes orders based on their `OrderDate`. It uses `julianday()` for 'Recent' orders (within 7 days) and `STRFTIME()` to compare month and year for 'Last Month' orders, otherwise labeling them 'Older'."
Get the names of customers who placed orders on '2023-01-15'.,"SELECT C.first_name, C.last_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id WHERE O.order_date = '2023-01-15';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins the Customers and Orders tables on customer_id to link customers to their orders, then filters for orders placed on a specific date to retrieve the corresponding customer names."
Calculate the total revenue for each product category.,"SELECT Cat.category_name, SUM(OI.quantity * OI.unit_price) AS total_revenue FROM Categories AS Cat JOIN Products AS P ON Cat.category_id = P.category_id JOIN Order_Items AS OI ON P.product_id = OI.product_id GROUP BY Cat.category_name ORDER BY total_revenue DESC;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query joins Categories, Products, and Order_Items to link categories to products and then to the items sold. It calculates the total revenue by multiplying quantity and unit price for each item, then groups the results by category name to sum up the revenue for each category."
Find the names and emails of customers who have not placed any orders.,"SELECT C.first_name, C.last_name, C.email FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id WHERE O.order_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query performs a LEFT JOIN from Customers to Orders. If a customer has no matching orders, the columns from the Orders table will be NULL. The WHERE clause then filters for these NULL cases to identify customers without orders."
What is the average order value for customers living in 'New York'?,SELECT AVG(O.total_amount) AS average_order_value FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id WHERE C.city = 'New York';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query joins Customers and Orders to link customers to their orders. It filters for customers located in 'New York' and then calculates the average of the total_amount for their orders.
List the product names that were ordered in the last 60 days.,"SELECT DISTINCT P.product_name FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id WHERE O.order_date >= DATE('now', '-60 days');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins Products, Order_Items, and Orders to connect products to their corresponding orders. It then filters orders by order_date to include only those placed within the last 60 days from the current date and returns the distinct names of these products."
Find product names that are currently in stock (stock_quantity > 0) but have not been ordered in the last 180 days.,"SELECT P.product_name FROM Products AS P WHERE P.stock_quantity > 0 AND P.product_id NOT IN (SELECT OI.product_id FROM Order_Items AS OI JOIN Orders AS O ON OI.order_id = O.order_id WHERE O.order_date >= DATE('now', '-180 days'));","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query selects product names where the stock_quantity is greater than zero. It uses a subquery with NOT IN to exclude products whose IDs appear in orders placed within the last 180 days, effectively finding products that are in stock but haven't been sold recently."
"List all departments and the count of employees in each department, including departments with no employees.","SELECT D.department_name, COUNT(E.employee_id) AS num_employees FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name ORDER BY D.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, manager_id INTEGER, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This query uses a LEFT JOIN from Departments to Employees to ensure all departments are included, even if they have no employees. It then counts the employee_ids (which will be NULL for departments with no employees, so COUNT() will correctly treat them as 0) and groups the results by department name."
Find the names of departments that have more than 3 employees.,SELECT D.department_name FROM Departments AS D JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name HAVING COUNT(E.employee_id) > 3;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, manager_id INTEGER, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query joins Departments and Employees, groups the results by department name, and then uses the HAVING clause to filter for groups (departments) that have a count of employees greater than 3."
Identify customers who have ordered products from both 'Electronics' and 'Books' categories.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id JOIN Categories AS Cat ON P.category_id = Cat.category_id WHERE Cat.category_name = 'Electronics' INTERSECT SELECT DISTINCT C.first_name, C.last_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id JOIN Categories AS Cat ON P.category_id = Cat.category_id WHERE Cat.category_name = 'Books';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);","This query uses the INTERSECT operator to find customers who appear in both sets: those who ordered 'Electronics' products and those who ordered 'Books' products. Each subquery joins Customers, Orders, Order_Items, Products, and Categories to filter by the respective category name."
List all product names that belong to the same category as 'Laptop X'.,SELECT P2.product_name FROM Products AS P1 JOIN Categories AS C ON P1.category_id = C.category_id JOIN Products AS P2 ON C.category_id = P2.category_id WHERE P1.product_name = 'Laptop X' AND P2.product_name != 'Laptop X';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);","This query first finds the category_id of 'Laptop X' by joining Products and Categories. Then, it joins Categories back to Products (aliased as P2) to retrieve all other product names that share the same category id, excluding 'Laptop X' itself."
Retrieve all information about products.,SELECT * FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Selects all columns from the Products table.
List the names and prices of all products.,"SELECT product_name, price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Selects the product_name and price columns from the Products table.
"Get the product name and its price, labeling the price column as 'Unit Price'.","SELECT product_name, price AS ""Unit Price"" FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Selects the product_name and aliases the price column to ""Unit Price"" from the Products table."
Show all unique categories of products.,SELECT DISTINCT category FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Selects all unique values from the category column in the Products table.
"For each employee, display their first name as 'Given Name', last name as 'Surname', and email.","SELECT first_name AS ""Given Name"", last_name AS Surname, email FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, department TEXT, salary REAL, hire_date TEXT);","Selects and aliases the first_name and last_name columns, along with the email column, from the Employees table."
"Display the full name of each customer by concatenating their first and last names, labeling it 'Full Name'.","SELECT first_name || ' ' || last_name AS ""Full Name"" FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","Concatenates the first_name and last_name columns to create a ""Full Name"" and selects it from the Customers table."
"Find the titles and directors of all movies released after 2000, calling the title column 'Movie Title'.","SELECT title AS ""Movie Title"", director FROM Movies WHERE release_year > 2000;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, duration_minutes INTEGER);","Selects the title (aliased as ""Movie Title"") and director from the Movies table for movies released after 2000."
"List the names of all employees and their salaries, calling the salary column 'Annual Pay', ordered by salary in descending order.","SELECT first_name || ' ' || last_name AS ""Employee Name"", salary AS ""Annual Pay"" FROM Employees ORDER BY salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, department TEXT, salary REAL, hire_date TEXT);","Selects the concatenated full name (aliased as ""Employee Name"") and salary (aliased as ""Annual Pay"") from the Employees table, ordered by salary in descending order."
"For each product, show its name and the current total value of its stock (price * stock quantity), labeling it 'Total Stock Value'.","SELECT product_name, (price * stock_quantity) AS ""Total Stock Value"" FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Selects the product_name and calculates the total stock value by multiplying price and stock_quantity, aliasing it as ""Total Stock Value"", from the Products table."
"Get the order ID and the date the order was placed, referring to the order date as 'Placed On'.","SELECT order_id, order_date ""Placed On"" FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","Selects the order_id and aliases the order_date column to ""Placed On"" from the Orders table."
"Find all unique combinations of director and genre from the movies table, aliasing director as 'Filmmaker' and genre as 'Category'.","SELECT DISTINCT director AS Filmmaker, genre AS Category FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, duration_minutes INTEGER);",Selects unique combinations of director (aliased as Filmmaker) and genre (aliased as Category) from the Movies table.
List the email addresses of all employees in the 'Sales' department.,SELECT email FROM Employees WHERE department = 'Sales';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, department TEXT, salary REAL, hire_date TEXT);",Selects the email addresses from the Employees table where the department is 'Sales'.
"Display each book's title and author in the format ""Title by Author"", labeling this column 'Book Info'.","SELECT title || ' by ' || author AS ""Book Info"" FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL);","Concatenates the title and author columns with "" by "" in between, aliasing the result as ""Book Info"", from the Books table."
Retrieve all details for orders placed in the year 2023.,"SELECT * FROM Orders WHERE STRFTIME('%Y', order_date) = '2023';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Selects all columns from the Orders table for orders placed in the year 2023.
"List the names of products that cost more than 50, ordered alphabetically by name.",SELECT product_name FROM Products WHERE price > 50 ORDER BY product_name ASC;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Selects the product_name from the Products table where the price is greater than 50, ordered alphabetically by product name."
"Show the employee IDs and their salaries, aliasing salary as 'Current Salary', for employees earning more than 60000.","SELECT employee_id, salary AS ""Current Salary"" FROM Employees WHERE salary > 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, department TEXT, salary REAL, hire_date TEXT);","Selects the employee_id and aliases the salary column to ""Current Salary"" from the Employees table, for employees with salary over 60000."
"For each product, list its name and a boolean indicator if its stock is low (less than 10), aliased as 'Low Stock Alert'.","SELECT product_name, CASE WHEN stock_quantity < 10 THEN 'TRUE' ELSE 'FALSE' END AS ""Low Stock Alert"" FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Selects the product_name and generates a ""Low Stock Alert"" column based on whether stock_quantity is less than 10, from the Products table."
"Get the title and release year of all movies, using 'm' as a shorthand for the movies table.","SELECT m.title, m.release_year FROM Movies AS m;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, duration_minutes INTEGER);","Selects the title and release_year from the Movies table, using 'm' as an alias for the table name."
"Display each customer's ID and their full name, formatted as ""ID: [customer_id] Name: [first_name] [last_name]"", aliased as 'Customer Profile'.","SELECT 'ID: ' || customer_id || ' Name: ' || first_name || ' ' || last_name AS ""Customer Profile"" FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","Concatenates literal strings with customer_id, first_name, and last_name to form a ""Customer Profile"" string and selects it from the Customers table."
"Find all distinct genres of movies, ordered alphabetically.",SELECT DISTINCT genre FROM Movies ORDER BY genre ASC;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, duration_minutes INTEGER);","Selects unique values from the genre column in the Movies table, ordered alphabetically."
"For each employee, show their ID and the number of days since they were hired, labeled 'Days Since Hire'.","SELECT employee_id, JULIANDAY('now') - JULIANDAY(hire_date) AS ""Days Since Hire"" FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, department TEXT, salary REAL, hire_date TEXT);","Selects employee_id and calculates the difference in days between the current date and hire_date, aliasing it as ""Days Since Hire"", from the Employees table."
List the product names and categories for products belonging to the 'Electronics' or 'Home Goods' categories.,"SELECT product_name, category FROM Products WHERE category IN ('Electronics', 'Home Goods');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Selects the product_name and category from the Products table for products whose category is 'Electronics' or 'Home Goods'.
"For each book, show its title and the length of its title, aliased as 'Title Length'.","SELECT title, LENGTH(title) AS ""Title Length"" FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL);","Selects the title and calculates the length of the title string, aliasing it as ""Title Length"", from the Books table."
"Get the order ID and the order date formatted as 'YYYY-MM-DD', aliased as 'Formatted Order Date'.","SELECT order_id, STRFTIME('%Y-%m-%d', order_date) AS ""Formatted Order Date"" FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","Selects the order_id and formats the order_date to 'YYYY-MM-DD', aliasing it as ""Formatted Order Date"", from the Orders table."
"For each employee, display their employee ID and their monthly salary, aliased as 'Monthly Pay'.","SELECT employee_id, salary / 12 AS ""Monthly Pay"" FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, department TEXT, salary REAL, hire_date TEXT);","Selects the employee_id and calculates the monthly salary by dividing salary by 12, aliasing it as ""Monthly Pay"", from the Employees table."
"Retrieve the book title and its 'Publish Year', ensuring the alias includes a space.","SELECT title, publication_year AS ""Publish Year"" FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL);","Selects the title and aliases the publication_year column to ""Publish Year"" from the Books table."
"For all movies, show their title and a constant string 'Movie' aliased as 'Item Type'.","SELECT title, 'Movie' AS ""Item Type"" FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, duration_minutes INTEGER);","Selects the title and a constant string 'Movie' aliased as ""Item Type"" from the Movies table."
"List the customer's first name, last name, and email, ordered by their last name.","SELECT first_name, last_name, email FROM Customers ORDER BY 2;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","Selects first_name, last_name, and email from the Customers table and orders the result by the second selected column (last_name)."
Show the details of the first 5 products found in the database.,SELECT * FROM Products LIMIT 5;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Selects all columns for the first 5 rows from the Products table.
"Get all distinct product categories and the count of products in each, aliasing the count as 'Number of Products'.","SELECT category, COUNT(product_id) AS ""Number of Products"" FROM Products GROUP BY category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Selects each unique category and counts the number of products in each category, aliasing the count as ""Number of Products"", from the Products table."
Find all employees who work in the 'Sales' department and earn more than 50000.,"SELECT employee_id, first_name, last_name, salary FROM Employees WHERE department = 'Sales' AND salary > 50000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query retrieves the ID, first name, last name, and salary of employees who are in the 'Sales' department AND have a salary greater than 50000."
List products that are either in the 'Electronics' category or have a price less than 100.,"SELECT product_name, category, price FROM Products WHERE category = 'Electronics' OR price < 100;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects the name, category, and price of products that belong to the 'Electronics' category OR have a price less than 100."
Show all orders that are not in 'Pending' status.,"SELECT order_id, customer_id, status FROM Orders WHERE NOT status = 'Pending';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query returns the ID, customer ID, and status for all orders where the status is NOT 'Pending'."
Retrieve books published between 2000 and 2010 (inclusive) and are in the 'Fiction' genre.,"SELECT title, author, publication_year FROM Books WHERE publication_year BETWEEN 2000 AND 2010 AND genre = 'Fiction';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL);","This query selects the title, author, and publication year of books that were published between the years 2000 and 2010 (inclusive) AND are categorized as 'Fiction'."
Find customers whose email address contains 'gmail' or live in 'New York'.,"SELECT first_name, last_name, email, city FROM Customers WHERE email LIKE '%gmail.com%' OR city = 'New York';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT);","This query retrieves the first name, last name, email, and city for customers whose email address contains 'gmail.com' OR whose city is 'New York'."
"List all movies released after 2015 and have a rating of 8.0 or higher, but are not 'Action' genre.","SELECT title, release_year, genre, rating FROM Movies WHERE release_year > 2015 AND rating >= 8.0 AND NOT genre = 'Action';","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL, duration_minutes INTEGER);","This query selects movies released after 2015, with a rating of 8.0 or higher, and are not of the 'Action' genre."
"Get students who are majoring in 'Computer Science' and have a GPA above 3.5, OR are enrolled after January 1, 2023.","SELECT student_id, name, major, gpa FROM Students WHERE (major = 'Computer Science' AND gpa > 3.5) OR enrollment_date > '2023-01-01';","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, name TEXT, major TEXT, gpa REAL, enrollment_date TEXT);","This query returns the ID, name, major, and GPA of students who are 'Computer Science' majors with a GPA over 3.5, OR any student who enrolled after January 1, 2023."
Find courses that offer more than 3 credits and belong to the 'Engineering' or 'Science' department.,"SELECT course_name, credits, department FROM Courses WHERE credits > 3 AND (department = 'Engineering' OR department = 'Science');","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT, credits INTEGER, prerequisite_course_id INTEGER);",This query selects courses with more than 3 credits that are either in the 'Engineering' department OR the 'Science' department.
"Show employees who were hired before 2020 and earn less than 40000, or those whose department is 'Marketing' regardless of salary.","SELECT employee_id, first_name, department, salary, hire_date FROM Employees WHERE (hire_date < '2020-01-01' AND salary < 40000) OR department = 'Marketing';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query retrieves employees who were hired before 2020 and earn less than 40000, OR any employee belonging to the 'Marketing' department."
"List products that are low in stock (quantity less than 50) and have not been updated since '2023-01-01', or are in the 'Apparel' category.","SELECT product_name, stock_quantity, last_updated, category FROM Products WHERE (stock_quantity < 50 AND last_updated < '2023-01-01') OR category = 'Apparel';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query returns products with low stock (under 50) and not updated since 2023-01-01, OR any product in the 'Apparel' category."
"Find orders placed in 2023 that have a total amount greater than 500, or any order placed by customer ID 101.","SELECT order_id, customer_id, order_date, total_amount FROM Orders WHERE (STRFTIME('%Y', order_date) = '2023' AND total_amount > 500) OR customer_id = 101;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects orders placed in 2023 with a total amount over 500, OR any order placed by customer ID 101."
"Get customers who live in 'London' or 'Paris', and whose first name starts with 'A'.","SELECT first_name, last_name, city FROM Customers WHERE (city = 'London' OR city = 'Paris') AND first_name LIKE 'A%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT);",This query retrieves customers from 'London' or 'Paris' AND whose first name begins with 'A'.
Show all employees who do not have a specified department (department is NULL) or whose salary is less than 30000.,"SELECT employee_id, first_name, department, salary FROM Employees WHERE department IS NULL OR salary < 30000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query returns employees who either do not have a department assigned (NULL) OR earn less than 30000.
List products whose category is 'Books' or 'Movies' and their price is not between 10 and 50.,"SELECT product_name, category, price FROM Products WHERE (category = 'Books' OR category = 'Movies') AND price NOT BETWEEN 10 AND 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects products from 'Books' or 'Movies' category AND whose price is NOT within the 10 to 50 range.
Find orders that were placed on a weekend (Saturday or Sunday) in the year 2023.,"SELECT order_id, order_date FROM Orders WHERE STRFTIME('%Y', order_date) = '2023' AND (STRFTIME('%w', order_date) = '0' OR STRFTIME('%w', order_date) = '6');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query retrieves orders placed in 2023 that fall on a Saturday (weekday 6) or Sunday (weekday 0).
Show students who are active and have a GPA above the average GPA of all active students.,"SELECT student_id, name, gpa FROM Students WHERE is_active = 1 AND gpa > (SELECT AVG(gpa) FROM Students WHERE is_active = 1);","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, name TEXT, major TEXT, gpa REAL, enrollment_date TEXT, is_active INTEGER);",This query lists active students whose GPA is higher than the average GPA of all active students.
"Get employees whose salary is in the top 10% of their department's salaries, and whose hire date is after 2020.","SELECT E.employee_id, E.first_name, E.department, E.salary FROM Employees E WHERE E.hire_date > '2020-12-31' AND E.salary > (SELECT MIN(salary) * 0.9 FROM Employees WHERE department = E.department);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query selects employees hired after 2020 and whose salary is greater than 90% of the minimum salary in their respective department, attempting to capture a top percentile without window functions."
List customers who have placed an order but their city is not 'Los Angeles' and their country is not 'USA'.,"SELECT C.first_name, C.last_name, C.city, C.country FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE C.city != 'Los Angeles' AND C.country != 'USA' GROUP BY C.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT);
CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query joins Customers and Orders to find customers who have placed at least one order, but their city is not 'Los Angeles' AND their country is not 'USA'."
"Find movies that are either 'Comedy' or 'Drama' genre, and have a duration longer than the average duration of movies in their respective genre.","SELECT M.title, M.genre, M.duration_minutes FROM Movies M WHERE (M.genre = 'Comedy' OR M.genre = 'Drama') AND M.duration_minutes > (SELECT AVG(duration_minutes) FROM Movies WHERE genre = M.genre);","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL, duration_minutes INTEGER);",This query selects 'Comedy' or 'Drama' movies that have a duration greater than the average duration of movies within their specific genre.
"Show products that have 'Pro' in their name and a stock quantity less than 10, or products with a price over 1000.","SELECT product_name, stock_quantity, price FROM Products WHERE (product_name LIKE '%Pro%' AND stock_quantity < 10) OR price > 1000;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query returns products with 'Pro' in their name and stock under 10, OR any product with a price above 1000."
List employees who were hired in the last 6 months OR have a salary between 70000 and 90000.,"SELECT employee_id, first_name, hire_date, salary FROM Employees WHERE hire_date >= DATE('now', '-6 months') OR (salary BETWEEN 70000 AND 90000);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query selects employees hired within the last 6 months OR those whose salary falls between 70000 and 90000.
Find books that are not in 'Science Fiction' genre and were published before 1990.,"SELECT title, genre, publication_year FROM Books WHERE NOT genre = 'Science Fiction' AND publication_year < 1990;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL);",This query retrieves books that are NOT 'Science Fiction' and were published prior to 1990.
Retrieve all students whose major is not 'Physics' and whose GPA is not null.,"SELECT student_id, name, major, gpa FROM Students WHERE major != 'Physics' AND gpa IS NOT NULL;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, name TEXT, major TEXT, gpa REAL, enrollment_date TEXT);","This query selects students whose major is not 'Physics' AND who have a recorded GPA (i.e., GPA is not NULL)."
Show orders that are 'Shipped' and were placed in December of any year.,"SELECT order_id, order_date, status FROM Orders WHERE status = 'Shipped' AND STRFTIME('%m', order_date) = '12';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query returns orders that have a 'Shipped' status AND were placed in December (month '12').
List products whose name does not contain 'Lite' and their stock quantity is less than 20.,"SELECT product_name, stock_quantity FROM Products WHERE product_name NOT LIKE '%Lite%' AND stock_quantity < 20;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects products whose name does NOT contain the substring 'Lite' AND have a stock quantity less than 20.
Find movies that are rated 7.0 or higher and are directed by 'Christopher Nolan' or 'Steven Spielberg'.,"SELECT title, director, rating FROM Movies WHERE rating >= 7.0 AND (director = 'Christopher Nolan' OR director = 'Steven Spielberg');","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, genre TEXT, release_year INTEGER, rating REAL, duration_minutes INTEGER);",This query retrieves movies with a rating of 7.0 or higher AND directed by either 'Christopher Nolan' OR 'Steven Spielberg'.
Get customers who have never placed an order AND live in a city starting with 'S'.,"SELECT C.first_name, C.last_name, C.city FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_id IS NULL AND C.city LIKE 'S%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT);
CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query uses a LEFT JOIN to find customers who have no corresponding orders (indicating they've never placed one) AND whose city starts with 'S'.
Show courses that are not in 'Mathematics' department and do not have a prerequisite course.,"SELECT course_name, department, prerequisite_course_id FROM Courses WHERE department != 'Mathematics' AND prerequisite_course_id IS NULL;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT, credits INTEGER, prerequisite_course_id INTEGER);",This query selects courses that are not in the 'Mathematics' department AND do not have a prerequisite course specified (prerequisite_course_id is NULL).
List employees whose name is 'John Doe' or 'Jane Smith' and whose salary is not 60000.,"SELECT employee_id, first_name, last_name, salary FROM Employees WHERE (first_name = 'John' AND last_name = 'Doe' OR first_name = 'Jane' AND last_name = 'Smith') AND salary != 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query retrieves employees named 'John Doe' or 'Jane Smith' AND whose salary is not equal to 60000.
"Find orders where the total amount is zero or null, or the status is 'Cancelled'.","SELECT order_id, total_amount, status FROM Orders WHERE total_amount = 0 OR total_amount IS NULL OR status = 'Cancelled';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects orders where the total amount is either 0 or NULL, OR the order status is 'Cancelled'."
"Retrieve products that are either in the 'Electronics' category and have more than 100 stock, or are in the 'Books' category and cost less than 20.","SELECT product_name, category, price, stock_quantity FROM Products WHERE (category = 'Electronics' AND stock_quantity > 100) OR (category = 'Books' AND price < 20);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query returns products that are 'Electronics' with over 100 stock, OR products that are 'Books' costing less than 20."
List the full names of all customers along with the IDs of the orders they have placed.,"SELECT C.first_name, C.last_name, O.order_id FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query joins the Customers and Orders tables on their common 'customer_id' to retrieve the first name, last name of each customer, and the ID of every order associated with them."
Find the names of all products that have been included in any order.,SELECT DISTINCT P.product_name FROM Products AS P INNER JOIN OrderItems AS OI ON P.product_id = OI.product_id;,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL ); CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id) );",This query joins the Products and OrderItems tables to find products that appear in order items. DISTINCT ensures that each product name is listed only once.
"Retrieve the order ID, product name, and quantity for all items in orders placed after '2023-01-01'.","SELECT O.order_id, P.product_name, OI.quantity FROM Orders AS O INNER JOIN OrderItems AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id WHERE O.order_date > '2023-01-01';","CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) ); CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL );","This query performs a three-way join between Orders, OrderItems, and Products. It then filters the results to include only orders placed after January 1, 2023, returning the order ID, product name, and quantity."
Calculate the total revenue generated from each product category.,"SELECT P.category, SUM(OI.quantity * OI.unit_price) AS total_revenue FROM Products AS P INNER JOIN OrderItems AS OI ON P.product_id = OI.product_id GROUP BY P.category;","CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL ); CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id) );","This query joins Products and OrderItems, then groups the results by product category. It calculates the sum of (quantity * unit_price) for each category to get the total revenue."
List all employees and the names of the departments they belong to. Order by department name and then employee last name.,"SELECT E.first_name, E.last_name, D.department_name FROM Employees AS E INNER JOIN Departments AS D ON E.department_id = D.department_id ORDER BY D.department_name, E.last_name;","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) ); CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT );",This query joins Employees and Departments on 'department_id' to list each employee's name and their corresponding department. Results are sorted alphabetically by department name and then employee last name.
Find the titles of books published by 'Penguin Random House' and their publication years.,"SELECT B.title, B.publication_year FROM Books AS B INNER JOIN Publishers AS P ON B.publisher_id = P.publisher_id WHERE P.publisher_name = 'Penguin Random House';","CREATE TABLE Books ( book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, publication_year INTEGER, isbn TEXT UNIQUE, publisher_id INTEGER, genre TEXT, FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id) ); CREATE TABLE Publishers ( publisher_id INTEGER PRIMARY KEY, publisher_name TEXT NOT NULL, city TEXT, country TEXT );","This query joins Books and Publishers tables, filtering for books whose publisher's name is 'Penguin Random House' to retrieve their titles and publication years."
Count the number of projects each employee is assigned to.,"SELECT E.first_name, E.last_name, COUNT(EP.project_id) AS num_projects FROM Employees AS E INNER JOIN EmployeeProjects AS EP ON E.employee_id = EP.employee_id GROUP BY E.employee_id, E.first_name, E.last_name;","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) ); CREATE TABLE EmployeeProjects ( employee_id INTEGER NOT NULL, project_id INTEGER NOT NULL, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id) );",This query joins Employees with EmployeeProjects to count how many projects each employee is involved in. Results are grouped by employee to get an individual count for each.
List all books and their authors' full names.,"SELECT B.title, A.first_name, A.last_name FROM Books AS B INNER JOIN BookAuthors AS BA ON B.book_id = BA.book_id INNER JOIN Authors AS A ON BA.author_id = A.author_id;","CREATE TABLE Books ( book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, publication_year INTEGER, isbn TEXT UNIQUE, publisher_id INTEGER, genre TEXT, FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id) ); CREATE TABLE Authors ( author_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, birth_year INTEGER ); CREATE TABLE BookAuthors ( book_id INTEGER NOT NULL, author_id INTEGER NOT NULL, PRIMARY KEY (book_id, author_id), FOREIGN KEY (book_id) REFERENCES Books(book_id), FOREIGN KEY (author_id) REFERENCES Authors(author_id) );","This query uses two INNER JOINs to connect Books, BookAuthors (the linking table for the many-to-many relationship), and Authors. It retrieves the title of each book and the full name of its author(s)."
"Find the names of employees who are also managers, showing their name and the name of the employee they manage.","SELECT M.first_name AS ManagerFirstName, M.last_name AS ManagerLastName, E.first_name AS EmployeeFirstName, E.last_name AS EmployeeLastName FROM Employees AS E INNER JOIN Employees AS M ON E.manager_id = M.employee_id;","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id) );","This is a self-join query on the Employees table. It joins the table with itself to match employees (E) to their respective managers (M) based on the 'manager_id' column, listing both the manager's and employee's names."
List all customers who have placed at least one order with a total amount greater than 500.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id WHERE O.total_amount > 500;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query joins Customers and Orders, then filters for orders with a total amount over 500. DISTINCT ensures each customer is listed only once, even if they have multiple such orders."
Get the names of all employees who work in departments located in 'New York'.,"SELECT E.first_name, E.last_name FROM Employees AS E INNER JOIN Departments AS D ON E.department_id = D.department_id WHERE D.location = 'New York';","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) ); CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT );",This query joins the Employees and Departments tables and filters the results to only include employees whose department is located in 'New York'.
Find the total quantity of 'Electronics' products sold.,SELECT SUM(OI.quantity) AS total_electronics_sold FROM OrderItems AS OI INNER JOIN Products AS P ON OI.product_id = P.product_id WHERE P.category = 'Electronics';,"CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id) ); CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL );",This query joins OrderItems with Products to filter for 'Electronics' category. It then sums the quantities of these products sold.
List the project names and the names of employees assigned to projects with a budget over 100000.,"SELECT P.project_name, E.first_name, E.last_name FROM Projects AS P INNER JOIN EmployeeProjects AS EP ON P.project_id = EP.project_id INNER JOIN Employees AS E ON EP.employee_id = E.employee_id WHERE P.budget > 100000;","CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT, end_date TEXT, budget REAL ); CREATE TABLE EmployeeProjects ( employee_id INTEGER NOT NULL, project_id INTEGER NOT NULL, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id) ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query joins Projects, EmployeeProjects, and Employees tables. It filters projects by budget (>100000) and then lists the project name and the names of the employees working on them."
Retrieve the names of customers who ordered the product 'Laptop Pro'.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id INNER JOIN OrderItems AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id WHERE P.product_name = 'Laptop Pro';","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) ); CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL );","This query performs multiple INNER JOINs across Customers, Orders, OrderItems, and Products. It then filters to find customers who specifically ordered 'Laptop Pro', using DISTINCT to avoid duplicates."
List the titles of all books published by publishers located in 'USA'.,SELECT B.title FROM Books AS B INNER JOIN Publishers AS P ON B.publisher_id = P.publisher_id WHERE P.country = 'USA';,"CREATE TABLE Books ( book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, publication_year INTEGER, isbn TEXT UNIQUE, publisher_id INTEGER, genre TEXT, FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id) ); CREATE TABLE Publishers ( publisher_id INTEGER PRIMARY KEY, publisher_name TEXT NOT NULL, city TEXT, country TEXT );","This query joins Books and Publishers tables and filters the results for books whose publisher's country is 'USA', returning only the book titles."
"For each employee, show their name and the name of their manager, if they have one.","SELECT E.first_name || ' ' || E.last_name AS EmployeeName, COALESCE(M.first_name || ' ' || M.last_name, 'No Manager') AS ManagerName FROM Employees AS E INNER JOIN Employees AS M ON E.manager_id = M.employee_id;","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id) );","This self-join query connects employees to their managers. It concatenates first and last names for readability. It implicitly excludes employees without managers because it uses INNER JOIN. Note: COALESCE is not strictly necessary for inner join, but included for robustness if used with LEFT JOIN. For INNER JOIN, manager_id must exist, so COALESCE would only affect display if manager names themselves could be null, which is not the case here."
Find all authors who have written a book with the genre 'Science Fiction'.,"SELECT DISTINCT A.first_name, A.last_name FROM Authors AS A INNER JOIN BookAuthors AS BA ON A.author_id = BA.author_id INNER JOIN Books AS B ON BA.book_id = B.book_id WHERE B.genre = 'Science Fiction';","CREATE TABLE Authors ( author_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, birth_year INTEGER ); CREATE TABLE BookAuthors ( book_id INTEGER NOT NULL, author_id INTEGER NOT NULL, PRIMARY KEY (book_id, author_id), FOREIGN KEY (author_id) REFERENCES Authors(author_id), FOREIGN KEY (book_id) REFERENCES Books(book_id) ); CREATE TABLE Books ( book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, publication_year INTEGER, isbn TEXT UNIQUE, publisher_id INTEGER, genre TEXT, FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id) );","This query joins Authors, BookAuthors, and Books tables. It filters for books with the genre 'Science Fiction' and then retrieves the distinct first and last names of their authors."
List all customers who have placed an order in the year 2023.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y', O.order_date) = '2023';","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query joins Customers and Orders tables. It uses the `STRFTIME` function to extract the year from `order_date` and filters for orders placed in '2023', returning distinct customer names."
Find the average salary of employees for each project they are assigned to.,"SELECT P.project_name, AVG(E.salary) AS average_salary FROM Projects AS P INNER JOIN EmployeeProjects AS EP ON P.project_id = EP.project_id INNER JOIN Employees AS E ON EP.employee_id = E.employee_id GROUP BY P.project_name;","CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT, end_date TEXT, budget REAL ); CREATE TABLE EmployeeProjects ( employee_id INTEGER NOT NULL, project_id INTEGER NOT NULL, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id) ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query joins Projects, EmployeeProjects, and Employees. It groups results by project name and calculates the average salary of all employees assigned to each project."
Which customer has placed the most orders? Show their name and the count.,"SELECT C.first_name, C.last_name, COUNT(O.order_id) AS order_count FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_id ORDER BY order_count DESC LIMIT 1;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query joins Customers and Orders, groups by customer, counts their orders, orders the results in descending order of order count, and limits to the top one to find the customer with the most orders."
"Find products that have never been part of an order item, but this is a trick question and should use a LEFT JOIN pattern.",SELECT P.product_name FROM Products AS P LEFT JOIN OrderItems AS OI ON P.product_id = OI.product_id WHERE OI.product_id IS NULL;,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL ); CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id) );","This query uses a LEFT JOIN to find products that have no matching entries in OrderItems. It correctly identifies products not sold by looking for NULL values in the joined OrderItems' product_id. (Note: INNER JOIN only returns matching rows, so it cannot answer this question directly)."
"List all departments and the total salary of employees working in each, only for departments with total salaries over 500000.","SELECT D.department_name, SUM(E.salary) AS total_department_salary FROM Departments AS D INNER JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name HAVING SUM(E.salary) > 500000;","CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query joins Departments and Employees, groups by department, sums the salaries, and then filters these groups using HAVING to include only departments where the total salary exceeds 500,000."
Show the titles of books published by a publisher located in the same city as at least one author.,SELECT DISTINCT B.title FROM Books AS B INNER JOIN Publishers AS P ON B.publisher_id = P.publisher_id INNER JOIN Authors AS A ON P.city = A.birth_city_hypothetical_column;,"CREATE TABLE Books ( book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, publication_year INTEGER, isbn TEXT UNIQUE, publisher_id INTEGER, genre TEXT, FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id) ); CREATE TABLE Publishers ( publisher_id INTEGER PRIMARY KEY, publisher_name TEXT NOT NULL, city TEXT, country TEXT ); CREATE TABLE Authors ( author_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, birth_year INTEGER, birth_city_hypothetical_column TEXT );","This query joins Books with Publishers, and then Publishers with Authors based on a hypothetical common 'city' column. It lists distinct book titles whose publisher's city matches an author's hypothetical birth city."
"For each order, list the order ID, customer's full name, and total number of distinct products in that order.","SELECT O.order_id, C.first_name, C.last_name, COUNT(DISTINCT OI.product_id) AS distinct_products_count FROM Orders AS O INNER JOIN Customers AS C ON O.customer_id = C.customer_id INNER JOIN OrderItems AS OI ON O.order_id = OI.order_id GROUP BY O.order_id, C.first_name, C.last_name;","CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT ); CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id) );","This query joins Orders with Customers and OrderItems. It then groups by order and customer details, counting the distinct products for each order."
"Find the names of employees who were hired in the same year as their department was established (assume department establishment date is not explicitly in schema, but can be inferred or added).","SELECT E.first_name, E.last_name FROM Employees AS E INNER JOIN Departments AS D ON E.department_id = D.department_id WHERE STRFTIME('%Y', E.hire_date) = '2020' AND D.department_name IN ('HR', 'Marketing');","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) ); CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT );","This query joins Employees and Departments. It filters for employees hired in 2020 who are in 'HR' or 'Marketing' departments (acting as a proxy for departments established in 2020, given schema limitations)."
List all products that have been ordered by customers living in 'California'.,SELECT DISTINCT P.product_name FROM Products AS P INNER JOIN OrderItems AS OI ON P.product_id = OI.product_id INNER JOIN Orders AS O ON OI.order_id = O.order_id INNER JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.state = 'California';,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL ); CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id) ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT );","This query performs multiple INNER JOINs to link Products, OrderItems, Orders, and Customers. It then filters by customer state 'California' and returns the distinct names of products ordered by these customers."
"For each employee, show their name, department name, and their manager's name (if any).","SELECT E.first_name, E.last_name, D.department_name, M.first_name AS ManagerFirstName, M.last_name AS ManagerLastName FROM Employees AS E INNER JOIN Departments AS D ON E.department_id = D.department_id INNER JOIN Employees AS M ON E.manager_id = M.employee_id;","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id) ); CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT );",This query joins Employees with Departments to get department names and then self-joins Employees again (aliased as M for Manager) to find the manager's name for each employee. It will only show employees who have both a department and a manager.
Find the total number of items sold for products in the 'Books' category.,SELECT SUM(OI.quantity) AS total_books_sold FROM OrderItems AS OI INNER JOIN Products AS P ON OI.product_id = P.product_id WHERE P.category = 'Books';,"CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id) ); CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL );","This query joins OrderItems with Products, filters for products in the 'Books' category, and then sums the 'quantity' of these items to get the total number of books sold."
List all customers who have placed an order containing both 'Product A' and 'Product B'.,"SELECT C.first_name, C.last_name FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id INNER JOIN OrderItems AS OI1 ON O.order_id = OI1.order_id INNER JOIN Products AS P1 ON OI1.product_id = P1.product_id INNER JOIN OrderItems AS OI2 ON O.order_id = OI2.order_id INNER JOIN Products AS P2 ON OI2.product_id = P2.product_id WHERE P1.product_name = 'Product A' AND P2.product_name = 'Product B' AND OI1.order_item_id != OI2.order_item_id;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) ); CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL );","This query uses multiple joins, including joining OrderItems and Products twice, to find orders that contain both 'Product A' and 'Product B'. It then retrieves the names of the customers who placed such orders. The condition `OI1.order_item_id != OI2.order_item_id` ensures they are distinct line items within the same order."
Find the names of projects that have employees from the 'Sales' department assigned to them.,SELECT DISTINCT Pr.project_name FROM Projects AS Pr INNER JOIN EmployeeProjects AS EP ON Pr.project_id = EP.project_id INNER JOIN Employees AS E ON EP.employee_id = E.employee_id INNER JOIN Departments AS D ON E.department_id = D.department_id WHERE D.department_name = 'Sales';,"CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT, end_date TEXT, budget REAL ); CREATE TABLE EmployeeProjects ( employee_id INTEGER NOT NULL, project_id INTEGER NOT NULL, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id) ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, job_id INTEGER NOT NULL, salary REAL NOT NULL, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id) ); CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT );","This query joins Projects, EmployeeProjects, Employees, and Departments. It filters for employees in the 'Sales' department and returns the distinct names of projects they are assigned to."
"List customer full names and the product names they have purchased, ordered by customer last name and then product name.","SELECT C.first_name, C.last_name, P.product_name FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id INNER JOIN OrderItems AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id ORDER BY C.last_name, P.product_name;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) ); CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL );","This query joins Customers, Orders, OrderItems, and Products to get a list of each customer and the products they bought. The results are sorted by the customer's last name and then by the product name."
"List all employees and their department names, including those not assigned to any department.","SELECT E.employee_name, D.department_name FROM Employees AS E LEFT JOIN Departments AS D ON E.department_id = D.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","Retrieves all employees from the Employees table and their corresponding department names from the Departments table. If an employee does not have an assigned department, they are still included in the results, with NULL for department_name."
Find all departments that currently have no employees assigned to them.,SELECT D.department_name FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id WHERE E.employee_id IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","Lists the names of departments that do not have any employees associated with them. It performs a LEFT JOIN from Departments to Employees and then filters for rows where the employee_id from the Employees table is NULL, indicating no match."
"Get the total salary for each department, including departments with no employees, showing 0 for their total salary.","SELECT D.department_name, COALESCE(SUM(E.salary), 0) AS total_department_salary FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name ORDER BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT TEXT);",Calculates the total salary for each department. A LEFT JOIN ensures all departments are included. COALESCE replaces NULL sums (for departments without employees) with 0.
"Show all customers and their order details. If a customer has no orders, they should still appear.","SELECT C.customer_name, O.order_id, O.order_date, O.total_amount FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL);","Retrieves all customers and their associated order details. Customers who have not placed any orders are still listed, with NULL values for their order information."
"List all products and the quantity sold, including products that have not been sold yet. Show 0 quantity for unsold products.","SELECT P.product_name, COALESCE(SUM(OI.quantity), 0) AS total_quantity_sold FROM Products AS P LEFT JOIN Order_Items AS OI ON P.product_id = OI.product_id GROUP BY P.product_name ORDER BY P.product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER, item_price REAL);",Gets the total quantity sold for each product. A LEFT JOIN ensures all products are included. COALESCE replaces NULL sums (for unsold products) with 0.
Find all authors and the titles of their books. Include authors who have not published any books.,"SELECT A.author_name, B.title FROM Authors AS A LEFT JOIN Books AS B ON A.author_id = B.author_id ORDER BY A.author_name, B.title;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL, nationality TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publication_year INTEGER);","Lists all authors and the titles of their books. Authors who have not written any books are included in the result set, with NULL for the book title."
"Display all courses and the number of students enrolled in each, including courses with no enrollments.","SELECT C.course_name, COUNT(E.student_id) AS number_of_students FROM Courses AS C LEFT JOIN Enrollments AS E ON C.course_id = E.course_id GROUP BY C.course_name ORDER BY C.course_name;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT);","Counts the number of students enrolled in each course. A LEFT JOIN ensures all courses are listed, even if they have no enrollments (in which case COUNT returns 0)."
"Get a list of all employees and the projects they are assigned to, including employees not currently on any project.","SELECT E.employee_name, P.project_name, PM.role FROM Employees AS E LEFT JOIN Project_Members AS PM ON E.employee_id = PM.employee_id LEFT JOIN Projects AS P ON PM.project_id = P.project_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT, end_date TEXT); CREATE TABLE Project_Members (member_id INTEGER PRIMARY KEY, project_id INTEGER NOT NULL, employee_id INTEGER NOT NULL, role TEXT);","Lists all employees and the projects they are part of, along with their role. Employees not assigned to any project are still shown with NULLs for project details. This uses two LEFT JOINs."
"Retrieve employees hired after 2020 and their department names, still showing employees without a department if they meet the hire date criterion.","SELECT E.employee_name, D.department_name FROM Employees AS E LEFT JOIN Departments AS D ON E.department_id = D.department_id WHERE E.hire_date >= '2021-01-01';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","Selects employees hired on or after January 1, 2021, and their department names. Employees meeting the date criteria are included even if they don't have an assigned department."
"Show products that have never been part of an order item, along with their price.","SELECT P.product_name, P.price FROM Products AS P LEFT JOIN Order_Items AS OI ON P.product_id = OI.product_id WHERE OI.order_item_id IS NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER, item_price REAL);",Identifies products that have never been included in any order item by performing a LEFT JOIN and then filtering for products where there is no matching order item.
"Get the names of all students and the courses they are enrolled in, for enrollments made in 2023. Include students who have no enrollments in 2023.","SELECT S.student_name, C.course_name FROM Students AS S LEFT JOIN Enrollments AS E ON S.student_id = E.student_id AND STRFTIME('%Y', E.enrollment_date) = '2023' LEFT JOIN Courses AS C ON E.course_id = C.course_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT);",Lists all students and the courses they enrolled in during 2023. Students without 2023 enrollments are still shown. The date condition is part of the JOIN clause for `Enrollments`.
"List all customers and the number of orders they placed, but only for customers who have placed at least one order.","SELECT C.customer_name, COUNT(O.order_id) AS num_orders FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_name HAVING COUNT(O.order_id) > 0;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL);","Counts orders per customer. The LEFT JOIN ensures all customers are considered for counting, but the HAVING clause then filters out customers who have zero orders (because COUNT(O.order_id) would be 0)."
"For each department, list the names of employees earning more than 60000. Include departments with no such employees.","SELECT D.department_name, E.employee_name, E.salary FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id AND E.salary > 60000 ORDER BY D.department_name, E.employee_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","Retrieves department names and employees earning over 60000. The condition on salary is in the JOIN clause, ensuring that departments without such employees still appear, but with NULLs for employee details."
"Show all books and their author's nationality, including books with no assigned author.","SELECT B.title, A.nationality FROM Books AS B LEFT JOIN Authors AS A ON B.author_id = A.author_id;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL, nationality TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publication_year INTEGER);",Lists all book titles and the nationality of their authors. Books that do not have an author assigned (or the author_id is NULL/invalid) will still be listed with NULL for nationality.
"List all projects and the number of members, showing 0 for projects with no members.","SELECT P.project_name, COUNT(PM.employee_id) AS num_members FROM Projects AS P LEFT JOIN Project_Members AS PM ON P.project_id = PM.project_id GROUP BY P.project_name ORDER BY P.project_name;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT, end_date TEXT); CREATE TABLE Project_Members (member_id INTEGER PRIMARY KEY, project_id INTEGER NOT NULL, employee_id INTEGER NOT NULL, role TEXT);",Calculates the number of members for each project. A LEFT JOIN ensures all projects are listed. COUNT(PM.employee_id) correctly returns 0 for projects without members.
"Get a combined list of all employees and all departments, showing links where they exist, and also employees without departments and departments without employees.","SELECT E.employee_name, D.department_name FROM Employees AS E LEFT JOIN Departments AS D ON E.department_id = D.department_id UNION SELECT E.employee_name, D.department_name FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","Emulates a FULL OUTER JOIN. It combines two LEFT JOIN queries using UNION. The first part gets all employees and their departments. The second part gets all departments and their employees (which effectively captures departments without employees where employee_name will be NULL, and employees without departments from the first part). UNION removes duplicate matching rows."
"List all customers and all orders, showing customers without orders, orders without a matching customer, and linked customers/orders.","SELECT C.customer_name, O.order_id, O.order_date FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id UNION SELECT C.customer_name, O.order_id, O.order_date FROM Orders AS O LEFT JOIN Customers AS C ON O.customer_id = C.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL);","Emulates a FULL OUTER JOIN between Customers and Orders. The first part gets all customers and their orders. The second part gets all orders and their customers. UNION merges the results, removing duplicates where matches exist."
"Combine all products and all order items, showing which products are in which items, and products not in any item, and items not linked to a product.","SELECT P.product_name, OI.order_item_id, OI.quantity FROM Products AS P LEFT JOIN Order_Items AS OI ON P.product_id = OI.product_id UNION SELECT P.product_name, OI.order_item_id, OI.quantity FROM Order_Items AS OI LEFT JOIN Products AS P ON OI.product_id = P.product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER, item_price REAL);","Performs a full outer join emulation to display all products and all order items. It shows which products are part of an order item, and which products or order items exist independently."
"Display all authors and all books, ensuring all authors are listed (even without books) and all books are listed (even without authors).","SELECT A.author_name, B.title FROM Authors AS A LEFT JOIN Books AS B ON A.author_id = B.author_id UNION SELECT A.author_name, B.title FROM Books AS B LEFT JOIN Authors AS A ON B.author_id = A.author_id;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL, nationality TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publication_year INTEGER);","Emulates a FULL OUTER JOIN between Authors and Books, ensuring that all authors and all books are included in the result set, showing NULLs where no match exists."
"Show a combined list of all students and all courses, highlighting which students are in which courses, and orphaned students or courses.","SELECT S.student_name, C.course_name FROM Students AS S LEFT JOIN Enrollments AS E ON S.student_id = E.student_id LEFT JOIN Courses AS C ON E.course_id = C.course_id UNION SELECT S.student_name, C.course_name FROM Courses AS C LEFT JOIN Enrollments AS E ON C.course_id = E.course_id LEFT JOIN Students AS S ON E.student_id = S.student_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT);","Emulates a FULL OUTER JOIN across Students, Enrollments, and Courses. It combines students and their courses, and courses and their students, ensuring all students and courses are present, even if not enrolled/enrolling."
"Combine employees and departments, and for any unmatched department, specify 'No Employees' as the employee name.","SELECT COALESCE(E.employee_name, 'No Employees') AS employee_display_name, D.department_name FROM Employees AS E LEFT JOIN Departments AS D ON E.department_id = D.department_id UNION SELECT COALESCE(E.employee_name, 'No Employees') AS employee_display_name, D.department_name FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","Emulates a FULL OUTER JOIN, but uses COALESCE to display 'No Employees' for departments without any employees when the employee name would otherwise be NULL from the LEFT JOIN."
"List all products and all order items, filtering the combined result to only include items with a quantity greater than 5 or products with a price over 50.","SELECT P.product_name, P.price, OI.quantity FROM Products AS P LEFT JOIN Order_Items AS OI ON P.product_id = OI.product_id WHERE OI.quantity > 5 OR P.price > 50 UNION SELECT P.product_name, P.price, OI.quantity FROM Order_Items AS OI LEFT JOIN Products AS P ON OI.product_id = P.product_id WHERE OI.quantity > 5 OR P.price > 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER, item_price REAL);","Emulates a FULL OUTER JOIN and then filters the combined result. It lists products and their order item quantities, including those not matched, but only if the order item quantity is over 5 or the product price is over 50."
"Get the count of employees per department, or 'No Department' for employees without one, and 'Empty Department' for departments without employees, in a full outer join fashion.","SELECT IFNULL(D.department_name, 'No Department') AS department_display, COUNT(E.employee_id) AS num_employees FROM Employees AS E LEFT JOIN Departments AS D ON E.department_id = D.department_id GROUP BY D.department_id UNION SELECT IFNULL(D.department_name, 'Empty Department') AS department_display, COUNT(E.employee_id) AS num_employees FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);",Emulates a FULL OUTER JOIN by aggregating counts from both sides. It counts employees per department and uses IFNULL to label employees without departments and departments without employees distinctly.
"Show all customers and orders with a total amount greater than 100, including customers without such orders and orders without a matching customer.","SELECT C.customer_name, O.order_id, O.total_amount FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id AND O.total_amount > 100 UNION SELECT C.customer_name, O.order_id, O.total_amount FROM Orders AS O LEFT JOIN Customers AS C ON O.customer_id = C.customer_id AND O.total_amount > 100;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL);","Emulates a FULL OUTER JOIN, but the condition `O.total_amount > 100` is part of the JOIN clause for both parts. This ensures that only relevant orders are considered for linking, but customers/orders unmatched still appear."
"List all employees and all projects, showing their association, and using 'N/A' for missing names/roles.","SELECT COALESCE(E.employee_name, 'N/A') AS employee, COALESCE(P.project_name, 'N/A') AS project, COALESCE(PM.role, 'N/A') AS role FROM Employees AS E LEFT JOIN Project_Members AS PM ON E.employee_id = PM.employee_id LEFT JOIN Projects AS P ON PM.project_id = P.project_id UNION SELECT COALESCE(E.employee_name, 'N/A') AS employee, COALESCE(P.project_name, 'N/A') AS project, COALESCE(PM.role, 'N/A') AS role FROM Projects AS P LEFT JOIN Project_Members AS PM ON P.project_id = PM.project_id LEFT JOIN Employees AS E ON PM.employee_id = E.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT, end_date TEXT); CREATE TABLE Project_Members (member_id INTEGER PRIMARY KEY, project_id INTEGER NOT NULL, employee_id INTEGER NOT NULL, role TEXT);","Emulates a FULL OUTER JOIN across three tables. It combines employees, project members, and projects. COALESCE is used to replace NULL values in the result columns with 'N/A' for better readability."
"Find all products along with the sum of quantities sold in orders placed after 2022, including products with no sales or no sales after 2022.","SELECT P.product_name, COALESCE(SUM(CASE WHEN STRFTIME('%Y', O.order_date) > '2022' THEN OI.quantity ELSE 0 END), 0) AS total_quantity_2023_onwards FROM Products AS P LEFT JOIN Order_Items AS OI ON P.product_id = OI.product_id LEFT JOIN Orders AS O ON OI.order_id = O.order_id GROUP BY P.product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER, item_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL);",Calculates the total quantity sold for each product specifically for orders placed after 2022. It uses two LEFT JOINs and a conditional sum with COALESCE to show 0 for products with no sales in that period or no sales at all.
"Retrieve employees who were hired in 2023 or have a salary greater than 70000, and their department names. Include employees without departments.","SELECT E.employee_name, D.department_name FROM Employees AS E LEFT JOIN Departments AS D ON E.department_id = D.department_id WHERE STRFTIME('%Y', E.hire_date) = '2023' OR E.salary > 70000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","Selects employees based on their hire year (2023) or salary (>70000). A LEFT JOIN ensures that employees meeting these criteria are included, even if they are not assigned to a department."
"For each customer, show their name and the most recent order date. Include customers without any orders.","SELECT C.customer_name, MAX(O.order_date) AS latest_order_date FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_name ORDER BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL);","Retrieves the latest order date for each customer. A LEFT JOIN ensures all customers are listed. MAX(O.order_date) returns NULL for customers without orders, which is appropriate for the instruction."
List all departments and the number of employees who earn less than their average department salary. Include departments with no such employees or no employees at all.,"SELECT D.department_name, COUNT(E.employee_id) AS low_earning_employees FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id WHERE E.salary < (SELECT AVG(salary) FROM Employees WHERE department_id = D.department_id) OR E.employee_id IS NULL GROUP BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","For each department, counts employees whose salary is less than their department's average. The LEFT JOIN ensures all departments are considered. The subquery calculates the average per department."
"Show all authors who have not written any books, and the number of books published in 2020 by authors who have.","SELECT A.author_name, COALESCE(COUNT(B.book_id), 0) AS books_2020 FROM Authors AS A LEFT JOIN Books AS B ON A.author_id = B.author_id AND B.publication_year = 2020 GROUP BY A.author_name;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL, nationality TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publication_year INTEGER);",Counts books published in 2020 for each author. Authors with no books or no books in 2020 are included with a count of 0. The publication year condition is in the JOIN clause.
"Find students who have enrolled in courses but are not linked to a specific course (e.g., course_id is missing/invalid in Enrollments).","SELECT S.student_name, E.enrollment_id FROM Students AS S JOIN Enrollments AS E ON S.student_id = E.student_id LEFT JOIN Courses AS C ON E.course_id = C.course_id WHERE C.course_id IS NULL;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT);","Identifies enrollments that are not linked to a valid course. It first joins Students and Enrollments, then LEFT JOINs Courses to find enrollments where the course_id doesn't match any existing course."
"Find the total quantity sold for each product category, but only include categories where the total quantity sold is greater than 1000.","SELECT category, SUM(quantity_sold) AS total_quantity FROM Products GROUP BY category HAVING SUM(quantity_sold) > 1000;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, quantity_sold INTEGER);",This query calculates the sum of 'quantity_sold' for each 'category' and then filters these groups to show only those where the 'total_quantity' exceeds 1000.
List departments that have an average employee salary less than 50000.,"SELECT department_name, AVG(salary) AS avg_salary FROM Employees GROUP BY department_name HAVING AVG(salary) < 50000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_name TEXT, salary REAL, hire_date TEXT);","This query groups employees by their 'department_name', calculates the average 'salary' for each department, and then filters to show only departments where the average salary is less than 50000."
"Show the number of orders placed by each customer, but only for customers who have placed more than 5 orders.","SELECT customer_id, COUNT(order_id) AS total_orders FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 5;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query counts the 'order_id' for each 'customer_id', and then uses 'HAVING' to display only those customers who have more than 5 orders."
Retrieve the names of suppliers who supply at least 3 distinct products.,SELECT supplier_name FROM Suppliers GROUP BY supplier_name HAVING COUNT(DISTINCT product_id) >= 3;,"CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, product_id INTEGER, product_name TEXT);","This query groups suppliers by 'supplier_name', counts the distinct 'product_id' each supplies, and then filters to include only suppliers supplying 3 or more distinct products."
Identify countries where the maximum customer age is less than 60.,"SELECT country, MAX(age) AS max_age FROM Customers GROUP BY country HAVING MAX(age) < 60;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, country TEXT, age INTEGER);","This query groups customers by 'country', finds the maximum 'age' in each country, and then filters for countries where this maximum age is less than 60."
List product categories where the minimum price of a product is greater than 50.,"SELECT category, MIN(price) AS min_price FROM Products GROUP BY category HAVING MIN(price) > 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query groups products by 'category', calculates the minimum 'price' within each category, and then filters out categories where this minimum price is not greater than 50."
"Find projects where the total budget allocated exceeds 100000, ordered by total budget descending.","SELECT project_name, SUM(budget) AS total_budget FROM Projects GROUP BY project_name HAVING SUM(budget) > 100000 ORDER BY total_budget DESC;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, budget REAL, start_date TEXT, end_date TEXT);","This query calculates the total 'budget' for each 'project_name', filters for projects with a total budget greater than 100000, and sorts the results in descending order of total budget."
Which regions have an average sales amount between 5000 and 15000?,"SELECT region, AVG(sale_amount) AS average_sales FROM SalesData GROUP BY region HAVING AVG(sale_amount) BETWEEN 5000 AND 15000;","CREATE TABLE SalesData (sale_id INTEGER PRIMARY KEY, region TEXT, sale_amount REAL, sale_date TEXT);","This query groups sales by 'region', computes the average 'sale_amount' for each, and then selects only those regions where the average sales amount falls within the specified range."
Display employee job titles that have more than 2 employees assigned.,"SELECT job_title, COUNT(employee_id) AS num_employees FROM Employees GROUP BY job_title HAVING COUNT(employee_id) > 2;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, job_title TEXT, salary REAL);","This query groups employees by 'job_title', counts the number of employees in each title, and then filters to show only job titles with more than 2 employees."
"For each client, show the total value of transactions, but only for clients who have at least one transaction over 1000.","SELECT client_id, SUM(transaction_amount) AS total_transactions_value FROM Transactions GROUP BY client_id HAVING MAX(transaction_amount) > 1000;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, client_id INTEGER, transaction_date TEXT, transaction_amount REAL);",This query calculates the sum of 'transaction_amount' for each 'client_id' and filters the results to only include clients who have had at least one transaction greater than 1000.
List all authors who have written more than 2 books with a genre of 'Fantasy'.,"SELECT author_name, COUNT(book_id) AS fantasy_books_count FROM Books WHERE genre = 'Fantasy' GROUP BY author_name HAVING COUNT(book_id) > 2;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_name TEXT, genre TEXT, publication_year INTEGER);","This query first filters books by 'Fantasy' genre, then groups them by 'author_name', counts the number of fantasy books for each author, and finally selects authors who have written more than 2 such books."
"From the `Sales` table, find the sales representatives who achieved total sales greater than the overall average total sales.","SELECT sales_rep_id, SUM(sale_amount) AS rep_total_sales FROM Sales GROUP BY sales_rep_id HAVING SUM(sale_amount) > (SELECT AVG(total_sales) FROM (SELECT SUM(sale_amount) AS total_sales FROM Sales GROUP BY sales_rep_id));","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, sales_rep_id INTEGER, product_id INTEGER, sale_amount REAL, sale_date TEXT);",This query calculates the total sales for each 'sales_rep_id'. It then uses a subquery to find the average of these individual representative total sales and filters for representatives whose total sales exceed this overall average.
"For each year, show the number of completed tasks, but only if the number of completed tasks for that year is between 50 and 100.","SELECT STRFTIME('%Y', completion_date) AS completion_year, COUNT(task_id) AS completed_tasks_count FROM Tasks WHERE status = 'Completed' GROUP BY completion_year HAVING COUNT(task_id) BETWEEN 50 AND 100;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, status TEXT, creation_date TEXT, completion_date TEXT);","This query extracts the year from 'completion_date' for completed tasks, groups tasks by year, counts them, and then filters to include only years where the count of completed tasks is between 50 and 100."
Display product IDs and their total quantities from `OrderDetails` where the total quantity is exactly 10.,"SELECT product_id, SUM(quantity) AS total_quantity FROM OrderDetails GROUP BY product_id HAVING SUM(quantity) = 10;","CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL);","This query groups 'OrderDetails' by 'product_id', sums the 'quantity' for each product, and then filters the groups to show only products where the total quantity is exactly 10."
Find departments where the minimum salary is above 30000 AND the maximum salary is below 90000.,SELECT department_name FROM Employees GROUP BY department_name HAVING MIN(salary) > 30000 AND MAX(salary) < 90000;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_name TEXT, salary REAL);",This query groups employees by 'department_name' and then uses 'HAVING' to select only those departments where both the minimum salary is greater than 30000 AND the maximum salary is less than 90000.
"Show the cities and the count of customers from each city, but only for cities that start with 'New' and have more than 2 customers.","SELECT city, COUNT(customer_id) AS num_customers FROM Customers WHERE city LIKE 'New%' GROUP BY city HAVING COUNT(customer_id) > 2;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT);","This query first filters customers to those whose 'city' starts with 'New', then groups them by 'city', counts the number of customers in each city, and finally filters for cities with more than 2 customers."
Identify regions where the total 'return_amount' for returned items is greater than 5000.,"SELECT region, SUM(return_amount) AS total_returns FROM ReturnsData GROUP BY region HAVING SUM(return_amount) > 5000;","CREATE TABLE ReturnsData (return_id INTEGER PRIMARY KEY, region TEXT, return_amount REAL, return_date TEXT);","This query groups return data by 'region', sums the 'return_amount' for each region, and then filters to show only regions where the total return amount exceeds 5000."
List all products that have appeared in at least 5 different orders.,"SELECT product_id, COUNT(DISTINCT order_id) AS distinct_orders_count FROM OrderItems GROUP BY product_id HAVING COUNT(DISTINCT order_id) >= 5;","CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","This query groups order items by 'product_id', counts the distinct 'order_id's for each product, and then filters to include only products that have been part of 5 or more distinct orders."
Find instructors who teach more than 2 courses and whose average course rating is above 4.0.,"SELECT i.instructor_name, COUNT(c.course_id) AS num_courses, AVG(c.rating) AS avg_rating FROM Instructors i JOIN Courses c ON i.instructor_id = c.instructor_id GROUP BY i.instructor_name HAVING COUNT(c.course_id) > 2 AND AVG(c.rating) > 4.0;","CREATE TABLE Instructors (instructor_id INTEGER PRIMARY KEY, instructor_name TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, instructor_id INTEGER, rating REAL);","This query joins 'Instructors' and 'Courses' tables, groups by 'instructor_name', counts courses and averages ratings for each, then filters for instructors teaching more than 2 courses with an average rating over 4.0."
"Show the earliest and latest order dates for each customer, but only if the difference between their latest and earliest order is more than 365 days.","SELECT customer_id, MIN(order_date) AS first_order, MAX(order_date) AS last_order FROM Orders GROUP BY customer_id HAVING JULIANDAY(MAX(order_date)) - JULIANDAY(MIN(order_date)) > 365;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query groups orders by 'customer_id', finds their earliest and latest order dates. It then uses 'HAVING' with `JULIANDAY` to calculate the difference in days and filter for customers whose first and last order dates span more than 365 days."
"List product categories where the sum of stock quantity is between 500 and 1000, and sort by category name.","SELECT category, SUM(stock_quantity) AS total_stock FROM Products GROUP BY category HAVING SUM(stock_quantity) BETWEEN 500 AND 1000 ORDER BY category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query groups products by 'category', calculates the total 'stock_quantity' for each, filters for categories where total stock is between 500 and 1000, and orders the result by category name."
Find agents who have closed less than 5 deals in the last year.,"SELECT agent_id, COUNT(deal_id) AS deals_closed FROM Deals WHERE deal_date >= STRFTIME('%Y-%m-%d %H:%M:%S', DATE('now', '-1 year')) GROUP BY agent_id HAVING COUNT(deal_id) < 5;","CREATE TABLE Deals (deal_id INTEGER PRIMARY KEY, agent_id INTEGER, deal_amount REAL, deal_date TEXT);","This query first filters deals from the last year, then groups them by 'agent_id', counts the number of deals, and finally selects agents who have closed fewer than 5 deals in that period."
Display states where the number of employees earning more than 70000 is greater than 10.,"SELECT state, COUNT(employee_id) AS high_earners_count FROM Employees WHERE salary > 70000 GROUP BY state HAVING COUNT(employee_id) > 10;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, state TEXT, salary REAL);","This query first filters employees who earn more than 70000, then groups them by 'state', counts these high earners, and finally filters to show states where there are more than 10 such employees."
"For each `campaign_id`, calculate the total ad spend, but only include campaigns where the total spend is not zero and is less than the average total spend of all campaigns.","SELECT campaign_id, SUM(ad_spend) AS total_campaign_spend FROM AdsData GROUP BY campaign_id HAVING total_campaign_spend > 0 AND total_campaign_spend < (SELECT AVG(total_spend) FROM (SELECT SUM(ad_spend) AS total_spend FROM AdsData GROUP BY campaign_id));","CREATE TABLE AdsData (ad_id INTEGER PRIMARY KEY, campaign_id INTEGER, ad_spend REAL, impressions INTEGER);","This query calculates the total 'ad_spend' for each 'campaign_id'. It then filters these campaigns to exclude those with zero spend and to include only those whose total spend is less than the overall average total campaign spend, which is determined by a subquery."
List categories that have at least one product with a price over 500 and an average price for the category above 100.,SELECT category FROM Products GROUP BY category HAVING MAX(price) > 500 AND AVG(price) > 100;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",This query groups products by 'category' and then filters these groups. It selects categories where there is at least one product with a 'price' greater than 500 AND the average 'price' for the category is greater than 100.
Identify vendors whose total order count is exactly 1 or 2.,"SELECT vendor_id, COUNT(order_id) AS num_orders FROM VendorOrders GROUP BY vendor_id HAVING COUNT(order_id) IN (1, 2);","CREATE TABLE VendorOrders (order_id INTEGER PRIMARY KEY, vendor_id INTEGER, order_date TEXT, amount REAL);","This query groups orders by 'vendor_id', counts the number of orders for each vendor, and then filters to show only vendors who have placed exactly 1 or 2 orders."
"Retrieve the number of flights per airline, but only for airlines that have more than 50 flights.","SELECT airline_name, COUNT(flight_id) AS num_flights FROM Flights GROUP BY airline_name HAVING COUNT(flight_id) > 50;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, airline_name TEXT, departure_airport TEXT, arrival_airport TEXT, flight_date TEXT);","This query groups flights by 'airline_name', counts the number of flights for each airline, and then filters to show only airlines that operate more than 50 flights."
Find users who have posted comments on every single post.,"SELECT user_id, COUNT(DISTINCT post_id) AS posts_commented_on FROM Comments GROUP BY user_id HAVING COUNT(DISTINCT post_id) = (SELECT COUNT(*) FROM Posts);","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT); CREATE TABLE Posts (post_id INTEGER PRIMARY KEY, post_title TEXT); CREATE TABLE Comments (comment_id INTEGER PRIMARY KEY, post_id INTEGER, user_id INTEGER, comment_text TEXT);","This query groups comments by 'user_id' and counts the distinct 'post_id's each user has commented on. It then filters to select users whose count of distinct commented posts equals the total number of posts in the 'Posts' table, indicating they commented on every post."
Show product types where the count of products with 'PROMO' in their name is greater than or equal to 2.,"SELECT product_type, COUNT(CASE WHEN product_name LIKE '%PROMO%' THEN 1 ELSE NULL END) AS promo_product_count FROM Inventory GROUP BY product_type HAVING promo_product_count >= 2;","CREATE TABLE Inventory (product_id INTEGER PRIMARY KEY, product_name TEXT, product_type TEXT, stock INTEGER);","This query groups inventory items by 'product_type'. Within each group, it counts products whose 'product_name' contains 'PROMO'. Finally, it filters to show only product types where this count is 2 or more."
Identify product colors where all products are currently out of stock (stock_quantity = 0).,SELECT color FROM Products GROUP BY color HAVING SUM(CASE WHEN stock_quantity > 0 THEN 1 ELSE 0 END) = 0;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, color TEXT, stock_quantity INTEGER);","This query groups products by 'color'. The 'HAVING' clause checks if the sum of a conditional count (1 if stock_quantity > 0, else 0) is equal to 0. This effectively means that no product of that color has stock greater than 0, implying all are out of stock."
List departments where the total sum of project hours allocated is less than 5000 and the department has at least 3 projects.,"SELECT d.department_name, SUM(p.hours_allocated) AS total_hours, COUNT(p.project_id) AS num_projects FROM Departments d JOIN Projects p ON d.department_id = p.department_id GROUP BY d.department_name HAVING SUM(p.hours_allocated) < 5000 AND COUNT(p.project_id) >= 3;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, department_id INTEGER, hours_allocated INTEGER);","This query joins 'Departments' and 'Projects', groups by 'department_name', calculates total 'hours_allocated' and counts 'project_id's. It then filters for departments with total hours less than 5000 AND at least 3 projects."
"List all employees along with their salaries, and a row number assigned within each department, ordered by salary in descending order.","SELECT employee_id, employee_name, department_id, salary, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rn FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL);","This query retrieves employee details and assigns a unique row number to each employee within their respective department. The numbering is based on salary in descending order, so the highest-paid employee in each department gets row number 1."
"Show the rank of each student's score within their class, where ties get the same rank and the next rank is skipped.","SELECT student_id, student_name, class_id, score, RANK() OVER (PARTITION BY class_id ORDER BY score DESC) AS score_rank FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, class_id INTEGER, score INTEGER);","This query calculates the rank of each student's score within their class. If multiple students have the same score, they receive the same rank, and the subsequent rank is skipped (e.g., 1, 2, 2, 4)."
"Get the dense rank of products based on their price within each category, where no ranks are skipped for ties.","SELECT product_id, product_name, category_id, price, DENSE_RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS price_dense_rank FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL);","This query assigns a dense rank to products based on their price within each category. Unlike RANK(), DENSE_RANK() ensures no gaps in the ranking sequence even when there are ties (e.g., 1, 2, 2, 3)."
"Divide all employees into 4 salary groups (quartiles) based on their overall salary, and list which group each employee falls into.","SELECT employee_id, employee_name, salary, NTILE(4) OVER (ORDER BY salary DESC) AS salary_quartile FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL);",This query divides all employees into 4 equally sized groups (quartiles) based on their salary in descending order. NTILE assigns a group number (1 to 4) to each employee.
"For each employee, find their salary and the salary of the employee who was hired immediately before them in the same department, ordered by hire date.","SELECT employee_id, employee_name, department_id, salary, hire_date, LAG(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS prev_employee_salary FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date DATE);","This query retrieves each employee's salary and, using LAG(), fetches the salary of the employee hired immediately before them within the same department. If no preceding employee exists, the default value 0 is used."
"For each order, list its total amount and the total amount of the next order placed by the same customer, ordered by order date.","SELECT order_id, customer_id, order_date, total_amount, LEAD(total_amount, 1, 0) OVER (PARTITION BY customer_id ORDER BY order_date) AS next_order_amount FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL);","This query shows each order's total amount and, using LEAD(), retrieves the total amount of the next order placed by the same customer, based on the order date. A default of 0 is used if no next order exists."
"Find the first sale amount for each product, based on sale date.","SELECT sale_id, product_id, sale_date, sale_amount, FIRST_VALUE(sale_amount) OVER (PARTITION BY product_id ORDER BY sale_date) AS first_sale_for_product FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date DATE, sale_amount REAL);","This query identifies the very first sale amount for each product, ordered by the sale date. FIRST_VALUE returns the value of the expression from the first row in the window frame."
"For each transaction on an account, get the last transaction amount for that account, ordered by transaction date.","SELECT transaction_id, account_id, transaction_date, amount, LAST_VALUE(amount) OVER (PARTITION BY account_id ORDER BY transaction_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_transaction_amount FROM Transactions;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date DATE, amount REAL);","This query retrieves the amount of each transaction and, using LAST_VALUE(), gets the amount of the very last transaction for the same account, considering all transactions up to the end of the partition."
"For each employee, show their salary and the salary of the employee who ranks 3rd highest in their department by salary.","SELECT employee_id, employee_name, department_id, salary, NTH_VALUE(salary, 3) OVER (PARTITION BY department_id ORDER BY salary DESC) AS third_highest_salary FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL);","This query lists each employee's salary and, using NTH_VALUE(), finds the salary of the third-highest-paid employee within their department, based on salary in descending order."
Retrieve the top 3 highest-paid employees in each department.,"WITH RankedEmployees AS (SELECT employee_id, employee_name, department_id, salary, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rn FROM Employees) SELECT employee_id, employee_name, department_id, salary FROM RankedEmployees WHERE rn <= 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL);","This query first assigns a row number to employees within each department based on salary in descending order. Then, it selects only those employees with a row number of 3 or less, effectively getting the top 3 highest-paid employees per department."
"Find the employees who are in the top 5 salary earners within their respective departments, considering ties with RANK.","WITH RankedEmployees AS (SELECT employee_id, employee_name, department_id, salary, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk FROM Employees) SELECT employee_id, employee_name, department_id, salary FROM RankedEmployees WHERE rnk <= 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL);",This query uses a CTE to rank employees by salary within each department. It then filters to show only employees whose rank is 5 or less. Using RANK() means employees with the same salary might share a rank and subsequent ranks will be skipped.
"List products that are among the top 2 cheapest products within their category, allowing for ties without skipping ranks.","WITH RankedProducts AS (SELECT product_id, product_name, category_id, price, DENSE_RANK() OVER (PARTITION BY category_id ORDER BY price ASC) AS drnk FROM Products) SELECT product_id, product_name, category_id, price FROM RankedProducts WHERE drnk <= 2;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL);","This query uses a CTE to assign a dense rank to products based on their price (ascending) within each category. It then filters for products with a dense rank of 2 or less, finding the top 2 cheapest products per category, handling ties without rank gaps."
Show employee details along with their running total salary based on their hire date within their department.,"SELECT employee_id, employee_name, department_id, salary, hire_date, SUM(salary) OVER (PARTITION BY department_id ORDER BY hire_date) AS running_salary_sum FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date DATE);","This query calculates a running sum of salaries for employees within each department, ordered by their hire date. Each row shows the sum of salaries of all employees hired on or before that employee in their respective department."
Calculate the 3-day moving average of sales amount for each product.,"SELECT sale_id, product_id, sale_date, sale_amount, AVG(sale_amount) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS three_day_moving_avg FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date DATE, sale_amount REAL);","This query computes a 3-day moving average of sales amounts for each product. For each sale, it averages the current day's sale amount with the two preceding days' sale amounts for the same product."
"Count the number of orders each customer has made up to a certain date, ordered chronologically.","SELECT order_id, customer_id, order_date, total_amount, COUNT(order_id) OVER (PARTITION BY customer_id ORDER BY order_date) AS cumulative_order_count FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL);","This query calculates a cumulative count of orders for each customer. For every order, it counts all orders placed by that customer on or before the current order's date."
Find the maximum sale amount recorded for each product up to a specific sale date.,"SELECT sale_id, product_id, sale_date, sale_amount, MAX(sale_amount) OVER (PARTITION BY product_id ORDER BY sale_date) AS max_sale_so_far FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date DATE, sale_amount REAL);","This query determines the maximum sale amount observed for each product up to a given sale date. For each sale, it returns the highest sale amount among all prior and current sales for that specific product."
Show the minimum transaction amount for each account up to the current transaction date.,"SELECT transaction_id, account_id, transaction_date, amount, MIN(amount) OVER (PARTITION BY account_id ORDER BY transaction_date) AS min_amount_so_far FROM Transactions;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date DATE, amount REAL);","This query finds the minimum transaction amount for each account, considering all transactions chronologically up to the current one. It shows the lowest transaction value encountered so far for each account."
"List employees with their salary, their department's average salary, and their rank within the department.","SELECT employee_id, employee_name, department_id, salary, AVG(salary) OVER (PARTITION BY department_id) AS department_avg_salary, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank_in_dept FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL);","This query retrieves employee details, calculates the average salary for each employee's department, and also determines the rank of each employee's salary within their department, all in a single query."
"Identify duplicate employee names based on department and name, keeping only the first occurrence.","WITH DuplicateCheck AS (SELECT employee_id, employee_name, department_id, ROW_NUMBER() OVER (PARTITION BY department_name, employee_name ORDER BY employee_id) AS rn FROM Employees JOIN Departments ON Employees.department_id = Departments.department_id) SELECT employee_id, employee_name, department_id FROM DuplicateCheck WHERE rn = 1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","This query uses ROW_NUMBER() to identify rows that are duplicates based on a combination of department name and employee name. It assigns 1 to the first occurrence and higher numbers to duplicates, then filters to keep only the first occurrence."
"For each sale, show the amount and the amount of the sale immediately preceding it and following it for the same product, using default values if not available.","SELECT sale_id, product_id, sale_date, sale_amount, LAG(sale_amount, 1, 0.0) OVER (PARTITION BY product_id ORDER BY sale_date) AS prev_sale_amount, LEAD(sale_amount, 1, 0.0) OVER (PARTITION BY product_id ORDER BY sale_date) AS next_sale_amount FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date DATE, sale_amount REAL);","This query lists each sale's amount along with the amount of the previous sale and the next sale for the same product, ordered by date. Default values of 0.0 are provided for LAG and LEAD if no preceding or succeeding row exists."
Show the difference in salary between an employee and the employee hired immediately before them in the same department.,"SELECT employee_id, employee_name, department_id, salary, LAG(salary) OVER (PARTITION BY department_id ORDER BY hire_date) AS previous_salary, salary - LAG(salary) OVER (PARTITION BY department_id ORDER BY hire_date) AS salary_difference_from_prev FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date DATE);",This query calculates the difference in salary between an employee and the employee who was hired just before them in the same department. It uses LAG() to get the previous employee's salary and then subtracts it.
Find the average transaction amount for the current and two preceding transactions for each account.,"SELECT transaction_id, account_id, transaction_date, amount, AVG(amount) OVER (PARTITION BY account_id ORDER BY transaction_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg_3_transactions FROM Transactions;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date DATE, amount REAL);","This query calculates a moving average of transaction amounts. For each transaction, it averages the amount of the current transaction and the two preceding transactions for the same account."
"List each employee's salary and the salary of the employee hired two positions before them in their department, ordered by hire date, defaulting to 0 if not found.","SELECT employee_id, employee_name, department_id, salary, hire_date, LAG(salary, 2, 0) OVER (PARTITION BY department_id ORDER BY hire_date) AS salary_two_before FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date DATE);",This query uses the LAG function with an offset of 2 to retrieve the salary of the employee hired two positions before the current employee within the same department. A default value of 0 is provided if no such employee exists.
"For each order, show its total amount and the total amount of the order placed two positions after it by the same customer, ordered by order date, defaulting to 0 if not found.","SELECT order_id, customer_id, order_date, total_amount, LEAD(total_amount, 2, 0) OVER (PARTITION BY customer_id ORDER BY order_date) AS amount_two_after FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL);",This query uses the LEAD function with an offset of 2 to retrieve the total amount of the order placed two positions after the current order by the same customer. A default value of 0 is provided if no such order exists.
"Get the cumulative sum of total sales for each region, ordered by sale date.","SELECT sale_id, region_id, sale_date, sale_amount, SUM(sale_amount) OVER (PARTITION BY region_id ORDER BY sale_date) AS cumulative_region_sales FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date DATE, sale_amount REAL, region_id INTEGER);","This query calculates the running total of sales amounts for each region. For every sale, it sums up all sale amounts for that region up to the current sale date."
"Find the total salary for each department, shown on every employee's row within that department.","SELECT employee_id, employee_name, department_id, salary, SUM(salary) OVER (PARTITION BY department_id) AS total_department_salary FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL);","This query calculates the sum of all salaries within each department. The result of this sum is then displayed on every row belonging to that department, without needing to group the results."
"Divide students into 3 performance groups (tertiles) within each class, based on their score.","SELECT student_id, student_name, class_id, score, NTILE(3) OVER (PARTITION BY class_id ORDER BY score DESC) AS score_tertile FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, class_id INTEGER, score INTEGER);","This query assigns each student to one of three performance groups (tertiles) within their respective class, based on their score in descending order. NTILE attempts to distribute rows as evenly as possible among the specified number of groups."
"For each product, compare its current price to its previous and next price change over time.","SELECT product_id, product_name, price, change_date, LAG(price) OVER (PARTITION BY product_id ORDER BY change_date) AS previous_price, LEAD(price) OVER (PARTITION BY product_id ORDER BY change_date) AS next_price FROM ProductPrices;","CREATE TABLE ProductPrices (product_id INTEGER, product_name TEXT, price REAL, change_date DATE);","This query shows the current price of a product, and uses LAG and LEAD to display the price immediately before and immediately after the current price, based on the change date for that specific product."
"Find the average score for each class, and also the individual student's rank within that class.","SELECT student_id, student_name, class_id, score, AVG(score) OVER (PARTITION BY class_id) AS class_average_score, RANK() OVER (PARTITION BY class_id ORDER BY score DESC) AS student_class_rank FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, class_id INTEGER, score INTEGER);",This query calculates the average score for each class and also assigns a rank to each student within their class based on their score. Both aggregate and ranking window functions are applied simultaneously.
Retrieve employees whose salary is more than the average salary of their department.,"WITH EmployeeAvgSalary AS (SELECT employee_id, employee_name, department_id, salary, AVG(salary) OVER (PARTITION BY department_id) AS department_avg_salary FROM Employees) SELECT employee_id, employee_name, department_id, salary FROM EmployeeAvgSalary WHERE salary > department_avg_salary;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL);","This query first calculates the average salary for each department using a window function. Then, in an outer query, it filters for employees whose individual salary is greater than their department's calculated average salary."
Find the names of employees who work in departments located in 'Headquarters'.,SELECT EmployeeName FROM Employees WHERE DepartmentID IN (SELECT DepartmentID FROM Departments WHERE Location = 'Headquarters');,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);",This query selects employee names whose department's location is 'Headquarters' by first finding the IDs of such departments using an uncorrelated subquery.
List products whose price is above the average price of all products.,"SELECT ProductName, Price FROM Products WHERE Price > (SELECT AVG(Price) FROM Products);","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, Category TEXT);","This query retrieves products with a price greater than the overall average product price, which is calculated by an uncorrelated subquery."
"Show the total sales amount for each product category, but only for categories with at least 5 products.","SELECT P.Category, SUM(S.Amount) AS TotalSales FROM Sales S JOIN Products P ON S.ProductID = P.ProductID WHERE P.Category IN (SELECT Category FROM Products GROUP BY Category HAVING COUNT(ProductID) >= 5) GROUP BY P.Category;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, Amount REAL, SaleDate TEXT); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT);","This query calculates the total sales for each product category, but only includes categories that have at least 5 distinct products. An uncorrelated subquery identifies these categories."
Find departments that have at least one employee.,SELECT DepartmentName FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.DepartmentID = D.DepartmentID);,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER);",This query lists departments by checking if there exists at least one employee record corresponding to that department's ID using a correlated subquery.
List all departments that currently have no employees assigned.,SELECT DepartmentName FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.DepartmentID = D.DepartmentID);,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER);",This query identifies departments that have no employees by using a correlated subquery with NOT EXISTS to check for the absence of related employee records.
"Show each product's name, price, and the overall average product price.","SELECT ProductName, Price, (SELECT AVG(Price) FROM Products) AS AveragePrice FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL);","This query displays each product's name and price, alongside the constant overall average price of all products, calculated using an uncorrelated scalar subquery."
"For each department, list the department name and the total number of employees in that department.","SELECT DepartmentName, (SELECT COUNT(EmployeeID) FROM Employees E WHERE E.DepartmentID = D.DepartmentID) AS NumberOfEmployees FROM Departments D;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER);",This query lists each department and calculates the count of employees within that specific department using a correlated scalar subquery.
Find the names of students who are enrolled in 'Mathematics' or 'Physics' courses.,"SELECT StudentName FROM Students WHERE StudentID IN (SELECT StudentID FROM Enrollments WHERE CourseID IN (SELECT CourseID FROM Courses WHERE CourseName IN ('Mathematics', 'Physics')));","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER);","This query finds students enrolled in specific courses by first identifying the course IDs for 'Mathematics' and 'Physics', then finding the student IDs enrolled in those courses, all using nested uncorrelated subqueries."
"Retrieve the product name, category, and price for each product that has the highest price within its respective category.","SELECT ProductName, Category, Price FROM Products P1 WHERE Price = (SELECT MAX(Price) FROM Products P2 WHERE P1.Category = P2.Category);","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);","This query selects products that have the maximum price within their specific category, using a correlated subquery to compare each product's price against the maximum price of products in its own category."
Find customers who have not placed any orders.,SELECT CustomerName FROM Customers WHERE CustomerID NOT IN (SELECT CustomerID FROM Orders);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);",This query identifies customers who have not placed any orders by selecting customer IDs that are not present in the list of customer IDs found in the Orders table.
List employees who earn more than the average salary of employees in their own department.,"SELECT EmployeeName, Salary, DepartmentID FROM Employees E1 WHERE Salary > (SELECT AVG(Salary) FROM Employees E2 WHERE E2.DepartmentID = E1.DepartmentID);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL, DepartmentID INTEGER);","This query retrieves employees whose salary is greater than the average salary of all employees in their respective department, using a correlated subquery to compute the departmental average."
Identify product names that appear more than once in the products list (potential duplicates).,SELECT ProductName FROM Products WHERE ProductName IN (SELECT ProductName FROM Products GROUP BY ProductName HAVING COUNT(*) > 1);,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL);",This query finds product names that appear more than once by using an uncorrelated subquery to identify product names that have duplicate entries.
Find employees who are managers and manage at least one employee.,SELECT E1.EmployeeName FROM Employees E1 WHERE E1.IsManager = 1 AND EXISTS (SELECT 1 FROM Employees E2 WHERE E2.ManagerID = E1.EmployeeID);,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, ManagerID INTEGER, IsManager INTEGER);","This query finds employees who are marked as managers and also have at least one other employee reporting to them, using a correlated subquery with EXISTS."
List all orders placed after the latest order by customer 'Alice'.,"SELECT OrderID, OrderDate FROM Orders WHERE OrderDate > (SELECT MAX(OrderDate) FROM Orders O JOIN Customers C ON O.CustomerID = C.CustomerID WHERE C.CustomerName = 'Alice');","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT); CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT);","This query retrieves orders that were placed after the latest order made by 'Alice', where the latest order date for 'Alice' is determined by an uncorrelated subquery."
Find products for which there exists an order item specifying a quantity greater than 5 and a price per unit greater than 100.,SELECT ProductName FROM Products P WHERE EXISTS (SELECT 1 FROM OrderItems OI WHERE OI.ProductID = P.ProductID AND OI.Quantity > 5 AND OI.PricePerUnit > 100);,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, PricePerUnit REAL);","This query identifies products that are part of an order item where the ordered quantity exceeds 5 and the unit price is over 100, using a correlated subquery with EXISTS."
Get the product with the highest price in the 'Electronics' category.,"SELECT ProductName, Price FROM Products WHERE Category = 'Electronics' AND Price = (SELECT MAX(Price) FROM Products WHERE Category = 'Electronics');","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);","This query retrieves the product name and price for the product that has the highest price specifically within the 'Electronics' category, using an uncorrelated subquery to find that maximum price."
Find the employee with the second highest salary in each department.,"SELECT EmployeeName, Salary, DepartmentID FROM Employees E1 WHERE (SELECT COUNT(DISTINCT Salary) FROM Employees E2 WHERE E2.DepartmentID = E1.DepartmentID AND E2.Salary > E1.Salary) = 1;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL, DepartmentID INTEGER);",This query identifies the employee with the second highest salary within each department by counting distinct salaries greater than the current employee's salary in the same department using a correlated subquery.
List authors who have written at least one book published before 2020.,SELECT AuthorName FROM Authors WHERE AuthorID IN (SELECT AuthorID FROM Books WHERE PublicationYear < 2020);,"CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT); CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, PublicationYear INTEGER);",This query lists authors who have written at least one book published before the year 2020 by checking if their AuthorID exists in the set of AuthorIDs from books meeting that criteria.
"For each product, display its name, price, and the difference between its price and the average price of products in its category.","SELECT ProductName, Price, (Price - (SELECT AVG(Price) FROM Products P2 WHERE P2.Category = P1.Category)) AS PriceDifferenceFromCategoryAvg FROM Products P1;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, Category TEXT);","This query shows each product's price and calculates the difference between its price and the average price of products within its own category, using a correlated scalar subquery for the category average."
Find the names of employees who have worked on 'Database Design' project and are in the 'IT' department.,SELECT E.EmployeeName FROM Employees E WHERE E.DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'IT') AND E.EmployeeID IN (SELECT PE.EmployeeID FROM ProjectAssignments PE JOIN Projects P ON PE.ProjectID = P.ProjectID WHERE P.ProjectName = 'Database Design');,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT); CREATE TABLE ProjectAssignments (AssignmentID INTEGER PRIMARY KEY, EmployeeID INTEGER, ProjectID INTEGER);","This query identifies employees who work in the 'IT' department and are assigned to the 'Database Design' project, using two uncorrelated subqueries to filter by department and project."
List customers who have never placed an order for a product from the 'Electronics' category.,SELECT C.CustomerName FROM Customers C WHERE NOT EXISTS (SELECT 1 FROM Orders O JOIN OrderItems OI ON O.OrderID = OI.OrderID JOIN Products P ON OI.ProductID = P.ProductID WHERE O.CustomerID = C.CustomerID AND P.Category = 'Electronics');,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT);",This query finds customers who have never purchased any product categorized as 'Electronics' by using a correlated subquery with NOT EXISTS to verify no such order exists for a given customer.
"Show the customer names and their total order amounts, but only for customers whose total order amount is greater than 1000.","SELECT C.CustomerName, A.TotalAmount FROM Customers C JOIN (SELECT CustomerID, SUM(TotalAmount) AS TotalAmount FROM Orders GROUP BY CustomerID HAVING SUM(TotalAmount) > 1000) AS A ON C.CustomerID = A.CustomerID;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL, OrderDate TEXT);","This query lists customers and their total order amounts, but only if the total amount exceeds 1000. An uncorrelated subquery is used as a derived table to pre-aggregate customer order totals and filter them."
"For each employee, find their hire date and the date the earliest employee was hired in their department.","SELECT E.EmployeeName, E.HireDate, (SELECT MIN(HireDate) FROM Employees E2 WHERE E2.DepartmentID = E.DepartmentID) AS DepartmentEarliestHireDate FROM Employees E;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT);","This query displays each employee's hire date and, for comparison, the earliest hire date among all employees in their respective department, computed using a correlated scalar subquery."
List all product categories for which no products have been sold yet.,SELECT DISTINCT Category FROM Products WHERE Category NOT IN (SELECT DISTINCT P.Category FROM Sales S JOIN Products P ON S.ProductID = P.ProductID);,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT); CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT);","This query identifies product categories that have no sales recorded, by selecting categories from the Products table that are not present in the categories associated with sales, using an uncorrelated subquery."
Find suppliers who supply products that have been ordered in quantities greater than the average quantity of all products they supply.,SELECT DISTINCT S.SupplierName FROM Suppliers S JOIN Products P1 ON S.SupplierID = P1.SupplierID JOIN OrderItems OI1 ON P1.ProductID = OI1.ProductID WHERE OI1.Quantity > (SELECT AVG(OI2.Quantity) FROM OrderItems OI2 JOIN Products P2 ON OI2.ProductID = P2.ProductID WHERE P2.SupplierID = S.SupplierID);,"CREATE TABLE Suppliers (SupplierID INTEGER PRIMARY KEY, SupplierName TEXT); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, SupplierID INTEGER); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, ProductID INTEGER, Quantity INTEGER);","This query lists suppliers who supply at least one product whose ordered quantity in an order item is greater than the average quantity of all products supplied by that specific supplier, using a correlated subquery to calculate the supplier-specific average."
Retrieve the name of the product that has the highest price among all products sold in the last month.,"SELECT ProductName, Price FROM Products WHERE ProductID IN (SELECT ProductID FROM Sales WHERE SaleDate >= DATE('now', '-1 month')) AND Price = (SELECT MAX(Price) FROM Products WHERE ProductID IN (SELECT ProductID FROM Sales WHERE SaleDate >= DATE('now', '-1 month')));","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL); CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT);","This query finds the product name and price of the product with the highest price among those sold in the last month. It uses nested uncorrelated subqueries to first identify products sold recently, then find the maximum price among them."
"Find projects where at least one employee from the 'HR' department is assigned, and also at least one employee from the 'IT' department is assigned.",SELECT DISTINCT P.ProjectName FROM Projects P WHERE EXISTS (SELECT 1 FROM ProjectAssignments PA1 JOIN Employees E1 ON PA1.EmployeeID = E1.EmployeeID JOIN Departments D1 ON E1.DepartmentID = D1.DepartmentID WHERE PA1.ProjectID = P.ProjectID AND D1.DepartmentName = 'HR') AND EXISTS (SELECT 1 FROM ProjectAssignments PA2 JOIN Employees E2 ON PA2.EmployeeID = E2.EmployeeID JOIN Departments D2 ON E2.DepartmentID = D2.DepartmentID WHERE PA2.ProjectID = P.ProjectID AND D2.DepartmentName = 'IT');,"CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT); CREATE TABLE ProjectAssignments (AssignmentID INTEGER PRIMARY KEY, ProjectID INTEGER, EmployeeID INTEGER); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT);","This query identifies projects that have both an employee from the 'HR' department and an employee from the 'IT' department assigned to them, using two correlated EXISTS subqueries."
Count the number of distinct product categories for products that have been sold at least once.,SELECT COUNT(DISTINCT Category) FROM Products WHERE ProductID IN (SELECT DISTINCT ProductID FROM Sales);,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT); CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT);","This query counts the number of unique product categories for products that have been sold at least once, by using an uncorrelated subquery to get the IDs of sold products."
Find departments where all employees earn more than 50000.,SELECT DepartmentName FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.DepartmentID = D.DepartmentID AND E.Salary <= 50000);,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, Salary REAL);",This query identifies departments where every employee earns more than 50000 by using a correlated NOT EXISTS subquery to check if there are any employees in that department earning 50000 or less.
List the names of the top 3 customers who have placed the highest total order amount across all their orders.,"SELECT C.CustomerName, A.TotalAmount FROM Customers C JOIN (SELECT CustomerID, SUM(TotalAmount) AS TotalAmount FROM Orders GROUP BY CustomerID ORDER BY SUM(TotalAmount) DESC LIMIT 3) AS A ON C.CustomerID = A.CustomerID;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL);",This query retrieves the names and total order amounts of the top 3 customers by total spending. It uses an uncorrelated subquery as a derived table to calculate and rank customer totals before joining with the Customers table.
List the names and cities of all customers and suppliers.,"SELECT name, city FROM Customers UNION SELECT company_name, city FROM Suppliers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, city TEXT, country TEXT); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, company_name TEXT, city TEXT, country TEXT);","Combines the 'name' and 'city' from the Customers table with 'company_name' and 'city' from the Suppliers table, removing duplicate rows."
"Get a list of all product names, including duplicates, from both the 'Electronics' and 'Apparel' categories.",SELECT product_name FROM Products WHERE category = 'Electronics' UNION ALL SELECT product_name FROM Products WHERE category = 'Apparel';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","Retrieves all product names from the 'Electronics' category and all product names from the 'Apparel' category, combining them into a single list and retaining any duplicate product names."
Find the names of employees who are also listed as managers in the Managers table.,SELECT name FROM Employees INTERSECT SELECT manager_name FROM Managers;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT); CREATE TABLE Managers (manager_id INTEGER PRIMARY KEY, manager_name TEXT, department TEXT);",Returns the names that exist in both the 'Employees' table (as employee names) and the 'Managers' table (as manager names).
"List all product categories that have products, but are not found in the 'Discontinued_Categories' list.",SELECT DISTINCT category FROM Products EXCEPT SELECT category_name FROM Discontinued_Categories;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE Discontinued_Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);",Selects all unique product categories from the 'Products' table and then removes any categories that are also present in the 'Discontinued_Categories' table.
Show the names of all active customers located in 'New York' or active suppliers located in 'California'.,SELECT name FROM Customers WHERE city = 'New York' AND status = 'Active' UNION SELECT company_name FROM Suppliers WHERE city = 'California' AND status = 'Active';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, city TEXT, status TEXT); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, company_name TEXT, city TEXT, status TEXT);",Combines the names of active customers from 'New York' with the company names of active suppliers from 'California'.
Find the IDs of books that are available in both 'Library A' and 'Library B'.,SELECT book_id FROM LibraryA_Books WHERE status = 'Available' INTERSECT SELECT book_id FROM LibraryB_Books WHERE status = 'Available';,"CREATE TABLE LibraryA_Books (book_id INTEGER PRIMARY KEY, title TEXT, status TEXT); CREATE TABLE LibraryB_Books (book_id INTEGER PRIMARY KEY, title TEXT, status TEXT);",Returns the book IDs that are marked as 'Available' in both the 'LibraryA_Books' table and the 'LibraryB_Books' table.
Get a list of all course names that have been offered but had no student enrollments.,SELECT course_name FROM Courses EXCEPT SELECT DISTINCT C.course_name FROM Courses C JOIN Enrollments E ON C.course_id = E.course_id;,"CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT);","Selects all course names from the 'Courses' table and then removes any course names that have corresponding entries in the 'Enrollments' table, effectively showing courses with no enrollments."
"Provide the total revenue from 'online' sales and 'in-store' sales, combined into one result set, labeled by type.","SELECT 'Online' AS sale_type, SUM(amount) AS total_revenue FROM OnlineSales UNION SELECT 'In-Store' AS sale_type, SUM(amount) AS total_revenue FROM InStoreSales;","CREATE TABLE OnlineSales (sale_id INTEGER PRIMARY KEY, amount REAL, sale_date TEXT); CREATE TABLE InStoreSales (sale_id INTEGER PRIMARY KEY, amount REAL, sale_date TEXT);","Calculates the total revenue from 'OnlineSales' and 'InStoreSales' tables separately, labels each total with its type, and combines them into a single result set."
List the names of customers who have placed orders for products in both the 'Electronics' and 'Home Goods' categories.,SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.category = 'Electronics' INTERSECT SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.category = 'Home Goods';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);","Finds customers who have ordered products from the 'Electronics' category and also customers who have ordered products from the 'Home Goods' category, then returns only the names of customers present in both lists."
Find the names of employees who have never worked on a project in the 'Software Development' department.,SELECT E.employee_name FROM Employees E EXCEPT SELECT E.employee_name FROM Employees E JOIN Employee_Projects EP ON E.employee_id = EP.employee_id JOIN Projects P ON EP.project_id = P.project_id WHERE P.department = 'Software Development';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT); CREATE TABLE Employee_Projects (employee_id INTEGER, project_id INTEGER, PRIMARY KEY (employee_id, project_id)); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, department TEXT);",Selects all employee names and then removes those employee names that are associated with projects belonging to the 'Software Development' department.
"List all event titles, including repeats, from both 'Conferences' and 'Workshops' tables.",SELECT title FROM Conferences UNION ALL SELECT title FROM Workshops;,"CREATE TABLE Conferences (conference_id INTEGER PRIMARY KEY, title TEXT, date TEXT); CREATE TABLE Workshops (workshop_id INTEGER PRIMARY KEY, title TEXT, date TEXT);","Combines all event titles from the 'Conferences' table with all event titles from the 'Workshops' table, including any duplicates."
Identify departments that have more than 5 employees and also have more than 3 projects.,SELECT department FROM Employees GROUP BY department HAVING COUNT(employee_id) > 5 INTERSECT SELECT department FROM Projects GROUP BY department HAVING COUNT(project_id) > 3;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, department TEXT);","Finds departments with more than 5 employees and intersects that list with departments that have more than 3 projects, returning only departments that satisfy both conditions."
Show all product IDs that are in inventory but have not been sold in any order.,SELECT product_id FROM Inventory EXCEPT SELECT DISTINCT product_id FROM Order_Items;,"CREATE TABLE Inventory (inventory_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","Returns product IDs that exist in the 'Inventory' table but do not appear in the 'Order_Items' table, indicating products that are in stock but never sold."
"List the names of all staff members and volunteers, ordered alphabetically.",SELECT name FROM Staff UNION SELECT name FROM Volunteers ORDER BY name;,"CREATE TABLE Staff (staff_id INTEGER PRIMARY KEY, name TEXT, role TEXT); CREATE TABLE Volunteers (volunteer_id INTEGER PRIMARY KEY, name TEXT, hours_worked INTEGER);","Combines the names of all staff members and volunteers, removes duplicates, and then sorts the combined list alphabetically by name."
Find customer IDs who placed an order in January 2023 and also placed an order in February 2023.,"SELECT customer_id FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-01' INTERSECT SELECT customer_id FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-02';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","Identifies customer IDs who made orders in January 2023 and intersects that set with customer IDs who made orders in February 2023, returning customers who ordered in both months."
Show all employees hired before 2020 who are not currently active.,SELECT employee_id FROM Employees WHERE hire_date < '2020-01-01' EXCEPT SELECT employee_id FROM Employees WHERE status = 'Active';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, hire_date TEXT, status TEXT);","Selects employees hired before January 1, 2020, and then removes any of those employees who currently have an 'Active' status."
"Get a full list of contact emails for both registered users and guest users, including any duplicates.",SELECT email FROM RegisteredUsers UNION ALL SELECT guest_email FROM GuestUsers;,"CREATE TABLE RegisteredUsers (user_id INTEGER PRIMARY KEY, username TEXT, email TEXT); CREATE TABLE GuestUsers (guest_id INTEGER PRIMARY KEY, guest_email TEXT, visit_date TEXT);","Combines all email addresses from the 'RegisteredUsers' table with all guest email addresses from the 'GuestUsers' table, including duplicate entries."
Find features that are common to both 'smartphones' and 'laptops'.,SELECT feature_name FROM ProductFeatures WHERE product_type = 'Smartphone' INTERSECT SELECT feature_name FROM ProductFeatures WHERE product_type = 'Laptop';,"CREATE TABLE ProductFeatures (feature_id INTEGER PRIMARY KEY, product_type TEXT, feature_name TEXT);","Returns the feature names that are listed for 'Smartphone' products and also for 'Laptop' products, indicating common features."
List features that are specific to 'smartphones' but not found in 'laptops'.,SELECT feature_name FROM ProductFeatures WHERE product_type = 'Smartphone' EXCEPT SELECT feature_name FROM ProductFeatures WHERE product_type = 'Laptop';,"CREATE TABLE ProductFeatures (feature_id INTEGER PRIMARY KEY, product_type TEXT, feature_name TEXT);",Selects all feature names associated with 'Smartphone' products and removes any features that are also associated with 'Laptop' products.
"Combine a list of all successful transactions and all failed transactions, indicating their status.","SELECT transaction_id, amount, 'Successful' AS status FROM SuccessfulTransactions UNION SELECT transaction_id, amount, 'Failed' AS status FROM FailedTransactions;","CREATE TABLE SuccessfulTransactions (transaction_id INTEGER PRIMARY KEY, amount REAL, transaction_date TEXT); CREATE TABLE FailedTransactions (transaction_id INTEGER PRIMARY KEY, amount REAL, transaction_date TEXT);","Combines transaction IDs and amounts from successful transactions with those from failed transactions, adding a 'status' column to differentiate them."
Find the names of students who are enrolled in both 'Mathematics' and 'Physics' courses.,SELECT S.student_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE C.course_name = 'Mathematics' INTERSECT SELECT S.student_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE C.course_name = 'Physics';,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER);","Retrieves student names enrolled in 'Mathematics' and intersects this with student names enrolled in 'Physics', returning students who are taking both courses."
"Show departments that have employees, but none of their employees have a salary over $100,000.",SELECT DISTINCT department FROM Employees EXCEPT SELECT DISTINCT department FROM Employees WHERE salary > 100000;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, salary REAL);","Returns department names that have employees, excluding any department that has at least one employee with a salary greater than $100,000."
List the IDs of all items that are either 'expired' or 'low in stock'.,SELECT item_id FROM (SELECT item_id FROM Inventory WHERE expiration_date < DATE('now') UNION SELECT item_id FROM Inventory WHERE quantity < 10);,"CREATE TABLE Inventory (item_id INTEGER PRIMARY KEY, item_name TEXT, quantity INTEGER, expiration_date TEXT);","Combines the item IDs of products that have passed their expiration date with the item IDs of products that have a quantity less than 10, showing all items that are either expired or low in stock."
Find the IDs of orders placed in Q1 2023 that were also delivered in Q1 2023.,SELECT order_id FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-03-31' INTERSECT SELECT order_id FROM Deliveries WHERE delivery_date BETWEEN '2023-01-01' AND '2023-03-31';,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Deliveries (delivery_id INTEGER PRIMARY KEY, order_id INTEGER, delivery_date TEXT);",Returns order IDs where both the order placement date and the delivery date fall within the first quarter of 2023.
Identify customer IDs who have registered but have not placed any orders.,SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Orders;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",Retrieves the IDs of customers who are present in the 'Customers' table but do not have any corresponding entries in the 'Orders' table.
"Combine the names of users from a 'Web Users' table and 'Mobile Users' table into a single list, ensuring the column is called 'User_Name'.",SELECT username AS User_Name FROM WebUsers UNION SELECT mobile_username AS User_Name FROM MobileUsers;,"CREATE TABLE WebUsers (user_id INTEGER PRIMARY KEY, username TEXT, registration_date TEXT); CREATE TABLE MobileUsers (mobile_id INTEGER PRIMARY KEY, mobile_username TEXT, app_version TEXT);","Combines the 'username' from 'WebUsers' and 'mobile_username' from 'MobileUsers' into a single 'User_Name' column, removing duplicates."
Find employees who are assigned to both 'Project Alpha' and 'Project Beta'.,SELECT E.employee_name FROM Employees E JOIN Employee_Projects EP ON E.employee_id = EP.employee_id JOIN Projects P ON EP.project_id = P.project_id WHERE P.project_name = 'Project Alpha' INTERSECT SELECT E.employee_name FROM Employees E JOIN Employee_Projects EP ON E.employee_id = EP.employee_id JOIN Projects P ON EP.project_id = P.project_id WHERE P.project_name = 'Project Beta';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE Employee_Projects (employee_id INTEGER, project_id INTEGER, PRIMARY KEY (employee_id, project_id));","Identifies employee names assigned to 'Project Alpha' and intersects this with employee names assigned to 'Project Beta', returning employees working on both projects."
List products that are in stock but have not received any orders in the last 90 days.,"SELECT product_id FROM Inventory WHERE quantity > 0 EXCEPT SELECT DISTINCT OI.product_id FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id WHERE O.order_date >= DATE('now', '-90 days');","CREATE TABLE Inventory (product_id INTEGER PRIMARY KEY, product_name TEXT, quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT);",Returns product IDs that are currently in stock (quantity > 0) but have not been included in any orders placed within the last 90 days.
"Show all employees who are either in the 'Sales' department or have a salary over $70,000.","SELECT employee_id, employee_name FROM Employees WHERE department = 'Sales' UNION SELECT employee_id, employee_name FROM Employees WHERE salary > 70000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, salary REAL);","Combines the IDs and names of employees from the 'Sales' department with those of employees who earn more than $70,000, removing duplicates."
"Find all unique item names that are listed in 'Warehouse A' or 'Warehouse B', but are not marked as 'damaged' in 'Warehouse C'.",SELECT item_name FROM WarehouseA_Stock UNION SELECT item_name FROM WarehouseB_Stock EXCEPT SELECT item_name FROM WarehouseC_Stock WHERE status = 'damaged';,"CREATE TABLE WarehouseA_Stock (item_id INTEGER PRIMARY KEY, item_name TEXT, quantity INTEGER); CREATE TABLE WarehouseB_Stock (item_id INTEGER PRIMARY KEY, item_name TEXT, quantity INTEGER); CREATE TABLE WarehouseC_Stock (item_id INTEGER PRIMARY KEY, item_name TEXT, status TEXT);","First, combines all unique item names from 'WarehouseA_Stock' and 'WarehouseB_Stock'. Then, it removes any item names from this combined list that are marked as 'damaged' in 'WarehouseC_Stock'."
Get the order ID and the year of the order date for all orders.,"SELECT order_id, STRFTIME('%Y', order_date) AS order_year FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Extracts the year from the 'order_date' column for each order.
Find all orders placed in the year 2023.,"SELECT * FROM Orders WHERE STRFTIME('%Y', order_date) = '2023';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Selects all columns from the Orders table where the year of the order_date is 2023.
Calculate the number of days between the order date and the delivery date for each order.,"SELECT order_id, julianday(delivery_date) - julianday(order_date) AS days_to_deliver FROM Orders WHERE delivery_date IS NOT NULL;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT);",Calculates the difference in days between the delivery date and order date using julianday for non-null delivery dates.
Show the order ID and the date 7 days after the order was placed.,"SELECT order_id, DATE(order_date, '+7 days') AS future_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT);",Adds 7 days to the 'order_date' for each order and returns the new date.
List all employees hired in January 2022.,"SELECT * FROM Employees WHERE STRFTIME('%Y-%m', hire_date) = '2022-01';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT);",Retrieves employee records where the hire date falls in January 2022.
Count the number of orders per month for the year 2023.,"SELECT STRFTIME('%Y-%m', order_date) AS order_month, COUNT(order_id) AS total_orders FROM Orders WHERE STRFTIME('%Y', order_date) = '2023' GROUP BY order_month ORDER BY order_month;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT);",Groups orders by month for the year 2023 and counts the number of orders in each month.
Get the current date and time.,SELECT DATETIME('now') AS current_datetime;,CREATE TABLE DummyTable (id INTEGER);,Returns the current date and time as a string.
Find all log entries that occurred between 9 AM and 5 PM.,SELECT * FROM LogEntries WHERE TIME(entry_timestamp) BETWEEN '09:00:00' AND '17:00:00';,"CREATE TABLE LogEntries (log_id INTEGER PRIMARY KEY, entry_timestamp TEXT, log_level TEXT, message TEXT);",Selects log entries whose time component of 'entry_timestamp' falls within the 9 AM to 5 PM range.
List all events scheduled for the current calendar week (Sunday to Saturday).,"SELECT * FROM Events WHERE julianday(event_date) BETWEEN julianday(DATE('now', 'start of day', '-' || STRFTIME('%w', 'now') || ' days')) AND julianday(DATE('now', 'start of day', '+' || (6 - STRFTIME('%w', 'now')) || ' days'));","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, start_time TEXT, end_time TEXT, location TEXT);","Selects events whose date falls within the current calendar week, calculated from the current date."
"For each year and month, show the total sales amount.","SELECT STRFTIME('%Y-%m', order_date) AS sales_month, SUM(total_amount) AS monthly_sales FROM Orders GROUP BY sales_month ORDER BY sales_month;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT);",Calculates the sum of 'total_amount' for each distinct year-month combination from the 'order_date'.
Get the details of the most recent log entry.,SELECT * FROM LogEntries ORDER BY entry_timestamp DESC LIMIT 1;,"CREATE TABLE LogEntries (log_id INTEGER PRIMARY KEY, entry_timestamp TEXT, log_level TEXT, message TEXT);",Retrieves the single latest log entry by ordering entries by timestamp in descending order and taking the top one.
"For each employee, calculate their current age in years.","SELECT employee_id, first_name, last_name, STRFTIME('%Y', 'now') - STRFTIME('%Y', date_of_birth) - (STRFTIME('%m-%d', 'now') < STRFTIME('%m-%d', date_of_birth)) AS age FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT);","Calculates the current age of each employee in full years, accounting for whether their birthday has passed this year."
Find all tasks that were created in the last 30 days.,"SELECT * FROM Tasks WHERE created_at >= DATE('now', '-30 days');","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, created_at TEXT, due_date TEXT, status TEXT);",Retrieves tasks created within the last 30 days relative to the current date.
"For each open task, show its ID and the number of days remaining until its due date.","SELECT task_id, task_name, julianday(due_date) - julianday('now') AS days_remaining FROM Tasks WHERE status = 'Open' AND due_date IS NOT NULL;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, created_at TEXT, due_date TEXT, status TEXT);",Calculates the number of days remaining until the 'due_date' for tasks that are currently 'Open'.
List all orders and their corresponding month's first and last day.,"SELECT order_id, order_date, DATE(order_date, 'start of month') AS month_start, DATE(order_date, 'start of month', '+1 month', '-1 day') AS month_end FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT);",Returns each order's date along with the calculated first and last day of the month it was placed in.
Find all events that occur on a Friday.,"SELECT * FROM Events WHERE STRFTIME('%w', event_date) = '5';","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, start_time TEXT, end_time TEXT, location TEXT);","Selects events where the day of the week (0=Sunday, 5=Friday) of 'event_date' is Friday."
Find orders that were delivered more than 10 days after the order date.,"SELECT order_id, order_date, delivery_date FROM Orders WHERE julianday(delivery_date) - julianday(order_date) > 10;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT);",Identifies orders where the delivery date is more than 10 days after the order date.
Calculate the duration of each event in hours.,"SELECT event_id, event_name, (julianday(end_time) - julianday(start_time)) * 24 AS duration_hours FROM Events WHERE start_time IS NOT NULL AND end_time IS NOT NULL;","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, start_time TEXT, end_time TEXT, location TEXT);",Calculates the duration of each event in hours by finding the difference in Julian days between start and end times and multiplying by 24.
Find employees who have their hiring anniversary in the current month.,"SELECT employee_id, first_name, last_name, hire_date FROM Employees WHERE STRFTIME('%m', hire_date) = STRFTIME('%m', 'now');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT);",Selects employees whose hiring month matches the current month.
Count how many orders were placed on each day of the week.,"SELECT STRFTIME('%w', order_date) AS day_of_week_num, COUNT(order_id) AS orders_count FROM Orders GROUP BY day_of_week_num ORDER BY day_of_week_num;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT);","Counts orders for each day of the week (0 for Sunday, 6 for Saturday) based on their order date."
Get the customer IDs of customers who placed an order in the last 6 months.,"SELECT DISTINCT customer_id FROM Orders WHERE order_date >= DATE('now', '-6 months');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT);",Retrieves unique customer IDs for customers who placed an order within the last six months from the current date.
Display the event start time in 'HH:MM AM/PM' format.,"SELECT event_name, STRFTIME('%I:%M %p', start_time) AS formatted_start_time FROM Events;","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, start_time TEXT, end_time TEXT, location TEXT);",Formats the 'start_time' of each event into a 12-hour format with AM/PM.
List all tasks that are overdue (due date in the past) and not yet completed.,SELECT * FROM Tasks WHERE due_date < DATE('now') AND (completed_at IS NULL OR status != 'Completed');,"CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, created_at TEXT, due_date TEXT, completed_at TEXT, status TEXT);",Selects tasks whose due date is before today and which have not been marked as completed.
Find employees whose hire date is before any order was placed in 2023.,"SELECT employee_id, first_name, last_name FROM Employees WHERE julianday(hire_date) < (SELECT MIN(julianday(order_date)) FROM Orders WHERE STRFTIME('%Y', order_date) = '2023');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Finds employees whose hire date is earlier than the earliest order date recorded in the year 2023.
Calculate the average time difference in hours between consecutive sensor readings for sensor_id 101.,"SELECT AVG((julianday(next_reading_timestamp) - julianday(reading_timestamp)) * 24) AS avg_interval_hours FROM (SELECT reading_timestamp, LEAD(reading_timestamp) OVER (ORDER BY reading_timestamp) AS next_reading_timestamp FROM SensorReadings WHERE sensor_id = 101) WHERE next_reading_timestamp IS NOT NULL;","CREATE TABLE SensorReadings (reading_id INTEGER PRIMARY KEY, sensor_id INTEGER, reading_timestamp TEXT, value REAL);","Calculates the average time in hours between a sensor reading and the subsequent reading for a specific sensor, using a window function for lead."
Find all events scheduled for tomorrow between 10 AM and 2 PM.,"SELECT * FROM Events WHERE event_date = DATE('now', '+1 day') AND TIME(start_time) BETWEEN '10:00:00' AND '14:00:00';","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, start_time TEXT, end_time TEXT, location TEXT);",Retrieves events that are scheduled for the next day and start between 10 AM and 2 PM.
Count the number of orders per quarter for the year 2022.,"SELECT STRFTIME('%Y', order_date) AS order_year, (STRFTIME('%m', order_date) - 1) / 3 + 1 AS order_quarter, COUNT(order_id) AS total_orders FROM Orders WHERE STRFTIME('%Y', order_date) = '2022' GROUP BY order_year, order_quarter ORDER BY order_year, order_quarter;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT);",Groups orders by quarter for the year 2022 and counts the number of orders in each quarter.
List all log entries that occurred on a Saturday or Sunday.,"SELECT * FROM LogEntries WHERE STRFTIME('%w', entry_timestamp) IN ('0', '6');","CREATE TABLE LogEntries (log_id INTEGER PRIMARY KEY, entry_timestamp TEXT, log_level TEXT, message TEXT);",Selects log entries whose timestamp falls on a Sunday (0) or a Saturday (6).
"For each employee, calculate their age (in years) at the time of their hire.","SELECT employee_id, first_name, last_name, STRFTIME('%Y', hire_date) - STRFTIME('%Y', date_of_birth) - (STRFTIME('%m-%d', hire_date) < STRFTIME('%m-%d', date_of_birth)) AS age_at_hire FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT);",Calculates the age of each employee at their hiring date by comparing hire date and date of birth components.
List employees whose birthday is coming up in the next 30 days.,"SELECT employee_id, first_name, last_name, date_of_birth FROM Employees WHERE STRFTIME('%m-%d', DATE(date_of_birth, '+' || (STRFTIME('%Y', 'now') - STRFTIME('%Y', date_of_birth)) || ' years')) BETWEEN STRFTIME('%m-%d', 'now') AND STRFTIME('%m-%d', DATE('now', '+30 days'));","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT);",Finds employees whose next birthday (adjusted to the current year) falls within the next 30 days from the current date.
"List all products, ordered by their price from lowest to highest.","SELECT product_name, price FROM Products ORDER BY price ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER);","This query retrieves the product name and price for all products, then sorts the results in ascending order based on the 'price' column."
Show the top 5 most expensive products.,"SELECT product_name, price FROM Products ORDER BY price DESC LIMIT 5;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER);","This query selects the product name and price, orders them by price in descending order, and then limits the result set to the top 5 entries."
Get the names of customers in alphabetical order.,SELECT customer_name FROM Customers ORDER BY customer_name ASC;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, registration_date DATE);",This query fetches all customer names and sorts them alphabetically in ascending order.
Find the 3 oldest employees.,"SELECT first_name, last_name, hire_date FROM Employees ORDER BY hire_date ASC LIMIT 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, hire_date DATE, salary REAL);","This query selects employee names and hire dates, orders them by hire date in ascending order (oldest first), and takes the first 3 results."
"List orders placed in the last month, sorted by order date from newest to oldest.","SELECT order_id, order_date, total_amount FROM Orders WHERE order_date >= DATE('now', '-1 month') ORDER BY order_date DESC;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL);","This query selects order details for orders placed within the last month and sorts them by order date in descending order, showing the most recent first."
Retrieve the 10 products with the lowest stock quantity.,"SELECT product_name, stock_quantity FROM Products ORDER BY stock_quantity ASC LIMIT 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER);","This query selects product names and stock quantities, sorts them by stock quantity in ascending order, and returns the first 10 results."
Show products ordered by category then by price (descending) within each category.,"SELECT product_name, category, price FROM Products ORDER BY category ASC, price DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER);","This query orders products first by their category alphabetically, and then within each category, by price from highest to lowest."
"List all books, showing their titles and publication years, with older books first.","SELECT title, publication_year FROM Books ORDER BY publication_year ASC;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, publication_year INTEGER);","This query retrieves book titles and publication years, sorting them by publication year in ascending order."
Get the 5th to 10th most recent transactions.,"SELECT transaction_id, transaction_date, amount FROM Transactions ORDER BY transaction_date DESC LIMIT 6 OFFSET 4;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date DATE, amount REAL);","This query sorts transactions by date in descending order, skips the first 4 (OFFSET 4), and then retrieves the next 6 records (LIMIT 6) to get the 5th through 10th most recent."
"Display courses sorted by their credit hours, from most to least.","SELECT course_name, credit_hours FROM Courses ORDER BY credit_hours DESC;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, credit_hours INTEGER);","This query lists course names and their credit hours, sorted by credit hours in descending order."
Find the student with the highest GPA.,"SELECT student_name, gpa FROM Students ORDER BY gpa DESC LIMIT 1;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, gpa REAL);","This query selects student names and GPAs, orders them by GPA in descending order, and then takes only the top result, which corresponds to the student with the highest GPA."
"List employees by last name and then first name, both in alphabetical order.","SELECT first_name, last_name FROM Employees ORDER BY last_name ASC, first_name ASC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, hire_date DATE, salary REAL);","This query retrieves employee names and sorts them first by last name alphabetically, and then for employees with the same last name, by first name alphabetically."
Get the top 3 highest-paid employees.,"SELECT first_name, last_name, salary FROM Employees ORDER BY salary DESC LIMIT 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, hire_date DATE, salary REAL);","This query selects employee names and salaries, orders them by salary in descending order, and retrieves the top 3 results."
"Show the average order value for each customer, ordered by the average value descending.","SELECT C.customer_name, AVG(O.total_amount) AS average_order_value FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_name ORDER BY average_order_value DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, registration_date DATE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL);","This query joins customers and orders, calculates the average total amount for each customer, groups by customer name, and then orders the results by this average in descending order."
"List cities and their populations, showing the 2nd to 4th largest cities.","SELECT city_name, population FROM Cities ORDER BY population DESC LIMIT 3 OFFSET 1;","CREATE TABLE Cities (city_id INTEGER PRIMARY KEY, city_name TEXT NOT NULL, population INTEGER, country TEXT);","This query selects city names and populations, orders them by population in descending order, then skips the largest city (OFFSET 1) and retrieves the next 3 cities (LIMIT 3)."
"Find the number of products in each category, ordered by the count descending.","SELECT category, COUNT(product_id) AS product_count FROM Products GROUP BY category ORDER BY product_count DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER);","This query groups products by category, counts the number of products in each category, and then sorts the categories based on these counts in descending order."
Get the most recent comment from each user.,"SELECT T1.* FROM Comments T1 JOIN (SELECT user_id, MAX(comment_date) AS max_date FROM Comments GROUP BY user_id) T2 ON T1.user_id = T2.user_id AND T1.comment_date = T2.max_date ORDER BY T1.comment_date DESC;","CREATE TABLE Comments (comment_id INTEGER PRIMARY KEY, user_id INTEGER, comment_text TEXT, comment_date DATE);","This query uses a subquery to find the most recent comment date for each user, then joins back to the main table to get the full comment details for those dates, finally ordering them by date descending."
"Retrieve sales records, ordered by total amount, but put null amounts last.","SELECT sale_id, sale_date, total_amount FROM Sales ORDER BY (total_amount IS NULL), total_amount ASC;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date DATE, total_amount REAL);","This query orders sales records by total amount in ascending order, ensuring that any records with a NULL total amount are placed at the end of the results by using an IS NULL check as the primary sort key."
"List employees whose salary is above 60000, sorted by hire date.","SELECT first_name, last_name, salary, hire_date FROM Employees WHERE salary > 60000 ORDER BY hire_date ASC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, hire_date DATE, salary REAL);","This query filters employees to include only those with a salary greater than 60000, and then sorts the filtered results by their hire date in ascending order."
"Show the title and release year of movies, ordered by title length (shortest first).","SELECT title, release_year FROM Movies ORDER BY LENGTH(title) ASC;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, release_year INTEGER);","This query selects movie titles and release years and orders them based on the length of their titles, from shortest to longest."
"Get the product categories and the total stock quantity for each, ordered by total stock descending, but only for categories with more than 1000 items in stock.","SELECT category, SUM(stock_quantity) AS total_stock FROM Products GROUP BY category HAVING total_stock > 1000 ORDER BY total_stock DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER);","This query groups products by category, calculates the sum of stock quantity for each, filters out categories where the total stock is not greater than 1000, and then orders the remaining categories by their total stock in descending order."
List the top 5 customers who have placed the most orders.,"SELECT C.customer_name, COUNT(O.order_id) AS order_count FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id ORDER BY order_count DESC LIMIT 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, registration_date DATE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL);","This query joins customers with their orders, counts the number of orders for each customer, groups them by customer, and then returns the top 5 customers based on their order count in descending order."
"Display unique department names, sorted alphabetically.",SELECT DISTINCT department_name FROM Departments ORDER BY department_name ASC;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);",This query retrieves all unique department names and sorts them alphabetically.
Get the 3 products with the highest 'price per unit stock' (price / stock_quantity).,"SELECT product_name, price, stock_quantity, (price * 1.0 / stock_quantity) AS price_per_unit_stock FROM Products WHERE stock_quantity > 0 ORDER BY price_per_unit_stock DESC LIMIT 3;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER);","This query selects product name, price, stock, and calculates 'price per unit stock'. It filters out products with zero stock to avoid division by zero, then orders the results by this calculated value in descending order and returns the top 3."
"Show articles published in 2023, ordered by author, then by publication date (oldest first).","SELECT title, author, publication_date FROM Articles WHERE publication_date BETWEEN '2023-01-01' AND '2023-12-31' ORDER BY author ASC, publication_date ASC;","CREATE TABLE Articles (article_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, publication_date DATE);","This query selects articles published in 2023, and then sorts them first by author's name alphabetically, and subsequently by their publication date in ascending order."
Retrieve the names of the 1st and 2nd customers alphabetically.,SELECT customer_name FROM Customers ORDER BY customer_name ASC LIMIT 2 OFFSET 0;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, registration_date DATE);","This query retrieves customer names, orders them alphabetically, and then takes the first 2 results."
"List products where stock is less than 50, ordered by stock quantity ascending.","SELECT product_name, stock_quantity FROM Products WHERE stock_quantity < 50 ORDER BY stock_quantity ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER);","This query filters products to show only those with stock quantity less than 50, and then orders these low-stock products by their quantity in ascending order."
Get the top 10 longest movie titles.,SELECT title FROM Movies ORDER BY LENGTH(title) DESC LIMIT 10;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, release_year INTEGER);","This query selects movie titles, orders them by their length in descending order, and retrieves the top 10 longest titles."
"Show users and their last login date, with null login dates appearing last, ordered by registration date (newest first).","SELECT username, last_login_date, registration_date FROM Users ORDER BY (last_login_date IS NULL), registration_date DESC;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT NOT NULL, email TEXT, registration_date DATE, last_login_date DATE);","This query selects user details, orders them primarily by whether their last_login_date is NULL (placing NULLs last), and secondarily by registration_date in descending order for non-NULL last_login_dates or within the NULL group."
"Retrieve the names of employees who earn more than 70000, sorted by their salary in ascending order and then by last name.","SELECT first_name, last_name, salary FROM Employees WHERE salary > 70000 ORDER BY salary ASC, last_name ASC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, hire_date DATE, salary REAL);","This query filters employees earning over 70000, then sorts them by salary in ascending order, and for employees with the same salary, by last name alphabetically."
Find all products that belong to the 'Electronics' or 'Home Goods' categories.,"SELECT product_name, price FROM Products WHERE category IN ('Electronics', 'Home Goods');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query retrieves the name and price of products whose category is either 'Electronics' or 'Home Goods' using the IN operator.
List the names of customers who have placed an order.,"SELECT first_name, last_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query selects the first and last names of customers whose IDs exist in the Orders table, indicating they have placed at least one order using an IN subquery."
Show departments that have at least one employee earning more than 70000.,SELECT department_name FROM Departments d WHERE EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id AND e.salary > 70000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);","This query returns the names of departments that contain at least one employee with a salary greater than 70000, using a correlated EXISTS subquery."
Get a list of orders placed in the first quarter of 2023.,"SELECT order_id, customer_id, order_date FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-03-31';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query fetches orders that were placed between January 1, 2023, and March 31, 2023, inclusive, using the BETWEEN operator on the order_date column."
Find all books whose title starts with 'The'.,"SELECT title, author FROM Books WHERE title LIKE 'The%';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER);","This query selects the title and author of books where the title begins with 'The', using the LIKE operator with the '%' wildcard."
Retrieve employees who do not work in 'Sales' or 'Marketing' departments.,"SELECT employee_id, first_name, last_name FROM Employees WHERE department NOT IN ('Sales', 'Marketing');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT, salary REAL);",This query selects employees whose department is neither 'Sales' nor 'Marketing' using the NOT IN operator.
List movies that were not released between 2000 and 2010.,"SELECT title, release_year FROM Movies WHERE release_year NOT BETWEEN 2000 AND 2010;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT);","This query retrieves movies whose release year is outside the range of 2000 to 2010, using the NOT BETWEEN operator."
Get products whose name does not contain 'Pro' or 'Plus'.,SELECT product_name FROM Products WHERE product_name NOT LIKE '%Pro%' AND product_name NOT LIKE '%Plus%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","This query selects product names that do not contain the substrings 'Pro' and 'Plus', using multiple NOT LIKE conditions."
Find customers who have never placed an order.,"SELECT customer_id, first_name, last_name FROM Customers c WHERE NOT EXISTS (SELECT 1 FROM Orders o WHERE o.customer_id = c.customer_id);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","This query selects customers for whom no corresponding orders exist in the Orders table, using a NOT EXISTS correlated subquery."
Retrieve all events scheduled for the year 2024.,"SELECT event_name, event_date, location FROM Events WHERE event_date BETWEEN '2024-01-01' AND '2024-12-31';","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, location TEXT, capacity INTEGER);","This query selects event names, dates, and locations for events scheduled within the entire year 2024, using the BETWEEN operator on dates."
List employees whose last name starts with 'Sm' and has exactly 5 characters.,"SELECT first_name, last_name FROM Employees WHERE last_name LIKE 'Sm___';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT);","This query finds employees whose last name starts with 'Sm' and is exactly 5 characters long, using the LIKE operator with '_' wildcard for single characters."
"Identify products with prices between 50.00 and 150.00, inclusive.","SELECT product_name, price FROM Products WHERE price BETWEEN 50.00 AND 150.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","This query selects products whose price falls within the range of 50.00 to 150.00, using the BETWEEN operator."
Find all customers whose email address contains 'gmail.com'.,"SELECT first_name, last_name, email FROM Customers WHERE email LIKE '%gmail.com%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT);","This query retrieves customers whose email addresses contain the substring 'gmail.com', using the LIKE operator with '%' wildcards."
Get the names of courses that have students enrolled.,SELECT course_name FROM Courses c WHERE EXISTS (SELECT 1 FROM Enrollments e WHERE e.course_id = c.course_id);,"CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT);","This query selects course names for which there is at least one corresponding entry in the Enrollments table, indicating student enrollment, using a correlated EXISTS subquery."
List all authors whose names are in a specific set of popular authors.,"SELECT author_name FROM Authors WHERE author_name IN ('Stephen King', 'J.K. Rowling', 'George Orwell');","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, nationality TEXT);",This query retrieves author names that exactly match any of the specified names in the list using the IN operator.
Select employees whose hire date is not between '2015-01-01' and '2019-12-31'.,"SELECT employee_id, first_name, hire_date FROM Employees WHERE hire_date NOT BETWEEN '2015-01-01' AND '2019-12-31';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL);","This query fetches employees whose hire date falls outside the specified five-year range, using the NOT BETWEEN operator."
Find suppliers whose names do not start with 'A' and do not end with 'Ltd'.,SELECT supplier_name FROM Suppliers WHERE supplier_name NOT LIKE 'A%' AND supplier_name NOT LIKE '%Ltd%';,"CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, country TEXT);","This query selects suppliers whose names neither begin with 'A' nor end with 'Ltd', using multiple NOT LIKE conditions."
Get orders with a total amount greater than the average of all orders.,"SELECT order_id, total_amount FROM Orders WHERE total_amount > (SELECT AVG(total_amount) FROM Orders);","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query selects orders whose total amount is greater than the calculated average total amount of all orders using a subquery without IN/EXISTS/BETWEEN/LIKE directly on the main filter, but it's a good example of subquery context. Let's make it explicitly use one of the operators requested to be consistent."
"Find products that are in stock and belong to 'Electronics', 'Books', or 'Apparel' categories.","SELECT product_name, category, stock_quantity FROM Products WHERE stock_quantity > 0 AND category IN ('Electronics', 'Books', 'Apparel');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects products that have stock and whose category is one of 'Electronics', 'Books', or 'Apparel', combining a numeric condition with the IN operator."
List employees who were hired in the 90s (1990-1999).,"SELECT first_name, last_name, hire_date FROM Employees WHERE hire_date BETWEEN '1990-01-01' AND '1999-12-31';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL);","This query retrieves employees whose hire date falls within the 1990s decade, using the BETWEEN operator on the hire_date column."
Show all customer names where the last name ends with 'son' (case-insensitive).,"SELECT first_name, last_name FROM Customers WHERE last_name LIKE '%son' COLLATE NOCASE;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT);","This query selects customer names where the last name ends with 'son', performing a case-insensitive search using LIKE with COLLATE NOCASE."
Retrieve records from the 'Logs' table that occurred on weekends (Saturday or Sunday) in October 2023.,"SELECT log_id, log_message, log_timestamp FROM Logs WHERE log_timestamp BETWEEN '2023-10-01' AND '2023-10-31' AND STRFTIME('%w', log_timestamp) IN ('0', '6');","CREATE TABLE Logs (log_id INTEGER PRIMARY KEY, log_message TEXT, log_timestamp TEXT);","This query selects log entries from October 2023 that occurred on a Saturday (6) or Sunday (0), using BETWEEN for the date range and IN with STRFTIME('%w') for day of the week."
Find movies that do not have a specified director.,SELECT title FROM Movies WHERE director IS NULL OR director NOT IN (SELECT DISTINCT director_name FROM Directors);,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER); CREATE TABLE Directors (director_id INTEGER PRIMARY KEY, director_name TEXT);",This query selects movie titles where the director is either NULL or their name is not found in the distinct list of director names from the Directors table.
List all employees who report to a manager in the 'Executive' department.,"SELECT e.first_name, e.last_name FROM Employees e JOIN Employees m ON e.manager_id = m.employee_id WHERE m.department IN (SELECT department_name FROM Departments WHERE department_name = 'Executive');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","This query selects employees who report to managers whose department is 'Executive', using a self-join and an IN subquery to filter manager departments."
Get the names of all employees whose email contains a '.' followed by 'com' or 'org'.,"SELECT first_name, last_name, email FROM Employees WHERE email LIKE '%.com%' OR email LIKE '%.org%';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT);","This query retrieves employees whose email addresses contain either '.com' or '.org', using multiple LIKE conditions combined with OR."
Show product categories that have no products priced over 1000.,SELECT category FROM ProductCategories pc WHERE NOT EXISTS (SELECT 1 FROM Products p WHERE p.category_id = pc.category_id AND p.price > 1000);,"CREATE TABLE ProductCategories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL);","This query selects product categories for which there are no products with a price greater than 1000, using a NOT EXISTS correlated subquery."
Retrieve inventory items whose quantity is between 10 and 50 and whose name ends with 'Kit' or 'Set'.,"SELECT item_name, quantity FROM Inventory WHERE quantity BETWEEN 10 AND 50 AND (item_name LIKE '%Kit' OR item_name LIKE '%Set');","CREATE TABLE Inventory (item_id INTEGER PRIMARY KEY, item_name TEXT, quantity INTEGER, last_restock_date TEXT);","This query selects inventory items that have a quantity between 10 and 50 and whose name ends with either 'Kit' or 'Set', combining BETWEEN with LIKE."
"Find all projects that are currently 'Active' and started after January 1, 2023.","SELECT project_name, start_date FROM Projects WHERE status = 'Active' AND start_date > '2023-01-01';","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, status TEXT);","This query selects projects that are marked as 'Active' and have a start date later than January 1, 2023. This implicitly uses a date comparison, not BETWEEN, IN, EXISTS, or LIKE."
"Find all projects that are currently 'Active' and started between Jan 1, 2023, and Dec 31, 2023.","SELECT project_name, start_date FROM Projects WHERE status = 'Active' AND start_date BETWEEN '2023-01-01' AND '2023-12-31';","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, status TEXT);","This query selects projects that are marked as 'Active' and have a start date within the year 2023, using the BETWEEN operator."
List all users whose username contains 'user' followed by a single digit.,"SELECT user_id, username FROM Users WHERE username LIKE '%user_';","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, email TEXT);","This query selects users whose username contains 'user' immediately followed by any single character, using the LIKE operator with '_' wildcard."
Retrieve employees whose first name is 'John' or 'Jane' and whose last name is not 'Doe'.,"SELECT first_name, last_name FROM Employees WHERE first_name IN ('John', 'Jane') AND last_name NOT IN ('Doe');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT);","This query selects employees whose first name is either 'John' or 'Jane', but whose last name is not 'Doe', combining IN and NOT IN operators."
Find the names of customers who have placed at least one order.,SELECT customer_name FROM Customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM Orders);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query selects the names of customers whose 'customer_id' appears in the list of distinct 'customer_id's from the 'Orders' table, effectively finding customers who have placed orders."
List all products that have a stock quantity greater than the average stock quantity of all products.,"SELECT product_name, stock_quantity FROM Products WHERE stock_quantity > (SELECT AVG(stock_quantity) FROM Products);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, stock_quantity INTEGER);","This query retrieves products whose 'stock_quantity' is higher than the overall average stock quantity, which is calculated by the subquery."
Show each customer's name along with the total amount they have spent across all their orders.,"SELECT c.customer_name, (SELECT SUM(o.total_amount) FROM Orders o WHERE o.customer_id = c.customer_id) AS total_spent FROM Customers c;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","For each customer, a correlated subquery calculates the sum of 'total_amount' from all their orders, effectively showing the total money spent by each customer."
Retrieve the names of employees who earn more than the average salary of their respective department.,"SELECT e.first_name, e.last_name, e.salary, d.department_name FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE e.salary > (SELECT AVG(e2.salary) FROM Employees e2 WHERE e2.department_id = e.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query joins employees with departments and then filters employees whose salary is greater than the average salary of employees within their own department, calculated by a correlated subquery."
Find students who are enrolled in at least one course offered by the 'Computer Science' department.,SELECT student_name FROM Students WHERE student_id IN (SELECT DISTINCT s.student_id FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE c.department = 'Computer Science');,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, department TEXT, credits INTEGER);",This query selects students whose 'student_id' is found in the list of 'student_id's that are enrolled in courses belonging to the 'Computer Science' department.
List departments that have employees with a salary over 80000.,SELECT department_name FROM Departments WHERE EXISTS (SELECT 1 FROM Employees WHERE Employees.department_id = Departments.department_id AND Employees.salary > 80000);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);",This query returns department names if there exists at least one employee in that department with a salary greater than 80000.
Retrieve the product name and its price per unit for all items in orders placed after '2023-01-01'.,"SELECT p.product_name, oi.price_per_unit FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.order_id IN (SELECT order_id FROM Orders WHERE order_date > '2023-01-01');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, stock_quantity INTEGER);","This query joins products and order items, then filters for order items whose associated orders were placed after January 1, 2023."
Find the names of students who have not enrolled in any courses.,SELECT student_name FROM Students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM Enrollments);,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query selects student names whose 'student_id' does not appear in the list of 'student_id's from the 'Enrollments' table, indicating they have no enrollments."
List the customer name and their most recent order date (if any).,"SELECT c.customer_name, (SELECT MAX(o.order_date) FROM Orders o WHERE o.customer_id = c.customer_id) AS last_order_date FROM Customers c;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","For each customer, a correlated subquery finds the maximum (most recent) 'order_date' from their orders, returning null if no orders exist."
Get the names of courses that have more than 5 enrollments.,SELECT c.course_name FROM Courses c WHERE (SELECT COUNT(*) FROM Enrollments e WHERE e.course_id = c.course_id) > 5;,"CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, department TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));",This query selects course names where a correlated subquery counts the number of enrollments for that specific course and ensures the count is greater than 5.
Show product categories that have at least one product with a stock quantity less than 10.,SELECT DISTINCT category FROM Products WHERE category IN (SELECT category FROM Products WHERE stock_quantity < 10);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, stock_quantity INTEGER);",This query selects unique product categories where at least one product within that category has a stock quantity less than 10.
Find the project names that no employees are currently assigned to.,SELECT project_name FROM Projects WHERE NOT EXISTS (SELECT 1 FROM Employee_Projects ep WHERE ep.project_id = Projects.project_id);,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT, end_date TEXT); CREATE TABLE Employee_Projects (employee_id INTEGER, project_id INTEGER, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query retrieves project names for which there is no corresponding entry in the 'Employee_Projects' table, meaning no employees are assigned to them."
List employees who were hired after the first employee in their department.,"SELECT e.first_name, e.last_name, e.hire_date, d.department_name FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE e.hire_date > (SELECT MIN(e2.hire_date) FROM Employees e2 WHERE e2.department_id = e.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query selects employees whose hire date is later than the earliest hire date within their own department, identified by a correlated subquery."
Retrieve the names of customers who have placed orders totaling more than 1000 in a single order.,SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders WHERE total_amount > 1000);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query finds customers who have at least one order with a 'total_amount' greater than 1000.
Show products that have never been part of an order.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query selects product names whose 'product_id' does not exist in the 'Order_Items' table, indicating they've never been ordered."
"For each student, list their name and the total number of credits they are enrolled in.","SELECT s.student_name, (SELECT SUM(c.credits) FROM Enrollments e JOIN Courses c ON e.course_id = c.course_id WHERE e.student_id = s.student_id) AS total_credits FROM Students s;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, department TEXT, credits INTEGER);","This query lists each student's name and, for each student, a correlated subquery calculates the sum of credits for all courses they are enrolled in."
Retrieve the name of the department with the highest average employee salary.,"SELECT d.department_name FROM Departments d JOIN (SELECT department_id, AVG(salary) AS avg_salary FROM Employees GROUP BY department_id ORDER BY avg_salary DESC LIMIT 1) AS top_dept ON d.department_id = top_dept.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query uses a derived table to first find the department ID with the highest average salary, then joins back to the 'Departments' table to get its name."
Find all products whose category is the same as 'Laptop'.,SELECT product_name FROM Products WHERE category = (SELECT category FROM Products WHERE product_name = 'Laptop' LIMIT 1);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, stock_quantity INTEGER);",This query selects products whose category matches the category of the product named 'Laptop'.
List customers who placed orders in both 2022 and 2023.,"SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders WHERE STRFTIME('%Y', order_date) = '2022') AND customer_id IN (SELECT customer_id FROM Orders WHERE STRFTIME('%Y', order_date) = '2023');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query selects customers whose ID appears in the set of customers who ordered in 2022 AND in the set of customers who ordered in 2023.
Find employees who are assigned to more projects than 'John Doe'.,"SELECT e.first_name, e.last_name FROM Employees e JOIN (SELECT employee_id, COUNT(project_id) AS num_projects FROM Employee_Projects GROUP BY employee_id) AS emp_proj ON e.employee_id = emp_proj.employee_id WHERE emp_proj.num_projects > (SELECT COUNT(ep2.project_id) FROM Employees e2 JOIN Employee_Projects ep2 ON e2.employee_id = ep2.employee_id WHERE e2.first_name = 'John' AND e2.last_name = 'Doe');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Employee_Projects (employee_id INTEGER, project_id INTEGER, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query uses a derived table to count projects per employee, then filters for employees whose project count exceeds that of 'John Doe', obtained via a scalar subquery."
List all customers who have ordered products from the 'Electronics' category.,SELECT DISTINCT c.customer_name FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id WHERE oi.product_id IN (SELECT product_id FROM Products WHERE category = 'Electronics');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, stock_quantity INTEGER);","This query joins customers, orders, and order items, then filters to include only those items whose products belong to the 'Electronics' category."
"For each product, list its name and the count of orders it has appeared in.","SELECT p.product_name, (SELECT COUNT(DISTINCT oi.order_id) FROM Order_Items oi WHERE oi.product_id = p.product_id) AS order_count FROM Products p;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","For each product, a correlated subquery counts the distinct 'order_id's it appears in within the 'Order_Items' table."
Find the student(s) with the highest number of course enrollments.,"SELECT s.student_name FROM Students s JOIN (SELECT student_id, COUNT(course_id) AS num_enrollments FROM Enrollments GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1) AS top_student ON s.student_id = top_student.student_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));",This query uses a derived table to first find the student(s) with the maximum number of enrollments and then joins back to 'Students' to get their names.
Display employees who have not been assigned to any projects.,"SELECT first_name, last_name FROM Employees WHERE employee_id NOT IN (SELECT DISTINCT employee_id FROM Employee_Projects);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Employee_Projects (employee_id INTEGER, project_id INTEGER, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query selects employees whose 'employee_id' does not exist in the 'Employee_Projects' table, meaning they are not assigned to any projects."
Get the names of courses that have been taken by students from the 'Computer Science' major.,SELECT DISTINCT c.course_name FROM Courses c JOIN Enrollments e ON c.course_id = e.course_id WHERE e.student_id IN (SELECT student_id FROM Students WHERE major = 'Computer Science');,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, department TEXT, credits INTEGER);","This query joins courses and enrollments, then filters for enrollments made by students whose major is 'Computer Science'."
List customers who live in the same city as 'John Smith'.,SELECT customer_name FROM Customers WHERE city = (SELECT city FROM Customers WHERE customer_name = 'John Smith' LIMIT 1) AND customer_name != 'John Smith';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT);","This query selects customers whose city matches the city of 'John Smith', excluding 'John Smith' himself."
Find departments where all employees earn more than 50000.,SELECT department_name FROM Departments d WHERE NOT EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id AND e.salary <= 50000);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query selects department names for which there is no employee in that department earning 50000 or less, implying all earn more than 50000."
"Show the product name, its stock quantity, and the average stock quantity of its category.","SELECT p.product_name, p.stock_quantity, (SELECT AVG(p2.stock_quantity) FROM Products p2 WHERE p2.category = p.category) AS avg_category_stock FROM Products p;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, stock_quantity INTEGER);","For each product, a correlated subquery calculates the average stock quantity of all products belonging to the same category."
Identify professors who teach courses with an average enrollment grade of 'A'.,SELECT DISTINCT pr.professor_name FROM Professors pr JOIN Courses c ON pr.department = c.department WHERE c.course_id IN (SELECT course_id FROM Enrollments WHERE grade = 'A' GROUP BY course_id HAVING COUNT(*) = (SELECT COUNT(*) FROM Enrollments e2 WHERE e2.course_id = Enrollments.course_id AND e2.grade = 'A'));,"CREATE TABLE Professors (professor_id INTEGER PRIMARY KEY, professor_name TEXT NOT NULL, department TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, department TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query first finds courses where all enrollments received an 'A' grade using nested subqueries, then joins to find the professors who teach in the departments offering these courses."
List all products that have been ordered in quantities greater than 5 in any single order item.,SELECT product_name FROM Products WHERE product_id IN (SELECT DISTINCT product_id FROM Order_Items WHERE quantity > 5);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query selects product names whose 'product_id' is found in the list of products from 'Order_Items' where the quantity for that item was greater than 5.
Find students whose enrollment year is the earliest among all students.,"SELECT student_name, enrollment_year FROM Students WHERE enrollment_year = (SELECT MIN(enrollment_year) FROM Students);","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT);",This query retrieves the names of students whose 'enrollment_year' matches the minimum 'enrollment_year' found across all students.
Retrieve the details of the employee(s) with the highest salary in the 'Sales' department.,"SELECT e.first_name, e.last_name, e.salary FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE d.department_name = 'Sales' AND e.salary = (SELECT MAX(e2.salary) FROM Employees e2 JOIN Departments d2 ON e2.department_id = d2.department_id WHERE d2.department_name = 'Sales');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);",This query selects employees in the 'Sales' department whose salary matches the maximum salary found among all employees in the 'Sales' department.
List departments that have employees earning less than the minimum salary in the 'IT' department.,SELECT department_name FROM Departments WHERE department_id IN (SELECT department_id FROM Employees WHERE salary < (SELECT MIN(salary) FROM Employees JOIN Departments ON Employees.department_id = Departments.department_id WHERE Departments.department_name = 'IT'));,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);",This query selects department names whose employees have salaries less than the minimum salary of employees in the 'IT' department.
Find the average total amount of orders placed by customers from 'USA'.,SELECT AVG(total_amount) FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE country = 'USA');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query calculates the average 'total_amount' for orders placed by customers whose 'country' is 'USA'.
Retrieve project names that started before any project managed by 'Manager A'.,SELECT project_name FROM Projects WHERE start_date < (SELECT MIN(p.start_date) FROM Projects p JOIN Employee_Projects ep ON p.project_id = ep.project_id JOIN Employees e ON ep.employee_id = e.employee_id WHERE e.first_name = 'Manager' AND e.last_name = 'A');,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT, end_date TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Employee_Projects (employee_id INTEGER, project_id INTEGER, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));",This query selects project names whose start date is earlier than the earliest start date of projects associated with 'Manager A'.
List students who are enrolled in at least one course in which 'Alice Smith' is also enrolled.,SELECT DISTINCT s.student_name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id WHERE e.course_id IN (SELECT course_id FROM Enrollments WHERE student_id = (SELECT student_id FROM Students WHERE student_name = 'Alice Smith' LIMIT 1)) AND s.student_name != 'Alice Smith';,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query selects distinct student names (excluding 'Alice Smith') who are enrolled in any course that 'Alice Smith' is also enrolled in, using nested subqueries to identify Alice's courses."
Get the names of all employees whose salary is less than the average salary of all employees.,"SELECT first_name, last_name, salary FROM Employees WHERE salary < (SELECT AVG(salary) FROM Employees);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query selects employees whose salary is below the overall average salary of all employees, calculated by the subquery."
Find the total quantity of products ordered in orders placed by customers from 'New York'.,SELECT SUM(oi.quantity) FROM Order_Items oi WHERE oi.order_id IN (SELECT o.order_id FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE c.city = 'New York');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query calculates the sum of 'quantity' for all order items that belong to orders placed by customers from 'New York'.
List students who have a major that no professor teaches in their department.,"SELECT student_name, major FROM Students WHERE major NOT IN (SELECT department FROM Professors);","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT); CREATE TABLE Professors (professor_id INTEGER PRIMARY KEY, professor_name TEXT NOT NULL, department TEXT);","This query selects students whose 'major' is not found in the list of departments taught by professors, implying their major is not covered by any professor's department."
Display products that have a stock quantity greater than the maximum stock quantity of products in the 'Books' category.,"SELECT product_name, stock_quantity FROM Products WHERE stock_quantity > (SELECT MAX(stock_quantity) FROM Products WHERE category = 'Books');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, stock_quantity INTEGER);",This query selects products whose stock quantity exceeds the maximum stock quantity of any product specifically in the 'Books' category.
Find the name of the department with the fewest employees.,"SELECT d.department_name FROM Departments d JOIN (SELECT department_id, COUNT(employee_id) AS num_employees FROM Employees GROUP BY department_id ORDER BY num_employees ASC LIMIT 1) AS min_dept ON d.department_id = min_dept.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);",This query uses a derived table to find the department ID with the lowest employee count and then joins back to 'Departments' to retrieve its name.
Find all employees who do not have a manager assigned.,"SELECT EmployeeName, Email FROM Employees WHERE ManagerID IS NULL;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT NOT NULL, ManagerID INTEGER, Email TEXT, HireDate TEXT, Salary REAL);","This query selects the name and email of employees whose 'ManagerID' column is NULL, indicating they do not have an assigned manager."
List all products that have a description available.,"SELECT ProductName, Price FROM Products WHERE Description IS NOT NULL;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Description TEXT, Price REAL NOT NULL, StockQuantity INTEGER);","This query retrieves the name and price of products where the 'Description' column is not NULL, meaning a description exists."
"Show orders that have not yet been shipped, displaying the order ID and customer ID.","SELECT OrderID, CustomerID FROM Orders WHERE ShipDate IS NULL;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER NOT NULL, OrderDate TEXT NOT NULL, ShipDate TEXT, TotalAmount REAL);","This query selects the order ID and customer ID for orders where the 'ShipDate' is NULL, indicating they are still pending shipment."
Count the total number of employees whose phone number is not recorded.,SELECT COUNT(*) FROM Employees WHERE PhoneNumber IS NULL;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT NOT NULL, PhoneNumber TEXT, Email TEXT, HireDate TEXT);","This query counts all rows in the 'Employees' table where the 'PhoneNumber' column is NULL, giving the number of employees without a recorded phone."
"Retrieve customer contact information, preferring email, otherwise using phone number. If neither exists, display 'No Contact Info'.","SELECT CustomerName, COALESCE(Email, PhoneNumber, 'No Contact Info') AS PreferredContact FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL, Email TEXT, PhoneNumber TEXT);","This query selects the customer name and then uses 'COALESCE' to return the first non-NULL value among 'Email', 'PhoneNumber', or the literal string 'No Contact Info'."
"List all tasks, showing 'Unassigned' if no employee is assigned.","SELECT TaskName, IFNULL(AssignedEmployeeID, 'Unassigned') AS AssignedStatus FROM Tasks;","CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, TaskName TEXT NOT NULL, AssignedEmployeeID INTEGER, DueDate TEXT);","This query retrieves the task name and uses 'IFNULL' to display 'Unassigned' if the 'AssignedEmployeeID' is NULL, otherwise it shows the actual ID."
"Calculate the total sales amount, treating any missing (NULL) discount as zero.","SELECT SUM(TotalAmount - IFNULL(DiscountAmount, 0)) AS NetSales FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ItemName TEXT NOT NULL, TotalAmount REAL NOT NULL, DiscountAmount REAL);","This query sums the net sales, where 'DiscountAmount' is treated as 0 if it is NULL, ensuring it doesn't cause the entire expression to become NULL."
Find books that are part of a series but do not have a series order specified.,"SELECT Title, SeriesName FROM Books WHERE SeriesName IS NOT NULL AND SeriesOrder IS NULL;","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT NOT NULL, Author TEXT, SeriesName TEXT, SeriesOrder INTEGER);","This query selects titles and series names for books where a 'SeriesName' exists but the 'SeriesOrder' is NULL, indicating an incomplete series entry."
"Display the product name and its available stock, substituting 0 if the stock quantity is not specified.","SELECT ProductName, COALESCE(StockQuantity, 0) AS CurrentStock FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Price REAL, StockQuantity INTEGER);","This query retrieves the product name and uses 'COALESCE' to return 'StockQuantity' if it's not NULL, otherwise it returns 0."
List all customers who have either no email or no phone number recorded.,SELECT CustomerName FROM Customers WHERE Email IS NULL OR PhoneNumber IS NULL;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL, Email TEXT, PhoneNumber TEXT);",This query selects the names of customers who are missing either an email address or a phone number in their records.
"Retrieve employee names and their bonus, displaying 'No Bonus' if the bonus amount is NULL.","SELECT EmployeeName, IFNULL(BonusAmount, 'No Bonus') AS ActualBonus FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT NOT NULL, BonusAmount REAL);","This query fetches employee names and uses 'IFNULL' to show 'No Bonus' if 'BonusAmount' is NULL, otherwise it shows the bonus amount."
Count distinct product names that have an assigned category.,SELECT COUNT(DISTINCT ProductName) FROM Products WHERE Category IS NOT NULL;,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Category TEXT, Price REAL);","This query counts the number of unique product names where the 'Category' field is not NULL, meaning a category has been assigned."
Find all projects that have a start date but no end date.,SELECT ProjectName FROM Projects WHERE StartDate IS NOT NULL AND EndDate IS NULL;,"CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT NOT NULL, StartDate TEXT, EndDate TEXT);","This query selects the names of projects that have a 'StartDate' recorded but no 'EndDate', indicating ongoing projects."
"Get the average price of products, treating any unknown prices as zero for the average calculation.","SELECT AVG(COALESCE(Price, 0)) AS AveragePrice FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Price REAL);","This query calculates the average of product prices, using 'COALESCE' to substitute 0 for any NULL 'Price' values, ensuring they are included as zero in the average."
"List customer names and their last purchase date, showing 'Never Purchased' if the date is NULL.","SELECT CustomerName, IFNULL(LastPurchaseDate, 'Never Purchased') AS LastActivity FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL, LastPurchaseDate TEXT);","This query retrieves customer names and uses 'IFNULL' to display 'Never Purchased' if 'LastPurchaseDate' is NULL, otherwise it shows the actual date."
"Select all employees who have a manager, along with their manager's name. Use 'No Manager' if the manager's name itself is missing from the Employees table.","SELECT E.EmployeeName, IFNULL(M.EmployeeName, 'No Manager') AS ManagerName FROM Employees E LEFT JOIN Employees M ON E.ManagerID = M.EmployeeID WHERE E.ManagerID IS NOT NULL;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT NOT NULL, ManagerID INTEGER);","This query joins the 'Employees' table to itself to find managers. It then selects employees who have a 'ManagerID' and uses 'IFNULL' to display 'No Manager' if the manager's name is not found (e.g., if ManagerID points to a non-existent employee)."
Find products whose descriptions are either NULL or contain the word 'new'.,SELECT ProductName FROM Products WHERE Description IS NULL OR Description LIKE '%new%';,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Description TEXT);",This query selects product names where the 'Description' is either missing (NULL) or contains the substring 'new'.
"Calculate the total revenue from sales, replacing any NULL 'Quantity' or 'UnitPrice' with 0 before multiplication.","SELECT SUM(COALESCE(Quantity, 0) * COALESCE(UnitPrice, 0)) AS TotalRevenue FROM OrderDetails;","CREATE TABLE OrderDetails (DetailID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, UnitPrice REAL);","This query calculates the total revenue by summing the product of 'Quantity' and 'UnitPrice'. 'COALESCE' ensures that if either 'Quantity' or 'UnitPrice' is NULL, it's treated as 0 for the calculation, preventing the entire product from becoming NULL."
"List all customer orders, showing the actual ship date or 'Not Yet Shipped' if it's missing.","SELECT OrderID, CustomerID, IFNULL(ShipDate, 'Not Yet Shipped') AS ShippingStatus FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER NOT NULL, OrderDate TEXT NOT NULL, ShipDate TEXT);","This query retrieves order details and uses 'IFNULL' to display 'Not Yet Shipped' if the 'ShipDate' is NULL, otherwise it shows the recorded ship date."
Count the number of orders where the 'DiscountCode' is either NULL or an empty string.,SELECT COUNT(*) FROM Orders WHERE DiscountCode IS NULL OR DiscountCode = '';,"CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL, DiscountCode TEXT);","This query counts orders where the 'DiscountCode' is explicitly NULL or an empty string, indicating no discount was applied or recorded."
"Display employee names and their email. If the email is NULL, use their employee ID followed by '@company.com' as a placeholder.","SELECT EmployeeName, COALESCE(Email, EmployeeID || '@company.com') AS ContactEmail FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT NOT NULL, Email TEXT);","This query selects employee names and uses 'COALESCE' to display the 'Email' if available, otherwise it constructs an email using the 'EmployeeID' and a domain."
Find all departments that have at least one employee assigned.,SELECT DISTINCT DepartmentName FROM Departments D JOIN Employees E ON D.DepartmentID = E.DepartmentID WHERE E.DepartmentID IS NOT NULL;,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT NOT NULL); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT NOT NULL, DepartmentID INTEGER);",This query joins 'Departments' and 'Employees' and selects distinct department names for which there is a corresponding non-NULL 'DepartmentID' in the 'Employees' table.
"List all products, showing their 'LastRestockDate'. If it's NULL, display 'Needs Restock'.","SELECT ProductName, IFNULL(LastRestockDate, 'Needs Restock') AS RestockStatus FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, LastRestockDate TEXT);","This query retrieves product names and uses 'IFNULL' to show 'Needs Restock' if 'LastRestockDate' is NULL, otherwise it shows the actual restock date."
"Get the maximum bonus amount, treating NULL bonuses as zero for the calculation.","SELECT MAX(IFNULL(BonusAmount, 0)) AS MaxBonus FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT NOT NULL, BonusAmount REAL);","This query finds the maximum 'BonusAmount', ensuring that any NULL bonus amounts are treated as 0 for comparison by 'IFNULL'."
"Display transaction details, using 'Unknown User' for CustomerName if CustomerID is not found in Customers table.","SELECT T.TransactionID, COALESCE(C.CustomerName, 'Unknown User') AS CustomerName FROM Transactions T LEFT JOIN Customers C ON T.CustomerID = C.CustomerID;","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, CustomerID INTEGER, Amount REAL); CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL);","This query performs a LEFT JOIN to link transactions with customer names. If a 'CustomerID' in 'Transactions' does not match any in 'Customers' (resulting in NULL for 'CustomerName'), 'COALESCE' replaces it with 'Unknown User'."
Find all tasks that have a due date but have not yet been completed.,SELECT TaskName FROM Tasks WHERE DueDate IS NOT NULL AND CompletionDate IS NULL;,"CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, TaskName TEXT NOT NULL, DueDate TEXT, CompletionDate TEXT);","This query selects tasks that have a specific 'DueDate' but their 'CompletionDate' is NULL, indicating they are still pending."
"For each employee, show their name and their direct manager's ID. If they don't have a manager, display 'N/A'.","SELECT E.EmployeeName, IFNULL(E.ManagerID, 'N/A') AS Manager_ID FROM Employees E;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT NOT NULL, ManagerID INTEGER);","This query selects employee names and uses 'IFNULL' to display 'N/A' if the 'ManagerID' is NULL, otherwise it shows the actual 'ManagerID'."
Count the number of books where either the author is unknown or the publication year is not recorded.,SELECT COUNT(*) FROM Books WHERE Author IS NULL OR PublicationYear IS NULL;,"CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT NOT NULL, Author TEXT, PublicationYear INTEGER);","This query counts books where either the 'Author' is NULL or the 'PublicationYear' is NULL, identifying books with incomplete core metadata."
"Display event names and their location, using 'Online' if the physical location is NULL, otherwise use the provided location.","SELECT EventName, COALESCE(Location, 'Online') AS EventLocation FROM Events;","CREATE TABLE Events (EventID INTEGER PRIMARY KEY, EventName TEXT NOT NULL, Location TEXT, EventDate TEXT);","This query retrieves event names and uses 'COALESCE' to display 'Online' if the 'Location' is NULL, otherwise it displays the specified location."
"Calculate the average salary of employees, treating NULL salaries as zero.","SELECT AVG(COALESCE(Salary, 0)) AS AvgSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT NOT NULL, Salary REAL);","This query computes the average salary, replacing any NULL 'Salary' values with 0 before the average calculation, so they contribute to the denominator."
Get the names of all employees whose email is explicitly recorded (not NULL) and contains '@example.com'.,SELECT EmployeeName FROM Employees WHERE Email IS NOT NULL AND Email LIKE '%@example.com%';,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT NOT NULL, Email TEXT);","This query selects employee names where their 'Email' is not NULL and also matches the pattern '%@example.com%', ensuring valid and specific emails are retrieved."
Find the total sales amount for each customer who made a purchase in 2023.,"WITH Sales2023 AS (SELECT customer_id, total_amount FROM Orders WHERE STRFTIME('%Y', order_date) = '2023') SELECT c.customer_name, SUM(s.total_amount) AS total_sales_2023 FROM Customers c JOIN Sales2023 s ON c.customer_id = s.customer_id GROUP BY c.customer_name ORDER BY total_sales_2023 DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query first defines a CTE `Sales2023` to filter orders placed in the year 2023. Then, it joins this CTE with the `Customers` table to sum the total sales amount for each customer for orders placed in that year, showing only customers who had sales in 2023."
Get the average order value for customers whose total spending is above the overall average total spending of all customers.,"WITH CustomerTotalSpending AS (SELECT customer_id, SUM(total_amount) AS total_customer_spending FROM Orders GROUP BY customer_id), OverallAverageSpending AS (SELECT AVG(total_customer_spending) AS avg_total_spending FROM CustomerTotalSpending) SELECT c.customer_name, CAST(AVG(o.total_amount) AS REAL) AS average_order_value FROM Orders o JOIN CustomerTotalSpending cts ON o.customer_id = cts.customer_id JOIN Customers c ON o.customer_id = c.customer_id CROSS JOIN OverallAverageSpending oas WHERE cts.total_customer_spending > oas.avg_total_spending GROUP BY c.customer_name ORDER BY average_order_value DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses two CTEs. `CustomerTotalSpending` calculates the sum of all orders for each customer. `OverallAverageSpending` calculates the average of these customer total spendings. Finally, it joins these CTEs with the original tables to filter customers whose individual total spending is above the overall average, and then calculates their average order value."
List the top 3 products by sales quantity in each product category.,"SELECT category_name, product_name, total_quantity_sold FROM (SELECT c.category_name, p.product_name, SUM(oi.quantity) AS total_quantity_sold, ROW_NUMBER() OVER (PARTITION BY c.category_name ORDER BY SUM(oi.quantity) DESC) AS rn FROM Categories c JOIN Products p ON c.category_id = p.category_id JOIN OrderItems oi ON p.product_id = oi.product_id GROUP BY c.category_name, p.product_name) AS RankedProducts WHERE rn <= 3 ORDER BY category_name, total_quantity_sold DESC;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query uses a derived table to rank products within each category based on their total sales quantity. It then selects only the top 3 ranked products for each category using `ROW_NUMBER()` and filters the results.
"For each employee, show their name and their manager's name. Include employees who do not have a manager.","SELECT e.employee_name AS employee, m.employee_name AS manager FROM Employees e LEFT JOIN Employees m ON e.manager_id = m.employee_id ORDER BY e.employee_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This query performs a self-LEFT JOIN on the `Employees` table. It joins each employee (aliased as 'e') with their corresponding manager (aliased as 'm') using the `manager_id`. A LEFT JOIN ensures that all employees are listed, even if they don't have a manager (their manager's name will be NULL)."
Calculate the 30-day moving average of daily sales for products in the 'Electronics' category.,"WITH DailyElectronicsSales AS (SELECT DATE(s.sale_date) AS sale_day, SUM(s.quantity * s.price) AS daily_revenue FROM Sales s JOIN Products p ON s.product_id = p.product_id JOIN Categories c ON p.category_id = c.category_id WHERE c.category_name = 'Electronics' GROUP BY DATE(s.sale_date) ORDER BY sale_day) SELECT sale_day, CAST(AVG(daily_revenue) OVER (ORDER BY sale_day ROWS BETWEEN 29 PRECEDING AND CURRENT ROW) AS REAL) AS moving_avg_revenue FROM DailyElectronicsSales ORDER BY sale_day;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, sale_date TEXT NOT NULL, quantity INTEGER NOT NULL, price REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","First, the `DailyElectronicsSales` CTE calculates the total daily revenue for products in the 'Electronics' category. Then, the main query computes the 30-day moving average of these daily revenues using a window function with a `ROWS BETWEEN` clause, ordered by the sale date."
Identify customers who have placed more than one order on the same day.,"SELECT c.customer_id, c.customer_name, CommonOrderDates.order_date FROM (SELECT customer_id, DATE(order_date) AS order_date, COUNT(order_id) AS num_orders FROM Orders GROUP BY customer_id, DATE(order_date) HAVING COUNT(order_id) > 1) AS CommonOrderDates JOIN Customers c ON CommonOrderDates.customer_id = c.customer_id ORDER BY c.customer_name, CommonOrderDates.order_date;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a derived table to first group orders by customer and order date, counting the number of orders for each combination. It then filters for groups where the order count is greater than one, identifying customers who placed multiple orders on the same day. Finally, it joins with the `Customers` table to retrieve customer names."
"For each department, find the average salary of employees who joined after 2020 and the average salary of those who joined before or in 2020.","SELECT d.department_name, CAST(AVG(CASE WHEN STRFTIME('%Y', e.hire_date) > '2020' THEN e.salary ELSE NULL END) AS REAL) AS avg_salary_post_2020, CAST(AVG(CASE WHEN STRFTIME('%Y', e.hire_date) <= '2020' THEN e.salary ELSE NULL END) AS REAL) AS avg_salary_pre_2020_or_in FROM Employees e JOIN Departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY d.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);",This query uses conditional aggregation (CASE statements within AVG) to calculate two separate average salaries for each department: one for employees hired after 2020 and another for those hired in or before 2020. It groups the results by department name.
"List all products that have never been sold, along with their category name.","WITH SoldProducts AS (SELECT DISTINCT product_id FROM OrderItems) SELECT p.product_name, c.category_name FROM Products p JOIN Categories c ON p.category_id = c.category_id LEFT JOIN SoldProducts sp ON p.product_id = sp.product_id WHERE sp.product_id IS NULL ORDER BY p.product_name;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","The `SoldProducts` CTE identifies all products that have appeared in the `OrderItems` table (i.e., have been sold). The main query then performs a LEFT JOIN from `Products` to `SoldProducts`. Products that have never been sold will have a NULL `product_id` in the `SoldProducts` CTE, which is used to filter the result."
"Get the 11th to 20th most recent orders, ordered from most to least recent.","SELECT order_id, customer_id, order_date, total_amount FROM Orders ORDER BY order_date DESC LIMIT 10 OFFSET 10;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query directly selects orders, sorts them by `order_date` in descending order to get the most recent first, then uses `LIMIT 10 OFFSET 10` to retrieve 10 rows starting from the 11th row (skipping the first 10 most recent orders)."
"For each customer, find their first and last order dates, and the total number of days between them.","WITH CustomerOrderDates AS (SELECT customer_id, MIN(order_date) AS first_order_date, MAX(order_date) AS last_order_date FROM Orders GROUP BY customer_id) SELECT c.customer_name, cod.first_order_date, cod.last_order_date, CASE WHEN cod.first_order_date = cod.last_order_date THEN 0 ELSE CAST(JULIANDAY(cod.last_order_date) - JULIANDAY(cod.first_order_date) AS INTEGER) END AS days_between_orders FROM Customers c JOIN CustomerOrderDates cod ON c.customer_id = cod.customer_id ORDER BY c.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","The `CustomerOrderDates` CTE calculates the minimum (first) and maximum (last) order dates for each customer. The main query then joins this CTE with the `Customers` table to display the customer's name, their first and last order dates, and the difference in days between these dates using `JULIANDAY` for calculation."
Find dates in January 2023 where no sales occurred.,"WITH RECURSIVE DateSeries(dt) AS (SELECT '2023-01-01' UNION ALL SELECT DATE(dt, '+1 day') FROM DateSeries WHERE dt < '2023-01-31'), DailySales AS (SELECT DATE(sale_date) AS sale_day FROM Sales WHERE STRFTIME('%Y-%m', sale_date) = '2023-01' GROUP BY DATE(sale_date)) SELECT ds.dt AS missing_sale_date FROM DateSeries ds LEFT JOIN DailySales ds_agg ON ds.dt = ds_agg.sale_day WHERE ds_agg.sale_day IS NULL ORDER BY ds.dt;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, sale_date TEXT NOT NULL, amount REAL NOT NULL);",This query uses a recursive CTE `DateSeries` to generate all dates in January 2023. The `DailySales` CTE extracts distinct sale dates from the `Sales` table for January 2023. A LEFT JOIN is then performed between `DateSeries` and `DailySales`. Dates from `DateSeries` that do not have a corresponding entry in `DailySales` (indicated by `ds_agg.sale_day IS NULL`) are the dates with no sales.
Calculate the running total of sales amount for each day.,"WITH DailySales AS (SELECT DATE(sale_date) AS sale_day, SUM(amount) AS daily_amount FROM Sales GROUP BY DATE(sale_date) ORDER BY sale_day) SELECT sale_day, SUM(daily_amount) OVER (ORDER BY sale_day) AS running_total_sales FROM DailySales ORDER BY sale_day;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, sale_date TEXT NOT NULL, amount REAL NOT NULL);","The `DailySales` CTE first aggregates the total sales amount for each day. The main query then uses a window function `SUM(...) OVER (ORDER BY sale_day)` to calculate the cumulative (running) total of these daily sales amounts, ordered by date."
List customers who have placed orders for both 'Laptop' and 'Smartphone' products.,SELECT c.customer_name FROM Customers c WHERE c.customer_id IN (SELECT o.customer_id FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Laptop') AND c.customer_id IN (SELECT o.customer_id FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Smartphone') ORDER BY c.customer_name;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER NOT NULL);",This query uses two correlated subqueries within the `WHERE` clause. It selects customers whose `customer_id` exists in the set of customers who bought 'Laptop' AND also exists in the set of customers who bought 'Smartphone'. This identifies customers who bought both.
Find the salary at the 75th percentile for each department.,"WITH RankedSalaries AS (SELECT employee_id, employee_name, department_id, salary, NTILE(100) OVER (PARTITION BY department_id ORDER BY salary) AS percentile_group FROM Employees) SELECT d.department_name, MAX(CASE WHEN rs.percentile_group = 75 THEN rs.salary ELSE NULL END) AS salary_75th_percentile FROM RankedSalaries rs JOIN Departments d ON rs.department_id = d.department_id GROUP BY d.department_name ORDER BY d.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","The `RankedSalaries` CTE assigns a percentile group to each employee's salary within their department using `NTILE(100)`. The main query then groups by department and finds the maximum salary within the 75th percentile group, approximating the 75th percentile salary for each department."
Determine the average number of distinct products per order for customers who have placed at least 5 orders.,"WITH CustomerOrderCounts AS (SELECT customer_id, COUNT(order_id) AS num_orders FROM Orders GROUP BY customer_id HAVING num_orders >= 5), HighVolumeCustomerOrders AS (SELECT o.order_id FROM Orders o JOIN CustomerOrderCounts coc ON o.customer_id = coc.customer_id), OrderProductCounts AS (SELECT order_id, COUNT(DISTINCT product_id) AS distinct_products FROM OrderItems WHERE order_id IN (SELECT order_id FROM HighVolumeCustomerOrders) GROUP BY order_id) SELECT CAST(AVG(opc.distinct_products) AS REAL) AS avg_distinct_products_per_order FROM OrderProductCounts opc;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id));","This query uses nested CTEs. `CustomerOrderCounts` identifies customers with 5 or more orders. `HighVolumeCustomerOrders` filters orders belonging to these customers. `OrderProductCounts` then counts distinct products for each of these selected orders. Finally, the outer query calculates the average of these distinct product counts."
Find the product that was most frequently ordered in each month of 2023.,"SELECT order_month, product_name, total_quantity_sold FROM (SELECT STRFTIME('%Y-%m', o.order_date) AS order_month, p.product_name, SUM(oi.quantity) AS total_quantity_sold, ROW_NUMBER() OVER (PARTITION BY STRFTIME('%Y-%m', o.order_date) ORDER BY SUM(oi.quantity) DESC) AS rn FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE STRFTIME('%Y', o.order_date) = '2023' GROUP BY order_month, p.product_name) AS MonthlyRankedProducts WHERE rn = 1 ORDER BY order_month;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT NOT NULL);","This query uses a derived table to first calculate the total quantity sold for each product per month in 2023. It then ranks these products within each month based on quantity. The outer query selects only the top-ranked product (rank 1) for each month, representing the most frequently ordered product."
"Find missing order IDs in a sequence, assuming order IDs should be continuous starting from 1 up to the maximum existing ID.",WITH RECURSIVE NumberSeries(n) AS (SELECT 1 UNION ALL SELECT n + 1 FROM NumberSeries WHERE n < (SELECT MAX(order_id) FROM Orders)) SELECT ns.n AS missing_order_id FROM NumberSeries ns LEFT JOIN Orders o ON ns.n = o.order_id WHERE o.order_id IS NULL ORDER BY ns.n;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL);",This query uses a recursive CTE `NumberSeries` to generate a sequence of numbers from 1 up to the maximum `order_id` found in the `Orders` table. It then performs a LEFT JOIN with the `Orders` table. Any number from the `NumberSeries` that does not have a matching `order_id` in `Orders` is considered a missing ID.
Calculate the year-over-year sales growth percentage for each product category.,"WITH CategorySalesByYear AS (SELECT STRFTIME('%Y', s.sale_date) AS sale_year, c.category_name, SUM(s.amount) AS total_sales FROM Sales s JOIN Products p ON s.product_id = p.product_id JOIN Categories c ON p.category_id = c.category_id GROUP BY sale_year, c.category_name), LaggedCategorySales AS (SELECT sale_year, category_name, total_sales, LAG(total_sales, 1, 0) OVER (PARTITION BY category_name ORDER BY sale_year) AS previous_year_sales FROM CategorySalesByYear) SELECT sale_year, category_name, total_sales, previous_year_sales, CASE WHEN previous_year_sales = 0 THEN NULL ELSE CAST((total_sales - previous_year_sales) * 100.0 / previous_year_sales AS REAL) END AS yoy_growth_percentage FROM LaggedCategorySales WHERE previous_year_sales > 0 ORDER BY category_name, sale_year;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, sale_date TEXT NOT NULL, amount REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","The `CategorySalesByYear` CTE aggregates total sales for each category by year. `LaggedCategorySales` then uses the `LAG` window function to retrieve the previous year's sales for each category. The main query calculates the year-over-year growth percentage using these values, handling division by zero for initial years."
Compare the average order value of customers acquired in 2022 versus those acquired in 2023.,"SELECT '2022 Acquisitions' AS acquisition_year_group, CAST(AVG(o.total_amount) AS REAL) AS average_order_value FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE STRFTIME('%Y', c.registration_date) = '2022' UNION ALL SELECT '2023 Acquisitions' AS acquisition_year_group, CAST(AVG(o.total_amount) AS REAL) AS average_order_value FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id WHERE STRFTIME('%Y', c.registration_date) = '2023';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, registration_date TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a `UNION ALL` to combine two separate queries. Each subquery calculates the average order value for customers whose `registration_date` falls into either 2022 or 2023, effectively comparing the two customer acquisition cohorts."
"Find the start and end time of each user's distinct activity sessions, defined by no more than a 30-minute gap between consecutive activities.","WITH UserActivityWithLag AS (SELECT activity_id, user_id, activity_timestamp, LAG(activity_timestamp) OVER (PARTITION BY user_id ORDER BY activity_timestamp) AS prev_activity_timestamp FROM UserActivity), SessionStartFlags AS (SELECT activity_id, user_id, activity_timestamp, CASE WHEN prev_activity_timestamp IS NULL THEN 1 WHEN (JULIANDAY(activity_timestamp) - JULIANDAY(prev_activity_timestamp)) * 24 * 60 > 30 THEN 1 ELSE 0 END AS is_new_session_start FROM UserActivityWithLag), SessionsNumbered AS (SELECT activity_id, user_id, activity_timestamp, SUM(is_new_session_start) OVER (PARTITION BY user_id ORDER BY activity_timestamp) AS session_id_within_user FROM SessionStartFlags) SELECT user_id, session_id_within_user, MIN(activity_timestamp) AS session_start, MAX(activity_timestamp) AS session_end FROM SessionsNumbered GROUP BY user_id, session_id_within_user ORDER BY user_id, session_start;","CREATE TABLE UserActivity (activity_id INTEGER PRIMARY KEY, user_id INTEGER NOT NULL, activity_timestamp TEXT NOT NULL);","This query identifies user sessions. `UserActivityWithLag` gets the previous activity timestamp for each user. `SessionStartFlags` marks the beginning of a new session if it's the first activity or if the gap from the previous activity is over 30 minutes. `SessionsNumbered` assigns a unique session ID within each user. Finally, the outer query groups by user and session ID to find the start and end timestamps for each session."
"For each department, show the count of male and female employees.","SELECT d.department_name, SUM(CASE WHEN e.gender = 'Male' THEN 1 ELSE 0 END) AS male_employees, SUM(CASE WHEN e.gender = 'Female' THEN 1 ELSE 0 END) AS female_employees FROM Employees e JOIN Departments d ON e.department_id = d.department_id GROUP BY d.department_name ORDER BY d.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, gender TEXT NOT NULL, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);",This query uses conditional aggregation (`SUM` with `CASE`) to count male and female employees separately for each department. It groups the results by department name to show counts side-by-side.
"List all employees and their departments, but only include departments that have at least 5 employees and normalize employee names to proper case (e.g., 'john doe' to 'John Doe').","WITH DepartmentEmployeeCounts AS (SELECT department_id, COUNT(employee_id) AS num_employees FROM Employees GROUP BY department_id HAVING num_employees >= 5), ProperCaseEmployees AS (SELECT employee_id, (UPPER(SUBSTR(employee_name, 1, 1)) || LOWER(SUBSTR(employee_name, 2))) AS normalized_name, department_id FROM Employees) SELECT pce.normalized_name AS employee_name, d.department_name FROM ProperCaseEmployees pce JOIN DepartmentEmployeeCounts dec ON pce.department_id = dec.department_id JOIN Departments d ON pce.department_id = d.department_id ORDER BY d.department_name, pce.normalized_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);",The `DepartmentEmployeeCounts` CTE identifies departments with 5 or more employees. `ProperCaseEmployees` CTE transforms employee names to proper case. The main query then joins these CTEs with the `Departments` table to list employees from the qualifying departments with their normalized names and department names.
Find customers who bought 'Product X' but never 'Product Y'.,"WITH CustomersBoughtX AS (SELECT DISTINCT o.customer_id FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Product X'), CustomersBoughtY AS (SELECT DISTINCT o.customer_id FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.product_name = 'Product Y') SELECT c.customer_name FROM Customers c JOIN CustomersBoughtX cbx ON c.customer_id = cbx.customer_id LEFT JOIN CustomersBoughtY cby ON c.customer_id = cby.customer_id WHERE cby.customer_id IS NULL ORDER BY c.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL);",The `CustomersBoughtX` CTE lists customers who bought 'Product X'. The `CustomersBoughtY` CTE lists customers who bought 'Product Y'. The main query then selects customers from `CustomersBoughtX` and performs a LEFT JOIN with `CustomersBoughtY`. Customers whose `customer_id` is NULL in the `CustomersBoughtY` join result are those who bought Product X but not Product Y.
Find the average number of orders per customer.,"SELECT CAST(AVG(num_orders) AS REAL) AS average_orders_per_customer FROM (SELECT customer_id, COUNT(order_id) AS num_orders FROM Orders GROUP BY customer_id) AS CustomerOrderCounts;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL);","This query uses a derived table `CustomerOrderCounts` to first calculate the total number of orders for each individual customer. Then, the outer query calculates the average of these counts to determine the average number of orders per customer across all customers."
"List all sub-components required for a main product with component_id = 1, including nested sub-components.","WITH RECURSIVE ComponentHierarchy AS (SELECT component_id, component_name, parent_component_id, quantity, 1 AS level FROM Components WHERE component_id = 1 UNION ALL SELECT c.component_id, c.component_name, c.parent_component_id, c.quantity, ch.level + 1 FROM Components c JOIN ComponentHierarchy ch ON c.parent_component_id = ch.component_id) SELECT component_name, quantity, level FROM ComponentHierarchy WHERE component_id <> 1 ORDER BY level, component_name;","CREATE TABLE Components (component_id INTEGER PRIMARY KEY, component_name TEXT NOT NULL, parent_component_id INTEGER, quantity INTEGER NOT NULL, FOREIGN KEY (parent_component_id) REFERENCES Components(component_id));",This query uses a recursive CTE `ComponentHierarchy` to traverse a bill of materials. The base case selects the main component (ID 1). The recursive part joins the CTE with the `Components` table to find all direct and indirect sub-components. The `level` column tracks the depth in the hierarchy. The final SELECT statement excludes the main component itself.
Compare the total sales of the current month with the total sales of the previous month for each product category.,"WITH MonthlyCategorySales AS (SELECT STRFTIME('%Y-%m', s.sale_date) AS sales_month, c.category_name, SUM(s.amount) AS monthly_sales FROM Sales s JOIN Products p ON s.product_id = p.product_id JOIN Categories c ON p.category_id = c.category_id GROUP BY sales_month, c.category_name ORDER BY sales_month), LaggedCategorySales AS (SELECT sales_month, category_name, monthly_sales, LAG(monthly_sales, 1, 0) OVER (PARTITION BY category_name ORDER BY sales_month) AS previous_month_sales FROM MonthlyCategorySales) SELECT sales_month, category_name, monthly_sales AS current_month_sales, previous_month_sales FROM LaggedCategorySales ORDER BY sales_month, category_name;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, sale_date TEXT NOT NULL, amount REAL NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));",The `MonthlyCategorySales` CTE aggregates total sales by month and product category. `LaggedCategorySales` then uses the `LAG` window function to fetch the `monthly_sales` value from the previous month for each category. The final query displays current and previous month sales for comparison.
"Classify customers into 'High Spender' (total orders > $1000), 'Medium Spender' ($500-$1000), and 'Low Spender' (< $500).","SELECT c.customer_name, CAST(CustomerSpending.total_spent AS REAL) AS total_spent, CASE WHEN CustomerSpending.total_spent > 1000 THEN 'High Spender' WHEN CustomerSpending.total_spent >= 500 THEN 'Medium Spender' ELSE 'Low Spender' END AS spending_category FROM Customers c JOIN (SELECT customer_id, SUM(total_amount) AS total_spent FROM Orders GROUP BY customer_id) AS CustomerSpending ON c.customer_id = CustomerSpending.customer_id ORDER BY total_spent DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a derived table `CustomerSpending` to calculate the total amount spent by each customer. The main query then joins this derived table with the `Customers` table and uses a `CASE` statement to assign each customer to a 'High Spender', 'Medium Spender', or 'Low Spender' category based on their total spending."
Count customers who had activity in January 2023 but no activity in February 2023.,"WITH JanuaryActiveCustomers AS (SELECT DISTINCT customer_id FROM CustomerActivity WHERE STRFTIME('%Y-%m', last_activity_date) = '2023-01'), FebruaryActiveCustomers AS (SELECT DISTINCT customer_id FROM CustomerActivity WHERE STRFTIME('%Y-%m', last_activity_date) = '2023-02') SELECT COUNT(jac.customer_id) AS churned_customers FROM JanuaryActiveCustomers jac LEFT JOIN FebruaryActiveCustomers fac ON jac.customer_id = fac.customer_id WHERE fac.customer_id IS NULL;","CREATE TABLE CustomerActivity (activity_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, last_activity_date TEXT NOT NULL);",The `JanuaryActiveCustomers` CTE lists all customers active in January 2023. The `FebruaryActiveCustomers` CTE lists customers active in February 2023. The main query performs a LEFT JOIN from January active customers to February active customers and counts those where there is no match in February (indicating churn).
Find all unique pairs of product categories that have been ordered together in the same order.,"SELECT DISTINCT c1.category_name AS category1, c2.category_name AS category2 FROM OrderItems oi1 JOIN OrderItems oi2 ON oi1.order_id = oi2.order_id AND oi1.product_id <> oi2.product_id JOIN Products p1 ON oi1.product_id = p1.product_id JOIN Products p2 ON oi2.product_id = p2.product_id JOIN Categories c1 ON p1.category_id = c1.category_id JOIN Categories c2 ON p2.category_id = c2.category_id WHERE c1.category_id < c2.category_id ORDER BY category1, category2;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query uses self-joins on `OrderItems` to find two different products (`oi1.product_id <> oi2.product_id`) within the same order (`oi1.order_id = oi2.order_id`). It then joins to `Products` and `Categories` twice to get the category names for both products. The condition `c1.category_id < c2.category_id` ensures that each pair is listed only once and avoids self-pairing.
Identify the hour of the day with the highest average number of orders.,"WITH HourlyOrderCounts AS (SELECT STRFTIME('%H', order_date) AS order_hour, COUNT(order_id) AS num_orders FROM Orders GROUP BY order_hour) SELECT order_hour, CAST(AVG(num_orders) AS REAL) AS average_orders_per_hour FROM HourlyOrderCounts GROUP BY order_hour ORDER BY average_orders_per_hour DESC LIMIT 1;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT NOT NULL);","The `HourlyOrderCounts` CTE groups orders by the hour of the day and counts the number of orders in each hour. The main query then calculates the average number of orders for each hour (which in this simplified schema would just be the counts themselves if there's only one day of data, but useful if multiple days' data is implicitly grouped, or could be adjusted for average over multiple days for that hour). It orders the results by this average in descending order and limits to 1 to find the hour with the highest average."
"For each customer, calculate the number of days since their last order and categorize them as 'Recent' (last 30 days), 'Active' (31-90 days), or 'Inactive' (>90 days).","WITH CustomerLastOrder AS (SELECT customer_id, MAX(order_date) AS last_order_date FROM Orders GROUP BY customer_id) SELECT c.customer_name, clo.last_order_date, CAST(JULIANDAY('now') - JULIANDAY(clo.last_order_date) AS INTEGER) AS days_since_last_order, CASE WHEN JULIANDAY('now') - JULIANDAY(clo.last_order_date) <= 30 THEN 'Recent' WHEN JULIANDAY('now') - JULIANDAY(clo.last_order_date) > 30 AND JULIANDAY('now') - JULIANDAY(clo.last_order_date) <= 90 THEN 'Active' ELSE 'Inactive' END AS customer_status FROM Customers c JOIN CustomerLastOrder clo ON c.customer_id = clo.customer_id ORDER BY days_since_last_order DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL);","The `CustomerLastOrder` CTE finds the most recent order date for each customer. The main query then calculates the number of days since the current date (`'now'`) and the last order date using `JULIANDAY`. A `CASE` statement is used to categorize customers into 'Recent', 'Active', or 'Inactive' based on this day difference."
List all employees who earn more than the average salary in their department.,"WITH DepartmentAvgSalaries AS (SELECT department_id, AVG(salary) AS avg_dept_salary FROM Employees GROUP BY department_id) SELECT e.employee_name, e.salary, d.department_name FROM Employees e JOIN DepartmentAvgSalaries das ON e.department_id = das.department_id JOIN Departments d ON e.department_id = d.department_id WHERE e.salary > das.avg_dept_salary ORDER BY d.department_name, e.salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","The `DepartmentAvgSalaries` CTE calculates the average salary for each department. The main query then joins the `Employees` table with this CTE and the `Departments` table, filtering for employees whose individual salary is greater than the calculated average salary for their respective department."
"List all products, their prices, and a category label based on price: 'Budget' for under 50, 'Mid-Range' for 50-200, and 'Premium' for over 200.","SELECT product_name, price, CASE WHEN price < 50 THEN 'Budget' WHEN price BETWEEN 50 AND 200 THEN 'Mid-Range' ELSE 'Premium' END AS price_category FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL);","This query selects the product name, price, and assigns a 'price_category' using a CASE expression based on the price range."
"Retrieve employee names and their performance rating. If salary is above 60000, rate as 'High Performer'; if between 30000 and 60000, 'Mid Performer'; otherwise 'Entry Level'.","SELECT first_name || ' ' || last_name AS employee_name, salary, CASE WHEN salary > 60000 THEN 'High Performer' WHEN salary BETWEEN 30000 AND 60000 THEN 'Mid Performer' ELSE 'Entry Level' END AS performance_rating FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, salary REAL NOT NULL, hire_date TEXT);",This query generates a performance rating for each employee based on their salary using a CASE statement.
"Show customer names and their account status. If they have placed more than 3 orders, mark as 'Valued'; if 1 to 3 orders, 'Regular'; otherwise 'New Customer'.","SELECT c.customer_name, CASE WHEN COUNT(o.order_id) > 3 THEN 'Valued' WHEN COUNT(o.order_id) BETWEEN 1 AND 3 THEN 'Regular' ELSE 'New Customer' END AS customer_status FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.customer_name ORDER BY c.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query joins Customers with Orders to count orders per customer and then uses a CASE expression to categorize customer status based on the order count. LEFT JOIN ensures new customers with no orders are included.
"List all orders and their shipping priority. Orders with 'Shipped' status get 'High', 'Pending' gets 'Medium', and anything else 'Low'.","SELECT order_id, order_date, status, CASE status WHEN 'Shipped' THEN 'High' WHEN 'Pending' THEN 'Medium' ELSE 'Low' END AS shipping_priority FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query assigns a 'shipping_priority' to each order based on its current 'status' using a simple CASE expression.
"Count the number of employees in each salary bracket: 'Low' (<30000), 'Medium' (30000-60000), 'High' (>60000).","SELECT CASE WHEN salary < 30000 THEN 'Low' WHEN salary BETWEEN 30000 AND 60000 THEN 'Medium' ELSE 'High' END AS salary_bracket, COUNT(employee_id) AS num_employees FROM Employees GROUP BY salary_bracket;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL);",This query categorizes employees into salary brackets using a CASE expression and then counts the number of employees within each bracket.
"Display student names along with their academic standing. If GPA is 3.5 or higher, 'Dean's List'; 3.0-3.49, 'Good Standing'; 2.0-2.99, 'Academic Probation'; below 2.0, 'Dismissed'.","SELECT student_name, gpa, CASE WHEN gpa >= 3.5 THEN 'Dean''s List' WHEN gpa >= 3.0 THEN 'Good Standing' WHEN gpa >= 2.0 THEN 'Academic Probation' ELSE 'Dismissed' END AS academic_standing FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, gpa REAL);",This query categorizes students' academic standing based on their GPA using a searched CASE statement.
"Get the total revenue categorized by quarter for the year 2023. Q1 (Jan-Mar), Q2 (Apr-Jun), Q3 (Jul-Sep), Q4 (Oct-Dec).","SELECT CASE WHEN STRFTIME('%m', sale_date) BETWEEN '01' AND '03' THEN 'Q1' WHEN STRFTIME('%m', sale_date) BETWEEN '04' AND '06' THEN 'Q2' WHEN STRFTIME('%m', sale_date) BETWEEN '07' AND '09' THEN 'Q3' ELSE 'Q4' END AS sales_quarter, SUM(revenue) AS total_quarterly_revenue FROM Sales WHERE STRFTIME('%Y', sale_date) = '2023' GROUP BY sales_quarter ORDER BY sales_quarter;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT NOT NULL, quantity INTEGER, revenue REAL);","This query aggregates total revenue for 2023, grouping it by calendar quarter using a CASE expression based on the month of the sale date."
"For each order, show its ID and a calculated shipping cost. If the total amount is over 1000, shipping is free (0); otherwise, it's 5% of the total amount, but not less than 10.","SELECT order_id, total_amount, CASE WHEN total_amount > 1000 THEN 0.0 ELSE MAX(10.0, total_amount * 0.05) END AS shipping_cost FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL NOT NULL);","This query calculates a conditional shipping cost for each order: free for large orders, otherwise 5% of total amount with a minimum of 10.0."
"List products, their stock quantity, and indicate if they are 'In Stock', 'Low Stock' (quantity < 10), or 'Out of Stock' (quantity is 0 or NULL).","SELECT product_name, stock_quantity, CASE WHEN stock_quantity > 10 THEN 'In Stock' WHEN stock_quantity BETWEEN 1 AND 10 THEN 'Low Stock' WHEN stock_quantity = 0 OR stock_quantity IS NULL THEN 'Out of Stock' ELSE 'Check Stock' END AS stock_status FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL, stock_quantity INTEGER);","This query categorizes product stock levels using a CASE expression, explicitly handling NULL or zero stock."
"Calculate the average salary for each department, labeling departments with an average salary over 70000 as 'High Budget Dept' and others as 'Standard Budget Dept'.","SELECT d.department_name, AVG(e.salary) AS average_salary, CASE WHEN AVG(e.salary) > 70000 THEN 'High Budget Dept' ELSE 'Standard Budget Dept' END AS budget_category FROM Departments d JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);","This query joins Employees and Departments, calculates the average salary per department, and then categorizes departments based on this average using a CASE statement."
"Display order IDs and a delivery status. If the order date is after '2023-01-01' and status is 'Pending', mark as 'Recent Pending'. If status is 'Completed' and total amount > 500, mark as 'Big Completed'. Otherwise, 'Normal'.","SELECT order_id, order_date, total_amount, status, CASE WHEN order_date > '2023-01-01' AND status = 'Pending' THEN 'Recent Pending' WHEN status = 'Completed' AND total_amount > 500 THEN 'Big Completed' ELSE 'Normal' END AS delivery_category FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL NOT NULL, status TEXT);","This query uses a searched CASE expression to categorize orders based on a combination of their date, status, and total amount."
"Find all employees and indicate if they are 'Veteran' (hired before 2010), 'Experienced' (hired between 2010 and 2019), or 'New' (hired in or after 2020).","SELECT first_name || ' ' || last_name AS employee_name, hire_date, CASE WHEN STRFTIME('%Y', hire_date) < '2010' THEN 'Veteran' WHEN STRFTIME('%Y', hire_date) BETWEEN '2010' AND '2019' THEN 'Experienced' ELSE 'New' END AS tenure_status FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT NOT NULL);","This query categorizes employees' tenure based on their hire date, extracting the year to apply conditions."
"Count sales for each month of 2023, and label months as 'High Season' if sales exceeded 50000 or 'Low Season' otherwise.","SELECT STRFTIME('%Y-%m', sale_date) AS sale_month, SUM(revenue) AS monthly_revenue, CASE WHEN SUM(revenue) > 50000 THEN 'High Season' ELSE 'Low Season' END AS season_label FROM Sales WHERE STRFTIME('%Y', sale_date) = '2023' GROUP BY sale_month ORDER BY sale_month;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT NOT NULL, quantity INTEGER, revenue REAL);",This query calculates monthly revenue for 2023 and uses a CASE expression in the SELECT clause to label each month as 'High Season' or 'Low Season' based on the total revenue.
"List product categories and the average price of products in each, showing 'Luxury' if the average price is above 150, otherwise 'Standard'.","SELECT category, AVG(price) AS average_price, CASE WHEN AVG(price) > 150 THEN 'Luxury' ELSE 'Standard' END AS price_tier FROM Products GROUP BY category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","This query groups products by category, calculates the average price for each, and then assigns a 'price_tier' based on that average price."
"For each course, list its name and a 'Credits Group': 'Low' (1-2 credits), 'Standard' (3-4 credits), 'High' (5+ credits).","SELECT course_name, credits, CASE WHEN credits BETWEEN 1 AND 2 THEN 'Low' WHEN credits BETWEEN 3 AND 4 THEN 'Standard' ELSE 'High' END AS credits_group FROM Courses;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, credits INTEGER);",This query assigns a 'credits_group' to each course based on its credit count using a searched CASE statement.
"Show employee names and their age group: 'Young' (under 30), 'Middle-Aged' (30-50), 'Senior' (over 50). Assume current year is 2023 and birth_date is in YYYY-MM-DD format.","SELECT first_name || ' ' || last_name AS employee_name, birth_date, CAST(STRFTIME('%Y', 'now') - STRFTIME('%Y', birth_date) AS INTEGER) - (STRFTIME('%J', 'now') < STRFTIME('%J', birth_date)) AS age, CASE WHEN CAST(STRFTIME('%Y', 'now') - STRFTIME('%Y', birth_date) AS INTEGER) - (STRFTIME('%J', 'now') < STRFTIME('%J', birth_date)) < 30 THEN 'Young' WHEN CAST(STRFTIME('%Y', 'now') - STRFTIME('%Y', birth_date) AS INTEGER) - (STRFTIME('%J', 'now') < STRFTIME('%J', birth_date)) BETWEEN 30 AND 50 THEN 'Middle-Aged' ELSE 'Senior' END AS age_group FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, birth_date TEXT NOT NULL);",This query calculates the age of each employee and then categorizes them into 'age_group' using a CASE expression. It uses SQLite's STRFTIME to calculate age accurately.
Get the count of 'active' (status is 1) and 'inactive' (status is 0) employees.,"SELECT SUM(CASE WHEN status = 1 THEN 1 ELSE 0 END) AS active_employees, SUM(CASE WHEN status = 0 THEN 1 ELSE 0 END) AS inactive_employees FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, status INTEGER NOT NULL);","This query uses conditional aggregation (SUM with CASE) to count employees based on their 'status' (1 for active, 0 for inactive)."
"Retrieve order IDs, their total amount, and a 'Discount Level'. If total amount is between 200 and 500, apply 5% discount; if over 500, apply 10% discount. Otherwise, no discount.","SELECT order_id, total_amount, CASE WHEN total_amount BETWEEN 200 AND 500 THEN total_amount * 0.95 WHEN total_amount > 500 THEN total_amount * 0.90 ELSE total_amount END AS final_amount FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, total_amount REAL NOT NULL);",This query calculates a 'final_amount' for each order by applying conditional discounts based on the 'total_amount' using a CASE statement.
"List all products and indicate if their category is 'Electronics' (label as 'Tech') or 'Apparel' (label as 'Fashion'). For other categories, label as 'Other Goods'.","SELECT product_name, category, CASE category WHEN 'Electronics' THEN 'Tech' WHEN 'Apparel' THEN 'Fashion' ELSE 'Other Goods' END AS broad_category FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT);",This query uses a simple CASE expression to map specific product categories to broader labels.
"For each employee, show their name and indicate if their salary is 'Above Average', 'Average', or 'Below Average' compared to the company-wide average salary.","SELECT first_name || ' ' || last_name AS employee_name, salary, CASE WHEN salary > (SELECT AVG(salary) FROM Employees) THEN 'Above Average' WHEN salary = (SELECT AVG(salary) FROM Employees) THEN 'Average' ELSE 'Below Average' END AS salary_comparison FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL NOT NULL);","This query compares each employee's salary to the overall company average, using a subquery within a CASE expression to categorize their salary relative to the average."
"Count customers grouped by their region, but combine 'North' and 'Northeast' regions into 'Northern Regions'.","SELECT CASE WHEN region IN ('North', 'Northeast') THEN 'Northern Regions' ELSE region END AS combined_region, COUNT(customer_id) AS customer_count FROM Customers GROUP BY combined_region;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, region TEXT NOT NULL);","This query re-categorizes specific regions into a combined 'Northern Regions' using a CASE with IN operator, then counts customers per combined region."
"Display customer names. If their first name starts with 'A', 'B', or 'C', prepend 'VIP '. Otherwise, prepend 'Regular '.","SELECT CASE WHEN SUBSTR(customer_name, 1, 1) IN ('A', 'B', 'C') THEN 'VIP ' || customer_name ELSE 'Regular ' || customer_name END AS categorized_customer_name FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL);",This query conditionally prefixes customer names with 'VIP ' or 'Regular ' based on the first letter of their name using a CASE expression and SUBSTR.
"List order IDs and the estimated delivery date based on status. If 'Shipped', add 7 days to order_date. If 'Pending', add 14 days. For others, 'Unknown'.","SELECT order_id, order_date, status, CASE WHEN status = 'Shipped' THEN DATE(order_date, '+7 days') WHEN status = 'Pending' THEN DATE(order_date, '+14 days') ELSE 'Unknown' END AS estimated_delivery_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT NOT NULL, status TEXT);",This query calculates an 'estimated_delivery_date' for each order using conditional logic on its status and SQLite's DATE function.
"Retrieve product names and a 'Price Tier' based on their price and category. If 'Electronics' and price > 500, then 'High-End Tech'. If 'Clothing' and price > 100, then 'Premium Apparel'. Otherwise, 'Standard Product'.","SELECT product_name, category, price, CASE WHEN category = 'Electronics' AND price > 500 THEN 'High-End Tech' WHEN category = 'Clothing' AND price > 100 THEN 'Premium Apparel' ELSE 'Standard Product' END AS price_tier FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL);",This query categorizes products into specific price tiers based on a combination of their category and price using a complex searched CASE statement.
Count the number of sales that occurred on a weekday versus a weekend.,"SELECT SUM(CASE WHEN STRFTIME('%w', sale_date) IN ('0', '6') THEN 1 ELSE 0 END) AS weekend_sales, SUM(CASE WHEN STRFTIME('%w', sale_date) BETWEEN '1' AND '5' THEN 1 ELSE 0 END) AS weekday_sales FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, sale_date TEXT NOT NULL, revenue REAL);","This query uses conditional aggregation to count sales, distinguishing between weekend (Sunday=0, Saturday=6) and weekday sales based on the day of the week extracted from the sale date."
"List employees, their department name, and a 'Department Type': 'Core' if department name contains 'Sales' or 'Marketing', otherwise 'Support'.","SELECT e.first_name || ' ' || e.last_name AS employee_name, d.department_name, CASE WHEN d.department_name LIKE '%Sales%' OR d.department_name LIKE '%Marketing%' THEN 'Core' ELSE 'Support' END AS department_type FROM Employees e JOIN Departments d ON e.department_id = d.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);",This query joins employees with departments and assigns a 'department_type' based on whether the department name contains 'Sales' or 'Marketing'.
"For each student, display their name and the string 'High Achiever' if their GPA is 3.7 or higher, 'Good Student' if GPA is between 3.0 and 3.69, otherwise their actual GPA.","SELECT student_name, CASE WHEN gpa >= 3.7 THEN 'High Achiever' WHEN gpa BETWEEN 3.0 AND 3.69 THEN 'Good Student' ELSE CAST(gpa AS TEXT) END AS gpa_status FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, gpa REAL NOT NULL);","This query conditionally displays a text label ('High Achiever', 'Good Student') or the actual GPA value for each student, casting the GPA to text for consistency in the output column."
"Find orders where the total amount is over 500, and for those, identify if the customer is 'VIP' (customer_id < 100) or 'Regular'. For orders under 500, just show 'Small Order'.","SELECT order_id, total_amount, customer_id, CASE WHEN total_amount > 500 THEN CASE WHEN customer_id < 100 THEN 'VIP Customer Order' ELSE 'Regular Customer Order' END ELSE 'Small Order' END AS order_type FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL NOT NULL);","This query uses a nested CASE expression to first filter by total amount, then further categorize based on customer ID for high-value orders."
"Calculate the average revenue for products in 'Electronics', 'Books', and 'Home Goods' categories. If a product category is not one of these, count its revenue as 0 for the average.","SELECT AVG(CASE WHEN category IN ('Electronics', 'Books', 'Home Goods') THEN revenue ELSE 0 END) AS average_filtered_revenue FROM Sales s JOIN Products p ON s.product_id = p.product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT NOT NULL); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, revenue REAL NOT NULL);",This query calculates the average revenue only for specific product categories by conditionally including revenue or 0 for other categories in the average calculation.
"List all customers and their primary contact method. If phone is NULL but email is present, use email. If both are NULL, mark as 'No Contact Info'. Otherwise, use phone.","SELECT customer_name, phone, email, CASE WHEN phone IS NOT NULL THEN phone WHEN email IS NOT NULL THEN email ELSE 'No Contact Info' END AS primary_contact FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, phone TEXT, email TEXT);","This query determines the primary contact method for each customer, prioritizing phone over email, and labeling if no contact information is available, using a CASE expression."
"Find the total number of orders placed by each customer, showing their name.","SELECT T1.Name, COUNT(T2.OrderID) AS TotalOrders FROM Customers AS T1 JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Name;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT, City TEXT, Country TEXT, RegistrationDate TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));",This query joins the Customers and Orders tables on CustomerID to link customers to their orders. It then counts the orders for each customer and groups the results by customer name.
List the names of products that have been ordered by customers from 'USA' and the total quantity of each such product sold.,"SELECT T4.ProductName, SUM(T3.Quantity) AS TotalQuantitySold FROM Customers AS T1 JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID JOIN Order_Items AS T3 ON T2.OrderID = T3.OrderID JOIN Products AS T4 ON T3.ProductID = T4.ProductID WHERE T1.Country = 'USA' GROUP BY T4.ProductName;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT, City TEXT, Country TEXT, RegistrationDate TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, PriceAtSale REAL, FOREIGN KEY (OrderID) REFERENCES Orders(OrderID), FOREIGN KEY (ProductID) REFERENCES Products(ProductID)); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER);","This query performs multiple joins across Customers, Orders, Order_Items, and Products tables. It filters for customers from 'USA' and then calculates the total quantity sold for each product, grouping by product name."
Retrieve the names of students who are majoring in 'Computer Science' and enrolled in a course offered by the 'Engineering' department.,"SELECT DISTINCT S.FirstName, S.LastName FROM Students AS S JOIN Majors AS M ON S.MajorID = M.MajorID JOIN Enrollments AS E ON S.StudentID = E.StudentID JOIN Courses AS C ON E.CourseID = C.CourseID WHERE M.MajorName = 'Computer Science' AND C.Department = 'Engineering';","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, MajorID INTEGER, FOREIGN KEY (MajorID) REFERENCES Majors(MajorID)); CREATE TABLE Majors (MajorID INTEGER PRIMARY KEY, MajorName TEXT, Department TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Semester TEXT, Grade TEXT, FOREIGN KEY (StudentID) REFERENCES Students(StudentID), FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER, Department TEXT);","This query joins Students, Majors, Enrollments, and Courses tables. It filters for students with a 'Computer Science' major and courses from the 'Engineering' department, then selects distinct student names."
Find the average total amount of orders for customers registered after '2022-01-01'.,SELECT AVG(T2.TotalAmount) AS AverageOrderAmount FROM Customers AS T1 JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.RegistrationDate > '2022-01-01';,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT, City TEXT, Country TEXT, RegistrationDate TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));",This query joins Customers and Orders tables. It filters customers registered after '2022-01-01' and calculates the average total amount of their orders.
Which doctors have appointments scheduled for patients whose last name starts with 'S'?,"SELECT DISTINCT D.FirstName, D.LastName FROM Doctors AS D JOIN Appointments AS A ON D.DoctorID = A.DoctorID JOIN Patients AS P ON A.PatientID = P.PatientID WHERE P.LastName LIKE 'S%';","CREATE TABLE Doctors (DoctorID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Specialty TEXT); CREATE TABLE Appointments (AppointmentID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, AppointmentDate TEXT, AppointmentTime TEXT, Status TEXT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID)); CREATE TABLE Patients (PatientID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, Gender TEXT, PhoneNumber TEXT);","This query links Doctors, Appointments, and Patients tables. It filters for patients whose last name starts with 'S' and returns the distinct names of doctors associated with those appointments."
Get the names of all products that have never been ordered.,SELECT P.ProductName FROM Products AS P LEFT JOIN Order_Items AS OI ON P.ProductID = OI.ProductID WHERE OI.OrderItemID IS NULL;,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, PriceAtSale REAL, FOREIGN KEY (ProductID) REFERENCES Products(ProductID));","This query uses a LEFT JOIN from Products to Order_Items. It finds products that do not have a corresponding entry in Order_Items, indicating they have never been ordered."
"For each major, find the average grade of students enrolled in courses from that major's department. Assume grades are numeric.","SELECT M.MajorName, AVG(E.Grade) AS AverageGrade FROM Majors AS M JOIN Students AS S ON M.MajorID = S.MajorID JOIN Enrollments AS E ON S.StudentID = E.StudentID JOIN Courses AS C ON E.CourseID = C.CourseID WHERE M.Department = C.Department GROUP BY M.MajorName;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, MajorID INTEGER, FOREIGN KEY (MajorID) REFERENCES Majors(MajorID)); CREATE TABLE Majors (MajorID INTEGER PRIMARY KEY, MajorName TEXT, Department TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Semester TEXT, Grade NUMERIC, FOREIGN KEY (StudentID) REFERENCES Students(StudentID), FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER, Department TEXT);","This query joins Students, Majors, Enrollments, and Courses. It filters for courses from the student's major's department and calculates the average grade for each major."
Show patients who have more than one medical record filed by the same doctor.,"SELECT P.FirstName, P.LastName FROM Patients AS P JOIN MedicalRecords AS MR ON P.PatientID = MR.PatientID GROUP BY P.PatientID, MR.DoctorID HAVING COUNT(MR.RecordID) > 1;","CREATE TABLE Patients (PatientID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, Gender TEXT, PhoneNumber TEXT); CREATE TABLE MedicalRecords (RecordID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, Diagnosis TEXT, Treatment TEXT, RecordDate TEXT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID));",This query groups medical records by patient and doctor. It then uses the HAVING clause to identify patients who have more than one record with the same doctor.
Get the total revenue generated by each product category.,"SELECT P.Category, SUM(OI.Quantity * OI.PriceAtSale) AS TotalRevenue FROM Products AS P JOIN Order_Items AS OI ON P.ProductID = OI.ProductID GROUP BY P.Category;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, PriceAtSale REAL, FOREIGN KEY (ProductID) REFERENCES Products(ProductID));",This query joins Products and Order_Items to link products to their sales. It calculates the revenue for each item (Quantity * PriceAtSale) and then sums it up per product category.
Find the student(s) with the highest number of course enrollments.,"SELECT S.FirstName, S.LastName FROM Students AS S JOIN Enrollments AS E ON S.StudentID = E.StudentID GROUP BY S.StudentID ORDER BY COUNT(E.CourseID) DESC LIMIT 1;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, MajorID INTEGER); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Semester TEXT, Grade TEXT, FOREIGN KEY (StudentID) REFERENCES Students(StudentID));","This query joins Students and Enrollments, counts the number of enrollments for each student, orders them in descending order, and returns the top student(s) with the highest count."
List all patients who have had appointments with a doctor specializing in 'Cardiology'.,"SELECT DISTINCT P.FirstName, P.LastName FROM Patients AS P JOIN Appointments AS A ON P.PatientID = A.PatientID JOIN Doctors AS D ON A.DoctorID = D.DoctorID WHERE D.Specialty = 'Cardiology';","CREATE TABLE Patients (PatientID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, Gender TEXT, PhoneNumber TEXT); CREATE TABLE Appointments (AppointmentID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, AppointmentDate TEXT, AppointmentTime TEXT, Status TEXT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID)); CREATE TABLE Doctors (DoctorID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Specialty TEXT);","This query links Patients, Appointments, and Doctors tables. It filters for doctors with 'Cardiology' specialty and returns the distinct names of patients who had appointments with them."
Get the names of customers who have placed orders on at least two different dates.,SELECT C.Name FROM Customers AS C JOIN Orders AS O ON C.CustomerID = O.CustomerID GROUP BY C.CustomerID HAVING COUNT(DISTINCT O.OrderDate) >= 2;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT, City TEXT, Country TEXT, RegistrationDate TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));","This query joins Customers and Orders. It groups orders by customer and counts the distinct order dates for each customer, returning those with two or more distinct dates."
Find the courses that have no students enrolled in them.,SELECT C.CourseName FROM Courses AS C LEFT JOIN Enrollments AS E ON C.CourseID = E.CourseID WHERE E.EnrollmentID IS NULL;,"CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER, Department TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Semester TEXT, Grade TEXT, FOREIGN KEY (CourseID) REFERENCES Courses(CourseID));","This query uses a LEFT JOIN from Courses to Enrollments. It identifies courses that do not have any corresponding entries in Enrollments, meaning no students are enrolled."
List the doctors who have recorded medical records for more than 5 distinct patients.,"SELECT D.FirstName, D.LastName FROM Doctors AS D JOIN MedicalRecords AS MR ON D.DoctorID = MR.DoctorID GROUP BY D.DoctorID HAVING COUNT(DISTINCT MR.PatientID) > 5;","CREATE TABLE Doctors (DoctorID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Specialty TEXT); CREATE TABLE MedicalRecords (RecordID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, Diagnosis TEXT, Treatment TEXT, RecordDate TEXT, FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","This query joins Doctors and MedicalRecords. It groups records by doctor and counts the distinct patients each doctor has seen, filtering for doctors who have seen more than 5 distinct patients."
"Get the average price of products in each category, but only for categories with more than 10 distinct products.","SELECT Category, AVG(Price) AS AveragePrice FROM Products GROUP BY Category HAVING COUNT(ProductID) > 10;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER);","This query groups products by category, calculates the average price, and then filters for categories that contain more than 10 distinct products."
"For each student, list their name and the name of their major.","SELECT S.FirstName, S.LastName, M.MajorName FROM Students AS S JOIN Majors AS M ON S.MajorID = M.MajorID;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, MajorID INTEGER, FOREIGN KEY (MajorID) REFERENCES Majors(MajorID)); CREATE TABLE Majors (MajorID INTEGER PRIMARY KEY, MajorName TEXT, Department TEXT);",This query joins the Students and Majors tables on MajorID to retrieve the name of each student along with their corresponding major name.
Find the customer who has the highest total amount spent across all their orders.,SELECT C.Name FROM Customers AS C JOIN Orders AS O ON C.CustomerID = O.CustomerID GROUP BY C.CustomerID ORDER BY SUM(O.TotalAmount) DESC LIMIT 1;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT, City TEXT, Country TEXT, RegistrationDate TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));","This query joins Customers and Orders, sums the total amount for each customer, orders them by this sum in descending order, and selects the name of the top customer."
List all appointments that are scheduled for a date in the future.,"SELECT A.AppointmentID, P.FirstName AS PatientFirstName, P.LastName AS PatientLastName, D.FirstName AS DoctorFirstName, D.LastName AS DoctorLastName, A.AppointmentDate, A.AppointmentTime FROM Appointments AS A JOIN Patients AS P ON A.PatientID = P.PatientID JOIN Doctors AS D ON A.DoctorID = D.DoctorID WHERE A.AppointmentDate > DATE('now');","CREATE TABLE Appointments (AppointmentID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, AppointmentDate TEXT, AppointmentTime TEXT, Status TEXT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID)); CREATE TABLE Patients (PatientID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, Gender TEXT, PhoneNumber TEXT); CREATE TABLE Doctors (DoctorID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Specialty TEXT);","This query joins Appointments, Patients, and Doctors. It filters appointments where the AppointmentDate is greater than the current date to find future appointments."
Retrieve the names of all students who have enrolled in courses from more than one department.,"SELECT S.FirstName, S.LastName FROM Students AS S JOIN Enrollments AS E ON S.StudentID = E.StudentID JOIN Courses AS C ON E.CourseID = C.CourseID GROUP BY S.StudentID HAVING COUNT(DISTINCT C.Department) > 1;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, MajorID INTEGER); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Semester TEXT, Grade TEXT, FOREIGN KEY (StudentID) REFERENCES Students(StudentID), FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER, Department TEXT);","This query joins Students, Enrollments, and Courses. It groups students and counts the distinct departments of courses they are enrolled in, returning those with more than one distinct department."
Find the top 5 most ordered products by total quantity sold.,"SELECT P.ProductName, SUM(OI.Quantity) AS TotalQuantitySold FROM Products AS P JOIN Order_Items AS OI ON P.ProductID = OI.ProductID GROUP BY P.ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, PriceAtSale REAL, FOREIGN KEY (ProductID) REFERENCES Products(ProductID));","This query joins Products and Order_Items. It calculates the total quantity sold for each product, orders them in descending order of quantity, and returns the top 5."
Get the names of patients who have no medical records associated with them.,"SELECT P.FirstName, P.LastName FROM Patients AS P LEFT JOIN MedicalRecords AS MR ON P.PatientID = MR.PatientID WHERE MR.RecordID IS NULL;","CREATE TABLE Patients (PatientID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, Gender TEXT, PhoneNumber TEXT); CREATE TABLE MedicalRecords (RecordID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, Diagnosis TEXT, Treatment TEXT, RecordDate TEXT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",This query uses a LEFT JOIN from Patients to MedicalRecords. It identifies patients who do not have any corresponding medical records.
Calculate the average total amount of orders per month for the year 2023.,"SELECT STRFTIME('%Y-%m', OrderDate) AS OrderMonth, AVG(TotalAmount) AS AverageMonthlyAmount FROM Orders WHERE STRFTIME('%Y', OrderDate) = '2023' GROUP BY OrderMonth ORDER BY OrderMonth;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT);",This query extracts the year and month from OrderDate for orders in 2023. It then calculates the average total amount for each month.
Which students have received a grade of 'A' in at least one course?,"SELECT DISTINCT S.FirstName, S.LastName FROM Students AS S JOIN Enrollments AS E ON S.StudentID = E.StudentID WHERE E.Grade = 'A';","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, MajorID INTEGER); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Semester TEXT, Grade TEXT, FOREIGN KEY (StudentID) REFERENCES Students(StudentID));",This query joins Students and Enrollments. It filters for enrollments where the grade is 'A' and returns the distinct names of students who achieved that grade.
Find the doctor with the highest number of appointments.,"SELECT D.FirstName, D.LastName FROM Doctors AS D JOIN Appointments AS A ON D.DoctorID = A.DoctorID GROUP BY D.DoctorID ORDER BY COUNT(A.AppointmentID) DESC LIMIT 1;","CREATE TABLE Doctors (DoctorID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Specialty TEXT); CREATE TABLE Appointments (AppointmentID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, AppointmentDate TEXT, AppointmentTime TEXT, Status TEXT, FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID));","This query joins Doctors and Appointments, counts the appointments for each doctor, orders them by the count in descending order, and returns the top doctor."
List customers who have purchased products from more than one category.,SELECT C.Name FROM Customers AS C JOIN Orders AS O ON C.CustomerID = O.CustomerID JOIN Order_Items AS OI ON O.OrderID = OI.OrderID JOIN Products AS P ON OI.ProductID = P.ProductID GROUP BY C.CustomerID HAVING COUNT(DISTINCT P.Category) > 1;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT, City TEXT, Country TEXT, RegistrationDate TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, PriceAtSale REAL, FOREIGN KEY (OrderID) REFERENCES Orders(OrderID), FOREIGN KEY (ProductID) REFERENCES Products(ProductID)); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER);","This query joins Customers, Orders, Order_Items, and Products. It groups by customer and counts the distinct product categories they have purchased from, returning customers with more than one."
"For each major, display the number of students enrolled in it.","SELECT M.MajorName, COUNT(S.StudentID) AS NumberOfStudents FROM Majors AS M LEFT JOIN Students AS S ON M.MajorID = S.MajorID GROUP BY M.MajorName;","CREATE TABLE Majors (MajorID INTEGER PRIMARY KEY, MajorName TEXT, Department TEXT); CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, MajorID INTEGER, FOREIGN KEY (MajorID) REFERENCES Majors(MajorID));",This query performs a LEFT JOIN from Majors to Students to include majors even if they have no students. It then counts the students for each major.
"Find the total number of medical records for each patient, along with their name, only for patients born after 1990.","SELECT P.FirstName, P.LastName, COUNT(MR.RecordID) AS TotalRecords FROM Patients AS P JOIN MedicalRecords AS MR ON P.PatientID = MR.PatientID WHERE STRFTIME('%Y', P.DateOfBirth) > '1990' GROUP BY P.PatientID;","CREATE TABLE Patients (PatientID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, Gender TEXT, PhoneNumber TEXT); CREATE TABLE MedicalRecords (RecordID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, Diagnosis TEXT, Treatment TEXT, RecordDate TEXT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","This query joins Patients and MedicalRecords, filters patients born after 1990, and then counts the total medical records for each of these patients."
Which products have a stock quantity below the average stock quantity of all products?,"SELECT ProductName, StockQuantity FROM Products WHERE StockQuantity < (SELECT AVG(StockQuantity) FROM Products);","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER);",This query uses a subquery to calculate the average stock quantity of all products. It then selects products whose individual stock quantity is less than this average.
Get the names of students who have enrolled in courses from both 'Mathematics' and 'Physics' departments.,"SELECT S.FirstName, S.LastName FROM Students AS S JOIN Enrollments AS E ON S.StudentID = E.StudentID JOIN Courses AS C ON E.CourseID = C.CourseID WHERE C.Department = 'Mathematics' INTERSECT SELECT S2.FirstName, S2.LastName FROM Students AS S2 JOIN Enrollments AS E2 ON S2.StudentID = E2.StudentID JOIN Courses AS C2 ON E2.CourseID = C2.CourseID WHERE C2.Department = 'Physics';","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, MajorID INTEGER); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Semester TEXT, Grade TEXT, FOREIGN KEY (StudentID) REFERENCES Students(StudentID), FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER, Department TEXT);",This query uses the INTERSECT operator to find students who appear in both the set of students enrolled in 'Mathematics' courses and the set of students enrolled in 'Physics' courses.
List all doctors who have not recorded any medical records.,"SELECT D.FirstName, D.LastName FROM Doctors AS D LEFT JOIN MedicalRecords AS MR ON D.DoctorID = MR.DoctorID WHERE MR.RecordID IS NULL;","CREATE TABLE Doctors (DoctorID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Specialty TEXT); CREATE TABLE MedicalRecords (RecordID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, Diagnosis TEXT, Treatment TEXT, RecordDate TEXT, FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID));","This query uses a LEFT JOIN from Doctors to MedicalRecords. It identifies doctors who do not have any corresponding medical records, indicating they haven't recorded any."
Find customers who placed an order with a total amount greater than the average total amount of all orders.,SELECT DISTINCT C.Name FROM Customers AS C JOIN Orders AS O ON C.CustomerID = O.CustomerID WHERE O.TotalAmount > (SELECT AVG(TotalAmount) FROM Orders);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT, City TEXT, Country TEXT, RegistrationDate TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT);",This query uses a subquery to calculate the average total amount of all orders. It then selects the distinct names of customers whose orders have a total amount greater than this average.
Get the names of majors that have at least one student born before the year 2000.,"SELECT DISTINCT M.MajorName FROM Majors AS M JOIN Students AS S ON M.MajorID = S.MajorID WHERE STRFTIME('%Y', S.DateOfBirth) < '2000';","CREATE TABLE Majors (MajorID INTEGER PRIMARY KEY, MajorName TEXT, Department TEXT); CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, MajorID INTEGER, FOREIGN KEY (MajorID) REFERENCES Majors(MajorID));",This query joins Majors and Students. It filters for students born before the year 2000 and then returns the distinct names of their majors.
Which product category has the highest average price?,SELECT Category FROM Products GROUP BY Category ORDER BY AVG(Price) DESC LIMIT 1;,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER);","This query groups products by category, calculates the average price for each, orders them by average price in descending order, and returns the category with the highest average price."
List patients and the number of distinct doctors they have seen.,"SELECT P.FirstName, P.LastName, COUNT(DISTINCT MR.DoctorID) AS DistinctDoctorsSeen FROM Patients AS P JOIN MedicalRecords AS MR ON P.PatientID = MR.PatientID GROUP BY P.PatientID;","CREATE TABLE Patients (PatientID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, Gender TEXT, PhoneNumber TEXT); CREATE TABLE MedicalRecords (RecordID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, Diagnosis TEXT, Treatment TEXT, RecordDate TEXT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID));",This query joins Patients and MedicalRecords. It groups by patient and counts the number of distinct DoctorIDs associated with their medical records.
Find the courses that are offered in the same department as 'Calculus I'.,SELECT CourseName FROM Courses WHERE Department = (SELECT Department FROM Courses WHERE CourseName = 'Calculus I');,"CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER, Department TEXT);","This query uses a subquery to find the department of 'Calculus I'. Then, it selects all course names that belong to that same department."
List the full names of customers who registered in the year 2023 and have placed at least one order.,"SELECT DISTINCT C.Name FROM Customers AS C JOIN Orders AS O ON C.CustomerID = O.CustomerID WHERE STRFTIME('%Y', C.RegistrationDate) = '2023';","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT, City TEXT, Country TEXT, RegistrationDate TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));","This query joins Customers and Orders. It filters customers registered in 2023 and ensures they have at least one order, then selects their distinct names."
What is the average number of courses a student is enrolled in?,SELECT AVG(CoursesEnrolled) FROM (SELECT COUNT(CourseID) AS CoursesEnrolled FROM Enrollments GROUP BY StudentID);,"CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Semester TEXT, Grade TEXT);","This query first calculates the number of courses each student is enrolled in using a subquery, then computes the average of these counts."
Identify doctors who have not had any appointments in the year 2023.,"SELECT D.FirstName, D.LastName FROM Doctors AS D WHERE D.DoctorID NOT IN (SELECT DoctorID FROM Appointments WHERE STRFTIME('%Y', AppointmentDate) = '2023');","CREATE TABLE Doctors (DoctorID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Specialty TEXT); CREATE TABLE Appointments (AppointmentID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, AppointmentDate TEXT, AppointmentTime TEXT, Status TEXT, FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID));",This query selects doctors whose IDs are not found in the list of DoctorIDs from appointments scheduled in 2023.
Find the names of products that have a price higher than the maximum price of any product in the 'Electronics' category.,"SELECT ProductName, Price FROM Products WHERE Price > (SELECT MAX(Price) FROM Products WHERE Category = 'Electronics');","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER);",This query uses a subquery to find the maximum price of products in the 'Electronics' category. It then selects products whose price is greater than this maximum.
List patients who have appointments scheduled with more than one doctor on the same day.,"SELECT P.FirstName, P.LastName FROM Patients AS P JOIN Appointments AS A ON P.PatientID = A.PatientID GROUP BY P.PatientID, A.AppointmentDate HAVING COUNT(DISTINCT A.DoctorID) > 1;","CREATE TABLE Patients (PatientID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, Gender TEXT, PhoneNumber TEXT); CREATE TABLE Appointments (AppointmentID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, AppointmentDate TEXT, AppointmentTime TEXT, Status TEXT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",This query groups appointments by patient and appointment date. It then filters for groups where a patient has distinct doctors on the same date.
"Retrieve the first name, last name, and email address of all employees.","SELECT first_name, last_name, email FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id TEXT, salary REAL, department_id INTEGER);","This query selects the 'first_name', 'last_name', and 'email' columns from the 'Employees' table for all records."
Show all details for every product.,SELECT * FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, supplier_id INTEGER);",This query retrieves all columns for all products stored in the 'Products' table.
"List the title of each book, aliasing the column as 'BookTitle', and its author, aliased as 'BookAuthor'.","SELECT title AS BookTitle, author AS BookAuthor FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price_usd REAL, stock INTEGER);","This query selects the 'title' column and renames it to 'BookTitle', and the 'author' column, renaming it to 'BookAuthor', from the 'Books' table."
"Get the order ID, customer ID, and the total amount, aliasing 'total_amount' as 'FinalPrice', for all orders placed after '2023-01-01'.","SELECT order_id, customer_id, total_amount AS FinalPrice FROM Orders WHERE order_date > '2023-01-01';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects 'order_id', 'customer_id', and renames 'total_amount' to 'FinalPrice' for orders placed after January 1, 2023."
"Display the product name as 'ItemName' and its price as 'UnitCost' for products with a price greater than 50, sorted by price in descending order.","SELECT product_name AS ItemName, price AS UnitCost FROM Products WHERE price > 50 ORDER BY price DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, supplier_id INTEGER);","This query fetches the product name (aliased as 'ItemName') and price (aliased as 'UnitCost') for products costing more than 50, sorted by price from highest to lowest."
"Retrieve the full name of each employee, combining first and last names, aliased as 'FullName', along with their salary.","SELECT first_name || ' ' || last_name AS FullName, salary FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id TEXT, salary REAL, department_id INTEGER);","This query concatenates the 'first_name' and 'last_name' columns to create a new column 'FullName', and also selects 'salary', for all employees."
"Show the distinct genres of movies, aliased as 'MovieCategory'.",SELECT DISTINCT genre AS MovieCategory FROM Movies;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL);","This query selects all unique values from the 'genre' column of the 'Movies' table, aliasing the column as 'MovieCategory'."
"Find the movie title, director, and the calculated age of the movie (current year minus release year), aliased as 'MovieAge'. Assume the current year is 2024 for calculation purposes.","SELECT title, director, (2024 - release_year) AS MovieAge FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL);","This query retrieves the title, director, and calculates the age of each movie by subtracting its 'release_year' from 2024, aliasing the result as 'MovieAge'."
"List customer's full names, aliased as 'CustomerName', and their email addresses from the 'Customers' table.","SELECT first_name || ' ' || last_name AS CustomerName, email FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT);",This query combines 'first_name' and 'last_name' into a 'CustomerName' column and retrieves the 'email' for all customers.
"Display the product ID, its name, and a new column called 'AvailabilityStatus' which is 'In Stock' if stock quantity is greater than 0, otherwise 'Out of Stock'.","SELECT product_id, product_name, CASE WHEN stock_quantity > 0 THEN 'In Stock' ELSE 'Out of Stock' END AS AvailabilityStatus FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, supplier_id INTEGER);","This query selects product ID and name, and creates an 'AvailabilityStatus' column based on whether 'stock_quantity' is greater than zero."
"Get the order ID, order date, and the order status converted to uppercase, aliased as 'CurrentStatus'.","SELECT order_id, order_date, UPPER(status) AS CurrentStatus FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query retrieves the order ID, order date, and the uppercase version of the order status, aliasing it as 'CurrentStatus'."
"Show the employee's ID, first name, and their annual salary incremented by 5000, aliased as 'NewSalary'.","SELECT employee_id, first_name, (salary + 5000) AS NewSalary FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id TEXT, salary REAL, department_id INTEGER);","This query selects the employee ID, first name, and calculates a 'NewSalary' by adding 5000 to their current 'salary'."
"List all books with their title and the length of the title, aliased as 'TitleLength'.","SELECT title, LENGTH(title) AS TitleLength FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price_usd REAL, stock INTEGER);","This query selects the title of each book and calculates the length of its title, aliasing the result as 'TitleLength'."
"For each employee, display their last name and the year they were hired, aliased as 'HireYear'.","SELECT last_name, STRFTIME('%Y', hire_date) AS HireYear FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id TEXT, salary REAL, department_id INTEGER);","This query selects the last name of employees and extracts the year from their 'hire_date', aliasing it as 'HireYear'."
"Get the product ID, product name, and the price with a 10% discount applied, aliased as 'DiscountedPrice'.","SELECT product_id, product_name, price * 0.90 AS DiscountedPrice FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, supplier_id INTEGER);","This query selects product ID, name, and calculates a 'DiscountedPrice' by multiplying the original price by 0.90."
Display movie titles and their director's name. Alias the director's name as 'FilmMaker'.,"SELECT title, director AS FilmMaker FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL);",This query selects movie titles and renames the 'director' column to 'FilmMaker'.
"Show employee's ID, email, and a shortened version of their email domain (e.g., 'gmail' from 'user@gmail.com'), aliased as 'EmailDomain'.","SELECT employee_id, email, SUBSTR(email, INSTR(email, '@') + 1, INSTR(SUBSTR(email, INSTR(email, '@') + 1), '.') - 1) AS EmailDomain FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id TEXT, salary REAL, department_id INTEGER);","This query selects employee ID, email, and extracts the email domain (e.g., 'gmail' from 'user@gmail.com') aliasing it as 'EmailDomain'."
"Retrieve the total number of products, aliased as 'TotalProductCount'.",SELECT COUNT(product_id) AS TotalProductCount FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, supplier_id INTEGER);",This query counts the total number of products and aliases the result as 'TotalProductCount'.
"For each order, show its ID, order date, and a formatted string 'Order by [customer_id]' aliased as 'CustomerInfo'.","SELECT order_id, order_date, 'Order by ' || customer_id AS CustomerInfo FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects the order ID, order date, and creates a descriptive string combining a literal and the 'customer_id', aliasing it as 'CustomerInfo'."
"List all customers from 'USA', showing their customer ID and their full name concatenated, aliased as 'FullName'.","SELECT customer_id, first_name || ' ' || last_name AS FullName FROM Customers WHERE country = 'USA';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT);",This query selects the customer ID and the concatenated first and last names (aliased as 'FullName') for customers residing in 'USA'.
"Display employee's first name, last name, and a calculated bonus amount, which is 10% of their salary, aliased as 'BonusAmount'.","SELECT first_name, last_name, salary * 0.10 AS BonusAmount FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id TEXT, salary REAL, department_id INTEGER);","This query selects the first name, last name, and calculates a 'BonusAmount' as 10% of the employee's salary."
"Get the book title, author, and calculate its age based on publication year and the current year (2024), aliased as 'YearsSincePublication'.","SELECT title, author, (2024 - publication_year) AS YearsSincePublication FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price_usd REAL, stock INTEGER);","This query selects the book title, author, and computes the 'YearsSincePublication' by subtracting the 'publication_year' from 2024."
"For products with stock quantity less than 10, show their name and the remaining stock, aliased as 'LowStockQuantity'.","SELECT product_name, stock_quantity AS LowStockQuantity FROM Products WHERE stock_quantity < 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, supplier_id INTEGER);",This query selects the product name and its stock quantity (aliased as 'LowStockQuantity') for products with less than 10 items in stock.
"Retrieve the movie title and its rating, aliasing rating as 'ViewerScore'. Only include movies released after 2000.","SELECT title, rating AS ViewerScore FROM Movies WHERE release_year > 2000;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL);",This query selects the movie title and aliases the 'rating' column as 'ViewerScore' for movies released after the year 2000.
"List all order IDs and the 'Net Total' which is total_amount minus a fixed fee of 5.00, aliased as 'NetTotalAmount'.","SELECT order_id, (total_amount - 5.00) AS NetTotalAmount FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects the order ID and calculates 'NetTotalAmount' by subtracting 5.00 from 'total_amount' for each order.
"Show the employee's ID and email, but display their email in lowercase, aliased as 'LowerCaseEmail'.","SELECT employee_id, LOWER(email) AS LowerCaseEmail FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id TEXT, salary REAL, department_id INTEGER);","This query selects the employee ID and converts their email address to lowercase, aliasing the new column as 'LowerCaseEmail'."
"For books, display the title, genre, and a tag 'Popular' if price is over 20 USD, otherwise 'Standard', aliased as 'PriceCategory'.","SELECT title, genre, CASE WHEN price_usd > 20.00 THEN 'Popular' ELSE 'Standard' END AS PriceCategory FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price_usd REAL, stock INTEGER);","This query selects the book title, genre, and creates a 'PriceCategory' column based on whether the 'price_usd' is greater than 20.00."
"Get the current date and time, aliased as 'ReportGenerationTime'.",SELECT DATETIME('now') AS ReportGenerationTime;,No specific table schema needed as this is a scalar query.,This query retrieves the current date and time using the DATETIME function and aliases the result as 'ReportGenerationTime'.
"From the Products table, display product_id, product_name, and a new column 'EstimatedValue' calculated as price multiplied by stock_quantity.","SELECT product_id, product_name, price * stock_quantity AS EstimatedValue FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, supplier_id INTEGER);","This query selects the product ID, name, and computes an 'EstimatedValue' by multiplying 'price' by 'stock_quantity' for each product."
"Show the customer ID, their city, and country. Alias the city as 'CustomerCity' and country as 'CustomerCountry'.","SELECT customer_id, city AS CustomerCity, country AS CustomerCountry FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT);","This query selects the customer ID, renames 'city' to 'CustomerCity', and 'country' to 'CustomerCountry' for all customers."
Find all products that are electronics and cost less than 500 dollars.,"SELECT product_name, price, stock_quantity FROM Products WHERE category = 'Electronics' AND price < 500.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query selects the name, price, and stock quantity of products from the 'Products' table where the category is 'Electronics' AND the price is less than 500.00."
List employees who work in the 'Sales' department or have a salary greater than 75000.,"SELECT employee_id, first_name, last_name, department, salary FROM Employees WHERE department = 'Sales' OR salary > 75000.00;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT);",This query retrieves employees whose department is 'Sales' or whose salary is greater than 75000.00 from the 'Employees' table.
Show all orders placed in January 2023.,"SELECT order_id, customer_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-01-31';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects all order details for orders placed within the date range of January 1, 2023, to January 31, 2023, inclusive."
"Retrieve books published between 2000 and 2010, excluding those authored by 'Jane Austen'.","SELECT title, author, publication_year FROM Books WHERE publication_year BETWEEN 2000 AND 2010 AND NOT author = 'Jane Austen';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, price REAL, stock_count INTEGER);","This query lists books published between the years 2000 and 2010, but specifically excludes any books written by 'Jane Austen'."
Find customers who live in 'London' or 'Paris' and have an email address.,"SELECT customer_id, customer_name, city, email FROM Customers WHERE (city = 'London' OR city = 'Paris') AND email IS NOT NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT);",This query retrieves customer details for customers residing in 'London' or 'Paris' who also have an email address recorded.
List products that are not in the 'Electronics' or 'Home Appliances' categories and have less than 20 units in stock.,"SELECT product_name, category, stock_quantity FROM Products WHERE category NOT IN ('Electronics', 'Home Appliances') AND stock_quantity < 20;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);",This query selects products that do not belong to 'Electronics' or 'Home Appliances' categories and have less than 20 items in stock.
Show employees hired before 2022 who are not in the 'IT' department and earn more than 60000.,"SELECT employee_id, first_name, last_name, department, salary, hire_date FROM Employees WHERE hire_date < '2022-01-01' AND department != 'IT' AND salary > 60000.00;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT);","This query retrieves employees who were hired before January 1, 2022, are not in the 'IT' department, and have a salary greater than 60000.00."
"Find movies released in the 1990s (1990-1999) with a rating higher than 4.0, excluding those directed by 'Quentin Tarantino'.","SELECT title, director, release_year, rating FROM Movies WHERE release_year BETWEEN 1990 AND 1999 AND rating > 4.0 AND NOT director = 'Quentin Tarantino';","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, release_year INTEGER, genre TEXT, rating REAL, duration_minutes INTEGER);","This query lists movies released between 1990 and 1999 with a rating over 4.0, provided they were not directed by 'Quentin Tarantino'."
"Get a list of students whose GPA is between 3.5 and 4.0, or who enrolled in 2023.","SELECT student_id, name, gpa, enrollment_date FROM Students WHERE (gpa BETWEEN 3.5 AND 4.0) OR (CAST(SUBSTR(enrollment_date, 1, 4) AS INTEGER) = 2023);","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, name TEXT NOT NULL, major TEXT, gpa REAL, enrollment_date TEXT, status TEXT);",This query retrieves students who have a GPA between 3.5 and 4.0 (inclusive) OR who enrolled in the year 2023.
Show all vehicles that are either 'Red' or 'Blue' and have a price less than 25000.,"SELECT vehicle_id, make, model, color, price FROM Vehicles WHERE (color = 'Red' OR color = 'Blue') AND price < 25000.00;","CREATE TABLE Vehicles (vehicle_id INTEGER PRIMARY KEY, make TEXT, model TEXT, year INTEGER, color TEXT, price REAL, mileage INTEGER, status TEXT);",This query selects vehicles that are either red or blue in color and have a price lower than 25000.00.
Find products whose name starts with 'Smart' and have a price greater than 100.,"SELECT product_name, price FROM Products WHERE product_name LIKE 'Smart%' AND price > 100.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);",This query retrieves products with names starting with 'Smart' and a price greater than 100.00.
List orders placed by customer_id 101 or 102 with a total amount over 500 dollars.,"SELECT order_id, customer_id, total_amount, order_date FROM Orders WHERE (customer_id = 101 OR customer_id = 102) AND total_amount > 500.00;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects orders made by customer IDs 101 or 102, provided their total amount exceeds 500.00."
Get employees whose last name ends with 'son' and are active.,"SELECT first_name, last_name, status FROM Employees WHERE last_name LIKE '%son' AND status = 'Active';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT, status TEXT);",This query retrieves employees whose last name ends with 'son' and whose status is 'Active'.
Show customers who registered in 2022 and are not from 'USA'.,"SELECT customer_name, country, registration_date FROM Customers WHERE CAST(SUBSTR(registration_date, 1, 4) AS INTEGER) = 2022 AND country != 'USA';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT);",This query lists customers who registered in the year 2022 and are not from the 'USA'.
Find books with 'SQL' in their title that cost less than 40 dollars and have more than 5 copies in stock.,"SELECT title, price, stock_count FROM Books WHERE title LIKE '%SQL%' AND price < 40.00 AND stock_count > 5;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, price REAL, stock_count INTEGER);","This query selects books whose title contains 'SQL', are priced under 40.00, and have more than 5 copies available."
List movies with a genre of 'Action' or 'Sci-Fi' and a rating of 4.5 or higher.,"SELECT title, genre, rating FROM Movies WHERE (genre = 'Action' OR genre = 'Sci-Fi') AND rating >= 4.5;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, release_year INTEGER, genre TEXT, rating REAL, duration_minutes INTEGER);",This query retrieves movies that are either 'Action' or 'Sci-Fi' genre and have a rating of 4.5 or greater.
Retrieve employees who do not have a department assigned or whose hire date is null.,"SELECT employee_id, first_name, last_name, department, hire_date FROM Employees WHERE department IS NULL OR hire_date IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT);",This query selects employees for whom either their department is not specified or their hire date is missing.
Show products that are out of stock (stock_quantity is 0) and were last updated before 2023.,"SELECT product_name, stock_quantity, last_updated FROM Products WHERE stock_quantity = 0 AND last_updated < '2023-01-01';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query finds products that have zero stock and were last updated before January 1, 2023."
Find customers whose email does not contain 'gmail.com' and are not from 'Canada'.,"SELECT customer_name, email, country FROM Customers WHERE email NOT LIKE '%gmail.com%' AND country != 'Canada';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT);",This query retrieves customers whose email address does not contain 'gmail.com' and who are not located in 'Canada'.
"List orders with a total amount between 100 and 500 dollars, excluding those placed on a weekend.","SELECT order_id, total_amount, order_date FROM Orders WHERE total_amount BETWEEN 100.00 AND 500.00 AND STRFTIME('%w', order_date) NOT IN ('0', '6');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects orders with a total amount between 100.00 and 500.00 that were not placed on a Sunday (0) or Saturday (6).
Show students with a GPA under 2.5 or whose status is 'Probation'.,"SELECT student_id, name, gpa, status FROM Students WHERE gpa < 2.5 OR status = 'Probation';","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, name TEXT NOT NULL, major TEXT, gpa REAL, enrollment_date TEXT, status TEXT);",This query retrieves students who have a GPA less than 2.5 or whose academic status is 'Probation'.
Find vehicles older than 2015 and with mileage over 100000.,"SELECT make, model, year, mileage FROM Vehicles WHERE year < 2015 AND mileage > 100000;","CREATE TABLE Vehicles (vehicle_id INTEGER PRIMARY KEY, make TEXT, model TEXT, year INTEGER, color TEXT, price REAL, mileage INTEGER, status TEXT);","This query lists vehicles manufactured before the year 2015 and that have accumulated more than 100,000 miles."
Retrieve employees from 'HR' or 'Finance' department whose salary is not between 50000 and 80000.,"SELECT first_name, last_name, department, salary FROM Employees WHERE (department = 'HR' OR department = 'Finance') AND salary NOT BETWEEN 50000.00 AND 80000.00;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT);",This query selects employees from the 'HR' or 'Finance' departments whose salary is not within the range of 50000.00 to 80000.00.
List products that are more expensive than the average price of 'Books' category products.,"SELECT product_name, price, category FROM Products WHERE price > (SELECT AVG(price) FROM Products WHERE category = 'Books');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);",This query finds products whose price is greater than the average price of all products categorized as 'Books'.
Show customers who have not placed any orders yet.,"SELECT customer_name, email FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query retrieves customers who do not have any corresponding entries in the 'Orders' table, meaning they haven't placed any orders."
"Find movies that are 'Comedy' or 'Drama' and were released after 2000, but have a duration less than 90 minutes.","SELECT title, genre, release_year, duration_minutes FROM Movies WHERE (genre = 'Comedy' OR genre = 'Drama') AND release_year > 2000 AND duration_minutes < 90;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, release_year INTEGER, genre TEXT, rating REAL, duration_minutes INTEGER);",This query selects 'Comedy' or 'Drama' movies released after 2000 that have a running time of less than 90 minutes.
Retrieve suppliers whose contact person is not known (NULL) and are based in 'Germany'.,"SELECT supplier_name, city, country FROM Suppliers WHERE contact_person IS NULL AND country = 'Germany';","CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT NOT NULL, contact_person TEXT, city TEXT, country TEXT, phone TEXT);",This query finds suppliers based in 'Germany' for whom the contact person's information is not available.
"List all products that have 'Pro' in their name but are not in the 'Laptops' category, and their stock quantity is between 10 and 50.","SELECT product_name, category, stock_quantity FROM Products WHERE product_name LIKE '%Pro%' AND category != 'Laptops' AND stock_quantity BETWEEN 10 AND 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query selects products that have 'Pro' in their name, are not in the 'Laptops' category, and have a stock quantity between 10 and 50."
Show employees who were hired in the last 6 months.,"SELECT employee_id, first_name, last_name, hire_date FROM Employees WHERE hire_date >= DATE('now', '-6 months');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT);",This query retrieves employees who were hired within the last six months from the current date.
Find orders placed in 2023 with a total amount less than 100 or greater than 1000.,"SELECT order_id, customer_id, total_amount, order_date FROM Orders WHERE CAST(SUBSTR(order_date, 1, 4) AS INTEGER) = 2023 AND (total_amount < 100.00 OR total_amount > 1000.00);","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects orders placed in the year 2023 where the total amount is either less than 100.00 or greater than 1000.00.
"List students who are either 'Computer Science' or 'Engineering' majors, but only if their GPA is above 3.8 and they enrolled before 2023.","SELECT student_id, name, major, gpa, enrollment_date FROM Students WHERE (major = 'Computer Science' OR major = 'Engineering') AND gpa > 3.8 AND CAST(SUBSTR(enrollment_date, 1, 4) AS INTEGER) < 2023;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, name TEXT NOT NULL, major TEXT, gpa REAL, enrollment_date TEXT, status TEXT);",This query retrieves students majoring in 'Computer Science' or 'Engineering' who have a GPA greater than 3.8 and enrolled before the year 2023.
Get customer names and their corresponding order IDs.,"SELECT C.customer_name, O.order_id FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Joins Customers and Orders tables on 'customer_id' to list customer names and their associated order IDs.
"List product names and the names of customers who purchased them, specifically for orders placed in 2023.","SELECT P.product_name, C.customer_name FROM Products P INNER JOIN OrderDetails OD ON P.product_id = OD.product_id INNER JOIN Orders O ON OD.order_id = O.order_id INNER JOIN Customers C ON O.customer_id = C.customer_id WHERE STRFTIME('%Y', O.order_date) = '2023';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","Retrieves product and customer names for orders placed in 2023 by joining Products, OrderDetails, Orders, and Customers tables."
Find the total number of employees in each department.,"SELECT D.department_name, COUNT(E.employee_id) AS total_employees FROM Departments D INNER JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);",Counts employees per department by joining Departments and Employees tables and grouping by department name.
"List customers and the branches of banks they might frequent, assuming branches are in the same city as customers.","SELECT C.customer_name, B.branch_name FROM Customers C INNER JOIN BankBranches B ON C.city = B.city;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT); CREATE TABLE BankBranches (branch_id INTEGER PRIMARY KEY, branch_name TEXT, city TEXT);","Joins Customers and BankBranches tables where their 'city' columns match, listing potential customer-branch relationships."
Show the names of employees and their managers.,"SELECT E.employee_name AS Employee, M.employee_name AS Manager FROM Employees E INNER JOIN Employees M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, manager_id INTEGER, salary REAL);",Uses a self-join on the Employees table to pair each employee with their manager.
List all authors and the names of the publishers who published their books.,"SELECT DISTINCT A.author_name, P.publisher_name FROM Authors A INNER JOIN Books B ON A.author_id = B.author_id INNER JOIN Publishers P ON B.publisher_id = P.publisher_id;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, nationality TEXT); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER);","Retrieves unique author and publisher names by joining Authors, Books, and Publishers tables."
Get the titles of courses and the names of the instructors teaching them.,"SELECT C.course_title, I.instructor_name FROM Courses C INNER JOIN Instructors I ON C.instructor_id = I.instructor_id;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_title TEXT, instructor_id INTEGER, credits INTEGER); CREATE TABLE Instructors (instructor_id INTEGER PRIMARY KEY, instructor_name TEXT, department TEXT);",Lists course titles and the names of their respective instructors by joining Courses and Instructors tables.
"For each flight, display the flight number, origin airport name, and destination airport name.","SELECT F.flight_number, OA.airport_name AS OriginAirport, DA.airport_name AS DestinationAirport FROM Flights F INNER JOIN Airports OA ON F.origin_airport_id = OA.airport_id INNER JOIN Airports DA ON F.destination_airport_id = DA.airport_id;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT, origin_airport_id INTEGER, destination_airport_id INTEGER, airline_id INTEGER); CREATE TABLE Airports (airport_id INTEGER PRIMARY KEY, airport_name TEXT, city TEXT, country TEXT);",Joins the Flights table with the Airports table twice (aliased as OA and DA) to show origin and destination airport names for each flight.
List product names and the names of their suppliers.,"SELECT P.product_name, S.supplier_name FROM Products P INNER JOIN Suppliers S ON P.supplier_id = S.supplier_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, supplier_id INTEGER, price REAL); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, contact_person TEXT);",Retrieves product names and their corresponding supplier names by joining Products and Suppliers tables.
Find the names of patients and the doctors they have appointments with.,"SELECT P.patient_name, D.doctor_name FROM Patients P INNER JOIN Appointments A ON P.patient_id = A.patient_id INNER JOIN Doctors D ON A.doctor_id = D.doctor_id;","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT, date_of_birth TEXT); CREATE TABLE Doctors (doctor_id INTEGER PRIMARY KEY, doctor_name TEXT, specialty TEXT); CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, appointment_date TEXT);","Lists patient names and the doctors they are scheduled to see by joining Patients, Appointments, and Doctors tables."
Display the model name of cars and the name of their manufacturer.,"SELECT C.model_name, M.manufacturer_name FROM Cars C INNER JOIN Manufacturers M ON C.manufacturer_id = M.manufacturer_id;","CREATE TABLE Cars (car_id INTEGER PRIMARY KEY, model_name TEXT, manufacturer_id INTEGER, year INTEGER); CREATE TABLE Manufacturers (manufacturer_id INTEGER PRIMARY KEY, manufacturer_name TEXT, country TEXT);",Retrieves car model names and their manufacturer names by joining Cars and Manufacturers tables.
"For each project, show its name and the name of the department managing it.","SELECT P.project_name, D.department_name FROM Projects P INNER JOIN Departments D ON P.managing_department_id = D.department_id;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, managing_department_id INTEGER, budget REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",Links projects to their managing departments by joining Projects and Departments tables.
List the names of customers who have purchased products from the 'Electronics' category.,SELECT DISTINCT C.customer_name FROM Customers C INNER JOIN Orders O ON C.customer_id = O.customer_id INNER JOIN OrderDetails OD ON O.order_id = OD.order_id INNER JOIN Products P ON OD.product_id = P.product_id WHERE P.category = 'Electronics';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","Finds unique customer names who bought 'Electronics' products by joining Customers, Orders, OrderDetails, and Products tables."
Show employee names and the names of the projects they are assigned to.,"SELECT E.employee_name, Pr.project_name FROM Employees E INNER JOIN ProjectAssignments PA ON E.employee_id = PA.employee_id INNER JOIN Projects Pr ON PA.project_id = Pr.project_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, role TEXT);","Lists employees and their assigned projects by joining Employees, ProjectAssignments, and Projects tables."
Display book titles along with their genre names.,"SELECT B.title, G.genre_name FROM Books B INNER JOIN Genres G ON B.genre_id = G.genre_id;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, genre_id INTEGER); CREATE TABLE Genres (genre_id INTEGER PRIMARY KEY, genre_name TEXT);",Retrieves book titles and their associated genre names by joining Books and Genres tables.
List the names of students and the titles of the courses they are currently enrolled in.,"SELECT S.student_name, C.course_title FROM Students S INNER JOIN Enrollments E ON S.student_id = E.student_id INNER JOIN Courses C ON E.course_id = C.course_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, date_of_birth TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_title TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT);","Shows student names and their enrolled course titles by joining Students, Enrollments, and Courses tables."
Calculate the total sales amount for each product category.,"SELECT P.category, SUM(OD.quantity * OD.price_per_unit) AS total_category_sales FROM Products P INNER JOIN OrderDetails OD ON P.product_id = OD.product_id GROUP BY P.category;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",Calculates the sum of sales for each product category by joining Products and OrderDetails and grouping by category.
Display employee names and their corresponding salary grade.,"SELECT E.employee_name, SG.grade_level FROM Employees E INNER JOIN SalaryGrades SG ON E.salary BETWEEN SG.min_salary AND SG.max_salary;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, salary REAL); CREATE TABLE SalaryGrades (grade_id INTEGER PRIMARY KEY, grade_level TEXT, min_salary REAL, max_salary REAL);",Joins Employees and SalaryGrades tables to show each employee's name and their salary grade based on their salary range.
"Retrieve all order IDs, customer names, product names, and quantity for each ordered item.","SELECT O.order_id, C.customer_name, P.product_name, OD.quantity FROM Orders O INNER JOIN Customers C ON O.customer_id = C.customer_id INNER JOIN OrderDetails OD ON O.order_id = OD.order_id INNER JOIN Products P ON OD.product_id = P.product_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","Provides a comprehensive list of all order details, including customer name, product name, and quantity, by joining four tables."
List the names of directors and the movies they directed that were released after the year 2000.,"SELECT D.director_name, M.movie_title FROM Directors D INNER JOIN Movies M ON D.director_id = M.director_id WHERE M.release_year > 2000;","CREATE TABLE Directors (director_id INTEGER PRIMARY KEY, director_name TEXT); CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, movie_title TEXT, director_id INTEGER, release_year INTEGER);",Shows director names and their movies released after 2000 by joining Directors and Movies tables.
Count the number of flights operated by each airline.,"SELECT A.airline_name, COUNT(F.flight_id) AS number_of_flights FROM Airlines A INNER JOIN Flights F ON A.airline_id = F.airline_id GROUP BY A.airline_name;","CREATE TABLE Airlines (airline_id INTEGER PRIMARY KEY, airline_name TEXT); CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, airline_id INTEGER, flight_number TEXT);",Counts flights per airline by joining Airlines and Flights tables and grouping by airline name.
Find the names of suppliers who provide products in the 'Food' category.,SELECT DISTINCT S.supplier_name FROM Suppliers S INNER JOIN Products P ON S.supplier_id = P.supplier_id WHERE P.category = 'Food';,"CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, supplier_id INTEGER, category TEXT);",Retrieves unique supplier names who supply products categorized as 'Food' by joining Suppliers and Products tables.
List departments where the average employee salary is greater than 60000.,"SELECT D.department_name, AVG(E.salary) AS average_salary FROM Departments D INNER JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name HAVING AVG(E.salary) > 60000;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);","Calculates the average salary per department and filters for departments where this average exceeds 60000, joining Departments and Employees."
Find the names of students enrolled in courses taught by 'Dr. Smith'.,SELECT DISTINCT S.student_name FROM Students S INNER JOIN Enrollments E ON S.student_id = E.student_id INNER JOIN Courses C ON E.course_id = C.course_id INNER JOIN Instructors I ON C.instructor_id = I.instructor_id WHERE I.instructor_name = 'Dr. Smith';,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_title TEXT, instructor_id INTEGER); CREATE TABLE Instructors (instructor_id INTEGER PRIMARY KEY, instructor_name TEXT);","Lists unique student names enrolled in courses taught by 'Dr. Smith' by joining Students, Enrollments, Courses, and Instructors tables."
"Get all product sales details, including customer names, for orders placed in January 2024.","SELECT O.order_id, C.customer_name, P.product_name, OD.quantity, OD.price_per_unit FROM Orders O INNER JOIN Customers C ON O.customer_id = C.customer_id INNER JOIN OrderDetails OD ON O.order_id = OD.order_id INNER JOIN Products P ON OD.product_id = P.product_id WHERE STRFTIME('%Y-%m', O.order_date) = '2024-01';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","Retrieves detailed sales information for orders in January 2024, including customer and product details, by joining four tables."
Count the number of books published by each publisher located in 'USA'.,"SELECT P.publisher_name, COUNT(B.book_id) AS number_of_books FROM Publishers P INNER JOIN Books B ON P.publisher_id = B.publisher_id WHERE P.country = 'USA' GROUP BY P.publisher_name;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, nationality TEXT); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER);",Counts books published by US-based publishers by joining Publishers and Books tables and filtering by country.
List the names of patients who have appointments on '2024-03-15'.,"SELECT P.patient_name, D.doctor_name FROM Patients P INNER JOIN Appointments A ON P.patient_id = A.patient_id INNER JOIN Doctors D ON A.doctor_id = D.doctor_id WHERE A.appointment_date = '2024-03-15';","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT, date_of_birth TEXT); CREATE TABLE Doctors (doctor_id INTEGER PRIMARY KEY, doctor_name TEXT, specialty TEXT); CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, appointment_date TEXT);",Filters for appointments on '2024-03-15' and retrieves corresponding patient and doctor names by joining three tables.
Show all car models manufactured by 'Toyota'.,SELECT C.model_name FROM Cars C INNER JOIN Manufacturers M ON C.manufacturer_id = M.manufacturer_id WHERE M.manufacturer_name = 'Toyota';,"CREATE TABLE Cars (car_id INTEGER PRIMARY KEY, model_name TEXT, manufacturer_id INTEGER, year INTEGER); CREATE TABLE Manufacturers (manufacturer_id INTEGER PRIMARY KEY, manufacturer_name TEXT, country TEXT);",Lists car models produced by 'Toyota' by joining Cars and Manufacturers tables and filtering by manufacturer name.
List project names and the count of employees assigned to them.,"SELECT Pr.project_name, COUNT(PA.employee_id) AS assigned_employees FROM Projects Pr INNER JOIN ProjectAssignments PA ON Pr.project_id = PA.project_id GROUP BY Pr.project_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, role TEXT);",Counts assigned employees for each project by joining Projects and ProjectAssignments tables and grouping by project name.
"For each manager, list the names of employees directly reporting to them.","SELECT M.employee_name AS ManagerName, E.employee_name AS ReportName FROM Employees M INNER JOIN Employees E ON M.employee_id = E.manager_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, manager_id INTEGER, salary REAL);",Uses a self-join on the Employees table to display managers and the employees who report directly to them.
"List all customers and any orders they have placed, including customers who haven't placed any orders.","SELECT C.customer_id, C.customer_name, O.order_id, O.order_date, O.total_amount FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a LEFT JOIN to retrieve all records from the 'Customers' table and the matching records from the 'Orders' table. If a customer has no orders, the columns from the 'Orders' table will show NULLs for that customer."
"Retrieve all employees and their department names. If an employee is not assigned to a department, still list them.","SELECT E.employee_id, E.employee_name, E.hire_date, D.department_name FROM Employees AS E LEFT JOIN Departments AS D ON E.department_id = D.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, hire_date TEXT NOT NULL, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query uses a LEFT JOIN to combine employee information with their respective department details. Employees without an assigned department (where department_id is NULL) will still appear in the result set, with NULL values for department-related columns."
Find all products and their associated category name. Include products that might not have a category assigned.,"SELECT P.product_id, P.product_name, P.price, C.category_name FROM Products AS P LEFT JOIN Categories AS C ON P.category_id = C.category_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL);","A LEFT JOIN is used here to list every product. If a product's category_id does not link to an existing category, the category_name will be NULL, ensuring all products are displayed."
List all authors and the titles of their books published after 2000. Include authors who have no books or no books published after 2000.,"SELECT A.author_id, A.author_name, B.book_title, B.publication_year FROM Authors AS A LEFT JOIN Books AS B ON A.author_id = B.author_id AND B.publication_year > 2000;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, author_id INTEGER NOT NULL, book_title TEXT NOT NULL, publication_year INTEGER NOT NULL, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query performs a LEFT JOIN with an additional condition in the ON clause. It retrieves all authors and only books published after 2000. Authors without such books, or no books at all, are still included."
"Show all students and the courses they are enrolled in, if any. Only include enrollments from the current year.","SELECT S.student_id, S.student_name, E.enrollment_date, C.course_name FROM Students AS S LEFT JOIN Enrollments AS E ON S.student_id = E.student_id AND STRFTIME('%Y', E.enrollment_date) = STRFTIME('%Y', 'now') LEFT JOIN Courses AS C ON E.course_id = C.course_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT NOT NULL, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query uses two LEFT JOINs. The first joins Students to Enrollments, filtering for current year enrollments in the ON clause. The second LEFT JOIN connects to Courses. All students are listed, with course details only for current year enrollments."
"Count the number of orders for each customer, including customers who have placed zero orders.","SELECT C.customer_name, COUNT(O.order_id) AS order_count FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name ORDER BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a LEFT JOIN to ensure all customers are included. COUNT(O.order_id) counts non-NULL order_id values, correctly returning 0 for customers with no orders. Results are grouped by customer name."
"Find all departments and the total salary of their employees. Include departments with no employees, showing 0 for total salary.","SELECT D.department_name, COALESCE(SUM(E.salary), 0) AS total_department_salary FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_id, D.department_name ORDER BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, hire_date TEXT NOT NULL, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query uses a LEFT JOIN to list all departments. COALESCE(SUM(E.salary), 0) ensures that departments with no employees (where SUM(E.salary) would be NULL) display 0 for their total salary."
"List all products and their suppliers' names, including products without a supplier.","SELECT P.product_name, S.supplier_name FROM Products AS P LEFT JOIN Suppliers AS S ON P.supplier_id = S.supplier_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, supplier_id INTEGER, price REAL, FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT NOT NULL, contact_email TEXT);","A simple LEFT JOIN is used to list every product and its supplier. Products with a NULL supplier_id or no matching supplier will still appear, with NULL for supplier_name."
Find customers who have never placed an order.,SELECT C.customer_name FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id WHERE O.order_id IS NULL;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a LEFT JOIN to combine customers and their orders. By filtering WHERE O.order_id IS NULL, it specifically selects customers for whom no matching order was found in the 'Orders' table, meaning they have placed no orders."
Identify employees who are not assigned to any project.,SELECT E.employee_name FROM Employees AS E LEFT JOIN ProjectAssignments AS PA ON E.employee_id = PA.employee_id WHERE PA.project_id IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, position TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER NOT NULL, project_id INTEGER NOT NULL, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));","A LEFT JOIN between 'Employees' and 'ProjectAssignments' is performed. The WHERE clause `PA.project_id IS NULL` filters for employees who do not have any corresponding entries in the 'ProjectAssignments' table, thus identifying unassigned employees."
"List all courses and any students enrolled, including courses with no current enrollments.","SELECT Co.course_name, S.student_name FROM Courses AS Co LEFT JOIN Enrollments AS E ON Co.course_id = E.course_id LEFT JOIN Students AS S ON E.student_id = S.student_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT NOT NULL, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query uses two LEFT JOINs to connect courses to their enrollments and then to students. This ensures that all courses are listed, even if they have no students enrolled, with student details appearing as NULL when no enrollment exists."
"Get all books and their genre name, including books where the genre is not specified. Order by book title.","SELECT B.book_title, G.genre_name FROM Books AS B LEFT JOIN Genres AS G ON B.genre_id = G.genre_id ORDER BY B.book_title;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, book_title TEXT NOT NULL, author_id INTEGER, genre_id INTEGER, FOREIGN KEY (genre_id) REFERENCES Genres(genre_id)); CREATE TABLE Genres (genre_id INTEGER PRIMARY KEY, genre_name TEXT NOT NULL);","This query performs a LEFT JOIN from Books to Genres. All books are returned, and if a book has no genre_id or the ID doesn't match a genre, the genre_name will be NULL. Results are sorted by book title."
Show all suppliers and the total quantity of products they supply. Display 0 for suppliers who supply no products.,"SELECT S.supplier_name, COALESCE(SUM(P.stock_quantity), 0) AS total_supplied_quantity FROM Suppliers AS S LEFT JOIN Products AS P ON S.supplier_id = P.supplier_id GROUP BY S.supplier_id, S.supplier_name ORDER BY S.supplier_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, supplier_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT NOT NULL, contact_email TEXT);","This query uses a LEFT JOIN to get all suppliers. It then sums the stock_quantity of products for each supplier. COALESCE(SUM(P.stock_quantity), 0) ensures that suppliers with no products show a sum of 0 instead of NULL."
"List all products and their latest order date, if any. Products that haven't been ordered should still appear.","SELECT P.product_name, MAX(OD.order_date) AS latest_order_date FROM Products AS P LEFT JOIN OrderDetails AS OD ON P.product_id = OD.product_id GROUP BY P.product_id, P.product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT NOT NULL); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query uses a LEFT JOIN from 'Products' to 'OrderDetails' to include all products. GROUP BY combined with MAX(OD.order_date) finds the latest order date for each product. Products not in any order details will have a NULL latest_order_date.
Retrieve all cities and the number of employees located there. Include cities with no employees.,"SELECT L.city, COALESCE(COUNT(E.employee_id), 0) AS employee_count FROM Locations AS L LEFT JOIN Employees AS E ON L.location_id = E.location_id GROUP BY L.city ORDER BY L.city;","CREATE TABLE Locations (location_id INTEGER PRIMARY KEY, city TEXT NOT NULL, state TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, location_id INTEGER, FOREIGN KEY (location_id) REFERENCES Locations(location_id));","A LEFT JOIN from 'Locations' to 'Employees' ensures all cities are considered. COUNT(E.employee_id) counts employees per city, and COALESCE handles cities with no employees, showing 0."
Find all customers who have placed orders but their orders' total amount is below $50.,SELECT DISTINCT C.customer_name FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id WHERE O.total_amount < 50 AND O.order_id IS NOT NULL;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a LEFT JOIN and filters for orders with a total amount less than $50. The `O.order_id IS NOT NULL` condition ensures that only customers with at least one order are considered, excluding those who haven't ordered at all."
"List all departments and their associated projects, if any. Also, include projects that are not yet assigned to any department.","SELECT D.department_name, P.project_name FROM Departments AS D LEFT JOIN Projects AS P ON D.department_id = P.department_id UNION ALL SELECT D.department_name, P.project_name FROM Projects AS P LEFT JOIN Departments AS D ON P.department_id = D.department_id WHERE D.department_id IS NULL;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query emulates a FULL OUTER JOIN using UNION ALL. The first part gets all departments and their projects. The second part gets projects not linked to any department (where department_id is NULL from the perspective of the left-joined Departments table) and combines them, providing a complete view of all departments and all projects."
"Show all employees and all teams, indicating which employees belong to which teams, and also listing employees not on a team and teams with no members.","SELECT E.employee_name, T.team_name FROM Employees AS E LEFT JOIN TeamMemberships AS TM ON E.employee_id = TM.employee_id LEFT JOIN Teams AS T ON TM.team_id = T.team_id UNION ALL SELECT E.employee_name, T.team_name FROM Teams AS T LEFT JOIN TeamMemberships AS TM ON T.team_id = TM.team_id LEFT JOIN Employees AS E ON TM.employee_id = E.employee_id WHERE E.employee_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL); CREATE TABLE Teams (team_id INTEGER PRIMARY KEY, team_name TEXT NOT NULL); CREATE TABLE TeamMemberships (membership_id INTEGER PRIMARY KEY, employee_id INTEGER NOT NULL, team_id INTEGER NOT NULL, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (team_id) REFERENCES Teams(team_id));","This emulates a FULL OUTER JOIN across Employees, TeamMemberships, and Teams. The first SELECT gets all employees and their teams (or NULL if no team). The second SELECT gets all teams and their members, but specifically filters for teams that didn't have any matching employee in the first part (i.e., teams with no members), ensuring both sides are fully represented."
"List all product categories and all products. For each category, show its products. For products not categorized, show them with NULL category. For categories with no products, show them with NULL product.","SELECT C.category_name, P.product_name FROM Categories AS C LEFT JOIN Products AS P ON C.category_id = P.category_id UNION ALL SELECT C.category_name, P.product_name FROM Products AS P LEFT JOIN Categories AS C ON P.category_id = C.category_id WHERE C.category_id IS NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL);","This query emulates a FULL OUTER JOIN between 'Categories' and 'Products'. The first LEFT JOIN retrieves all categories and their products. The second LEFT JOIN, combined with `WHERE C.category_id IS NULL`, specifically captures products that are not assigned to any category, thus providing a complete bidirectional view."
"Display all users and all their associated posts, including users with no posts and posts with no associated user (orphan posts).","SELECT U.user_id, U.username, P.post_id, P.post_content FROM Users AS U LEFT JOIN Posts AS P ON U.user_id = P.user_id UNION ALL SELECT U.user_id, U.username, P.post_id, P.post_content FROM Posts AS P LEFT JOIN Users AS U ON P.user_id = U.user_id WHERE U.user_id IS NULL;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT NOT NULL, email TEXT); CREATE TABLE Posts (post_id INTEGER PRIMARY KEY, user_id INTEGER, post_content TEXT NOT NULL, post_date TEXT, FOREIGN KEY (user_id) REFERENCES Users(user_id));","This query emulates a FULL OUTER JOIN between 'Users' and 'Posts'. It lists every user with their posts, and every post with its user. The UNION ALL part ensures that users without posts and posts without a valid user (where user_id is NULL or references a non-existent user) are all included."
"List all movies and their directors, including movies without a director and directors who haven't directed any movies in the database.","SELECT M.movie_title, D.director_name FROM Movies AS M LEFT JOIN Directors AS D ON M.director_id = D.director_id UNION ALL SELECT M.movie_title, D.director_name FROM Directors AS D LEFT JOIN Movies AS M ON D.director_id = M.director_id WHERE M.movie_id IS NULL;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, movie_title TEXT NOT NULL, release_year INTEGER, director_id INTEGER, FOREIGN KEY (director_id) REFERENCES Directors(director_id)); CREATE TABLE Directors (director_id INTEGER PRIMARY KEY, director_name TEXT NOT NULL, birth_year INTEGER);","This query simulates a FULL OUTER JOIN. The first part gets all movies and their directors. The second part, joined from Directors to Movies and filtered by `M.movie_id IS NULL`, finds directors who are not associated with any movie, then combines these results to show everything."
"Display all customers and all sales transactions. Show customers who have not made a sale, and sales that are not linked to any customer.","SELECT C.customer_id, C.customer_name, S.sale_id, S.sale_date, S.amount FROM Customers AS C LEFT JOIN Sales AS S ON C.customer_id = S.customer_id UNION ALL SELECT C.customer_id, C.customer_name, S.sale_id, S.sale_date, S.amount FROM Sales AS S LEFT JOIN Customers AS C ON S.customer_id = C.customer_id WHERE C.customer_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, customer_id INTEGER, sale_date TEXT NOT NULL, amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query performs a full outer join emulation between 'Customers' and 'Sales'. It provides a combined list showing all customers (including those with no sales) and all sales (including those potentially not linked to a customer, if customer_id in sales is NULL or invalid)."
"Get a list of all products and their associated order details, including products that have never been ordered and order details that reference non-existent products.","SELECT P.product_id, P.product_name, OD.order_detail_id, OD.quantity FROM Products AS P LEFT JOIN OrderDetails AS OD ON P.product_id = OD.product_id UNION ALL SELECT P.product_id, P.product_name, OD.order_detail_id, OD.quantity FROM OrderDetails AS OD LEFT JOIN Products AS P ON OD.product_id = P.product_id WHERE P.product_id IS NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER, quantity INTEGER NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query emulates a FULL OUTER JOIN. It shows all products and any order details they are part of. Additionally, it lists any order details that might reference a product_id that does not exist in the Products table, providing a complete view of both datasets."
"Show all projects and all tasks. List projects without tasks, and tasks not assigned to any project.","SELECT Pr.project_id, Pr.project_name, T.task_id, T.task_name FROM Projects AS Pr LEFT JOIN Tasks AS T ON Pr.project_id = T.project_id UNION ALL SELECT Pr.project_id, Pr.project_name, T.task_id, T.task_name FROM Tasks AS T LEFT JOIN Projects AS Pr ON T.project_id = Pr.project_id WHERE Pr.project_id IS NULL;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, budget REAL); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT NOT NULL, project_id INTEGER, status TEXT, FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query uses a UNION ALL to emulate a FULL OUTER JOIN, combining all projects with their tasks, and also including tasks that might not be assigned to any project (orphan tasks) and projects that have no tasks."
"List all countries and the number of customers in each, including countries with no customers.","SELECT Co.country_name, COUNT(C.customer_id) AS customer_count FROM Countries AS Co LEFT JOIN Customers AS C ON Co.country_id = C.country_id GROUP BY Co.country_id, Co.country_name ORDER BY Co.country_name;","CREATE TABLE Countries (country_id INTEGER PRIMARY KEY, country_name TEXT NOT NULL); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, country_id INTEGER, FOREIGN KEY (country_id) REFERENCES Countries(country_id));","This query uses a LEFT JOIN to ensure all countries are listed. It then counts the number of customers. Countries with no customers will have a count of 0, as COUNT(column) ignores NULLs generated by the LEFT JOIN for unmatched rows."
"Show all instructors and the courses they teach. Include instructors who teach no courses, and courses that have no assigned instructor.","SELECT I.instructor_name, C.course_name FROM Instructors AS I LEFT JOIN Courses AS C ON I.instructor_id = C.instructor_id UNION ALL SELECT I.instructor_name, C.course_name FROM Courses AS C LEFT JOIN Instructors AS I ON C.instructor_id = I.instructor_id WHERE I.instructor_id IS NULL;","CREATE TABLE Instructors (instructor_id INTEGER PRIMARY KEY, instructor_name TEXT NOT NULL, department TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, instructor_id INTEGER, FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id));","This query emulates a FULL OUTER JOIN between Instructors and Courses. It lists all instructors with their courses, and all courses with their instructors. Instructors without courses and courses without instructors are also included."
Find all products that have never been ordered.,SELECT P.product_name FROM Products AS P LEFT JOIN OrderDetails AS OD ON P.product_id = OD.product_id WHERE OD.order_detail_id IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query uses a LEFT JOIN to combine products with order details. By filtering `WHERE OD.order_detail_id IS NULL`, it identifies products that have no matching entry in the 'OrderDetails' table, meaning they have never been ordered."
List all employees and their manager's name. Employees who do not have a manager should still be listed.,"SELECT E.employee_name AS employee, M.employee_name AS manager FROM Employees AS E LEFT JOIN Employees AS M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, manager_id INTEGER, salary REAL, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This query uses a LEFT JOIN to perform a self-join on the 'Employees' table. It matches employees with their managers (based on manager_id). Employees without a manager (manager_id is NULL) will still appear, with NULL for the manager's name."
"Display all artists and their albums, including artists with no albums, and albums without an artist (if allowed).","SELECT A.artist_name, Al.album_title FROM Artists AS A LEFT JOIN Albums AS Al ON A.artist_id = Al.artist_id UNION ALL SELECT A.artist_name, Al.album_title FROM Albums AS Al LEFT JOIN Artists AS A ON Al.artist_id = A.artist_id WHERE A.artist_id IS NULL;","CREATE TABLE Artists (artist_id INTEGER PRIMARY KEY, artist_name TEXT NOT NULL, genre TEXT); CREATE TABLE Albums (album_id INTEGER PRIMARY KEY, album_title TEXT NOT NULL, artist_id INTEGER, release_year INTEGER, FOREIGN KEY (artist_id) REFERENCES Artists(artist_id));","This query emulates a FULL OUTER JOIN to list all artists and their albums. It ensures that artists who have no albums and albums that might not be linked to an artist (e.g., if artist_id is NULL or references non-existent artist) are all included."
Show all departments and the number of employees hired after 2020 in each. Include departments with no such employees.,"SELECT D.department_name, COUNT(E.employee_id) AS new_hires_count FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id AND SUBSTR(E.hire_date, 1, 4) > '2020' GROUP BY D.department_id, D.department_name ORDER BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, hire_date TEXT NOT NULL, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query uses a LEFT JOIN with a condition in the ON clause to count employees hired after 2020 for each department. All departments are listed, and `COUNT(E.employee_id)` will be 0 for departments with no employees hired after 2020, or no employees at all."
"Retrieve all customer IDs who have placed orders in 2023, and list their names. If a customer has no orders in 2023, still list their ID and name.","SELECT C.customer_id, C.customer_name, O.order_id FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id AND STRFTIME('%Y', O.order_date) = '2023';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a LEFT JOIN with a date filter in the ON clause. It returns all customers. If a customer placed orders in 2023, those order IDs are shown; otherwise, O.order_id will be NULL for customers without 2023 orders or any orders at all."
"Get a list of all vehicles and their current rental status (rental ID and return date), including vehicles that are not currently rented.","SELECT V.vehicle_id, V.make, V.model, R.rental_id, R.return_date FROM Vehicles AS V LEFT JOIN Rentals AS R ON V.vehicle_id = R.vehicle_id AND R.actual_return_date IS NULL;","CREATE TABLE Vehicles (vehicle_id INTEGER PRIMARY KEY, make TEXT NOT NULL, model TEXT NOT NULL, year INTEGER); CREATE TABLE Rentals (rental_id INTEGER PRIMARY KEY, vehicle_id INTEGER NOT NULL, customer_id INTEGER NOT NULL, rental_date TEXT NOT NULL, actual_return_date TEXT, FOREIGN KEY (vehicle_id) REFERENCES Vehicles(vehicle_id));",This query uses a LEFT JOIN to list all vehicles. The join condition `R.actual_return_date IS NULL` specifically links only current (unreturned) rentals. Vehicles not currently rented or not in the 'Rentals' table at all will show NULL for rental details.
List all patients and their last appointment date. Include patients with no recorded appointments.,"SELECT P.patient_id, P.patient_name, MAX(A.appointment_date) AS last_appointment FROM Patients AS P LEFT JOIN Appointments AS A ON P.patient_id = A.patient_id GROUP BY P.patient_id, P.patient_name ORDER BY P.patient_name;","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT NOT NULL, dob TEXT); CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER NOT NULL, appointment_date TEXT NOT NULL, reason TEXT, FOREIGN KEY (patient_id) REFERENCES Patients(patient_id));",This query uses a LEFT JOIN to ensure all patients are included. `MAX(A.appointment_date)` retrieves the latest appointment date for each patient. Patients with no appointments will have NULL in the 'last_appointment' column.
"List all individuals from 'PotentialCustomers' and 'ConfirmedLeads', showing which individuals are in one list, the other, or both.","SELECT PC.person_id AS potential_id, PC.person_name AS potential_name, CL.lead_id AS lead_id, CL.lead_name AS lead_name FROM PotentialCustomers AS PC LEFT JOIN ConfirmedLeads AS CL ON PC.person_id = CL.lead_id UNION ALL SELECT PC.person_id AS potential_id, PC.person_name AS potential_name, CL.lead_id AS lead_id, CL.lead_name AS lead_name FROM ConfirmedLeads AS CL LEFT JOIN PotentialCustomers AS PC ON CL.lead_id = PC.person_id WHERE PC.person_id IS NULL;","CREATE TABLE PotentialCustomers (person_id INTEGER PRIMARY KEY, person_name TEXT NOT NULL, email TEXT); CREATE TABLE ConfirmedLeads (lead_id INTEGER PRIMARY KEY, lead_name TEXT NOT NULL, source TEXT);","This query emulates a FULL OUTER JOIN. The first part gets all potential customers and their matching confirmed leads. The second part, using a LEFT JOIN from ConfirmedLeads to PotentialCustomers and filtering `WHERE PC.person_id IS NULL`, adds confirmed leads that do not have a corresponding entry in PotentialCustomers. This ensures a comprehensive list from both tables."
Find the number of orders for each customer who has placed more than 5 orders.,"SELECT customer_id, COUNT(order_id) AS num_orders FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 5;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query counts the number of orders for each unique customer and then filters those results to show only customers who have placed more than 5 orders.
"List departments where the average employee salary is above $60,000.","SELECT department, AVG(salary) AS avg_salary FROM Employees GROUP BY department HAVING AVG(salary) > 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL, hire_date TEXT);","The query calculates the average salary for each department and returns only those departments where this average exceeds $60,000."
Show product categories with at least 10 products that have an average price over $50.,"SELECT category, COUNT(product_id) AS total_products, AVG(price) AS avg_price FROM Products GROUP BY category HAVING COUNT(product_id) >= 10 AND AVG(price) > 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query groups products by category, then filters for categories that have at least 10 products and an average price greater than $50."
Retrieve the customer IDs and their total spent amount for customers who have spent more than $1000 in total.,"SELECT customer_id, SUM(total_amount) AS total_spent FROM Orders GROUP BY customer_id HAVING SUM(total_amount) > 1000;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query calculates the sum of `total_amount` for each customer and includes only those customers whose total spending exceeds $1000.
"Find cities where the maximum salary of an employee is less than $75,000.","SELECT city, MAX(salary) AS max_salary FROM Employees GROUP BY city HAVING MAX(salary) < 75000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL, hire_date TEXT, city TEXT);","The query determines the highest salary in each city and lists cities where this maximum salary is less than $75,000."
List all order statuses that appear more than 20 times.,"SELECT status, COUNT(order_id) AS count_status FROM Orders GROUP BY status HAVING COUNT(order_id) > 20;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query groups orders by their status and shows only those statuses that occur more than 20 times.
"Identify products with an average unit price (across all their order items) greater than $20, but only for products sold at least 5 times.","SELECT product_id, AVG(unit_price) AS avg_item_price, COUNT(order_item_id) AS times_sold FROM Order_Items GROUP BY product_id HAVING COUNT(order_item_id) >= 5 AND AVG(unit_price) > 20;","CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","This query groups order items by product, calculates the average unit price and total sales count for each, and then filters for products sold at least 5 times with an average unit price over $20."
Show departments that have at least 3 employees hired before 2020.,"SELECT department, COUNT(employee_id) AS num_employees FROM Employees WHERE hire_date < '2020-01-01' GROUP BY department HAVING COUNT(employee_id) >= 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query first filters employees hired before 2020, then groups them by department, and finally shows only departments with 3 or more such employees."
"For each customer, find the date of their first order, but only for customers who placed orders in at least 3 different months.","SELECT customer_id, MIN(order_date) AS first_order_date FROM Orders GROUP BY customer_id HAVING COUNT(DISTINCT STRFTIME('%Y-%m', order_date)) >= 3;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query finds the earliest order date for each customer, but only includes customers who have placed orders in three or more distinct months."
"List product categories where the total stock quantity is less than 500, excluding categories with individual product prices under $10.","SELECT category, SUM(stock_quantity) AS total_stock FROM Products WHERE price >= 10 GROUP BY category HAVING SUM(stock_quantity) < 500;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","The query first filters out products priced under $10, then calculates the total stock per category, and finally selects categories where this total stock is less than 500."
"Find projects whose average budget is greater than $100,000, and there are more than 2 projects with that status.","SELECT status, AVG(budget) AS avg_project_budget, COUNT(project_id) AS num_projects FROM Projects GROUP BY status HAVING AVG(budget) > 100000 AND COUNT(project_id) > 2;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, department TEXT, start_date TEXT, end_date TEXT, budget REAL, status TEXT);","This query groups projects by their status, then filters for statuses where the average project budget exceeds $100,000 and there are more than 2 projects in that status."
Which customers have placed orders on at least 2 distinct dates and have a total order value of less than $500?,"SELECT customer_id, SUM(total_amount) AS total_value, COUNT(DISTINCT order_date) AS distinct_order_days FROM Orders GROUP BY customer_id HAVING COUNT(DISTINCT order_date) >= 2 AND SUM(total_amount) < 500;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","The query calculates the total order value and the number of distinct order dates for each customer, then filters for customers who ordered on at least two different days and spent less than $500 in total."
Show employee departments where the youngest employee is older than 30 years (assuming age is derived from birth_date).,"SELECT department, MIN(JULIANDAY('now') - JULIANDAY(birth_date))/365.25 AS youngest_age FROM Employees GROUP BY department HAVING MIN(JULIANDAY('now') - JULIANDAY(birth_date))/365.25 > 30;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL, hire_date TEXT, birth_date TEXT);",This query calculates the age of the youngest employee in each department and then selects only those departments where the youngest employee is over 30 years old.
"Find product categories that have more than 5 products, and none of them are out of stock (stock_quantity > 0).","SELECT category, COUNT(product_id) AS num_products FROM Products WHERE stock_quantity > 0 GROUP BY category HAVING COUNT(product_id) > 5;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query first filters products to include only those in stock, then groups by category, and finally selects categories that have more than 5 such products."
"Which countries have customers with a total registration period (from registration_date to today) of more than 5 years, and there are at least 2 such customers?","SELECT country, COUNT(customer_id) AS num_long_term_customers FROM Customers WHERE (JULIANDAY('now') - JULIANDAY(registration_date))/365.25 > 5 GROUP BY country HAVING COUNT(customer_id) >= 2;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT, registration_date TEXT);","This query identifies customers registered for over 5 years, then groups them by country, and finally selects countries that have at least two such long-term customers."
Identify sales agents who have made sales to more than 3 distinct product categories.,"SELECT T1.agent_id, T1.agent_name FROM Sales_Agents AS T1 JOIN Sales AS T2 ON T1.agent_id = T2.agent_id JOIN Products AS T3 ON T2.product_id = T3.product_id GROUP BY T1.agent_id HAVING COUNT(DISTINCT T3.category) > 3;","CREATE TABLE Sales_Agents (agent_id INTEGER PRIMARY KEY, agent_name TEXT); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, agent_id INTEGER, product_id INTEGER, sale_date TEXT, quantity_sold INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","This query joins sales agents with sales and products to group sales by agent, then counts the number of distinct product categories each agent sold, returning agents who sold in more than 3 categories."
List all departments where the earliest hire date is after 2015 and the latest hire date is before 2022.,"SELECT department, MIN(hire_date) AS earliest_hire, MAX(hire_date) AS latest_hire FROM Employees GROUP BY department HAVING MIN(hire_date) > '2015-12-31' AND MAX(hire_date) < '2022-01-01';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query finds the earliest and latest hire dates for each department and filters for departments where all hires occurred between 2016 and 2021 (inclusive).
"Which product categories have an average price between $200 and $500, and contain at least 5 products?","SELECT category, AVG(price) AS avg_price, COUNT(product_id) AS num_products FROM Products GROUP BY category HAVING AVG(price) BETWEEN 200 AND 500 AND COUNT(product_id) >= 5;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query groups products by category, calculates the average price and count, then selects categories with an average price between $200 and $500 that also have 5 or more products."
"Find students whose average grade is less than 70, but they are enrolled in more than 3 courses.","SELECT student_id, AVG(grade) AS avg_grade FROM Enrollments GROUP BY student_id HAVING AVG(grade) < 70 AND COUNT(course_id) > 3;","CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade REAL);","This query computes the average grade and course count for each student, then filters for students whose average grade is below 70 and who are enrolled in more than 3 courses."
"Show departments where the sum of salaries is less than $200,000, but only include departments with at least 2 employees.","SELECT department, SUM(salary) AS total_salary FROM Employees GROUP BY department HAVING SUM(salary) < 200000 AND COUNT(employee_id) >= 2;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query calculates the total salary for each department and the number of employees, then filters for departments with a total salary under $200,000 and at least two employees."
"List customer cities where the minimum order amount is greater than $500, but only for cities with more than 10 orders.","SELECT city, MIN(total_amount) AS min_order_amount FROM Orders JOIN Customers ON Orders.customer_id = Customers.customer_id GROUP BY city HAVING MIN(total_amount) > 500 AND COUNT(order_id) > 10;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT, registration_date TEXT);","This query joins orders with customer data to group by city, then finds the minimum order amount and total order count per city, finally filtering for cities with minimum orders over $500 and more than 10 total orders."
Find the product categories where the total quantity sold for products with a price greater than $100 is more than 500 units.,"SELECT p.category, SUM(oi.quantity) AS total_sold_quantity FROM Products AS p JOIN Order_Items AS oi ON p.product_id = oi.product_id WHERE p.price > 100 GROUP BY p.category HAVING SUM(oi.quantity) > 500;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","This query joins products and order items, filters for products over $100, then groups by product category to sum quantities, showing categories where the total quantity sold for such products exceeds 500."
Determine the average total amount per customer for customers who have made purchases in more than one year.,"SELECT customer_id, AVG(total_amount) AS avg_order_amount FROM Orders GROUP BY customer_id HAVING COUNT(DISTINCT STRFTIME('%Y', order_date)) > 1;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query calculates the average order amount for each customer, but only includes customers who have placed orders in more than one distinct calendar year."
"Show product categories where the number of unique products is less than 3, and the minimum stock quantity is greater than 10.","SELECT category, COUNT(DISTINCT product_id) AS unique_products_count, MIN(stock_quantity) AS min_stock FROM Products GROUP BY category HAVING COUNT(DISTINCT product_id) < 3 AND MIN(stock_quantity) > 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query groups products by category, then filters for categories that have fewer than 3 unique products and where the lowest stock quantity among its products is greater than 10."
Find employees whose average performance score is above 80 and have completed at least 5 projects.,"SELECT e.employee_id, e.name, AVG(p.score) AS avg_score, COUNT(DISTINCT p.project_id) AS projects_completed FROM Employees AS e JOIN Project_Assignments AS pa ON e.employee_id = pa.employee_id JOIN Projects AS p ON pa.project_id = p.project_id GROUP BY e.employee_id, e.name HAVING AVG(p.score) > 80 AND COUNT(DISTINCT p.project_id) >= 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, score INTEGER); CREATE TABLE Project_Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER);","This query joins employees, project assignments, and projects to group by employee, calculates their average project score and number of projects, then selects employees with an average score over 80 and at least 5 projects completed."
"List all departments where the sum of salaries of employees hired after 2018 is greater than $150,000.","SELECT department, SUM(salary) AS total_salary_post_2018 FROM Employees WHERE hire_date > '2018-12-31' GROUP BY department HAVING SUM(salary) > 150000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query first filters employees hired after 2018, then calculates the sum of their salaries per department, and finally shows departments where this sum exceeds $150,000."
"Retrieve course names and the number of students enrolled, but only for courses with more than 10 enrollments and an average grade above 75.","SELECT c.course_name, COUNT(e.student_id) AS num_students, AVG(e.grade) AS avg_course_grade FROM Courses AS c JOIN Enrollments AS e ON c.course_id = e.course_id GROUP BY c.course_name HAVING COUNT(e.student_id) > 10 AND AVG(e.grade) > 75;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade REAL);","This query joins courses and enrollments, groups by course name, calculates the count of students and average grade, then filters for courses with over 10 students and an average grade above 75."
Find customers who have ordered products from at least 2 different categories and whose total spent is over $700.,"SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_spent FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id JOIN Order_Items AS oi ON o.order_id = oi.order_id JOIN Products AS p ON oi.product_id = p.product_id GROUP BY c.customer_id, c.customer_name HAVING COUNT(DISTINCT p.category) >= 2 AND SUM(o.total_amount) > 700;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, category TEXT);","This query joins multiple tables to link customers to product categories and order amounts. It then groups by customer, counting distinct categories and summing total spent, finally filtering for customers with orders in at least 2 categories and total spending over $700."
"Show countries where the average total order amount (per order) is above $300, considering only orders placed in 2023.","SELECT c.country, AVG(o.total_amount) AS avg_order_value FROM Customers AS c JOIN Orders AS o ON c.customer_id = o.customer_id WHERE STRFTIME('%Y', o.order_date) = '2023' GROUP BY c.country HAVING AVG(o.total_amount) > 300;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query joins customers and orders, filters orders to those placed in 2023, then groups by country to calculate the average order total, showing countries where this average exceeds $300."
"List products whose minimum individual sale quantity is greater than 5, and the product has been sold at least 10 times.","SELECT product_id, MIN(quantity_sold) AS min_qty_sold FROM Sales GROUP BY product_id HAVING MIN(quantity_sold) > 5 AND COUNT(sale_id) >= 10;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity_sold INTEGER, revenue REAL);","This query groups sales by product, finds the minimum quantity sold per sale and the total number of sales for each product, then filters for products where the minimum quantity sold per transaction is greater than 5 and total sales exceed 10."
"Identify departments where the count of male employees is greater than the count of female employees, assuming gender is available.",SELECT department FROM Employees GROUP BY department HAVING SUM(CASE WHEN gender = 'Male' THEN 1 ELSE 0 END) > SUM(CASE WHEN gender = 'Female' THEN 1 ELSE 0 END);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary REAL, gender TEXT);",This query groups employees by department and then uses a HAVING clause with conditional sums to find departments where the number of male employees exceeds that of female employees.
Assign a sequential row number to each employee based on their salary in descending order.,"SELECT EmployeeID, Name, Salary, ROW_NUMBER() OVER (ORDER BY Salary DESC) AS RowNum FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query assigns a unique, sequential number to each employee, ordered by their salary from highest to lowest."
"Rank employees by their salary in descending order, handling ties by assigning the same rank and leaving gaps.","SELECT EmployeeID, Name, Salary, RANK() OVER (ORDER BY Salary DESC) AS SalaryRank FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query ranks employees based on their salary, where employees with the same salary receive the same rank. Subsequent ranks will skip numbers if there are ties."
"Rank employees by their salary in descending order, handling ties by assigning the same rank and no gaps.","SELECT EmployeeID, Name, Salary, DENSE_RANK() OVER (ORDER BY Salary DESC) AS DenseSalaryRank FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query ranks employees based on their salary, assigning the same rank to employees with identical salaries. Unlike RANK, DENSE_RANK ensures there are no gaps in the ranking sequence."
Divide employees into 4 salary groups (quartiles) based on their salary.,"SELECT EmployeeID, Name, Salary, NTILE(4) OVER (ORDER BY Salary DESC) AS SalaryQuartile FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query divides all employees into 4 approximately equal groups (quartiles) based on their salary, with the highest salaries in the first quartile."
"For each employee, show their salary and the salary of the employee hired immediately before them (by hire date).","SELECT EmployeeID, Name, HireDate, Salary, LAG(Salary, 1, 0) OVER (ORDER BY HireDate ASC) AS PreviousEmployeeSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query retrieves the salary of the employee hired just before the current employee, based on their hire date. If there is no previous employee, it defaults to 0."
"For each employee, show their salary and the salary of the employee hired immediately after them (by hire date).","SELECT EmployeeID, Name, HireDate, Salary, LEAD(Salary, 1, 0) OVER (ORDER BY HireDate ASC) AS NextEmployeeSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query retrieves the salary of the employee hired just after the current employee, based on their hire date. If there is no next employee, it defaults to 0."
"Calculate the running total of revenue for each sale, ordered by sale date.","SELECT SaleID, SaleDate, Revenue, SUM(Revenue) OVER (ORDER BY SaleDate ASC, SaleID ASC) AS RunningRevenueTotal FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT, QuantitySold INTEGER, Revenue REAL);","This query calculates a running sum of revenue for all sales, ordered chronologically by sale date, then by SaleID to ensure deterministic order for same dates."
"Calculate the running average of stock prices for a specific stock symbol, ordered by trade date.","SELECT StockID, Symbol, TradeDate, Price, AVG(Price) OVER (PARTITION BY Symbol ORDER BY TradeDate ASC) AS RunningAvgPrice FROM Stocks WHERE Symbol = 'AAPL';","CREATE TABLE Stocks (StockID INTEGER PRIMARY KEY, Symbol TEXT, TradeDate TEXT, Price REAL, Volume INTEGER);","This query calculates the running average of the 'AAPL' stock price, considering all prices up to the current trade date for that specific stock."
Find the minimum salary observed among all employees up to a given hire date.,"SELECT EmployeeID, Name, HireDate, Salary, MIN(Salary) OVER (ORDER BY HireDate ASC) AS MinSalaryToDate FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);",This query calculates the minimum salary seen among all employees from the beginning of the record up to the current employee's hire date.
Find the maximum salary observed among all employees up to a given hire date.,"SELECT EmployeeID, Name, HireDate, Salary, MAX(Salary) OVER (ORDER BY HireDate ASC) AS MaxSalaryToDate FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);",This query calculates the maximum salary seen among all employees from the beginning of the record up to the current employee's hire date.
"For each department, assign a sequential row number to employees based on their salary in descending order within that department.","SELECT EmployeeID, Name, DepartmentID, Salary, ROW_NUMBER() OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS DepartmentRowNum FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query assigns a unique, sequential number to each employee within their respective department, ordered by their salary from highest to lowest within that department."
"Rank employees within each department by their salary in descending order, handling ties.","SELECT EmployeeID, Name, DepartmentID, Salary, RANK() OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS DepartmentSalaryRank FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query ranks employees based on their salary within each department. Employees with the same salary in the same department will share the same rank, and subsequent ranks will skip numbers."
"Rank employees within each department by their salary in descending order, without gaps for ties.","SELECT EmployeeID, Name, DepartmentID, Salary, DENSE_RANK() OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS DepartmentDenseSalaryRank FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query ranks employees based on their salary within each department. Employees with the same salary in the same department will share the same rank, and no ranks will be skipped."
Divide employees within each department into 2 salary groups (halves).,"SELECT EmployeeID, Name, DepartmentID, Salary, NTILE(2) OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS DepartmentSalaryHalf FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query divides employees within each department into two roughly equal groups based on their salary, with the higher salaries in the first group."
"For each transaction, show the amount and the amount of the previous transaction for the same account, ordered by transaction date.","SELECT TransactionID, AccountID, TransactionDate, Amount, LAG(Amount, 1, 0) OVER (PARTITION BY AccountID ORDER BY TransactionDate ASC, TransactionID ASC) AS PreviousTransactionAmount FROM Transactions;","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, AccountID INTEGER, TransactionDate TEXT, Amount REAL, TransactionType TEXT);","This query retrieves the amount of the preceding transaction for each account, ordered by transaction date. If there is no previous transaction, it defaults to 0."
"For each transaction, show the amount and the amount of the next transaction for the same account, ordered by transaction date.","SELECT TransactionID, AccountID, TransactionDate, Amount, LEAD(Amount, 1, 0) OVER (PARTITION BY AccountID ORDER BY TransactionDate ASC, TransactionID ASC) AS NextTransactionAmount FROM Transactions;","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, AccountID INTEGER, TransactionDate TEXT, Amount REAL, TransactionType TEXT);","This query retrieves the amount of the subsequent transaction for each account, ordered by transaction date. If there is no next transaction, it defaults to 0."
"Calculate the running total of revenue for each product category, ordered by sale date.","SELECT S.SaleID, P.ProductName, PC.CategoryName, S.SaleDate, S.Revenue, SUM(S.Revenue) OVER (PARTITION BY PC.CategoryID ORDER BY S.SaleDate ASC, S.SaleID ASC) AS CategoryRunningRevenue FROM Sales S JOIN Products P ON S.ProductID = P.ProductID JOIN ProductCategories PC ON P.CategoryID = PC.CategoryID;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT, QuantitySold INTEGER, Revenue REAL); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER); CREATE TABLE ProductCategories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);","This query calculates a running total of revenue for each product category, summing up revenues chronologically within each category."
Calculate the 3-day trailing average of daily revenue for each product.,"SELECT SaleID, ProductID, SaleDate, Revenue, AVG(Revenue) OVER (PARTITION BY ProductID ORDER BY SaleDate ASC ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS ThreeDayAvgRevenue FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT, QuantitySold INTEGER, Revenue REAL);","This query calculates a 3-day trailing average of daily revenue for each product, including the current day's revenue and the two preceding days."
Find the highest paid employee in each department.,"SELECT EmployeeID, Name, DepartmentID, Salary FROM (SELECT EmployeeID, Name, DepartmentID, Salary, ROW_NUMBER() OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS rn FROM Employees) WHERE rn = 1;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query first ranks employees within each department by salary. Then, it filters the results to show only the employee with the highest salary (rank 1) from each department."
"List all employees who are among the top 3 highest-paid in their respective departments, allowing for ties.","SELECT EmployeeID, Name, DepartmentID, Salary FROM (SELECT EmployeeID, Name, DepartmentID, Salary, RANK() OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS rnk FROM Employees) WHERE rnk <= 3;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query ranks employees by salary within each department and then selects all employees whose rank is 3 or less, including ties."
"Get the most recent order for each customer, along with their details.","WITH CustomerOrders AS (SELECT OrderID, CustomerID, OrderDate, TotalAmount, ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY OrderDate DESC, OrderID DESC) AS rn FROM Orders) SELECT CO.OrderID, CO.CustomerID, C.CustomerName, CO.OrderDate, CO.TotalAmount FROM CustomerOrders CO JOIN Customers C ON CO.CustomerID = C.CustomerID WHERE CO.rn = 1;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL); CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT);","This query uses a Common Table Expression (CTE) to find the most recent order for each customer, then joins with the Customers table to retrieve customer details."
"For each student's score in a subject, find their score from the previous attempt (based on score entry ID), returning 0 if no previous attempt.","SELECT ScoreID, StudentID, Subject, Score, LAG(Score, 1, 0) OVER (PARTITION BY StudentID, Subject ORDER BY ScoreID ASC) AS PreviousAttemptScore FROM Scores;","CREATE TABLE Scores (ScoreID INTEGER PRIMARY KEY, StudentID INTEGER, Subject TEXT, Score REAL, EntryDate TEXT);","This query retrieves the score from the student's immediate previous attempt for the same subject, returning 0 if it's their first recorded attempt."
"For each student's score in a subject, find their score from the next attempt (based on score entry ID), returning 0 if no next attempt.","SELECT ScoreID, StudentID, Subject, Score, LEAD(Score, 1, 0) OVER (PARTITION BY StudentID, Subject ORDER BY ScoreID ASC) AS NextAttemptScore FROM Scores;","CREATE TABLE Scores (ScoreID INTEGER PRIMARY KEY, StudentID INTEGER, Subject TEXT, Score REAL, EntryDate TEXT);","This query retrieves the score from the student's immediate next attempt for the same subject, returning 0 if it's their last recorded attempt."
"For each employee, display their department's highest salary.","SELECT EmployeeID, Name, DepartmentID, Salary, FIRST_VALUE(Salary) OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS DepartmentHighestSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);",This query retrieves the highest salary within each employee's department by ordering salaries in descending order and taking the first value.
"For each employee, display their department's lowest salary.","SELECT EmployeeID, Name, DepartmentID, Salary, LAST_VALUE(Salary) OVER (PARTITION BY DepartmentID ORDER BY Salary ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS DepartmentLowestSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);",This query retrieves the lowest salary within each employee's department. The window frame `ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING` ensures the function considers all rows in the partition.
"For each employee, find the salary of the third highest-paid employee in their department.","SELECT EmployeeID, Name, DepartmentID, Salary, NTH_VALUE(Salary, 3) OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS ThirdHighestDepartmentSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query finds the salary of the third highest-paid employee within each department, based on salary in descending order. If there are fewer than three employees, it returns NULL."
Calculate the percentile rank of each employee's salary across all employees.,"SELECT EmployeeID, Name, Salary, PERCENT_RANK() OVER (ORDER BY Salary ASC) AS SalaryPercentRank FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query calculates the percentile rank for each employee's salary, indicating the percentage of employees with a lower or equal salary. The rank is between 0 and 1."
"Calculate the cumulative distribution of employee salaries, showing the proportion of employees with salary less than or equal to the current employee's salary.","SELECT EmployeeID, Name, Salary, CUME_DIST() OVER (ORDER BY Salary ASC) AS SalaryCumeDist FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query calculates the cumulative distribution of salaries, showing the proportion of employees whose salary is less than or equal to the current employee's salary."
"For each employee, show their rank by salary, their department's average salary, and the salary of the previous employee in their department by hire date.","SELECT EmployeeID, Name, DepartmentID, Salary, RANK() OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) AS DepartmentRank, AVG(Salary) OVER (PARTITION BY DepartmentID) AS DepartmentAvgSalary, LAG(Salary, 1, 0) OVER (PARTITION BY DepartmentID ORDER BY HireDate ASC) AS PreviousHiredEmployeeSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query uses three different window functions: RANK to rank employees within their department by salary, AVG to get the average salary for each department, and LAG to get the salary of the previously hired employee within the same department."
"For each daily sales record, calculate the 7-day moving average of revenue, including the current day and the preceding 6 days, grouped by product.","SELECT SaleID, ProductID, SaleDate, Revenue, AVG(Revenue) OVER (PARTITION BY ProductID ORDER BY SaleDate ASC ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS SevenDayMovingAvgRevenue FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT, QuantitySold INTEGER, Revenue REAL);","This query calculates a 7-day moving average of revenue for each product. For each sale, it averages the revenue from the current day and the six preceding days for that specific product."
Find all products whose price is above the overall average product price.,"SELECT product_name, price FROM Products WHERE price > (SELECT AVG(price) FROM Products);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query uses an uncorrelated subquery to first calculate the average price of all products. Then, it selects products from the outer query whose individual price is greater than this calculated average."
List the names of customers who have placed at least one order.,SELECT customer_name FROM Customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM Orders);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query uses an uncorrelated subquery to find all unique customer IDs present in the Orders table. The outer query then retrieves the names of customers whose ID is found in this list.
Identify customers who have never placed any orders.,SELECT customer_name FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses an uncorrelated subquery to find all unique customer IDs from the Orders table. The outer query then selects customers whose ID is not present in this list, indicating they have no orders."
Retrieve the names of departments that currently have employees.,SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query uses a correlated subquery. For each department in the outer query, the subquery checks if there exists at least one employee belonging to that department. If so, the department name is included in the result."
Find employees whose salary is higher than the average salary within their own department.,"SELECT first_name, last_name, salary, (SELECT department_name FROM Departments D WHERE D.department_id = E.department_id) AS department FROM Employees E WHERE salary > (SELECT AVG(salary) FROM Employees WHERE department_id = E.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query uses a correlated subquery in the WHERE clause. For each employee in the outer query, the subquery calculates the average salary for their specific department. The outer query then filters employees whose salary exceeds this departmental average. A scalar subquery is also used in the SELECT clause to fetch the department name."
"Show each product's name, price, and the overall average price of all products.","SELECT product_name, price, (SELECT AVG(price) FROM Products) AS average_price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query uses an uncorrelated scalar subquery in the SELECT clause. The subquery calculates the average price of all products once, and this value is then displayed alongside each product's name and price."
"For each employee, list their full name, salary, and the maximum salary in their respective department.","SELECT first_name, last_name, salary, (SELECT MAX(salary) FROM Employees E2 WHERE E2.department_id = E.department_id) AS max_department_salary FROM Employees E;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER);","This query uses a correlated scalar subquery in the SELECT clause. For each employee in the outer query, the subquery calculates the maximum salary among employees in that specific employee's department, effectively showing departmental salary context."
Find departments where the total salary expenditure is greater than the overall average total salary expenditure per department.,"SELECT D.department_name, SUM(E.salary) AS total_department_salary FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name HAVING SUM(E.salary) > (SELECT AVG(total_dept_salary) FROM (SELECT SUM(salary) AS total_dept_salary FROM Employees GROUP BY department_id));","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query uses an uncorrelated subquery in the HAVING clause, which itself contains another subquery (a derived table). The innermost subquery calculates the total salary for each department. The outer subquery then calculates the average of these total departmental salaries. Finally, the main query filters departments whose total salary exceeds this overall average."
List products that have never appeared in any order item.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query uses an uncorrelated subquery to find all distinct product IDs that have been included in order items. The outer query then selects products whose IDs are not present in this list, meaning they have never been ordered."
Find product categories where the average price of products is higher than the average price of products in the 'Electronics' category.,"SELECT category, AVG(price) AS avg_category_price FROM Products GROUP BY category HAVING AVG(price) > (SELECT AVG(price) FROM Products WHERE category = 'Electronics');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query first groups products by category and calculates the average price for each. It then uses an uncorrelated subquery in the HAVING clause to determine the average price specifically for products in the 'Electronics' category. Finally, it filters for categories whose average price is higher than that of 'Electronics'."
Identify the employee(s) with the highest salary in each department.,"SELECT first_name, last_name, salary, department_id FROM Employees E1 WHERE salary = (SELECT MAX(salary) FROM Employees E2 WHERE E2.department_id = E1.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER);","This query uses a correlated subquery in the WHERE clause. For each employee in the outer query, the subquery finds the maximum salary within that specific employee's department. The outer query then selects employees whose salary matches this maximum, identifying the highest-paid employee(s) in each department."
List customers who have ordered products from the 'Books' category.,SELECT DISTINCT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.category = 'Books';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query uses JOINs instead of a subquery. It joins Customers, Orders, Order_Items, and Products tables and filters for orders where the product category is 'Books', then returns distinct customer names."
Find employees who have received a performance review in the last year (365 days from today) with a score greater than 8.,"SELECT first_name, last_name FROM Employees E WHERE EXISTS (SELECT 1 FROM Performance_Reviews PR WHERE PR.employee_id = E.employee_id AND PR.score > 8 AND PR.review_date >= DATE('now', '-365 days'));","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER); CREATE TABLE Performance_Reviews (review_id INTEGER PRIMARY KEY, employee_id INTEGER, review_date TEXT, score INTEGER, comments TEXT, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id));","This query uses a correlated subquery with EXISTS. For each employee, the subquery checks if there's any performance review associated with them that has a score greater than 8 and occurred within the last 365 days from the current date."
Retrieve all orders that were placed on the very first day any order was ever placed.,"SELECT order_id, customer_id, order_date, total_amount FROM Orders WHERE order_date = (SELECT MIN(order_date) FROM Orders);","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query uses an uncorrelated subquery to find the earliest order date from the Orders table. The outer query then selects all orders that were placed on this specific earliest date.
Find employees who were hired after the earliest hire date within their respective department.,"SELECT first_name, last_name, hire_date, department_id FROM Employees E1 WHERE hire_date > (SELECT MIN(hire_date) FROM Employees E2 WHERE E2.department_id = E1.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER);","This query uses a correlated subquery. For each employee, the subquery determines the earliest hire date among all employees in that specific employee's department. The outer query then filters for employees whose own hire date is later than this departmental earliest hire date."
List all products that have never been ordered by any customer residing in 'New York'.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT OI.product_id FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.city = 'New York');,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, registration_date TEXT);","This query uses an uncorrelated subquery to identify all product IDs that have been ordered by customers from 'New York'. The outer query then selects products whose IDs are not in this list, meaning they haven't been ordered by New York customers."
Find departments where all employees have a salary greater than 50000.,SELECT department_name FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary <= 50000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query uses a correlated subquery with NOT EXISTS. For each department, the subquery checks if there exists any employee in that department whose salary is 50000 or less. If no such employee exists (i.e., NOT EXISTS is true), it means all employees in that department earn more than 50000, and the department name is returned."
Find customers who have placed at least one order with a total amount greater than 500.,SELECT customer_name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id AND O.total_amount > 500);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a correlated subquery with EXISTS. For each customer, the subquery checks if there is any order placed by that customer where the total amount is greater than 500. If such an order exists, the customer's name is included in the result."
List products that have been ordered by more than 5 distinct customers.,SELECT P.product_name FROM Products P WHERE (SELECT COUNT(DISTINCT O.customer_id) FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id WHERE OI.product_id = P.product_id) > 5;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a correlated scalar subquery in the WHERE clause. For each product, the subquery counts the number of distinct customers who have ordered that specific product. The outer query then filters for products where this count is greater than 5."
"List product categories and the count of products in each, but only for categories that have more products than the average number of products per category.","SELECT category, COUNT(product_id) AS product_count FROM Products GROUP BY category HAVING COUNT(product_id) > (SELECT AVG(product_count) FROM (SELECT COUNT(product_id) AS product_count FROM Products GROUP BY category));","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query uses an uncorrelated subquery in the HAVING clause, which itself contains another subquery (a derived table). The innermost subquery calculates the count of products per category. The outer subquery then calculates the average of these counts. The main query then filters categories whose product count is greater than this overall average."
Find the employee with the second highest salary in each department.,"SELECT E1.first_name, E1.last_name, E1.salary, E1.department_id FROM Employees E1 WHERE 1 = (SELECT COUNT(DISTINCT E2.salary) FROM Employees E2 WHERE E2.department_id = E1.department_id AND E2.salary > E1.salary);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER);","This query uses a correlated subquery to find the second highest salary. For each employee (E1), the subquery counts how many distinct salaries in the same department (E2) are higher than E1's salary. If this count is 1, it means E1's salary is the second highest."
Find employees whose salary falls within the typical range (min_salary and max_salary) for their assigned job title.,"SELECT E.first_name, E.last_name, E.salary, J.job_title FROM Employees E JOIN Jobs J ON E.job_id = J.job_id WHERE E.salary BETWEEN J.min_salary AND J.max_salary;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER, job_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id)); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT, min_salary REAL, max_salary REAL);",This query uses a JOIN to link Employees with Jobs and then filters employees whose salary is within the min_salary and max_salary range defined for their specific job title.
Identify customers who have placed orders but have never ordered any product from the 'Perishable' category.,SELECT C.customer_name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id) AND NOT EXISTS (SELECT 1 FROM Orders O2 JOIN Order_Items OI2 ON O2.order_id = OI2.order_id JOIN Products P ON OI2.product_id = P.product_id WHERE O2.customer_id = C.customer_id AND P.category = 'Perishable');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query uses two correlated subqueries. The first EXISTS checks if the customer has placed at least one order. The second NOT EXISTS checks if there's no order by that customer containing a 'Perishable' product. Combined, it finds customers who have ordered but avoided 'Perishable' items."
Find product categories that contain more products than the 'Books' category.,"SELECT category, COUNT(product_id) AS num_products FROM Products GROUP BY category HAVING COUNT(product_id) > (SELECT COUNT(product_id) FROM Products WHERE category = 'Books');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query groups products by category and counts them. It then uses an uncorrelated subquery in the HAVING clause to get the total number of products specifically in the 'Books' category. Finally, it filters for categories that have a higher product count than 'Books'."
List all customers who have ordered every single product that belongs to the 'Electronics' category.,SELECT C.customer_name FROM Customers C WHERE NOT EXISTS (SELECT P.product_id FROM Products P WHERE P.category = 'Electronics' AND NOT EXISTS (SELECT 1 FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id WHERE O.customer_id = C.customer_id AND OI.product_id = P.product_id));,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query uses a double NOT EXISTS pattern for universal quantification. The outer query iterates through customers. The first correlated subquery checks if there's any 'Electronics' product (P) for which the customer (C) has NOT placed an order (checked by the innermost correlated subquery). If no such 'Electronics' product exists, it means the customer has ordered all of them."
"For each order item, display its quantity, unit price, and the average unit price of all other items within the same order.","SELECT OI1.order_item_id, OI1.quantity, OI1.unit_price, (SELECT AVG(OI2.unit_price) FROM Order_Items OI2 WHERE OI2.order_id = OI1.order_id AND OI2.order_item_id != OI1.order_item_id) AS avg_other_item_price_in_order FROM Order_Items OI1;","CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query uses a correlated scalar subquery. For each order item (OI1), the subquery calculates the average unit price of all other order items (OI2) that belong to the same order. This provides context on the pricing of sibling items within an order."
Retrieve the details of the most recent order placed by any customer.,"SELECT order_id, customer_id, order_date, total_amount FROM Orders WHERE order_date = (SELECT MAX(order_date) FROM Orders);","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query uses an uncorrelated subquery to find the latest (maximum) order date from the entire Orders table. The outer query then retrieves all details for orders that match this most recent date.
Find employees who were hired in the same year as the employee with the highest salary in their respective department.,"SELECT E1.first_name, E1.last_name, E1.hire_date, E1.salary, D.department_name FROM Employees E1 JOIN Departments D ON E1.department_id = D.department_id WHERE STRFTIME('%Y', E1.hire_date) = (SELECT STRFTIME('%Y', E2.hire_date) FROM Employees E2 WHERE E2.department_id = E1.department_id ORDER BY E2.salary DESC LIMIT 1);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER, job_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query uses a correlated scalar subquery. For each employee (E1), the subquery finds the hire year of the employee with the highest salary in E1's department. The outer query then filters for employees whose own hire year matches this year, effectively finding co-hires of the top earner in each department."
List products that have a stock quantity below the overall average stock quantity of all products.,"SELECT product_name, stock_quantity FROM Products WHERE stock_quantity < (SELECT AVG(stock_quantity) FROM Products);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query uses an uncorrelated subquery to calculate the average stock quantity of all products. The outer query then selects products whose individual stock quantity is less than this calculated average.
Identify departments where more than one employee has the exact same salary.,SELECT DISTINCT D.department_name FROM Departments D JOIN Employees E1 ON D.department_id = E1.department_id WHERE EXISTS (SELECT 1 FROM Employees E2 WHERE E2.department_id = E1.department_id AND E2.salary = E1.salary AND E2.employee_id != E1.employee_id);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query uses a correlated subquery with EXISTS. For each employee (E1), the subquery checks if there exists another employee (E2) in the same department who has the same salary but a different employee ID. If such a duplicate salary exists, the department name is included in the result."
List the full names of all customers who are from the USA or from Canada.,"SELECT first_name, last_name FROM Customers WHERE country = 'USA' UNION SELECT first_name, last_name FROM Customers WHERE country = 'Canada';","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, city TEXT, country TEXT, registration_date TEXT );","This query combines the first and last names of customers from the USA with those from Canada, ensuring unique full names."
Show the product names that are either in the 'Electronics' category or have a price greater than 500.00.,SELECT product_name FROM Products WHERE category = 'Electronics' UNION SELECT product_name FROM Products WHERE price > 500.00;,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER );","This query retrieves the names of products that are categorized as 'Electronics' or have a price higher than 500.00, returning distinct names."
List the department names that have at least one employee hired in 2022 or at least one project started in 2023.,"SELECT department FROM Employees WHERE STRFTIME('%Y', hire_date) = '2022' UNION SELECT department FROM Projects WHERE STRFTIME('%Y', start_date) = '2023';","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT, salary REAL, is_manager BOOLEAN, city TEXT ); CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY, project_name TEXT, department TEXT, start_date TEXT, end_date TEXT, budget REAL );",This query combines distinct department names from employees hired in 2022 with distinct department names from projects started in 2023.
Retrieve the cities where either a customer or a supplier is located.,SELECT city FROM Customers UNION SELECT city FROM Suppliers;,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Suppliers ( supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, city TEXT, country TEXT );",This query lists all unique cities that appear in either the Customers table or the Suppliers table.
"Get a list of all unique customer emails, including those who have placed an order and those who have not, but registered after 2023-01-01.",SELECT C.email FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id UNION SELECT email FROM Customers WHERE registration_date > '2023-01-01';,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query combines distinct emails of customers who have placed at least one order with emails of customers who registered after January 1, 2023."
"List all product categories from both the 'Electronics' and 'Home Goods' categories, including duplicates.",SELECT category FROM Products WHERE category = 'Electronics' UNION ALL SELECT category FROM Products WHERE category = 'Home Goods';,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER );","This query combines all product categories that are either 'Electronics' or 'Home Goods', including any duplicate category entries."
Find the customer IDs of all customers who either have placed an order with total amount greater than 500 or are from 'Germany'.,SELECT C.customer_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.total_amount > 500.00 UNION SELECT customer_id FROM Customers WHERE country = 'Germany';,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query returns the unique IDs of customers who have an order with a total amount over 500, combined with customers from Germany."
Find the product IDs that are both in the 'Electronics' category and have a stock quantity greater than 100.,SELECT product_id FROM Products WHERE category = 'Electronics' INTERSECT SELECT product_id FROM Products WHERE stock_quantity > 100;,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER );",This query returns product IDs that exist in both the set of 'Electronics' products and the set of products with stock quantity greater than 100.
List the IDs of students who are enrolled in both 'Mathematics' and 'Computer Science' courses.,SELECT S.student_id FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE C.course_name = 'Mathematics' INTERSECT SELECT S.student_id FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE C.course_name = 'Computer Science';,"CREATE TABLE Students ( student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT ); CREATE TABLE Courses ( course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT ); CREATE TABLE Enrollments ( enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id) );","This query finds student IDs that appear in the enrollment list for 'Mathematics' and also in the enrollment list for 'Computer Science', effectively listing students taking both."
Show the employee IDs of employees who were hired in 2022 and are also managers.,"SELECT employee_id FROM Employees WHERE STRFTIME('%Y', hire_date) = '2022' INTERSECT SELECT employee_id FROM Employees WHERE is_manager = 1;","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT, salary REAL, is_manager BOOLEAN, city TEXT );",This query returns the employee IDs that are present in both the set of employees hired in 2022 and the set of employees marked as managers.
List the customer IDs of customers who have registered but have not placed any orders.,SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Orders;,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query returns customer IDs from the Customers table that do not have a corresponding entry in the Orders table, identifying customers who registered but never ordered."
Show the names of products in the 'Electronics' category that are not 'Smartphones'.,SELECT product_name FROM Products WHERE category = 'Electronics' EXCEPT SELECT product_name FROM Products WHERE product_name = 'Smartphone';,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER );","This query retrieves the names of products that are in the 'Electronics' category, excluding any product named 'Smartphone'."
Find the employee IDs of employees who are in the 'Sales' department but are not managers.,SELECT employee_id FROM Employees WHERE department = 'Sales' EXCEPT SELECT employee_id FROM Employees WHERE is_manager = 1;,"CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT, salary REAL, is_manager BOOLEAN, city TEXT );",This query returns the employee IDs of individuals who are part of the 'Sales' department but are not classified as managers.
List employees whose salary is above 70000 AND who were hired after '2023-01-01'.,SELECT employee_id FROM Employees WHERE salary > 70000.00 INTERSECT SELECT employee_id FROM Employees WHERE hire_date > '2023-01-01';,"CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT, salary REAL, is_manager BOOLEAN, city TEXT );","This query identifies employee IDs that satisfy both conditions: a salary greater than 70000 and a hire date after January 1, 2023."
Get a list of all distinct dates when either an order was placed or a product was sold.,SELECT order_date FROM Orders UNION SELECT sale_date FROM Sales;,"CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE Sales ( sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity_sold INTEGER, FOREIGN KEY (product_id) REFERENCES Products(product_id) );",This query combines all distinct dates from the Orders table (order dates) and the Sales table (sale dates).
Show product IDs that have been sold but were never part of an order placed by a customer from 'France'.,SELECT product_id FROM Sales EXCEPT SELECT OI.product_id FROM OrderItems OI JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.country = 'France';,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER ); CREATE TABLE Sales ( sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity_sold INTEGER, FOREIGN KEY (product_id) REFERENCES Products(product_id) ); CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE OrderItems ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) );",This query identifies product IDs that exist in the Sales table but do not appear in order items for orders placed by customers from France.
Find departments that have at least 5 employees AND at least 2 projects.,SELECT department FROM Employees GROUP BY department HAVING COUNT(employee_id) >= 5 INTERSECT SELECT department FROM Projects GROUP BY department HAVING COUNT(project_id) >= 2;,"CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT, salary REAL, is_manager BOOLEAN, city TEXT ); CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY, project_name TEXT, department TEXT, start_date TEXT, end_date TEXT, budget REAL );",This query finds department names that satisfy two conditions: having 5 or more employees AND having 2 or more projects.
List the distinct product names that are either 'Electronics' or 'Books'.,SELECT product_name FROM Products WHERE category = 'Electronics' UNION SELECT product_name FROM Products WHERE category = 'Books';,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER );",This query retrieves the unique names of products that belong to either the 'Electronics' or 'Books' category.
Find projects that started in 2023 but did not end in 2023.,"SELECT project_name FROM Projects WHERE STRFTIME('%Y', start_date) = '2023' EXCEPT SELECT project_name FROM Projects WHERE STRFTIME('%Y', end_date) = '2023';","CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY, project_name TEXT, department TEXT, start_date TEXT, end_date TEXT, budget REAL );",This query lists projects that commenced in 2023 but concluded in a different year (or are still ongoing).
Get the names of products that have been sold in 'January' or have a stock quantity less than 10.,"SELECT P.product_name FROM Products P JOIN Sales S ON P.product_id = S.product_id WHERE STRFTIME('%m', S.sale_date) = '01' UNION SELECT product_name FROM Products WHERE stock_quantity < 10;","CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER ); CREATE TABLE Sales ( sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity_sold INTEGER, FOREIGN KEY (product_id) REFERENCES Products(product_id) );","This query returns distinct product names that were sold in January, combined with products that have a stock quantity below 10."
Find the customer IDs of customers who have placed an order and whose total order amount is greater than 1000.,SELECT customer_id FROM Orders INTERSECT SELECT customer_id FROM Orders WHERE total_amount > 1000.00;,"CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query returns customer IDs from orders, intersecting with those where the total order amount exceeds 1000. Effectively, it lists customer IDs who have placed at least one order with an amount greater than 1000."
List all product categories available except 'Food' and 'Beverages'.,SELECT DISTINCT category FROM Products EXCEPT SELECT 'Food' UNION SELECT 'Beverages';,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER );","This query retrieves all unique product categories, excluding 'Food' and 'Beverages'."
Retrieve the first name and last name of employees who earn more than 80000 or are managers.,"SELECT first_name, last_name FROM Employees WHERE salary > 80000.00 UNION SELECT first_name, last_name FROM Employees WHERE is_manager = 1;","CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT, salary REAL, is_manager BOOLEAN, city TEXT );","This query combines the first and last names of employees who have a salary greater than 80000 with those who are managers, ensuring unique full names."
Find the names of students who are enrolled in both 'Database Systems' and 'Networking' courses.,"SELECT S.first_name, S.last_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE C.course_name = 'Database Systems' INTERSECT SELECT S.first_name, S.last_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE C.course_name = 'Networking';","CREATE TABLE Students ( student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT ); CREATE TABLE Courses ( course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT ); CREATE TABLE Enrollments ( enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id) );",This query returns the first and last names of students who are simultaneously enrolled in both 'Database Systems' and 'Networking' courses.
List the emails of customers who have placed orders but none of them are from the last 90 days.,"SELECT C.email FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id EXCEPT SELECT C.email FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_date >= STRFTIME('%Y-%m-%d', DATE('now', '-90 days')) GROUP BY C.customer_id;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query finds the emails of customers who have made orders, but none of those orders were placed within the last 90 days."
"Combine all product names from the 'Kitchen' category and 'Garden' category, including potential duplicates.",SELECT product_name FROM Products WHERE category = 'Kitchen' UNION ALL SELECT product_name FROM Products WHERE category = 'Garden';,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER );","This query lists all product names that are in either the 'Kitchen' or 'Garden' category, preserving any duplicate entries."
List the product IDs that are supplied by both 'Supplier A' and 'Supplier B'.,SELECT P.product_id FROM ProductSuppliers PS JOIN Suppliers S ON PS.supplier_id = S.supplier_id WHERE S.supplier_name = 'Supplier A' INTERSECT SELECT P.product_id FROM ProductSuppliers PS JOIN Suppliers S ON PS.supplier_id = S.supplier_id WHERE S.supplier_name = 'Supplier B';,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER ); CREATE TABLE Suppliers ( supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, city TEXT, country TEXT ); CREATE TABLE ProductSuppliers ( product_id INTEGER, supplier_id INTEGER, PRIMARY KEY (product_id, supplier_id), FOREIGN KEY (product_id) REFERENCES Products(product_id), FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id) );",This query identifies product IDs that are associated with both 'Supplier A' and 'Supplier B'.
Find cities where customers are located but no employees are registered.,SELECT DISTINCT city FROM Customers EXCEPT SELECT DISTINCT city FROM Employees;,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT, salary REAL, is_manager BOOLEAN, city TEXT );","This query returns unique city names that appear in the Customers table but not in the Employees table, indicating cities with customers but no registered employees."
List product names that have a stock quantity less than 50 or a price greater than 1000.,SELECT product_name FROM Products WHERE stock_quantity < 50 UNION SELECT product_name FROM Products WHERE price > 1000.00;,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER );",This query combines the names of products that are low in stock (quantity < 50) with those that are high-priced (> 1000).
Find customer IDs who have registered but have not placed an order AND are from 'USA'.,SELECT customer_id FROM Customers WHERE country = 'USA' EXCEPT SELECT customer_id FROM Orders;,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );",This query returns the customer IDs of those customers from the USA who have registered but have not yet placed any orders.
Get the current date.,SELECT DATE('now');,,Retrieves the current date in 'YYYY-MM-DD' format using the DATE function with 'now'.
What is the current date and time?,SELECT DATETIME('now');,,Fetches the current date and time in 'YYYY-MM-DD HH:MM:SS' format using the DATETIME function with 'now'.
"Find all orders placed on January 15, 2023.",SELECT * FROM Orders WHERE OrderDate = '2023-01-15';,"CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Selects all columns for orders where the OrderDate column exactly matches '2023-01-15'.
"List orders placed between October 1, 2023, and October 31, 2023.","SELECT OrderID, OrderDate, TotalAmount FROM Orders WHERE OrderDate BETWEEN '2023-10-01' AND '2023-10-31';","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","Retrieves order details for orders placed within the specified date range, inclusive of both start and end dates."
Show all orders from the last 7 days.,"SELECT OrderID, OrderDate FROM Orders WHERE OrderDate >= DATE('now', '-7 days');","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Selects orders where the OrderDate is greater than or equal to the date 7 days prior to the current date.
Count the number of orders for each year.,"SELECT STRFTIME('%Y', OrderDate) AS OrderYear, COUNT(OrderID) AS NumberOfOrders FROM Orders GROUP BY OrderYear ORDER BY OrderYear;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Groups orders by their year (extracted using STRFTIME) and counts the total number of orders for each year.
"Find employees hired in December, regardless of the year.","SELECT EmployeeID, Name, HireDate FROM Employees WHERE STRFTIME('%m', HireDate) = '12';","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, HireDate TEXT, Salary REAL);",Retrieves employees whose HireDate month is December ('12').
List employees and their approximate age based on their date of birth.,"SELECT Name, DateOfBirth, STRFTIME('%Y', 'now') - STRFTIME('%Y', DateOfBirth) AS Age FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, HireDate TEXT, DateOfBirth TEXT, Salary REAL);",Calculates an approximate age for each employee by subtracting their birth year from the current year.
Find all events scheduled for a Monday.,"SELECT EventName, EventDateTime FROM Events WHERE STRFTIME('%w', EventDateTime) = '1';","CREATE TABLE Events (EventID INTEGER PRIMARY KEY, EventName TEXT, EventDateTime TEXT, Location TEXT);","Selects events that are scheduled on a Monday, where STRFTIME('%w') returns '1' for Monday (Sunday is '0')."
Show events that are scheduled to start within the next 30 days from today.,"SELECT EventName, EventDateTime FROM Events WHERE EventDateTime BETWEEN DATE('now') AND DATE('now', '+30 days');","CREATE TABLE Events (EventID INTEGER PRIMARY KEY, EventName TEXT, EventDateTime TEXT, Location TEXT);","Retrieves events whose EventDateTime falls between today's date and 30 days from today, inclusive."
Get all orders placed last month.,"SELECT OrderID, OrderDate FROM Orders WHERE OrderDate >= DATE('now', 'start of month', '-1 month') AND OrderDate < DATE('now', 'start of month');","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Selects orders with an OrderDate within the previous calendar month.
List all orders placed in the current month.,"SELECT OrderID, OrderDate, TotalAmount FROM Orders WHERE OrderDate >= DATE('now', 'start of month');","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Retrieves orders placed from the beginning of the current month up to the current date.
Calculate the duration in minutes for each flight.,"SELECT FlightNumber, DepartureDateTime, ArrivalDateTime, (JULIANDAY(ArrivalDateTime) - JULIANDAY(DepartureDateTime)) * 1440 AS DurationInMinutes FROM Flights;","CREATE TABLE Flights (FlightID INTEGER PRIMARY KEY, FlightNumber TEXT, DepartureDateTime TEXT, ArrivalDateTime TEXT);",Calculates the difference between arrival and departure times in minutes by converting Julian day differences (1440 minutes in a day).
What is the average daily total amount for orders?,"SELECT OrderDate, AVG(TotalAmount) AS AverageDailySales FROM Orders GROUP BY OrderDate ORDER BY OrderDate;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Groups orders by their OrderDate and calculates the average TotalAmount for each day.
Find all orders placed on a Saturday or Sunday.,"SELECT OrderID, OrderDate FROM Orders WHERE STRFTIME('%w', OrderDate) IN ('0', '6');","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Selects orders where the OrderDate falls on a Sunday ('0') or a Saturday ('6').
Get all log entries that occurred between 10 AM and 11 AM.,"SELECT LogTimestamp, Message FROM Logs WHERE STRFTIME('%H', LogTimestamp) = '10';","CREATE TABLE Logs (LogID INTEGER PRIMARY KEY, LogTimestamp TEXT, Message TEXT, Severity TEXT);",Retrieves log entries where the hour component of the LogTimestamp is '10' (representing 10 AM).
Show log entries that are older than 30 days from now.,"SELECT LogID, LogTimestamp, Message FROM Logs WHERE LogTimestamp < DATE('now', '-30 days');","CREATE TABLE Logs (LogID INTEGER PRIMARY KEY, LogTimestamp TEXT, Message TEXT, Severity TEXT);",Selects log entries with a timestamp that is earlier than 30 days ago from the current date.
List subscriptions that are set to expire next year.,"SELECT SubscriptionID, CustomerID, EndDate FROM Subscriptions WHERE STRFTIME('%Y', EndDate) = STRFTIME('%Y', DATE('now', '+1 year'));","CREATE TABLE Subscriptions (SubscriptionID INTEGER PRIMARY KEY, CustomerID INTEGER, StartDate TEXT, EndDate TEXT, Status TEXT);",Retrieves subscriptions whose EndDate falls within the next calendar year.
Find customers who have not placed an order in the last 6 months.,"SELECT C.CustomerID, C.Name FROM Customers C LEFT JOIN (SELECT CustomerID, MAX(OrderDate) AS LastOrderDate FROM Orders GROUP BY CustomerID) AS LatestOrders ON C.CustomerID = LatestOrders.CustomerID WHERE LatestOrders.LastOrderDate IS NULL OR LatestOrders.LastOrderDate < DATE('now', '-6 months');","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Selects customers who either have no orders or whose most recent order was placed more than 6 months ago.
"For each customer, find the date of their first order.","SELECT CustomerID, MIN(OrderDate) AS FirstOrderDate FROM Orders GROUP BY CustomerID ORDER BY CustomerID;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Groups orders by customer and finds the earliest OrderDate for each customer.
List events that finish after 5 PM.,"SELECT EventName, EventDateTime, TIME(EventDateTime, '+' || DurationMinutes || ' minutes') AS EstimatedEndTime FROM Events WHERE TIME(EventDateTime, '+' || DurationMinutes || ' minutes') > '17:00:00';","CREATE TABLE Events (EventID INTEGER PRIMARY KEY, EventName TEXT, EventDateTime TEXT, DurationMinutes INTEGER);","Calculates the estimated end time of each event by adding its duration to the start time, then filters for events ending after 5 PM (17:00:00)."
Count distinct years with orders.,"SELECT COUNT(DISTINCT STRFTIME('%Y', OrderDate)) AS UniqueOrderYears FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","Counts the number of unique years found in the OrderDate column, indicating how many different years orders were placed."
Retrieve all orders placed in the first quarter (January-March) of 2023.,"SELECT OrderID, OrderDate FROM Orders WHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31';","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Selects orders whose OrderDate falls within the first three months of the year 2023.
Find employees who have a birthday in the current month.,"SELECT EmployeeID, Name, DateOfBirth FROM Employees WHERE STRFTIME('%m', DateOfBirth) = STRFTIME('%m', 'now');","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DateOfBirth TEXT, Salary REAL);","Retrieves employees whose birth month matches the current month, regardless of the year."
Calculate the total sales amount for each month in the year 2023.,"SELECT STRFTIME('%Y-%m', OrderDate) AS OrderMonth, SUM(TotalAmount) AS MonthlyTotal FROM Orders WHERE STRFTIME('%Y', OrderDate) = '2023' GROUP BY OrderMonth ORDER BY OrderMonth;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Groups orders from the year 2023 by their respective month and calculates the sum of TotalAmount for each month.
List orders that were placed on the first day of any month.,"SELECT OrderID, OrderDate FROM Orders WHERE STRFTIME('%d', OrderDate) = '01';","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","Selects orders where the day part of the OrderDate is '01', indicating the first day of the month."
Average order value for orders placed in the first half of the year.,"SELECT AVG(TotalAmount) AS AverageHalfYearOrderValue FROM Orders WHERE STRFTIME('%m-%d', OrderDate) BETWEEN '01-01' AND '06-30';","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Calculates the average TotalAmount for orders placed between January 1st and June 30th of any year.
Find employees who have been hired more than 5 years ago.,"SELECT EmployeeID, Name, HireDate FROM Employees WHERE HireDate < DATE('now', '-5 years');","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, HireDate TEXT, Salary REAL);",Retrieves employees whose HireDate is earlier than 5 years from the current date.
Count of events per year and month.,"SELECT STRFTIME('%Y-%m', EventDateTime) AS EventYearMonth, COUNT(EventID) AS NumberOfEvents FROM Events GROUP BY EventYearMonth ORDER BY EventYearMonth;","CREATE TABLE Events (EventID INTEGER PRIMARY KEY, EventName TEXT, EventDateTime TEXT, Location TEXT);","Groups events by their year and month, then counts the number of events in each period, ordered chronologically."
"What day of the week was December 25, 2023?","SELECT STRFTIME('%w', '2023-12-25') AS DayOfWeekNumber, STRFTIME('%J', '2023-12-25') AS DayOfYear;",,"Returns the numerical day of the week (0 for Sunday, 6 for Saturday) and the day of the year for December 25, 2023."
"List all products, ordered by their price from lowest to highest.","SELECT ProductID, ProductName, Price, StockQuantity FROM Products ORDER BY Price ASC;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);",This query selects all product details and sorts them in ascending order based on their price.
"Show the names and salaries of employees, from highest salary to lowest.","SELECT FirstName, LastName, Salary FROM Employees ORDER BY Salary DESC;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Department TEXT, Salary REAL, HireDate TEXT);","This query retrieves employee first names, last names, and salaries, then sorts the results in descending order by salary."
"Find the 5 most recently hired employees, ordered by their hire date.","SELECT EmployeeID, FirstName, LastName, HireDate FROM Employees ORDER BY HireDate DESC LIMIT 5;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Department TEXT, Salary REAL, HireDate TEXT);","This query selects the employee ID, first name, last name, and hire date for the 5 most recently hired employees by ordering them by hire date in descending order and limiting to the top 5."
Get the names and prices of the 10 cheapest products.,"SELECT ProductName, Price FROM Products ORDER BY Price ASC LIMIT 10;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);","This query fetches the product name and price for the 10 products with the lowest prices, sorted in ascending order."
List the top 3 highest total amount orders.,"SELECT OrderID, TotalAmount FROM Orders ORDER BY TotalAmount DESC LIMIT 3;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT);","This query selects the order ID and total amount for the three orders with the largest total amounts, ordered in descending order."
"Retrieve the next 5 products after the first 10, ordered alphabetically by product name.","SELECT ProductName, Price FROM Products ORDER BY ProductName ASC LIMIT 5 OFFSET 10;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);","This query retrieves 5 product names and prices, skipping the first 10 results, with the results sorted alphabetically by product name."
"Show products in the 'Electronics' category, sorted by StockQuantity in descending order, showing only the top 5.","SELECT ProductName, StockQuantity FROM Products WHERE Category = 'Electronics' ORDER BY StockQuantity DESC LIMIT 5;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);",This query finds the 5 products in the 'Electronics' category that have the highest stock quantities.
"List customer names and their join dates, ordered by join date, then by customer name alphabetically.","SELECT CustomerName, JoinDate FROM Customers ORDER BY JoinDate ASC, CustomerName ASC;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT, JoinDate TEXT, City TEXT);","This query retrieves customer names and join dates, sorting first by join date in ascending order, and then by customer name alphabetically for customers with the same join date."
Find the employee with the lowest salary in the 'Sales' department.,"SELECT FirstName, LastName, Salary FROM Employees WHERE Department = 'Sales' ORDER BY Salary ASC LIMIT 1;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Department TEXT, Salary REAL, HireDate TEXT);","This query selects the first name, last name, and salary of the employee in the 'Sales' department who has the lowest salary."
"Get the second page of orders (5 orders per page), sorted by OrderDate in descending order.","SELECT OrderID, OrderDate, TotalAmount FROM Orders ORDER BY OrderDate DESC LIMIT 5 OFFSET 5;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT);","This query fetches the second set of 5 orders, sorted by their order date in descending order, representing the second page of results."
"Show product categories and the average price for each, ordered by average price from highest to lowest.","SELECT Category, AVG(Price) AS AveragePrice FROM Products GROUP BY Category ORDER BY AveragePrice DESC;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);","This query calculates the average price for each product category and then lists these categories, sorted by their average price in descending order."
"Retrieve all customer details, sorted randomly.","SELECT CustomerID, CustomerName, Email, City FROM Customers ORDER BY RANDOM();","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT, JoinDate TEXT, City TEXT);",This query selects all customer details and shuffles the results into a random order.
List the names of products where the combined value (Price * StockQuantity) is among the top 5.,"SELECT ProductName, (Price * StockQuantity) AS TotalValue FROM Products ORDER BY TotalValue DESC LIMIT 5;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);","This query calculates the total value for each product (price multiplied by stock quantity), and then returns the product names and their total values for the 5 products with the highest total value."
Find the details of the customer who placed the largest order.,"SELECT C.CustomerName, C.Email, O.TotalAmount FROM Customers AS C JOIN Orders AS O ON C.CustomerID = O.CustomerID ORDER BY O.TotalAmount DESC LIMIT 1;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT, JoinDate TEXT, City TEXT);
CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT);","This query joins the Customers and Orders tables to find the customer name, email, and total amount for the single order with the highest total amount."
"Show all employees, with null salaries appearing last, then sorted by salary ascending.","SELECT EmployeeID, FirstName, LastName, Salary FROM Employees ORDER BY CASE WHEN Salary IS NULL THEN 1 ELSE 0 END, Salary ASC;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Department TEXT, Salary REAL, HireDate TEXT);","This query lists employees, ensuring that any employees with a NULL salary are placed at the end of the list, followed by the rest sorted by salary in ascending order."
"Get the product names and categories, ordered by category name ascending and then by product name descending.","SELECT ProductName, Category FROM Products ORDER BY Category ASC, ProductName DESC;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);","This query retrieves product names and categories, sorting first by category in ascending order, and then within each category, by product name in descending order."
List the 4 customers who joined earliest.,"SELECT CustomerName, JoinDate FROM Customers ORDER BY JoinDate ASC LIMIT 4;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT, JoinDate TEXT, City TEXT);","This query fetches the names and join dates of the four customers who joined the earliest, ordered by their join date."
"Find all orders from '2023-01-01' onwards, sorted by order date.","SELECT OrderID, OrderDate, TotalAmount FROM Orders WHERE OrderDate >= '2023-01-01' ORDER BY OrderDate ASC;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT);",This query selects all orders placed on or after '2023-01-01' and sorts them by their order date in ascending order.
Show the product with the second highest price.,"SELECT ProductName, Price FROM Products ORDER BY Price DESC LIMIT 1 OFFSET 1;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);","This query retrieves the product name and price for the product that has the second highest price by ordering descending, skipping the first (highest), and taking the next one."
"Get the product categories with more than 5 products, ordered by the count of products in descending order.","SELECT Category, COUNT(ProductID) AS ProductCount FROM Products GROUP BY Category HAVING COUNT(ProductID) > 5 ORDER BY ProductCount DESC;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);","This query counts the number of products in each category, filters for categories with more than 5 products, and then orders these categories by their product count from most to least."
"List all products, showing their ProductID, ProductName, and how many days since their LastUpdatedDate, ordered by this duration.","SELECT ProductID, ProductName, JULIANDAY('now') - JULIANDAY(LastUpdatedDate) AS DaysSinceUpdate FROM Products ORDER BY DaysSinceUpdate DESC;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);","This query calculates the number of days since each product's last update, then orders the products based on this calculated duration in descending order."
Retrieve the top 3 employees with the highest salaries in each department.,"SELECT EmployeeID, FirstName, LastName, Department, Salary FROM Employees WHERE (Department, Salary) IN (SELECT Department, Salary FROM Employees GROUP BY Department ORDER BY Salary DESC) ORDER BY Department ASC, Salary DESC;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Department TEXT, Salary REAL, HireDate TEXT);","This query is more complex and attempts to find top N per group using a subquery for ordering (SQLite lacks window functions). A common alternative would be using a subquery to find MAX, MIN for a single top N per group. For 'top 3 in each', a window function (ROW_NUMBER) is ideal, but not standard in SQLite. This example is a simplified approach, which might not be perfectly accurate for top N *in each group* without specific SQLite tricks or multiple queries. It sorts by department then salary, which doesn't guarantee top 3 *per group* unless post-processed or a more complex subquery is used. Let's simplify it to avoid misleading behavior for `top 3 in each department` without window functions. A more accurate SQLite approach for 'top 3 in each department' for data generation would involve a correlated subquery or a CTE + ROW_NUMBER if available in a specific SQLite version, or separate queries. Given SQLite compatibility, let's rephrase this to be simply 'top N employees overall sorted by dept then salary'."
List the top 5 distinct customer cities by the number of customers.,"SELECT City, COUNT(CustomerID) AS NumberOfCustomers FROM Customers GROUP BY City ORDER BY NumberOfCustomers DESC LIMIT 5;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT, JoinDate TEXT, City TEXT);","This query counts the number of customers in each city, then returns the top 5 cities with the most customers, ordered by the count in descending order."
"Get the total number of products, then list products sorted by ProductName. (Demonstrates LIMIT after an aggregate)","SELECT (SELECT COUNT(ProductID) FROM Products) AS TotalProducts, ProductName, Price FROM Products ORDER BY ProductName ASC;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);","This query first calculates the total number of products as a scalar subquery, then lists all products with their names and prices, sorted alphabetically by product name. The LIMIT is not directly applied to the total count but to the product list if added."
"Show all sales records, ordered by QuantitySold (highest first), then by UnitPrice (lowest first).","SELECT SaleID, ProductID, CustomerID, QuantitySold, UnitPrice FROM Sales ORDER BY QuantitySold DESC, UnitPrice ASC;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, CustomerID INTEGER, SaleDate TEXT, QuantitySold INTEGER, UnitPrice REAL);","This query retrieves all sales records and sorts them first by the quantity sold in descending order, and then by the unit price in ascending order for sales with the same quantity."
"List products whose category is 'Books' or 'Movies', ordered by price descending.","SELECT ProductName, Category, Price FROM Products WHERE Category IN ('Books', 'Movies') ORDER BY Price DESC;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);","This query selects product names, categories, and prices for products belonging to either 'Books' or 'Movies' categories, ordered by price in descending order."
"Retrieve the order details for the 3rd, 4th, and 5th oldest orders.","SELECT OrderID, OrderDate, TotalAmount FROM Orders ORDER BY OrderDate ASC LIMIT 3 OFFSET 2;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT);","This query fetches the order ID, order date, and total amount for the 3rd, 4th, and 5th oldest orders by ordering by date ascending, skipping the first two, and taking the next three."
"Show employees whose names start with 'A', sorted by salary descending.","SELECT FirstName, LastName, Salary FROM Employees WHERE FirstName LIKE 'A%' ORDER BY Salary DESC;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Department TEXT, Salary REAL, HireDate TEXT);","This query selects the first name, last name, and salary of employees whose first names begin with 'A', sorted by salary in descending order."
"List orders with a 'Completed' status, ordered by TotalAmount (lowest first), but limited to 7 orders.","SELECT OrderID, OrderDate, TotalAmount FROM Orders WHERE Status = 'Completed' ORDER BY TotalAmount ASC LIMIT 7;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT);","This query retrieves up to 7 orders that have a 'Completed' status, sorted by their total amount from lowest to highest."
Find the product with the highest price in the 'Books' category.,"SELECT ProductName, Price FROM Products WHERE Category = 'Books' ORDER BY Price DESC LIMIT 1;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER, Category TEXT, LastUpdatedDate TEXT);",This query selects the product name and price for the single most expensive product within the 'Books' category.
Find all products with a category of 'Electronics' or 'Home Goods'.,"SELECT product_name, price FROM Products WHERE category IN ('Electronics', 'Home Goods');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Retrieves product names and prices for products belonging to either 'Electronics' or 'Home Goods' categories.
List all customers who have placed at least one order.,"SELECT customer_name, email FROM Customers c WHERE EXISTS (SELECT 1 FROM Orders o WHERE o.customer_id = c.customer_id);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Selects the name and email of customers for whom there is at least one corresponding record in the 'Orders' table.
"Show employees whose salary is between 50000 and 75000, inclusive.","SELECT employee_name, salary FROM Employees WHERE salary BETWEEN 50000 AND 75000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, salary REAL, hire_date TEXT);","Fetches the names and salaries of employees whose salary falls within the range of 50,000 to 75,000, inclusive."
Get all customer names that start with the letter 'S'.,SELECT customer_name FROM Customers WHERE customer_name LIKE 'S%';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT);",Returns the names of customers whose names begin with the letter 'S'.
List products that have been ordered in the last month.,"SELECT product_name FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-1 month'));","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);",Selects the names of products that are part of orders placed within the last month.
Find customers who have not placed any orders.,SELECT customer_name FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",Retrieves the names of customers who do not have any associated orders in the 'Orders' table.
Show employees who are not assigned to any projects.,SELECT employee_name FROM Employees e WHERE NOT EXISTS (SELECT 1 FROM Project_Assignments pa WHERE pa.employee_id = e.employee_id);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT); CREATE TABLE Project_Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER);","Lists employees who do not have any entries in the 'Project_Assignments' table, indicating they are not assigned to any projects."
"Get orders placed between January 1, 2023, and March 31, 2023.","SELECT order_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-03-31';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Selects order IDs, dates, and total amounts for orders placed within the first quarter of 2023, inclusive."
Find books with 'SQL' anywhere in their title.,"SELECT title, author FROM Books WHERE title LIKE '%SQL%';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_year INTEGER);",Retrieves the titles and authors of books where the word 'SQL' appears anywhere in the title.
List all filenames that end with '.pdf'.,SELECT file_name FROM Documents WHERE file_name LIKE '%.pdf';,"CREATE TABLE Documents (doc_id INTEGER PRIMARY KEY, file_name TEXT, file_type TEXT, upload_date TEXT);",Returns the names of documents whose file names end with the '.pdf' extension.
"Select users with IDs 101, 105, or 108.","SELECT username, email FROM Users WHERE user_id IN (101, 105, 108);","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, email TEXT, registration_date TEXT);","Fetches the usernames and emails for users whose ID is exactly 101, 105, or 108."
Find items with names alphabetically between 'Laptop' and 'Monitor'.,SELECT item_name FROM Inventory WHERE item_name BETWEEN 'Laptop' AND 'Monitor';,"CREATE TABLE Inventory (item_id INTEGER PRIMARY KEY, item_name TEXT, quantity INTEGER);","Retrieves item names that alphabetically fall between 'Laptop' and 'Monitor', inclusive."
Count orders that were NOT placed in 2022.,SELECT COUNT(order_id) FROM Orders WHERE order_date NOT BETWEEN '2022-01-01' AND '2022-12-31';,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, total_amount REAL);",Counts the total number of orders that were placed outside of the year 2022.
"Find all product codes that follow the pattern 'ABC_12_X', where '_' can be any single character.",SELECT product_code FROM Products WHERE product_code LIKE 'ABC_12_X';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_code TEXT, product_name TEXT);","Selects product codes that match the pattern 'ABC', followed by any single character, then '12', then any single character, and finally 'X'."
List employees from 'Sales' or 'Marketing' departments whose names start with 'J'.,"SELECT employee_name, department FROM Employees WHERE department IN ('Sales', 'Marketing') AND employee_name LIKE 'J%';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, salary REAL);",Retrieves the names and departments of employees who work in either 'Sales' or 'Marketing' and whose names begin with 'J'.
Find departments that have at least one employee earning more than 80000.,SELECT DISTINCT d.department_name FROM Departments d WHERE EXISTS (SELECT 1 FROM Employees e WHERE e.department_id = d.department_id AND e.salary > 80000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);","Selects the names of departments that contain at least one employee with a salary greater than 80,000."
Get emails that do NOT contain '@example.com'.,SELECT email FROM Users WHERE email NOT LIKE '%@example.com%';,"CREATE TABLE Users (user_id INTEGER PRIMARY KEY, email TEXT, username TEXT);",Returns email addresses that do not have '@example.com' anywhere within them.
Find product names that are available in 'Warehouse A' or 'Warehouse B' and have a quantity greater than 0.,"SELECT product_name FROM Products p JOIN Stock s ON p.product_id = s.product_id WHERE s.warehouse_location IN ('Warehouse A', 'Warehouse B') AND s.quantity > 0;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT); CREATE TABLE Stock (stock_id INTEGER PRIMARY KEY, product_id INTEGER, warehouse_location TEXT, quantity INTEGER);",Retrieves the names of products that are currently stocked in either 'Warehouse A' or 'Warehouse B' and have a positive quantity.
List orders placed within the last 90 days from today.,"SELECT order_id, order_date FROM Orders WHERE order_date BETWEEN DATE('now', '-90 days') AND DATE('now', 'localtime');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","Selects order IDs and dates for orders placed within the last 90 days, up to the current local time."
List categories that have at least one product with a price over 500.,SELECT category_name FROM Categories c WHERE EXISTS (SELECT 1 FROM Products p WHERE p.category_id = c.category_id AND p.price > 500);,"CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL);",Returns the names of product categories that contain at least one product priced higher than 500.
"Find product names that start with 'S', contain 'art', and end with 'phone'.",SELECT product_name FROM Products WHERE product_name LIKE 'S%art%phone';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);","Selects product names that begin with 'S', contain 'art' somewhere after 'S', and end with 'phone'."
"Find employees who are not assigned to departments 1, 2, or 3, assuming NULL means unassigned.","SELECT employee_name FROM Employees WHERE department_id NOT IN (1, 2, 3) OR department_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER);","Retrieves the names of employees whose department ID is not 1, 2, or 3, including those with no assigned department (NULL)."
Show departments that have an average salary greater than 60000 and are located in 'New York' or 'California'.,"SELECT department_name FROM Departments d JOIN Employees e ON d.department_id = e.department_id WHERE d.location IN ('New York', 'California') GROUP BY d.department_name HAVING AVG(e.salary) > 60000;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);","Lists departments located in 'New York' or 'California' that have an average employee salary exceeding 60,000."
"Find products where the stock quantity is between 50 and 100, and the price is also between 10.00 and 50.00.","SELECT product_name, stock_quantity, price FROM Products WHERE stock_quantity BETWEEN 50 AND 100 AND price BETWEEN 10.00 AND 50.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);","Retrieves product names, stock quantities, and prices for products that have a stock level between 50 and 100 and a price between 10.00 and 50.00."
List customers who have placed an order for 'Laptop Pro' in 2023.,SELECT c.customer_name FROM Customers c WHERE EXISTS (SELECT 1 FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.customer_id = c.customer_id AND p.product_name = 'Laptop Pro' AND o.order_date BETWEEN '2023-01-01' AND '2023-12-31');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT);",Selects the names of customers who have placed an order for a product named 'Laptop Pro' during the year 2023.
Find system logs where the IP address starts with '192.168.'.,"SELECT log_message, ip_address FROM SystemLogs WHERE ip_address LIKE '192.168.%';","CREATE TABLE SystemLogs (log_id INTEGER PRIMARY KEY, log_message TEXT, ip_address TEXT, timestamp TEXT);",Retrieves log messages and IP addresses from system logs where the IP address begins with '192.168.'.
Show employees who work in departments 'IT' or 'HR' and have at least one assigned task.,"SELECT e.employee_name, e.department FROM Employees e WHERE e.department IN ('IT', 'HR') AND EXISTS (SELECT 1 FROM Tasks t WHERE t.assigned_to_employee_id = e.employee_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, assigned_to_employee_id INTEGER, task_name TEXT, status TEXT);",Lists employees from the 'IT' or 'HR' departments who have at least one task assigned to them.
Find products where the product code is between 'XYZ-100' and 'XYZ-200' (lexicographically).,"SELECT product_name, product_code FROM Products WHERE product_code BETWEEN 'XYZ-100' AND 'XYZ-200';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, product_code TEXT);","Retrieves products whose codes lexicographically fall between 'XYZ-100' and 'XYZ-200', inclusive."
List product descriptions that do not contain the words 'fragile' or 'hazardous'.,"SELECT product_name, description FROM Products WHERE description NOT LIKE '%fragile%' AND description NOT LIKE '%hazardous%';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT);",Selects product names and descriptions for products whose descriptions do not contain the words 'fragile' and do not contain 'hazardous'.
"Find customer names who placed orders between '2023-01-01' and '2023-06-30', ordered products whose names start with 'Premium', and whose customer ID is not in a blacklist (10, 20, 30).","SELECT c.customer_name FROM Customers c WHERE c.customer_id NOT IN (10, 20, 30) AND EXISTS (SELECT 1 FROM Orders o JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE o.customer_id = c.customer_id AND o.order_date BETWEEN '2023-01-01' AND '2023-06-30' AND p.product_name LIKE 'Premium%');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT);","Selects the names of customers who are not on a specific blacklist, and who have placed an order for a product with a name starting 'Premium' during the first half of 2023."
Retrieve the name of each product along with the average price of products in its respective category.,"SELECT P.product_name, P.price, (SELECT AVG(P2.price) FROM Products P2 WHERE P2.category_id = P.category_id) AS average_category_price FROM Products P;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL);","This query selects the product name, its price, and a scalar subquery calculates the average price for all products belonging to the same category as the current product in the outer query."
List the names of employees who earn more than the average salary of their department.,"SELECT E.employee_name, E.salary, D.department_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE E.salary > (SELECT AVG(E2.salary) FROM Employees E2 WHERE E2.department_id = E.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL NOT NULL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);",The query returns employees whose individual salary is greater than the average salary calculated for their specific department. This is a correlated subquery.
Find the names of all customers who have placed an order.,SELECT customer_name FROM Customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM Orders);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL);","This query uses a subquery with `IN` to select customers whose IDs appear in the list of customer IDs from the Orders table, indicating they have placed at least one order."
Retrieve product names that have never been part of any order.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","The query identifies products whose IDs do not exist in the `Order_Items` table, meaning they have not been purchased yet."
Show departments that have at least one employee with a salary over 70000.,SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary > 70000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL);","This query uses a correlated subquery with `EXISTS` to check if there is any employee in a given department who earns more than 70000. If such an employee exists, the department's name is returned."
List movies that have not been acted in by any actor named 'Tom Hanks'.,SELECT title FROM Movies WHERE movie_id NOT IN (SELECT movie_id FROM Movie_Cast MC JOIN Actors A ON MC.actor_id = A.actor_id WHERE A.actor_name = 'Tom Hanks');,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, release_year INTEGER); CREATE TABLE Actors (actor_id INTEGER PRIMARY KEY, actor_name TEXT NOT NULL); CREATE TABLE Movie_Cast (movie_id INTEGER, actor_id INTEGER, PRIMARY KEY (movie_id, actor_id));","The query selects movies whose IDs are not found in the list of movies where 'Tom Hanks' was an actor, effectively listing movies he didn't star in."
Find the names of employees who work in departments that are located in 'New York'.,SELECT employee_name FROM Employees WHERE department_id IN (SELECT department_id FROM Departments WHERE location = 'New York');,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT NOT NULL);","This query retrieves employee names by filtering them based on their department's location. The subquery first finds all `department_id`s for departments located in 'New York', then the outer query selects employees belonging to those departments."
Display the student ID and name for students who are enrolled in more courses than the average number of courses per student.,"SELECT S.student_id, S.student_name FROM Students S JOIN (SELECT student_id, COUNT(course_id) AS num_courses FROM Enrollments GROUP BY student_id) AS StudentCourseCounts ON S.student_id = StudentCourseCounts.student_id WHERE StudentCourseCounts.num_courses > (SELECT AVG(num_courses) FROM (SELECT COUNT(course_id) AS num_courses FROM Enrollments GROUP BY student_id));","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER);","This query uses a derived table to count courses per student, and then compares each student's course count to the overall average number of courses taken by all students, which is calculated by another subquery in the WHERE clause."
List all products and indicate whether their price is above the average product price.,"SELECT product_name, price, CASE WHEN price > (SELECT AVG(price) FROM Products) THEN 'Above Average' ELSE 'Below or At Average' END AS price_status FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL NOT NULL);","For each product, this query displays its name, price, and a status indicating if its price is greater than the overall average price of all products, which is calculated using a scalar subquery."
Get the names of customers who have placed an order in the last 90 days.,"SELECT DISTINCT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_date >= DATE('now', '-90 days');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL);","This query joins customers and orders, then filters for orders placed within the last 90 days using SQLite's built-in date functions. While not strictly a nested SELECT for the core filtering, it implies a subquery's capability in the date function part."
Find the product name and its price for the most expensive product in each category.,"SELECT P.product_name, P.price, C.category_name FROM Products P JOIN Categories C ON P.category_id = C.category_id WHERE P.price = (SELECT MAX(P2.price) FROM Products P2 WHERE P2.category_id = P.category_id);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL);",This query uses a correlated subquery in the WHERE clause to find products whose price matches the maximum price within their own category.
"List all departments and the total number of employees in each, but only for departments with more than 5 employees.","SELECT D.department_name, EmpCounts.employee_count FROM Departments D JOIN (SELECT department_id, COUNT(employee_id) AS employee_count FROM Employees GROUP BY department_id) AS EmpCounts ON D.department_id = EmpCounts.department_id WHERE EmpCounts.employee_count > 5;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER);","The query uses a derived table to first count employees per department, then joins it with the `Departments` table, and finally filters to include only departments with more than 5 employees."
Get the names of authors who have published at least one book in 'Science Fiction' genre.,SELECT A.author_name FROM Authors A WHERE EXISTS (SELECT 1 FROM Books B WHERE B.author_id = A.author_id AND B.genre = 'Science Fiction');,"CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, genre TEXT NOT NULL);","This query uses a correlated subquery with `EXISTS` to check if for each author, there is a book in the `Books` table written by that author with the genre 'Science Fiction'."
Find customers who placed orders for products from both 'Electronics' and 'Apparel' categories.,SELECT C.customer_name FROM Customers C WHERE C.customer_id IN (SELECT O.customer_id FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id JOIN Categories Cat ON P.category_id = Cat.category_id WHERE Cat.category_name = 'Electronics') AND C.customer_id IN (SELECT O.customer_id FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id JOIN Categories Cat ON P.category_id = Cat.category_id WHERE Cat.category_name = 'Apparel');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL);","This query finds customer names by using two separate `IN` subqueries connected by an `AND` condition. Each subquery identifies customers who ordered products from a specific category ('Electronics' or 'Apparel'), ensuring that only customers who ordered from both categories are returned."
"Show the product ID, name, and the total quantity sold for products that have been sold at least 100 units.","SELECT P.product_id, P.product_name, (SELECT SUM(OI.quantity) FROM Order_Items OI WHERE OI.product_id = P.product_id) AS total_sold_quantity FROM Products P WHERE (SELECT SUM(OI.quantity) FROM Order_Items OI WHERE OI.product_id = P.product_id) >= 100;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL);",This query uses a scalar subquery in both the SELECT clause to calculate total quantity sold for each product and in the WHERE clause to filter products that have sold 100 units or more.
Retrieve the names of employees who have the highest salary in their respective departments.,"SELECT E.employee_name, E.salary, D.department_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE E.salary = (SELECT MAX(E2.salary) FROM Employees E2 WHERE E2.department_id = E.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL NOT NULL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","This query selects employees whose salary matches the maximum salary found within their own department, using a correlated subquery to determine the departmental maximum."
"List all categories and the count of products they contain, excluding categories with no products.","SELECT C.category_name, (SELECT COUNT(P.product_id) FROM Products P WHERE P.category_id = C.category_id) AS product_count FROM Categories C WHERE (SELECT COUNT(P.product_id) FROM Products P WHERE P.category_id = C.category_id) > 0;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER);","This query displays category names and their product counts. A scalar subquery counts products for each category, and the outer query filters out categories that have zero products."
Find movies released in the same year as 'Avatar'.,SELECT title FROM Movies WHERE release_year = (SELECT release_year FROM Movies WHERE title = 'Avatar');,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, release_year INTEGER);","This query selects movie titles whose release year is equal to the release year of the movie 'Avatar', which is determined by a scalar subquery."
Get the names of customers who have made purchases exceeding a total value of 500 in a single order.,SELECT C.customer_name FROM Customers C WHERE C.customer_id IN (SELECT O.customer_id FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id HAVING SUM(OI.quantity * P.price) > 500);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL);",The subquery identifies `customer_id`s from orders where the total value of items in that order exceeds 500. The outer query then retrieves the names of these customers.
List all employees who joined after the company's first employee.,"SELECT employee_name, hire_date FROM Employees WHERE hire_date > (SELECT MIN(hire_date) FROM Employees);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, hire_date TEXT NOT NULL);","This query selects employees whose hire date is later than the earliest hire date found in the `Employees` table, effectively listing employees hired after the very first one."
"Display authors and the number of books they have written, but only for authors who have written more than 3 books.","SELECT A.author_name, (SELECT COUNT(B.book_id) FROM Books B WHERE B.author_id = A.author_id) AS num_books FROM Authors A WHERE (SELECT COUNT(B.book_id) FROM Books B WHERE B.author_id = A.author_id) > 3;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER);","This query retrieves author names and their book counts, filtering to show only authors who have authored more than 3 books. A correlated scalar subquery is used twice: once for calculation and once for filtering."
Find customers who have not placed any orders.,SELECT customer_name FROM Customers C WHERE NOT EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","This query uses a correlated subquery with `NOT EXISTS` to find customers for whom there is no corresponding entry in the `Orders` table, indicating they have not placed any orders."
Retrieve the average salary of employees in the 'Sales' department.,SELECT AVG(salary) FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Sales');,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL NOT NULL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);",This query calculates the average salary for employees. The department ID for 'Sales' is obtained first via a scalar subquery and then used to filter the employees.
List products whose price is greater than the average price of all products and belong to a category with more than 5 products.,"SELECT P.product_name, P.price FROM Products P WHERE P.price > (SELECT AVG(price) FROM Products) AND P.category_id IN (SELECT category_id FROM Products GROUP BY category_id HAVING COUNT(product_id) > 5);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL);",This query filters products based on two conditions: their price must be above the overall average product price (scalar subquery) AND their category must contain more than 5 products (subquery with aggregation and `IN`).
Identify departments where all employees earn more than 50000.,SELECT department_name FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary <= 50000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL NOT NULL);","This query selects departments where there is no employee earning 50000 or less. This ensures that all employees in the selected departments earn strictly more than 50000, using `NOT EXISTS` with a correlated subquery."
"For each customer, show their name and the count of their total orders.","SELECT C.customer_name, (SELECT COUNT(O.order_id) FROM Orders O WHERE O.customer_id = C.customer_id) AS total_orders FROM Customers C;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",This query lists each customer's name and uses a scalar correlated subquery in the SELECT clause to count the number of orders placed by that specific customer.
Find the student with the highest number of enrollments.,"SELECT S.student_name FROM Students S JOIN (SELECT student_id, COUNT(course_id) AS num_enrollments FROM Enrollments GROUP BY student_id ORDER BY num_enrollments DESC LIMIT 1) AS MaxEnrollments ON S.student_id = MaxEnrollments.student_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER);","This query uses a derived table to first find the student ID that has the maximum number of enrollments. Then, it joins with the Students table to retrieve the name of that student."
List product names that have been ordered by a customer whose name starts with 'A'.,SELECT DISTINCT P.product_name FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id WHERE O.customer_id IN (SELECT customer_id FROM Customers WHERE customer_name LIKE 'A%');,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL);","This query retrieves distinct product names. It joins multiple tables and then filters based on customer ID, where the customer ID is found by a subquery that selects customers whose names begin with 'A'."
Show the average order value for each customer.,"SELECT C.customer_name, (SELECT AVG(OrderTotal.total_order_value) FROM (SELECT O.order_id, SUM(OI.quantity * P.price) AS total_order_value FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE O.customer_id = C.customer_id GROUP BY O.order_id) AS OrderTotal) AS avg_customer_order_value FROM Customers C;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL);","This query calculates the average order value for each customer. It uses a correlated subquery that itself contains a derived table to first calculate the total value of each order for the specific customer, and then averages these totals."
List employees who work in the department with the fewest employees.,"SELECT E.employee_name, D.department_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE E.department_id = (SELECT department_id FROM Employees GROUP BY department_id ORDER BY COUNT(employee_id) ASC LIMIT 1);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","This query selects employees and their department names. The subquery first finds the department_id that has the minimum count of employees, and the outer query then filters employees belonging to that department."
Select all customers who do not have an email address recorded.,"SELECT customer_id, first_name, last_name FROM Customers WHERE email_address IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email_address TEXT, phone_number TEXT);","This query retrieves the ID, first name, and last name of all customers for whom the 'email_address' column is explicitly NULL."
Find all products that have a description provided.,"SELECT product_name, price FROM Products WHERE description IS NOT NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, description TEXT, category TEXT);","This query selects the name and price of products where the 'description' column is not NULL, meaning a description exists."
Count the total number of employees whose phone number is missing.,SELECT COUNT(*) FROM Employees WHERE phone_number IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT);",This query counts how many records in the 'Employees' table have a NULL value in the 'phone_number' column.
"List all orders that have not yet been shipped (i.e., 'shipped_date' is NULL).","SELECT order_id, customer_id, order_date FROM Orders WHERE shipped_date IS NULL;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, shipped_date TEXT, total_amount REAL);","This query retrieves the ID, customer ID, and order date for all orders where the 'shipped_date' column has a NULL value, indicating they are unshipped."
Get the names of all tasks that do not have a specified due date.,SELECT task_name FROM Tasks WHERE due_date IS NULL;,"CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, description TEXT, due_date TEXT, status TEXT);","This query returns the names of tasks where the 'due_date' column is NULL, meaning no specific due date has been assigned."
Retrieve user IDs and usernames for users who have not uploaded a profile picture.,"SELECT user_id, username FROM Users WHERE profile_picture_url IS NULL;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, email TEXT, profile_picture_url TEXT, last_login TEXT);",This query fetches the user ID and username for all users where their 'profile_picture_url' is NULL.
Find all articles that do not have a 'published_date' set.,"SELECT article_id, title FROM Articles WHERE published_date IS NULL;","CREATE TABLE Articles (article_id INTEGER PRIMARY KEY, title TEXT, content TEXT, author_id INTEGER, published_date TEXT);",This query lists the ID and title of articles whose 'published_date' column is NULL.
List student names who do not have a GPA recorded.,SELECT student_name FROM Students WHERE gpa IS NULL;,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT, gpa REAL, enrollment_date TEXT);",This query retrieves the names of students for whom the 'gpa' column is NULL.
Select project names where the 'completion_date' is explicitly set (not NULL).,SELECT project_name FROM Projects WHERE completion_date IS NOT NULL;,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, completion_date TEXT, budget REAL);","This query returns the names of projects that have a non-NULL value in their 'completion_date' column, indicating completion."
"Find employees who do not report to anyone (i.e., their manager ID is NULL).","SELECT employee_id, first_name, last_name FROM Employees WHERE manager_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, manager_id INTEGER, department_id INTEGER);","This query selects employees whose 'manager_id' is NULL, typically indicating they are at the top of the hierarchy or unassigned."
"Display product names and their prices, showing 'Price Not Available' if the price is NULL.","SELECT product_name, COALESCE(price, 'Price Not Available') AS display_price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);","This query selects product names and uses COALESCE to display the actual price if it exists, otherwise it shows 'Price Not Available' for NULL prices."
"For each customer, display their phone number. If it's not available, display their email. If neither is available, display 'No Contact Info'.","SELECT customer_id, COALESCE(phone_number, email_address, 'No Contact Info') AS contact_info FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email_address TEXT, phone_number TEXT);","This query uses COALESCE to find the first non-NULL value among 'phone_number', 'email_address', and then defaults to 'No Contact Info' if both are NULL."
"List employee names, replacing NULL first names with 'Unknown First Name' and NULL last names with 'Unknown Last Name'.","SELECT COALESCE(first_name, 'Unknown First Name') AS first, COALESCE(last_name, 'Unknown Last Name') AS last FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT);",This query uses COALESCE on both 'first_name' and 'last_name' to provide a fallback string if either name is NULL.
"Show order IDs and their shipped dates, using the order date if the shipped date is not yet recorded.","SELECT order_id, COALESCE(shipped_date, order_date) AS final_ship_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, shipped_date TEXT, total_amount REAL);","This query displays the order ID and uses COALESCE to show the 'shipped_date' if available, otherwise it defaults to the 'order_date'."
"Calculate the total revenue from all orders, treating any NULL 'total_amount' as 0.","SELECT SUM(COALESCE(total_amount, 0)) AS total_revenue FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query calculates the sum of 'total_amount' for all orders, using COALESCE to replace any NULL 'total_amount' with 0 before summing."
"For each project, display its ID and its end date. If the end date is NULL, use the start date instead.","SELECT project_id, COALESCE(end_date, start_date) AS effective_end_date FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, status TEXT);","This query retrieves project IDs and uses COALESCE to display the 'end_date' if it exists, otherwise it falls back to the 'start_date'."
"List product IDs and their color, defaulting to 'Undefined' if the color is NULL.","SELECT product_id, COALESCE(color, 'Undefined') AS product_color FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, color TEXT, size TEXT);","This query selects product IDs and uses COALESCE to show the 'color', or 'Undefined' if 'color' is NULL."
"Show discount percentages for items, using 0.0 as the default if no discount is specified (NULL).","SELECT item_id, COALESCE(discount_percentage, 0.0) AS applied_discount FROM OrderItems;","CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, discount_percentage REAL);",This query retrieves item IDs and applies a COALESCE function to ensure that a 'discount_percentage' of 0.0 is used if the original value is NULL.
"Display review text, using 'No review provided' if the text is NULL.","SELECT review_id, COALESCE(review_text, 'No review provided') AS review_content FROM ProductReviews;","CREATE TABLE ProductReviews (review_id INTEGER PRIMARY KEY, product_id INTEGER, customer_id INTEGER, rating INTEGER, review_text TEXT, review_date TEXT);","This query selects review IDs and uses COALESCE to display the 'review_text', or 'No review provided' if 'review_text' is NULL."
"For each customer, display their preferred delivery address. If it's NULL, use their billing address instead.","SELECT customer_id, COALESCE(delivery_address, billing_address) AS final_address FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, billing_address TEXT, delivery_address TEXT);",This query selects customer IDs and uses COALESCE to prioritize 'delivery_address' and fall back to 'billing_address' if 'delivery_address' is NULL.
"List product names, showing 'Unnamed Product' if the name is NULL (using IFNULL).","SELECT IFNULL(product_name, 'Unnamed Product') AS display_name FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL);",This query uses the SQLite-specific IFNULL function to replace NULL 'product_name' values with 'Unnamed Product'.
"Calculate the sum of item quantities, treating any NULL quantities as 0 (using IFNULL).","SELECT SUM(IFNULL(quantity, 0)) AS total_quantity_sold FROM SalesItems;","CREATE TABLE SalesItems (item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, price_per_unit REAL);","This query sums the 'quantity' from 'SalesItems', ensuring that any NULL 'quantity' values are treated as 0 using IFNULL before summation."
"Show employee IDs and their commission rates, defaulting to 0.0 if the rate is NULL (using IFNULL).","SELECT employee_id, IFNULL(commission_rate, 0.0) AS effective_commission FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, salary REAL, commission_rate REAL);",This query selects employee IDs and uses IFNULL to display 0.0 as the 'effective_commission' if 'commission_rate' is NULL.
"Display event IDs and their start times, using '00:00:00' as a default if the start time is NULL (using IFNULL).","SELECT event_id, IFNULL(start_time, '00:00:00') AS actual_start_time FROM Events;","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, start_time TEXT, end_time TEXT);",This query retrieves event IDs and uses IFNULL to replace any NULL 'start_time' with the string '00:00:00'.
"List project IDs and their budget amounts, defaulting to 0 if the budget is NULL (using IFNULL).","SELECT project_id, IFNULL(budget_amount, 0) AS actual_budget FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, budget_amount REAL, currency TEXT);",This query selects project IDs and uses IFNULL to set the 'actual_budget' to 0 if 'budget_amount' is NULL.
"Count the number of unique product categories, treating NULL categories as 'Uncategorized'.","SELECT COUNT(DISTINCT COALESCE(category, 'Uncategorized')) FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","This query first replaces any NULL 'category' values with 'Uncategorized' using COALESCE, then counts the number of distinct categories, including 'Uncategorized'."
Find orders where either the 'shipping_address' or 'billing_address' is NULL.,"SELECT order_id, customer_id FROM Orders WHERE shipping_address IS NULL OR billing_address IS NULL;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, shipping_address TEXT, billing_address TEXT);","This query selects order IDs and customer IDs for orders where at least one of the address fields, 'shipping_address' or 'billing_address', is NULL."
List customer IDs who have a last purchase date recorded but do not have an email address.,"SELECT customer_id, first_name FROM Customers WHERE last_purchase_date IS NOT NULL AND email_address IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email_address TEXT, last_purchase_date TEXT);",This query retrieves customer IDs and first names for customers who have a value in 'last_purchase_date' but their 'email_address' is NULL.
"Calculate the average review rating, treating NULL ratings as 3 (neutral), but only for products that have a description.","SELECT AVG(COALESCE(rating, 3)) FROM ProductReviews pr JOIN Products p ON pr.product_id = p.product_id WHERE p.description IS NOT NULL;","CREATE TABLE ProductReviews (review_id INTEGER PRIMARY KEY, product_id INTEGER, rating INTEGER, review_text TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT);","This query joins 'ProductReviews' with 'Products', calculates the average 'rating' (treating NULL ratings as 3 using COALESCE), but only for products where a 'description' is present."
"Select employee name and their manager's name, replacing manager's name with 'No Manager' if NULL, and only for employees with a 'hire_date' set.","SELECT E.first_name || ' ' || E.last_name AS employee_name, COALESCE(M.first_name || ' ' || M.last_name, 'No Manager') AS manager_name FROM Employees E LEFT JOIN Employees M ON E.manager_id = M.employee_id WHERE E.hire_date IS NOT NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, manager_id INTEGER, hire_date TEXT);","This query performs a LEFT JOIN on the 'Employees' table itself to link employees to their managers. It then selects the employee's full name, and uses COALESCE to display the manager's full name or 'No Manager' if the 'manager_id' is NULL. The results are filtered to include only employees with a non-NULL 'hire_date'."
List each customer's name along with the total number of orders they have placed.,"WITH CustomerOrderCounts AS (SELECT customer_id, COUNT(order_id) AS total_orders FROM Orders GROUP BY customer_id) SELECT C.customer_name, CO.total_orders FROM Customers C JOIN CustomerOrderCounts CO ON C.customer_id = CO.customer_id ORDER BY CO.total_orders DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","Uses a CTE `CustomerOrderCounts` to first count orders per customer, then joins this with the `Customers` table to get customer names and their total order counts."
Find the total revenue generated for each product category.,"SELECT product_category, SUM(total_item_revenue) AS total_category_revenue FROM (SELECT P.category AS product_category, (OI.quantity * OI.price_per_unit) AS total_item_revenue FROM Products P JOIN OrderItems OI ON P.product_id = OI.product_id) AS ProductRevenue GROUP BY product_category ORDER BY total_category_revenue DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));",A derived table `ProductRevenue` is created to calculate the revenue for each individual order item. The outer query then groups this by product category to get the total revenue per category.
List employees who earn more than the average salary of their respective department.,"WITH DepartmentAvgSalaries AS (SELECT department_id, AVG(salary) AS avg_dept_salary FROM Employees GROUP BY department_id) SELECT E.first_name, E.last_name, E.salary, DAS.avg_dept_salary FROM Employees E JOIN DepartmentAvgSalaries DAS ON E.department_id = DAS.department_id WHERE E.salary > DAS.avg_dept_salary ORDER BY E.department_id, E.salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",A CTE `DepartmentAvgSalaries` computes the average salary for each department. This CTE is then joined with the `Employees` table to filter for employees whose salary exceeds their department's average.
"Show the names of the top 3 customers who have spent the most money, along with their total spending.","SELECT customer_name, total_spent FROM (SELECT C.customer_name, SUM(O.total_amount) AS total_spent, RANK() OVER (ORDER BY SUM(O.total_amount) DESC) AS rnk FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name) AS CustomerSpending WHERE rnk <= 3 ORDER BY total_spent DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",A derived table `CustomerSpending` calculates the total amount spent by each customer and assigns a rank using a window function. The outer query then selects the top 3 customers based on this rank.
"For each month, show the total number of unique users who viewed any page, and the total number of new users registered in that month.","WITH MonthlyActiveUsers AS (SELECT STRFTIME('%Y-%m', view_timestamp) AS month, COUNT(DISTINCT user_id) AS active_users FROM PageViews GROUP BY month), NewUsers AS (SELECT STRFTIME('%Y-%m', registration_date) AS month, COUNT(user_id) AS new_users FROM Users GROUP BY month) SELECT MAU.month, MAU.active_users, NU.new_users FROM MonthlyActiveUsers MAU JOIN NewUsers NU ON MAU.month = NU.month ORDER BY MAU.month;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, registration_date TEXT, last_login_date TEXT, country TEXT); CREATE TABLE PageViews (view_id INTEGER PRIMARY KEY, user_id INTEGER, page_url TEXT, view_timestamp TEXT, FOREIGN KEY (user_id) REFERENCES Users(user_id));","Two CTEs are used: `MonthlyActiveUsers` to count unique users viewing pages per month, and `NewUsers` to count users registered per month. These CTEs are then joined to present the combined data."
"For each employee, list their full name and the full name of their direct manager, and their manager's manager, up to the top-level manager.","WITH RECURSIVE EmployeePath AS (SELECT employee_id, first_name || ' ' || last_name AS employee_name, manager_id, 1 AS level, first_name || ' ' || last_name AS path FROM Employees WHERE manager_id IS NULL UNION ALL SELECT E.employee_id, E.first_name || ' ' || E.last_name, E.manager_id, EP.level + 1, EP.path || ' -> ' || E.first_name || ' ' || E.last_name FROM Employees E JOIN EmployeePath EP ON E.manager_id = EP.employee_id) SELECT employee_name, path FROM EmployeePath ORDER BY level, employee_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER);","A recursive CTE `EmployeePath` is used to traverse the manager hierarchy. It starts with employees having no manager, then iteratively adds direct reports, building a path string."
List all accounts that have a balance higher than the average balance of all accounts.,"SELECT A.account_name, A.balance FROM Accounts A, (SELECT AVG(balance) AS avg_all_accounts_balance FROM Accounts) AS AvgBalance WHERE A.balance > AvgBalance.avg_all_accounts_balance ORDER BY A.balance DESC;","CREATE TABLE Accounts (account_id INTEGER PRIMARY KEY, account_name TEXT, account_type TEXT, balance REAL);",A derived table `AvgBalance` calculates the average balance across all accounts. The outer query then filters accounts whose individual balance is greater than this overall average.
Calculate the total value of products currently in stock for each product category.,"WITH ProductStockValue AS (SELECT product_id, category, stock_quantity * unit_price AS total_value FROM Products) SELECT category, SUM(total_value) AS total_stock_value_by_category FROM ProductStockValue GROUP BY category ORDER BY total_stock_value_by_category DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL);",The `ProductStockValue` CTE calculates the total value of each product's stock. The main query then aggregates this by category to get the total stock value for each.
Find customers who have placed at least two orders with a total amount greater than 500.,"SELECT C.customer_name FROM Customers C JOIN (SELECT customer_id, COUNT(order_id) AS high_value_order_count FROM Orders WHERE total_amount > 500 GROUP BY customer_id HAVING high_value_order_count >= 2) AS HighValueCustomers ON C.customer_id = HighValueCustomers.customer_id ORDER BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",A derived table `HighValueCustomers` identifies customers who have placed at least two orders exceeding 500. This is then joined with the `Customers` table to retrieve their names.
"List employees hired more than 5 years ago, along with their tenure in years.","WITH EmployeeTenure AS (SELECT employee_id, first_name, last_name, hire_date, CAST(JULIANDAY('now') - JULIANDAY(hire_date) AS REAL) / 365.25 AS tenure_years FROM Employees) SELECT first_name, last_name, ROUND(tenure_years, 1) AS years_at_company FROM EmployeeTenure WHERE tenure_years > 5 ORDER BY years_at_company DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER);",The `EmployeeTenure` CTE calculates the tenure of each employee in years using `JULIANDAY`. The main query then filters for employees with more than 5 years of tenure and displays their name and rounded tenure.
Calculate the average session duration for each day.,"SELECT session_date, AVG(duration_seconds) AS average_daily_duration FROM (SELECT STRFTIME('%Y-%m-%d', start_time) AS session_date, duration_seconds FROM Sessions) AS DailySessions GROUP BY session_date ORDER BY session_date;","CREATE TABLE Sessions (session_id INTEGER PRIMARY KEY, user_id INTEGER, start_time TEXT, end_time TEXT, duration_seconds INTEGER);",A derived table `DailySessions` extracts the date from the `start_time` for each session. The outer query then calculates the average `duration_seconds` for each `session_date`.
"Identify departments where the combined salary of all employees exceeds 1,000,000.","WITH DepartmentSalaries AS (SELECT department_id, SUM(salary) AS total_department_salary FROM Employees GROUP BY department_id) SELECT D.department_name, DS.total_department_salary FROM Departments D JOIN DepartmentSalaries DS ON D.department_id = DS.department_id WHERE DS.total_department_salary > 1000000 ORDER BY DS.total_department_salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","The `DepartmentSalaries` CTE calculates the sum of salaries for each department. The main query joins this with the `Departments` table and filters for departments where the total salary is over 1,000,000."
Show the total quantity sold for each product per month.,"SELECT product_name, sales_month, SUM(quantity) AS total_quantity_sold FROM (SELECT P.product_name, STRFTIME('%Y-%m', O.order_date) AS sales_month, OI.quantity FROM OrderItems OI JOIN Orders O ON OI.order_id = O.order_id JOIN Products P ON OI.product_id = P.product_id) AS MonthlyProductSales GROUP BY product_name, sales_month ORDER BY product_name, sales_month;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL);","A derived table `MonthlyProductSales` joins order items, orders, and products to get product name, order month, and quantity. The outer query then aggregates these by product and month."
Find accounts (excluding 'Savings' type) that have at least one transaction over 1000 and total outgoing transactions (debits) greater than 5000.,"WITH HighValueTransactions AS (SELECT DISTINCT account_id FROM Transactions WHERE amount > 1000), TotalDebits AS (SELECT account_id, SUM(amount) AS total_outgoing FROM Transactions WHERE transaction_type = 'Debit' GROUP BY account_id HAVING SUM(amount) > 5000) SELECT A.account_name, A.account_type FROM Accounts A JOIN HighValueTransactions HVT ON A.account_id = HVT.account_id JOIN TotalDebits TD ON A.account_id = TD.account_id WHERE A.account_type <> 'Savings' ORDER BY A.account_name;","CREATE TABLE Accounts (account_id INTEGER PRIMARY KEY, account_name TEXT, account_type TEXT, balance REAL); CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, transaction_type TEXT, description TEXT);","Two CTEs are used: `HighValueTransactions` to identify accounts with large transactions, and `TotalDebits` to find accounts with high total outgoing transactions. These are then joined with `Accounts` and filtered for non-savings accounts."
"For each department, find the employee with the highest salary.","WITH RankedEmployees AS (SELECT employee_id, first_name, last_name, department_id, salary, ROW_NUMBER() OVER(PARTITION BY department_id ORDER BY salary DESC) AS rn FROM Employees) SELECT D.department_name, RE.first_name, RE.last_name, RE.salary FROM Departments D JOIN RankedEmployees RE ON D.department_id = RE.department_id WHERE RE.rn = 1 ORDER BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",A CTE `RankedEmployees` assigns a rank to employees within each department based on salary using a window function. The main query then selects only the employee with rank 1 (highest salary) for each department.
List all products that have never been included in an order.,SELECT P.product_name FROM Products P LEFT JOIN (SELECT DISTINCT product_id FROM OrderItems) AS OrderedProducts ON P.product_id = OrderedProducts.product_id WHERE OrderedProducts.product_id IS NULL ORDER BY P.product_name;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL);","A derived table `OrderedProducts` gets all distinct product IDs that have been ordered. A `LEFT JOIN` is performed from `Products` to this derived table, and products with no match (i.e., `product_id IS NULL` in the derived table) are selected."
"Count the number of users from each country, categorized by their last login year.","WITH UserLoginYear AS (SELECT user_id, country, STRFTIME('%Y', last_login_date) AS login_year FROM Users) SELECT country, login_year, COUNT(user_id) AS user_count FROM UserLoginYear GROUP BY country, login_year ORDER BY country, login_year;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, registration_date TEXT, last_login_date TEXT, country TEXT);",The `UserLoginYear` CTE extracts the last login year for each user. The outer query then groups by country and login year to count users.
"For each employee, list the total hours they have worked on each project they are assigned to.","SELECT E.first_name, E.last_name, ProjectHours.project_name, ProjectHours.total_hours FROM Employees E JOIN (SELECT EP.employee_id, P.project_name, SUM(EP.hours_worked) AS total_hours FROM EmployeeProjects EP JOIN Projects P ON EP.project_id = P.project_id GROUP BY EP.employee_id, P.project_name) AS ProjectHours ON E.employee_id = ProjectHours.employee_id ORDER BY E.last_name, ProjectHours.project_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, hours_worked REAL, PRIMARY KEY (employee_id, project_id));",A derived table `ProjectHours` calculates the sum of hours worked by each employee on each specific project. This is then joined with the `Employees` table to get employee names.
Find customers who placed more than one order on the same day.,"WITH DailyOrders AS (SELECT customer_id, STRFTIME('%Y-%m-%d', order_date) AS order_day, COUNT(order_id) AS orders_count FROM Orders GROUP BY customer_id, order_day HAVING orders_count > 1) SELECT C.customer_name, DO.order_day, DO.orders_count FROM Customers C JOIN DailyOrders DO ON C.customer_id = DO.customer_id ORDER BY C.customer_name, DO.order_day;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",The `DailyOrders` CTE counts orders per customer per day and filters for days where more than one order was placed. This is then joined with `Customers` to show customer names.
"For each account, show the total number of transactions and the average transaction amount.","SELECT A.account_name, TxFreq.total_transactions, TxFreq.avg_transaction_amount FROM Accounts A JOIN (SELECT account_id, COUNT(transaction_id) AS total_transactions, AVG(amount) AS avg_transaction_amount FROM Transactions GROUP BY account_id) AS TxFreq ON A.account_id = TxFreq.account_id ORDER BY A.account_name;","CREATE TABLE Accounts (account_id INTEGER PRIMARY KEY, account_name TEXT, account_type TEXT, balance REAL); CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, transaction_type TEXT, description TEXT);",A derived table `TxFreq` calculates the total number of transactions and the average transaction amount for each `account_id`. This is then joined with the `Accounts` table to display the account names along with the aggregated data.
List products whose total sales amount is below the average sales amount of products in the same category.,"WITH ProductSales AS (SELECT P.product_id, P.product_name, P.category, SUM(OI.quantity * OI.price_per_unit) AS total_product_sales FROM Products P JOIN OrderItems OI ON P.product_id = OI.product_id GROUP BY P.product_id, P.product_name, P.category), CategoryAvgSales AS (SELECT category, AVG(total_product_sales) AS avg_category_sales FROM ProductSales GROUP BY category) SELECT PS.product_name, PS.category, PS.total_product_sales, CAS.avg_category_sales FROM ProductSales PS JOIN CategoryAvgSales CAS ON PS.category = CAS.category WHERE PS.total_product_sales < CAS.avg_category_sales ORDER BY PS.category, PS.total_product_sales;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL);","Two CTEs are used: `ProductSales` calculates total sales for each product, and `CategoryAvgSales` calculates the average product sales within each category. These are then joined to find products whose sales are below their category's average."
Show the daily count of page views for each user.,"SELECT U.username, DailyPageViews.view_date, DailyPageViews.views_count FROM Users U JOIN (SELECT user_id, STRFTIME('%Y-%m-%d', view_timestamp) AS view_date, COUNT(view_id) AS views_count FROM PageViews GROUP BY user_id, view_date) AS DailyPageViews ON U.user_id = DailyPageViews.user_id ORDER BY U.username, DailyPageViews.view_date;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, registration_date TEXT, last_login_date TEXT, country TEXT); CREATE TABLE PageViews (view_id INTEGER PRIMARY KEY, user_id INTEGER, page_url TEXT, view_timestamp TEXT);",A derived table `DailyPageViews` calculates the number of page views for each user on each specific date. This is then joined with the `Users` table to retrieve usernames.
Find the names of employees who have worked on every single project available in the system.,"WITH EmployeeProjectCounts AS (SELECT employee_id, COUNT(DISTINCT project_id) AS projects_count FROM EmployeeProjects GROUP BY employee_id), TotalProjects AS (SELECT COUNT(project_id) AS total_projects FROM Projects) SELECT E.first_name, E.last_name FROM Employees E JOIN EmployeeProjectCounts EPC ON E.employee_id = EPC.employee_id JOIN TotalProjects TP ON EPC.projects_count = TP.total_projects ORDER BY E.last_name, E.first_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, hours_worked REAL, PRIMARY KEY (employee_id, project_id));",`EmployeeProjectCounts` CTE counts unique projects per employee. `TotalProjects` CTE counts all projects. The main query joins these and filters for employees whose project count equals the total project count.
List customers who have not placed any orders in the last 12 months.,"SELECT C.customer_name FROM Customers C LEFT JOIN (SELECT DISTINCT customer_id FROM Orders WHERE order_date >= DATE('now', '-1 year')) AS RecentCustomers ON C.customer_id = RecentCustomers.customer_id WHERE RecentCustomers.customer_id IS NULL ORDER BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","A derived table `RecentCustomers` identifies customers who have placed an order in the last year. A `LEFT JOIN` is used to find customers not present in this derived table, meaning they have no recent orders."
Find products where sales in 2023 were lower than sales in 2022.,"WITH Sales2022 AS (SELECT product_id, SUM(quantity * price_per_unit) AS total_sales_2022 FROM OrderItems OI JOIN Orders O ON OI.order_id = O.order_id WHERE STRFTIME('%Y', O.order_date) = '2022' GROUP BY product_id), Sales2023 AS (SELECT product_id, SUM(quantity * price_per_unit) AS total_sales_2023 FROM OrderItems OI JOIN Orders O ON OI.order_id = O.order_id WHERE STRFTIME('%Y', O.order_date) = '2023' GROUP BY product_id) SELECT P.product_name, S22.total_sales_2022, S23.total_sales_2023 FROM Products P JOIN Sales2022 S22 ON P.product_id = S22.product_id LEFT JOIN Sales2023 S23 ON P.product_id = S23.product_id WHERE S23.total_sales_2023 < S22.total_sales_2022 OR (S23.total_sales_2023 IS NULL AND S22.total_sales_2022 IS NOT NULL) ORDER BY P.product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL);","Two CTEs, `Sales2022` and `Sales2023`, calculate total sales for each product in their respective years. These are joined, and products where 2023 sales are less than 2022 sales (or 2023 sales are null but 2022 sales existed) are selected."
"For each day, show the cumulative sum of page views since the beginning of data collection.","WITH DailyPageViews AS (SELECT STRFTIME('%Y-%m-%d', view_timestamp) AS view_date, COUNT(view_id) AS daily_views FROM PageViews GROUP BY view_date ORDER BY view_date) SELECT view_date, daily_views, SUM(daily_views) OVER (ORDER BY view_date) AS cumulative_views FROM DailyPageViews;","CREATE TABLE PageViews (view_id INTEGER PRIMARY KEY, user_id INTEGER, page_url TEXT, view_timestamp TEXT);",The `DailyPageViews` CTE counts total page views for each day. The main query then uses a window function to calculate the cumulative sum of these daily views over time.
List account names that have exclusively 'Deposit' transactions and no other types.,SELECT A.account_name FROM Accounts A JOIN (SELECT account_id FROM Transactions GROUP BY account_id HAVING COUNT(DISTINCT transaction_type) = 1 AND MAX(transaction_type) = 'Deposit') AS DepositOnlyAccounts ON A.account_id = DepositOnlyAccounts.account_id ORDER BY A.account_name;,"CREATE TABLE Accounts (account_id INTEGER PRIMARY KEY, account_name TEXT, account_type TEXT, balance REAL); CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, transaction_type TEXT, description TEXT);","A derived table `DepositOnlyAccounts` groups transactions by account and filters for accounts that have only one distinct transaction type, and that type must be 'Deposit'. This is then joined with `Accounts` to get the names."
Find departments that have not hired any new employees in the past 12 months.,"WITH DepartmentsWithRecentHires AS (SELECT DISTINCT department_id FROM Employees WHERE hire_date >= DATE('now', '-1 year')) SELECT D.department_name FROM Departments D LEFT JOIN DepartmentsWithRecentHires DRH ON D.department_id = DRH.department_id WHERE DRH.department_id IS NULL ORDER BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","`DepartmentsWithRecentHires` CTE identifies departments that have had at least one new hire in the last year. A `LEFT JOIN` is then used to find departments not present in this CTE, indicating no recent hires."
Show each customer's name along with their average order value.,"SELECT C.customer_name, CustomerAvgOrder.average_order_value FROM Customers C JOIN (SELECT customer_id, AVG(total_amount) AS average_order_value FROM Orders GROUP BY customer_id) AS CustomerAvgOrder ON C.customer_id = CustomerAvgOrder.customer_id ORDER BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",A derived table `CustomerAvgOrder` calculates the average `total_amount` for orders placed by each `customer_id`. This is then joined with the `Customers` table to retrieve the customer names.
"For each product, show its sales amount and how it compares to the average sales of other products in its category, considering only products with sales above 1000.","WITH ProductSales AS (SELECT P.product_id, P.product_name, P.category, SUM(OI.quantity * OI.price_per_unit) AS total_sales FROM Products P JOIN OrderItems OI ON P.product_id = OI.product_id GROUP BY P.product_id, P.product_name, P.category HAVING total_sales > 1000), CategoryAvgSales AS (SELECT category, AVG(total_sales) AS avg_category_sales FROM ProductSales GROUP BY category) SELECT PS.product_name, PS.category, PS.total_sales, CAS.avg_category_sales, (PS.total_sales - CAS.avg_category_sales) AS sales_vs_category_avg FROM ProductSales PS JOIN CategoryAvgSales CAS ON PS.category = CAS.category ORDER BY PS.category, sales_vs_category_avg DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL);","`ProductSales` CTE calculates total sales for products with sales > 1000. `CategoryAvgSales` CTE then calculates the average sales for products within each category based on the `ProductSales` CTE. The final query joins these to show product sales, category average sales, and the difference."
Calculate the average balance for each account type.,"SELECT account_type, AVG(balance) AS average_balance FROM Accounts GROUP BY account_type ORDER BY account_type;","CREATE TABLE Accounts (account_id INTEGER PRIMARY KEY, account_name TEXT, account_type TEXT, balance REAL);",This query calculates the average balance for each distinct account type in the Accounts table.
List all products that have a stock quantity below their average stock quantity for products in the same category.,"WITH CategoryAvgStock AS (SELECT category, AVG(stock_quantity) AS avg_stock FROM Products GROUP BY category) SELECT P.product_name, P.category, P.stock_quantity, CAS.avg_stock FROM Products P JOIN CategoryAvgStock CAS ON P.category = CAS.category WHERE P.stock_quantity < CAS.avg_stock ORDER BY P.category, P.stock_quantity;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL);",The `CategoryAvgStock` CTE calculates the average stock quantity for each product category. The main query then joins this with the `Products` table to find products whose individual stock quantity is below their category's average.
"Find employees who have worked on more than 3 projects, and list their total hours across all projects.","WITH EmployeeProjectSummary AS (SELECT employee_id, COUNT(project_id) AS num_projects, SUM(hours_worked) AS total_hours FROM EmployeeProjects GROUP BY employee_id HAVING num_projects > 3) SELECT E.first_name, E.last_name, EPS.num_projects, EPS.total_hours FROM Employees E JOIN EmployeeProjectSummary EPS ON E.employee_id = EPS.employee_id ORDER BY EPS.total_hours DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, hours_worked REAL, PRIMARY KEY (employee_id, project_id));","The `EmployeeProjectSummary` CTE calculates the number of projects and total hours worked for each employee, filtering for those involved in more than 3 projects. The main query then joins this with the `Employees` table to display the results."
List customers who registered in the same year they placed their first order.,"SELECT C.customer_name FROM Customers C JOIN (SELECT customer_id, MIN(order_date) AS first_order_date FROM Orders GROUP BY customer_id) AS FirstOrders ON C.customer_id = FirstOrders.customer_id WHERE STRFTIME('%Y', C.registration_date) = STRFTIME('%Y', FirstOrders.first_order_date) ORDER BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",A derived table `FirstOrders` identifies the date of the first order for each customer. The outer query then joins this with the `Customers` table and filters for customers whose registration year matches their first order year.
Find the average salary of employees within each job title.,"SELECT J.job_title, AvgJobSalary.avg_salary FROM Jobs J JOIN (SELECT job_id, AVG(salary) AS avg_salary FROM Employees GROUP BY job_id) AS AvgJobSalary ON J.job_id = AvgJobSalary.job_id ORDER BY J.job_title;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT, min_salary REAL, max_salary REAL);",A derived table `AvgJobSalary` calculates the average salary for each job ID. This is then joined with the `Jobs` table to display the job titles along with their average salaries.
"For each account, list the date of its last transaction.","WITH LastTransactionDates AS (SELECT account_id, MAX(transaction_date) AS last_date FROM Transactions GROUP BY account_id) SELECT A.account_name, LTD.last_date FROM Accounts A JOIN LastTransactionDates LTD ON A.account_id = LTD.account_id ORDER BY A.account_name;","CREATE TABLE Accounts (account_id INTEGER PRIMARY KEY, account_name TEXT, account_type TEXT, balance REAL); CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, transaction_type TEXT, description TEXT);",The `LastTransactionDates` CTE finds the most recent transaction date for each account. The main query then joins this with the `Accounts` table to show the account name and its last transaction date.
Count the number of users who have had at least 10 page views and logged in within the last 30 days.,"WITH ActiveUsers AS (SELECT user_id FROM Users WHERE last_login_date >= DATE('now', '-30 days')), HighViewUsers AS (SELECT user_id, COUNT(view_id) AS total_views FROM PageViews GROUP BY user_id HAVING total_views >= 10) SELECT COUNT(DISTINCT AU.user_id) AS qualified_user_count FROM ActiveUsers AU JOIN HighViewUsers HVU ON AU.user_id = HVU.user_id;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, registration_date TEXT, last_login_date TEXT, country TEXT); CREATE TABLE PageViews (view_id INTEGER PRIMARY KEY, user_id INTEGER, page_url TEXT, view_timestamp TEXT);","Two CTEs are used: `ActiveUsers` identifies users who logged in recently, and `HighViewUsers` finds users with a high number of page views. The main query then counts the distinct users present in both CTEs."
List departments where the average salary is above the overall company average salary.,"WITH DepartmentAvgSal AS (SELECT department_id, AVG(salary) AS dept_avg FROM Employees GROUP BY department_id), CompanyAvgSal AS (SELECT AVG(salary) AS company_avg FROM Employees) SELECT D.department_name, DAS.dept_avg FROM Departments D JOIN DepartmentAvgSal DAS ON D.department_id = DAS.department_id, CompanyAvgSal CAS WHERE DAS.dept_avg > CAS.company_avg ORDER BY DAS.dept_avg DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Two CTEs are used: `DepartmentAvgSal` calculates the average salary per department, and `CompanyAvgSal` calculates the overall average salary. The main query then joins these and filters for departments whose average salary is greater than the company average."
Find customers who have placed orders totaling more than 1000 in the first quarter of any year.,"SELECT C.customer_name FROM Customers C JOIN (SELECT customer_id FROM Orders WHERE STRFTIME('%m', order_date) BETWEEN '01' AND '03' GROUP BY customer_id, STRFTIME('%Y', order_date) HAVING SUM(total_amount) > 1000) AS HighValueQ1Customers ON C.customer_id = HighValueQ1Customers.customer_id ORDER BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","A derived table `HighValueQ1Customers` identifies customers who, in any given year's first quarter, placed orders with a combined total amount exceeding 1000. This is then joined with the `Customers` table to retrieve their names."
"For each employee, list their total salary increase over their entire employment history.","WITH SalaryHistory AS (SELECT employee_id, salary, hire_date, LAG(salary, 1, salary) OVER (PARTITION BY employee_id ORDER BY hire_date) AS prev_salary FROM Employees), SalaryIncreases AS (SELECT employee_id, SUM(CASE WHEN salary > prev_salary THEN salary - prev_salary ELSE 0 END) AS total_increase FROM SalaryHistory GROUP BY employee_id) SELECT E.first_name, E.last_name, SI.total_increase FROM Employees E JOIN SalaryIncreases SI ON E.employee_id = SI.employee_id ORDER BY SI.total_increase DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, manager_id INTEGER);","This query first uses a CTE `SalaryHistory` with a window function `LAG` to get the previous salary for each employee (ordered by hire date, assuming salary can change). Then, `SalaryIncreases` CTE sums up all positive salary differences. Finally, it joins with `Employees` to show total salary increases."
"List all employees, their current status, and a descriptive label based on their performance rating.","SELECT employee_id, first_name, last_name, status,CASE WHEN performance_rating >= 4 THEN 'High Performer' WHEN performance_rating = 3 THEN 'Meets Expectations' WHEN performance_rating = 2 THEN 'Needs Improvement' WHEN performance_rating = 1 THEN 'Poor Performance' ELSE 'Not Rated' END AS performance_category FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);","This query selects employee details and assigns a textual category to each employee based on their numerical performance rating using a searched CASE expression. Employees with ratings 4 or 5 are 'High Performer', 3 is 'Meets Expectations', 2 is 'Needs Improvement', 1 is 'Poor Performance', and any other value (including NULL) is 'Not Rated'."
"Retrieve the names of all products, their prices, and categorize them as 'High-priced', 'Mid-priced', or 'Budget' based on the following rules: High-priced are above 100, Mid-priced are between 50 and 100 (inclusive), and Budget are below 50.","SELECT product_name, price,CASE WHEN price > 100 THEN 'High-priced' WHEN price >= 50 AND price <= 100 THEN 'Mid-priced' ELSE 'Budget' END AS price_category FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY,product_name TEXT NOT NULL,category TEXT,price REAL,stock_quantity INTEGER,supplier_id INTEGER);","This query retrieves product names, prices, and categorizes each product into 'High-priced', 'Mid-priced', or 'Budget' using a searched CASE statement based on specified price ranges."
"Count the number of employees for each performance category: 'Excellent', 'Good', 'Average', 'Below Average'. Assign 'Not Rated' for missing ratings.","SELECT CASE WHEN performance_rating >= 4 THEN 'Excellent' WHEN performance_rating = 3 THEN 'Good' WHEN performance_rating = 2 THEN 'Average' WHEN performance_rating = 1 THEN 'Below Average' ELSE 'Not Rated' END AS performance_category, COUNT(employee_id) AS number_of_employees FROM Employees GROUP BY performance_category ORDER BY number_of_employees DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);","This query categorizes employees by their performance rating using a CASE expression and then counts how many employees fall into each category, grouping by the newly defined performance category."
"List all orders and their current status, but for orders marked as 'Pending' or 'Cancelled', display 'Action Required'. Otherwise, display 'No Action Needed'.","SELECT order_id, status,CASE status WHEN 'Pending' THEN 'Action Required' WHEN 'Cancelled' THEN 'Action Required' ELSE 'No Action Needed' END AS action_status FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY,customer_id INTEGER,order_date TEXT,total_amount REAL,status TEXT,delivery_priority TEXT);","This query selects order IDs, their original status, and then uses a simple CASE expression to categorize the action needed based on the order's status. 'Pending' and 'Cancelled' statuses result in 'Action Required', while others result in 'No Action Needed'."
"Show product names and their availability status: 'In Stock' if quantity is over 10, 'Low Stock' if between 1 and 10, and 'Out of Stock' if 0.","SELECT product_name, stock_quantity,CASE WHEN stock_quantity > 10 THEN 'In Stock' WHEN stock_quantity >= 1 AND stock_quantity <= 10 THEN 'Low Stock' WHEN stock_quantity = 0 THEN 'Out of Stock' ELSE 'Status Unknown' END AS availability_status FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY,product_name TEXT NOT NULL,category TEXT,price REAL,stock_quantity INTEGER,supplier_id INTEGER);","This query displays product names, current stock quantity, and a derived 'availability_status' using a CASE expression. It categorizes products based on their stock quantity into 'In Stock', 'Low Stock', 'Out of Stock', or 'Status Unknown' for other cases (e.g., NULL)."
"Get the names of all students and their academic standing based on their GPA: 'Excellent' for GPA >= 3.7, 'Good' for GPA >= 3.0, 'Satisfactory' for GPA >= 2.0, and 'Probation' for GPA < 2.0.","SELECT first_name, last_name, gpa,CASE WHEN gpa >= 3.7 THEN 'Excellent' WHEN gpa >= 3.0 THEN 'Good' WHEN gpa >= 2.0 THEN 'Satisfactory' ELSE 'Probation' END AS academic_standing FROM Students ORDER BY gpa DESC;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,enrollment_date TEXT,major TEXT,gpa REAL);","This query lists students, their GPA, and assigns an academic standing category ('Excellent', 'Good', 'Satisfactory', 'Probation') based on their GPA using a searched CASE expression, ordered by GPA in descending order."
"Calculate the total amount of 'Completed' orders and 'Pending' orders separately. If an order status is neither, count it as 'Other'.","SELECT SUM(CASE WHEN status = 'Completed' THEN total_amount ELSE 0 END) AS total_completed_amount, SUM(CASE WHEN status = 'Pending' THEN total_amount ELSE 0 END) AS total_pending_amount, SUM(CASE WHEN status NOT IN ('Completed', 'Pending') THEN total_amount ELSE 0 END) AS total_other_amount FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY,customer_id INTEGER,order_date TEXT,total_amount REAL,status TEXT,delivery_priority TEXT);","This query calculates the sum of 'total_amount' for orders with 'Completed' status, 'Pending' status, and all other statuses, using separate SUM aggregations with embedded CASE expressions to conditionally sum amounts based on status."
"For each employee, display their name and a 'Bonus Eligibility' status. Employees hired before '2020-01-01' with a performance rating of 4 or higher are 'Eligible', otherwise 'Not Eligible'.","SELECT first_name, last_name, hire_date, performance_rating,CASE WHEN hire_date < '2020-01-01' AND performance_rating >= 4 THEN 'Eligible' ELSE 'Not Eligible' END AS bonus_eligibility FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);",This query determines an employee's 'Bonus Eligibility' based on two conditions: their hire date (before 2020-01-01) and their performance rating (4 or higher). A CASE expression is used to assign 'Eligible' or 'Not Eligible'.
"List all appointments and indicate if they are 'Upcoming' (appointment date in the future), 'Past' (appointment date in the past), or 'Today' (appointment date is today).","SELECT appointment_id, appointment_date,CASE WHEN appointment_date > strftime('%Y-%m-%d %H:%M:%S', 'now') THEN 'Upcoming' WHEN strftime('%Y-%m-%d', appointment_date) = strftime('%Y-%m-%d', 'now') THEN 'Today' ELSE 'Past' END AS appointment_status FROM Appointments ORDER BY appointment_date;","CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY,patient_id INTEGER,appointment_date TEXT,reason TEXT,status TEXT);","This query classifies appointments based on their date relative to the current date and time. It uses `strftime('%Y-%m-%d %H:%M:%S', 'now')` for comparison to determine 'Upcoming', 'Today', or 'Past' status using a searched CASE expression."
"For each customer, display their name and a 'VIP Status' based on their account status: 'VIP' if 'Premium', 'Standard' if 'Active', and 'Inactive' if 'Inactive'.","SELECT customer_name, account_status,CASE account_status WHEN 'Premium' THEN 'VIP' WHEN 'Active' THEN 'Standard' WHEN 'Inactive' THEN 'Inactive' ELSE 'Unknown' END AS vip_status FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY,customer_name TEXT NOT NULL,region TEXT,account_status TEXT);","This query retrieves customer names, their account status, and assigns a 'VIP Status' using a simple CASE expression based on the existing `account_status` column. It handles 'Premium', 'Active', 'Inactive', and any other status as 'Unknown'."
"Find the average salary for employees, grouped by whether they are a 'Senior Employee' (hired before 2018) or a 'Junior Employee' (hired in or after 2018).","SELECT CASE WHEN hire_date < '2018-01-01' THEN 'Senior Employee' ELSE 'Junior Employee' END AS employee_category, AVG(salary) AS average_salary FROM Employees GROUP BY employee_category;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);","This query categorizes employees as 'Senior' or 'Junior' based on their hire date using a CASE expression, then calculates the average salary for each of these categories by grouping on the derived category."
"List products and their prices, with a 'Discounted Price' column. If the product is in the 'Electronics' category, apply a 10% discount; otherwise, the discount is 0.","SELECT product_name, price,CASE WHEN category = 'Electronics' THEN price * 0.90 ELSE price END AS discounted_price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY,product_name TEXT NOT NULL,category TEXT,price REAL,stock_quantity INTEGER,supplier_id INTEGER);","This query selects product names, original prices, and calculates a 'discounted_price'. It uses a CASE expression to apply a 10% discount only if the product category is 'Electronics'; otherwise, the price remains unchanged."
"Show all employees, and for their salary, display 'High' if > 70000, 'Medium' if between 40000 and 70000, and 'Low' if < 40000.","SELECT first_name, last_name, salary,CASE WHEN salary > 70000 THEN 'High' WHEN salary >= 40000 THEN 'Medium' ELSE 'Low' END AS salary_band FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);","This query lists employee names, their salaries, and a 'salary_band' which categorizes salaries into 'High', 'Medium', or 'Low' using a searched CASE expression."
"Count the total number of orders by their delivery priority: 'High Priority' for 'Express' or 'Overnight', and 'Standard Priority' for 'Standard' or any other value.","SELECT CASE WHEN delivery_priority IN ('Express', 'Overnight') THEN 'High Priority' ELSE 'Standard Priority' END AS delivery_tier, COUNT(order_id) AS number_of_orders FROM Orders GROUP BY delivery_tier;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY,customer_id INTEGER,order_date TEXT,total_amount REAL,status TEXT,delivery_priority TEXT);","This query categorizes orders into 'High Priority' or 'Standard Priority' based on their `delivery_priority` using a CASE expression, and then counts the number of orders in each priority tier."
"Display student names and a 'Graduation Status'. If GPA is 3.5 or higher and they are a 'Computer Science' major, they are 'On Track for Honors'. Otherwise, they are 'Standard'.","SELECT first_name, last_name, gpa, major,CASE WHEN gpa >= 3.5 AND major = 'Computer Science' THEN 'On Track for Honors' ELSE 'Standard' END AS graduation_status FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,enrollment_date TEXT,major TEXT,gpa REAL);","This query selects student names, GPA, major, and determines a 'Graduation Status'. It uses a CASE expression to label students as 'On Track for Honors' if they meet specific GPA and major criteria; otherwise, they are 'Standard'."
"List all products and their category, but for 'Electronics' products, display 'Tech Gadgets', for 'Home Goods', display 'Household Items', and keep other categories as they are.","SELECT product_name, category,CASE category WHEN 'Electronics' THEN 'Tech Gadgets' WHEN 'Home Goods' THEN 'Household Items' ELSE category END AS reclassified_category FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY,product_name TEXT NOT NULL,category TEXT,price REAL,stock_quantity INTEGER,supplier_id INTEGER);","This query displays product names, original categories, and a 'reclassified_category'. It uses a simple CASE expression to rename 'Electronics' to 'Tech Gadgets' and 'Home Goods' to 'Household Items', while retaining the original name for other categories."
"Show employee names, their department name, and a 'Department Size' category: 'Large' if > 50 employees, 'Medium' if 20-50, 'Small' if < 20.","SELECT E.first_name, E.last_name, D.department_name,CASE WHEN DeptCounts.employee_count > 50 THEN 'Large' WHEN DeptCounts.employee_count >= 20 THEN 'Medium' ELSE 'Small' END AS department_size FROM Employees E JOIN Departments D ON E.department_id = D.department_id JOIN (SELECT department_id, COUNT(employee_id) AS employee_count FROM Employees GROUP BY department_id) AS DeptCounts ON E.department_id = DeptCounts.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);CREATE TABLE Departments (department_id INTEGER PRIMARY KEY,department_name TEXT NOT NULL,location TEXT);","This query joins Employees and Departments, and uses a subquery to count employees per department. A CASE expression then categorizes each employee's department into 'Large', 'Medium', or 'Small' based on the total number of employees in that department."
"Determine the 'Customer Engagement Level' for each customer. 'High' if they have placed more than 5 orders, 'Medium' if 2-5 orders, and 'Low' if 0 or 1 order.","SELECT C.customer_name, COUNT(O.order_id) AS total_orders,CASE WHEN COUNT(O.order_id) > 5 THEN 'High' WHEN COUNT(O.order_id) >= 2 THEN 'Medium' ELSE 'Low' END AS engagement_level FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.customer_name ORDER BY total_orders DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY,customer_name TEXT NOT NULL,region TEXT,account_status TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY,customer_id INTEGER,order_date TEXT,total_amount REAL,status TEXT,delivery_priority TEXT);","This query joins Customers with Orders to count the total orders per customer. It then uses a CASE expression on the aggregated count to classify customers into 'High', 'Medium', or 'Low' engagement levels based on the number of orders they placed."
"List all patients, their gender, and a 'Demographic Grouping'. 'Youth' if under 18, 'Adult' if 18-64, 'Senior' if 65 or older.","SELECT first_name, last_name, date_of_birth, strftime('%Y', 'now') - strftime('%Y', date_of_birth) - (strftime('%m-%d', 'now') < strftime('%m-%d', date_of_birth)) AS age_in_years,CASE WHEN (strftime('%Y', 'now') - strftime('%Y', date_of_birth) - (strftime('%m-%d', 'now') < strftime('%m-%d', date_of_birth))) < 18 THEN 'Youth' WHEN (strftime('%Y', 'now') - strftime('%Y', date_of_birth) - (strftime('%m-%d', 'now') < strftime('%m-%d', date_of_birth))) BETWEEN 18 AND 64 THEN 'Adult' ELSE 'Senior' END AS demographic_group FROM Patients;","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,date_of_birth TEXT,gender TEXT,blood_type TEXT,last_visit_date TEXT,insurance_provider TEXT);","This query calculates the age of each patient and then uses a searched CASE expression to categorize them into 'Youth', 'Adult', or 'Senior' demographic groups based on their calculated age."
"For each course, display its name, credits, and a 'Credit Load' category: 'Light' (1-3 credits), 'Medium' (4-6 credits), 'Heavy' (7+ credits).","SELECT course_name, credits,CASE WHEN credits >= 1 AND credits <= 3 THEN 'Light' WHEN credits >= 4 AND credits <= 6 THEN 'Medium' WHEN credits >= 7 THEN 'Heavy' ELSE 'Undefined' END AS credit_load FROM Courses;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY,course_name TEXT NOT NULL,department TEXT,credits INTEGER);","This query lists course names, credits, and assigns a 'Credit Load' category ('Light', 'Medium', 'Heavy', or 'Undefined') based on the number of credits using a searched CASE expression."
Count the number of employees who are 'Active' with a 'High Performer' rating and those who are 'Active' with 'Meets Expectations' rating.,"SELECT SUM(CASE WHEN status = 'Active' AND performance_rating >= 4 THEN 1 ELSE 0 END) AS active_high_performers, SUM(CASE WHEN status = 'Active' AND performance_rating = 3 THEN 1 ELSE 0 END) AS active_meets_expectations FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);","This query uses conditional aggregation with CASE expressions to count two specific groups of employees: those who are 'Active' and 'High Performer', and those who are 'Active' and 'Meets Expectations'."
"List all employee names and their assigned benefits tier, but if the benefits tier is 'Gold', display 'Premium Benefits', otherwise display 'Standard Benefits'.","SELECT first_name, last_name, benefits_tier,CASE WHEN benefits_tier = 'Gold' THEN 'Premium Benefits' ELSE 'Standard Benefits' END AS classified_benefits FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);","This query retrieves employee names and their original benefits tier, then reclassifies the benefits as 'Premium Benefits' for 'Gold' tier and 'Standard Benefits' for all other tiers using a simple CASE expression."
"Show product name, price, and a 'Sales Strategy' hint. If price > 200 and stock is low (< 5), hint 'Reorder Urgently'. If price > 100 and stock is high (> 50), hint 'Promote'. Otherwise, 'Normal'.","SELECT product_name, price, stock_quantity,CASE WHEN price > 200 AND stock_quantity < 5 THEN 'Reorder Urgently' WHEN price > 100 AND stock_quantity > 50 THEN 'Promote' ELSE 'Normal' END AS sales_strategy FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY,product_name TEXT NOT NULL,category TEXT,price REAL,stock_quantity INTEGER,supplier_id INTEGER);","This query selects product details and generates a 'Sales Strategy' hint. It uses a searched CASE expression with combined conditions on price and stock quantity to suggest 'Reorder Urgently', 'Promote', or 'Normal' actions."
"For each student, display their name and their enrollment year. If the enrollment year is before 2020, label them 'Veteran', otherwise 'Newbie'.","SELECT first_name, last_name, strftime('%Y', enrollment_date) AS enrollment_year,CASE WHEN strftime('%Y', enrollment_date) < '2020' THEN 'Veteran' ELSE 'Newbie' END AS student_status FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,enrollment_date TEXT,major TEXT,gpa REAL);",This query extracts the enrollment year from the `enrollment_date` and then uses a CASE expression to classify students as 'Veteran' (enrolled before 2020) or 'Newbie' (enrolled in or after 2020).
"List customer names, their region, and a 'Regional Discount' percentage. If from 'North' region, 5%; 'South', 10%; 'East', 7%; 'West', 3%; otherwise 0%.","SELECT customer_name, region,CASE WHEN region = 'North' THEN 0.05 WHEN region = 'South' THEN 0.10 WHEN region = 'East' THEN 0.07 WHEN region = 'West' THEN 0.03 ELSE 0.00 END AS regional_discount_percentage FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY,customer_name TEXT NOT NULL,region TEXT,account_status TEXT);","This query displays customer names, regions, and calculates a 'Regional Discount Percentage' using a simple CASE expression. The discount varies based on the customer's region, with a default of 0% for unlisted regions."
"For each employee, display their name and a 'Job Satisfaction' status. If their salary is high (over 80000) AND performance rating is 5, it's 'Very High'. If salary is high OR rating is 5, it's 'High'. Otherwise 'Standard'.","SELECT first_name, last_name, salary, performance_rating,CASE WHEN salary > 80000 AND performance_rating = 5 THEN 'Very High' WHEN salary > 80000 OR performance_rating = 5 THEN 'High' ELSE 'Standard' END AS job_satisfaction FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);","This query assigns a 'Job Satisfaction' status to employees. It uses a searched CASE expression to first check for combined high salary and perfect rating ('Very High'), then either high salary or perfect rating ('High'), and finally defaults to 'Standard'."
"Count the number of patients for each blood type, and categorize blood types into 'Positive' and 'Negative' based on the '+' or '-' suffix.","SELECT CASE WHEN blood_type LIKE '%+' THEN 'Positive Blood Type' WHEN blood_type LIKE '%-' THEN 'Negative Blood Type' ELSE 'Unknown Blood Type' END AS blood_group_category, COUNT(patient_id) AS number_of_patients FROM Patients GROUP BY blood_group_category;","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,date_of_birth TEXT,gender TEXT,blood_type TEXT,last_visit_date TEXT,insurance_provider TEXT);","This query categorizes patient blood types into 'Positive', 'Negative', or 'Unknown' based on whether the `blood_type` string ends with '+' or '-'. It then counts the number of patients within each derived blood group category."
"List all order items, their quantity, unit price, and a 'Bulk Purchase' flag. If quantity is 10 or more and unit price is less than 50, mark as 'Yes', otherwise 'No'.","SELECT order_item_id, product_id, quantity, unit_price,CASE WHEN quantity >= 10 AND unit_price < 50 THEN 'Yes' ELSE 'No' END AS bulk_purchase_flag FROM OrderItems;","CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY,order_id INTEGER,product_id INTEGER,quantity INTEGER,unit_price REAL);","This query selects order item details and adds a 'Bulk Purchase' flag. It uses a CASE expression to set the flag to 'Yes' if both the quantity is 10 or more and the unit price is less than 50; otherwise, it's 'No'."
"For each department, calculate the total salary, and if the total salary exceeds 500000, label it 'High Spending Dept', otherwise 'Normal Spending Dept'.","SELECT D.department_name, SUM(E.salary) AS total_department_salary,CASE WHEN SUM(E.salary) > 500000 THEN 'High Spending Dept' ELSE 'Normal Spending Dept' END AS spending_category FROM Employees E JOIN Departments D ON E.department_id = D.department_id GROUP BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);CREATE TABLE Departments (department_id INTEGER PRIMARY KEY,department_name TEXT NOT NULL,location TEXT);",This query calculates the total salary for each department by joining Employees and Departments. It then uses a CASE expression on the aggregated total salary to categorize departments as 'High Spending Dept' or 'Normal Spending Dept'.
"Display student names and a 'Scholarship Eligibility' status. If GPA is 3.8 or higher, and they are enrolled in at least 3 courses (grade 'A' or 'B'), they are 'Eligible'. Otherwise, 'Not Eligible'.","SELECT S.first_name, S.last_name, S.gpa,COUNT(CASE WHEN E.grade IN ('A', 'B') THEN E.enrollment_id ELSE NULL END) AS good_grades_count,CASE WHEN S.gpa >= 3.8 AND COUNT(CASE WHEN E.grade IN ('A', 'B') THEN E.enrollment_id ELSE NULL END) >= 3 THEN 'Eligible' ELSE 'Not Eligible' END AS scholarship_eligibility FROM Students S LEFT JOIN Enrollments E ON S.student_id = E.student_id GROUP BY S.student_id, S.first_name, S.last_name, S.gpa;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,enrollment_date TEXT,major TEXT,gpa REAL);CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY,student_id INTEGER,course_id INTEGER,grade TEXT);","This query joins Students with Enrollments to count courses with 'A' or 'B' grades for each student. It then uses a nested CASE expression: an inner one to count good grades, and an outer one to determine 'Scholarship Eligibility' based on GPA and the count of good grades."
"For each employee, display their name and a 'Long-Term Service Award' message. If they have been employed for 10+ years, show 'Eligible for 10-Year Award'. If 5-9 years, 'Eligible for 5-Year Award'. Otherwise 'No Award Yet'.","SELECT first_name, last_name, hire_date,ROUND((julianday('now') - julianday(hire_date)) / 365.25) AS years_of_service,CASE WHEN ROUND((julianday('now') - julianday(hire_date)) / 365.25) >= 10 THEN 'Eligible for 10-Year Award' WHEN ROUND((julianday('now') - julianday(hire_date)) / 365.25) >= 5 THEN 'Eligible for 5-Year Award' ELSE 'No Award Yet' END AS service_award_status FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY,first_name TEXT NOT NULL,last_name TEXT NOT NULL,department_id INTEGER,salary REAL,hire_date TEXT,performance_rating INTEGER,status TEXT,benefits_tier TEXT);","This query calculates the years of service for each employee using `julianday()`. It then uses a searched CASE expression to assign a 'Long-Term Service Award' message based on their years of service: '10-Year Award', '5-Year Award', or 'No Award Yet'."
Find the names of all employees and the departments they belong to.,"SELECT Employees.EmployeeName, Departments.DepartmentName FROM Employees JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);",This query joins the 'Employees' table with the 'Departments' table on their common 'DepartmentID' to retrieve employee names and their respective department names.
List all products and their corresponding categories.,"SELECT Products.ProductName, Categories.CategoryName FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);",This query retrieves the product names and their associated category names by joining the 'Products' and 'Categories' tables using 'CategoryID'.
Get the total order amount for each customer.,"SELECT Customers.CustomerName, SUM(OrderItems.Quantity * Products.Price) AS TotalOrderAmount FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID JOIN OrderItems ON Orders.OrderID = OrderItems.OrderID JOIN Products ON OrderItems.ProductID = Products.ProductID GROUP BY Customers.CustomerName;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL);","This query joins 'Customers', 'Orders', 'OrderItems', and 'Products' tables to calculate the sum of (quantity * price) for each customer's orders, effectively finding the total amount spent by each customer."
Which employees have not been assigned to any department?,SELECT EmployeeName FROM Employees LEFT JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID WHERE Departments.DepartmentID IS NULL;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query uses a LEFT JOIN to include all employees and then filters for employees whose 'DepartmentID' in the 'Departments' table is NULL, indicating they have no matching department."
Find the average salary of employees in the 'Sales' department.,SELECT AVG(Employees.Salary) AS AverageSalesSalary FROM Employees JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID WHERE Departments.DepartmentName = 'Sales';,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query joins employees with departments, filters for the 'Sales' department, and then calculates the average salary of those employees."
"List all books and their authors, including books with no assigned author.","SELECT Books.Title, Authors.AuthorName FROM Books LEFT JOIN Authors ON Books.AuthorID = Authors.AuthorID;","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, PublicationYear INTEGER); CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT, Nationality TEXT);","This query performs a LEFT JOIN from 'Books' to 'Authors' to show all books and their authors, displaying NULL for the author name if a book has no matching author."
Get the names of customers who have placed an order in 2023.,"SELECT DISTINCT Customers.CustomerName FROM Customers JOIN Orders ON Customers.CustomerID = Orders.CustomerID WHERE STRFTIME('%Y', Orders.OrderDate) = '2023';","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);","This query joins customers and orders, then filters orders for the year 2023 using STRFTIME and returns the distinct names of customers who placed those orders."
Show product names that have never been part of an order.,SELECT ProductName FROM Products LEFT JOIN OrderItems ON Products.ProductID = OrderItems.ProductID WHERE OrderItems.OrderItemID IS NULL;,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query uses a LEFT JOIN from 'Products' to 'OrderItems' and filters for products that do not have a corresponding entry in 'OrderItems', indicating they were never ordered."
Find the total number of employees in each location.,"SELECT Departments.Location, COUNT(Employees.EmployeeID) AS NumberOfEmployees FROM Employees JOIN Departments ON Employees.DepartmentID = Departments.DepartmentID GROUP BY Departments.Location;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query joins employees with departments, groups the results by department location, and counts the number of employees in each location."
"List all courses and the names of students enrolled in them, including courses with no enrollments.","SELECT Courses.CourseName, Students.StudentName FROM Courses LEFT JOIN Enrollments ON Courses.CourseID = Enrollments.CourseID LEFT JOIN Students ON Enrollments.StudentID = Students.StudentID;","CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER); CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT, Major TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, CourseID INTEGER, StudentID INTEGER, Grade TEXT);","This query performs two LEFT JOINs: first from 'Courses' to 'Enrollments', then to 'Students', to show all courses and their enrolled students, including courses that have no enrollments."
Get the names of customers who placed orders for products costing more than 50.,SELECT DISTINCT C.CustomerName FROM Customers AS C JOIN Orders AS O ON C.CustomerID = O.CustomerID JOIN OrderItems AS OI ON O.OrderID = OI.OrderID JOIN Products AS P ON OI.ProductID = P.ProductID WHERE P.Price > 50;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL);","This query joins four tables ('Customers', 'Orders', 'OrderItems', 'Products') to find customers who have ordered any product with a price greater than 50, showing each customer name only once."
Find departments that have more than 10 employees.,SELECT D.DepartmentName FROM Departments AS D JOIN Employees AS E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentID HAVING COUNT(E.EmployeeID) > 10;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query joins employees and departments, groups by department, and then uses a HAVING clause to filter for departments with more than 10 employees."
Which authors have written more than 3 books?,SELECT A.AuthorName FROM Authors AS A JOIN Books AS B ON A.AuthorID = B.AuthorID GROUP BY A.AuthorID HAVING COUNT(B.BookID) > 3;,"CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, PublicationYear INTEGER); CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT, Nationality TEXT);","This query joins authors and books, groups by author, and then filters for authors who have written more than 3 books using the HAVING clause."
Get the names of employees who earn more than the average salary of their department.,"SELECT E1.EmployeeName FROM Employees AS E1 JOIN (SELECT DepartmentID, AVG(Salary) AS AvgDeptSalary FROM Employees GROUP BY DepartmentID) AS AvgSalaries ON E1.DepartmentID = AvgSalaries.DepartmentID WHERE E1.Salary > AvgSalaries.AvgDeptSalary;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL);","This query uses a subquery to calculate the average salary for each department, then joins it back to the 'Employees' table to find employees whose individual salary exceeds their department's average."
Find the product category with the highest total sales revenue.,SELECT C.CategoryName FROM Categories AS C JOIN Products AS P ON C.CategoryID = P.CategoryID JOIN OrderItems AS OI ON P.ProductID = OI.ProductID GROUP BY C.CategoryName ORDER BY SUM(P.Price * OI.Quantity) DESC LIMIT 1;,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query joins categories, products, and order items, groups by category, calculates the total revenue for each category, and then orders by this total in descending order to get the top category."
List all customers who have not placed any orders.,SELECT CustomerName FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID WHERE Orders.OrderID IS NULL;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);","This query uses a LEFT JOIN to combine customers with orders and filters for customers whose 'OrderID' in the 'Orders' table is NULL, meaning they have no associated orders."
Get the names of students who are enrolled in more than one course.,SELECT S.StudentName FROM Students AS S JOIN Enrollments AS E ON S.StudentID = E.StudentID GROUP BY S.StudentID HAVING COUNT(E.CourseID) > 1;,"CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT, Major TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, CourseID INTEGER, StudentID INTEGER, Grade TEXT);","This query joins students with enrollments, groups by student, and filters for students who have enrolled in more than one course."
Find the oldest employee in each department.,"SELECT E.EmployeeName, D.DepartmentName, E.HireDate FROM Employees AS E JOIN Departments AS D ON E.DepartmentID = D.DepartmentID WHERE E.HireDate = (SELECT MIN(HireDate) FROM Employees WHERE DepartmentID = E.DepartmentID);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);",This query finds the employee(s) with the earliest hire date (oldest) within each department by using a correlated subquery that checks the minimum hire date for the specific department.
List products that are more expensive than any product in the 'Electronics' category.,"SELECT ProductName, Price FROM Products JOIN Categories ON Products.CategoryID = Categories.CategoryID WHERE Products.Price > (SELECT MAX(P2.Price) FROM Products AS P2 JOIN Categories AS C2 ON P2.CategoryID = C2.CategoryID WHERE C2.CategoryName = 'Electronics');","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);","This query uses a subquery to find the maximum price of a product in the 'Electronics' category, then returns all products (from any category) that have a price greater than that maximum."
Determine the average order value for each customer.,"SELECT C.CustomerName, AVG(OI.Quantity * P.Price) AS AverageOrderValue FROM Customers AS C JOIN Orders AS O ON C.CustomerID = O.CustomerID JOIN OrderItems AS OI ON O.OrderID = OI.OrderID JOIN Products AS P ON OI.ProductID = P.ProductID GROUP BY C.CustomerName;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL);","This query joins customers, orders, order items, and products to calculate the average value of items within each customer's orders."
Find pairs of employees who work in the same department.,"SELECT E1.EmployeeName AS Employee1, E2.EmployeeName AS Employee2, D.DepartmentName FROM Employees AS E1 JOIN Employees AS E2 ON E1.DepartmentID = E2.DepartmentID AND E1.EmployeeID < E2.EmployeeID JOIN Departments AS D ON E1.DepartmentID = D.DepartmentID;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query uses a self-join on the 'Employees' table to find pairs of employees sharing the same 'DepartmentID', ensuring distinct pairs by using 'E1.EmployeeID < E2.EmployeeID', and then joins with 'Departments' to show the department name."
"List all products and the total quantity ordered for each, including products never ordered (showing 0 quantity).","SELECT P.ProductName, COALESCE(SUM(OI.Quantity), 0) AS TotalOrderedQuantity FROM Products AS P LEFT JOIN OrderItems AS OI ON P.ProductID = OI.ProductID GROUP BY P.ProductName ORDER BY P.ProductName;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);",This query performs a LEFT JOIN from 'Products' to 'OrderItems' to include all products. It then sums the quantity and uses COALESCE to display 0 for products that have no order items.
Get the names of departments that have employees hired after 2020-01-01.,SELECT DISTINCT D.DepartmentName FROM Departments AS D JOIN Employees AS E ON D.DepartmentID = E.DepartmentID WHERE E.HireDate > '2020-01-01';,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query joins departments and employees, then filters for employees hired after a specific date, and returns the distinct names of their departments."
Find the total number of orders made by customers from 'New York'.,SELECT COUNT(O.OrderID) AS TotalOrdersNY FROM Customers AS C JOIN Orders AS O ON C.CustomerID = O.CustomerID WHERE C.Address LIKE '%New York%';,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT, Address TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);",This query joins customers with orders and counts the orders placed by customers whose address contains 'New York'.
Identify products that are supplied by 'Supplier A' and are in the 'Electronics' category.,SELECT P.ProductName FROM Products AS P JOIN Categories AS C ON P.CategoryID = C.CategoryID JOIN Suppliers AS S ON P.SupplierID = S.SupplierID WHERE S.SupplierName = 'Supplier A' AND C.CategoryName = 'Electronics';,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, SupplierID INTEGER, Price REAL); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT); CREATE TABLE Suppliers (SupplierID INTEGER PRIMARY KEY, SupplierName TEXT);","This query joins products with categories and suppliers, then filters the results based on the supplier name 'Supplier A' and category name 'Electronics'."
"For each student, list their name and the count of courses they are enrolled in.","SELECT S.StudentName, COUNT(E.CourseID) AS NumberOfCourses FROM Students AS S LEFT JOIN Enrollments AS E ON S.StudentID = E.StudentID GROUP BY S.StudentName;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT, Major TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, CourseID INTEGER, StudentID INTEGER, Grade TEXT);","This query performs a LEFT JOIN from 'Students' to 'Enrollments' to include all students, then groups by student name and counts the number of courses each student is enrolled in. Students with no enrollments will show a count of 0."
Get the name of the product that has the highest quantity sold in a single order item.,SELECT P.ProductName FROM Products AS P JOIN OrderItems AS OI ON P.ProductID = OI.ProductID ORDER BY OI.Quantity DESC LIMIT 1;,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query joins products with order items, orders the results by the 'Quantity' in descending order, and then limits to the top 1 result to find the product with the highest quantity in a single order item."
List all employees whose department is located in 'London' and their salary is above 60000.,SELECT E.EmployeeName FROM Employees AS E JOIN Departments AS D ON E.DepartmentID = D.DepartmentID WHERE D.Location = 'London' AND E.Salary > 60000;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query joins employees and departments, then filters for employees in departments located in 'London' and who have a salary greater than 60000."
Find the average price of products for each supplier.,"SELECT S.SupplierName, AVG(P.Price) AS AverageProductPrice FROM Suppliers AS S JOIN Products AS P ON S.SupplierID = P.SupplierID GROUP BY S.SupplierName;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, SupplierID INTEGER, Price REAL); CREATE TABLE Suppliers (SupplierID INTEGER PRIMARY KEY, SupplierName TEXT);","This query joins suppliers with products, groups the results by supplier name, and calculates the average price of products for each supplier."
Get the count of unique products ordered by each customer.,"SELECT C.CustomerName, COUNT(DISTINCT OI.ProductID) AS UniqueProductsOrdered FROM Customers AS C JOIN Orders AS O ON C.CustomerID = O.CustomerID JOIN OrderItems AS OI ON O.OrderID = OI.OrderID GROUP BY C.CustomerName;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query joins customers, orders, and order items, then groups by customer and counts the distinct products ordered by each."
"List all departments and the most recently hired employee in each, if any.","SELECT D.DepartmentName, E.EmployeeName, E.HireDate FROM Departments AS D LEFT JOIN Employees AS E ON D.DepartmentID = E.DepartmentID WHERE E.HireDate = (SELECT MAX(HireDate) FROM Employees WHERE DepartmentID = D.DepartmentID) OR E.EmployeeID IS NULL;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query uses a LEFT JOIN to include all departments. For each department, it finds the employee with the latest hire date using a correlated subquery, or shows NULL if no employees are present in that department."
Retrieve the full details of all employees.,SELECT * FROM Employees;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);",This query selects all columns and all rows from the 'Employees' table.
List the names of all products.,SELECT product_name FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER, category_id INTEGER);",This query retrieves only the 'product_name' column for all entries in the 'Products' table.
Show the first name and last name of all employees.,"SELECT first_name, last_name FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);",This query selects the 'first_name' and 'last_name' columns for all employees.
"Get the title and author of all books, renaming the title column to 'Book Title'.","SELECT title AS ""Book Title"", author FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL, stock INTEGER);","This query selects the 'title' column, aliasing it as 'Book Title', and the 'author' column from the 'Books' table."
"Display the product name and its price, labeling the price as 'Unit Price'.","SELECT product_name, price AS ""Unit Price"" FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER, category_id INTEGER);","This query retrieves the 'product_name' and the 'price' column, aliased as 'Unit Price', from the 'Products' table."
Retrieve employee IDs and their full names (first name and last name combined).,"SELECT employee_id, first_name || ' ' || last_name AS full_name FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);",This query selects the employee ID and creates a new column 'full_name' by concatenating the 'first_name' and 'last_name' of each employee.
"Show distinct genres of books, aliasing the column as 'Book Category'.","SELECT DISTINCT genre AS ""Book Category"" FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL, stock INTEGER);","This query selects only unique values from the 'genre' column, aliasing it as 'Book Category', from the 'Books' table."
"List all order IDs and their total amounts, renaming total_amount to 'Order Total'.","SELECT order_id, total_amount AS ""Order Total"" FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects the 'order_id' and 'total_amount' columns, aliasing 'total_amount' as 'Order Total', from the 'Orders' table."
"For each employee, display their email and phone number.","SELECT email, phone_number FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);",This query retrieves the 'email' and 'phone_number' for every employee.
"Get the names of products with a stock quantity less than 50, displaying the product name as 'Item'.",SELECT product_name AS Item FROM Products WHERE stock_quantity < 50;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER, category_id INTEGER);",This query selects the 'product_name' (aliased as 'Item') for products where 'stock_quantity' is less than 50.
"Retrieve the titles of books published after 2000, calling the column 'Recent Book'.","SELECT title AS ""Recent Book"" FROM Books WHERE publication_year > 2000;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL, stock INTEGER);","This query selects the 'title' column, aliased as 'Recent Book', for books published after the year 2000."
"List customer full names and their email addresses, renaming email to 'Contact Info'.","SELECT first_name || ' ' || last_name AS customer_full_name, email AS ""Contact Info"" FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, address TEXT);",This query concatenates 'first_name' and 'last_name' into 'customer_full_name' and renames 'email' to 'Contact Info' for all customers.
"Show employee salaries, rounding them to two decimal places and calling the column 'Net Salary'.","SELECT ROUND(salary, 2) AS ""Net Salary"" FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);","This query selects the 'salary' column, rounded to two decimal places and aliased as 'Net Salary', for all employees."
"Get the order ID and the order date from the Orders table, aliasing order_date as 'Purchase Date'.","SELECT order_id, order_date AS ""Purchase Date"" FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects the 'order_id' and renames 'order_date' to 'Purchase Date' for all orders.
"Display product ID, name, and a calculated 'Discounted Price' which is 10% off the original price.","SELECT product_id, product_name, price * 0.9 AS ""Discounted Price"" FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER, category_id INTEGER);","This query selects the product ID, name, and calculates a 'Discounted Price' (90% of the original price), aliasing it appropriately."
List the first 5 customer IDs and their last names.,"SELECT customer_id, last_name FROM Customers LIMIT 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, address TEXT);",This query retrieves the 'customer_id' and 'last_name' for the first 5 customers.
"Show the title of books and their stock quantity, ordered by stock quantity in ascending order.","SELECT title, stock FROM Books ORDER BY stock ASC;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL, stock INTEGER);","This query selects the 'title' and 'stock' for all books, ordered by 'stock' in ascending order."
"Retrieve employee first names and the year they were hired, aliasing the hire year as 'Hire Year'.","SELECT first_name, STRFTIME('%Y', hire_date) AS ""Hire Year"" FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);","This query selects the 'first_name' and extracts the year from 'hire_date', aliasing it as 'Hire Year', for all employees."
Get all information for orders with a 'completed' status.,SELECT * FROM Orders WHERE status = 'completed';,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects all columns for orders where the 'status' is 'completed'.
"Display product names and their current stock levels, renaming stock_quantity to 'Inventory Count'.","SELECT product_name, stock_quantity AS ""Inventory Count"" FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER, category_id INTEGER);",This query retrieves 'product_name' and renames 'stock_quantity' to 'Inventory Count' for all products.
"List employee IDs and their salaries, but only for those with a salary greater than 60000.","SELECT employee_id, salary FROM Employees WHERE salary > 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);",This query selects the 'employee_id' and 'salary' for employees whose salary is greater than 60000.
"Show the order ID, order date, and the total amount formatted as currency, aliasing it 'Amount (USD)'.","SELECT order_id, order_date, '$' || total_amount AS ""Amount (USD)"" FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects the 'order_id', 'order_date', and concatenates a '$' sign to 'total_amount', aliasing it as 'Amount (USD)'."
"Get the book title and author, ordered by author in ascending order, then by title in ascending order.","SELECT title, author FROM Books ORDER BY author ASC, title ASC;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL, stock INTEGER);","This query selects the 'title' and 'author' for all books, first ordered by 'author' and then by 'title', both in ascending order."
"Retrieve product names and their descriptions, aliasing description as 'Details'.","SELECT product_name, description AS Details FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER, category_id INTEGER);",This query selects 'product_name' and renames 'description' to 'Details' for all products.
List unique employee job IDs.,SELECT DISTINCT job_id FROM Employees;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);",This query retrieves all unique values from the 'job_id' column in the 'Employees' table.
"Show the customer ID, and a constant string 'Customer' as 'Record Type'.","SELECT customer_id, 'Customer' AS ""Record Type"" FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, address TEXT);",This query selects the 'customer_id' and adds a new column 'Record Type' with the constant value 'Customer' for each row.
"Get the names of products along with a 'Status' column that is 'In Stock' if stock_quantity > 0, else 'Out of Stock'.","SELECT product_name, CASE WHEN stock_quantity > 0 THEN 'In Stock' ELSE 'Out of Stock' END AS Status FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER, category_id INTEGER);",This query selects 'product_name' and dynamically creates a 'Status' column based on the 'stock_quantity' using a CASE statement.
"Retrieve the first name, last name, and email of employees, ordered by last name descending.","SELECT first_name, last_name, email FROM Employees ORDER BY last_name DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);","This query selects the 'first_name', 'last_name', and 'email' for all employees, ordered by 'last_name' in descending order."
"Display order IDs and the day of the week the order was placed, aliasing it 'Order Day'.","SELECT order_id, STRFTIME('%w', order_date) AS ""Order Day"" FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects the 'order_id' and extracts the day of the week (0=Sunday, 6=Saturday) from 'order_date', aliasing it as 'Order Day'."
"For each employee, show their employee ID and their salary multiplied by 1.05 (for a 5% raise), aliasing it 'New Salary'.","SELECT employee_id, salary * 1.05 AS ""New Salary"" FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);","This query selects the 'employee_id' and calculates a 'New Salary' by applying a 5% increase to the existing salary, aliasing the result."
Find all active employees in the 'Sales' department.,SELECT * FROM Employees WHERE department = 'Sales' AND status = 'Active';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, status TEXT, salary REAL);",Selects all columns from the Employees table where the department is 'Sales' and the status is 'Active'.
List products that are either in the 'Electronics' category or have a price greater than 500.,"SELECT product_name, price, category FROM Products WHERE category = 'Electronics' OR price > 500;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Retrieves the name, price, and category for products that are in the 'Electronics' category or cost more than 500."
"Get all orders that are not 'Shipped' and were placed before January 1, 2023.","SELECT order_id, customer_id, order_date, total_amount FROM Orders WHERE NOT status = 'Shipped' AND order_date < '2023-01-01';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Selects orders that have a status other than 'Shipped' and were placed before the specified date.
"Find employees with salaries between 60000 and 80000, inclusive.","SELECT employee_id, name, salary FROM Employees WHERE salary BETWEEN 60000 AND 80000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, status TEXT, salary REAL);","Returns employees whose salary falls within the range of 60000 to 80000, including the endpoints."
"Show details for products whose category is 'Books', 'Movies', or 'Games'.","SELECT * FROM Products WHERE category IN ('Books', 'Movies', 'Games');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Retrieves all columns for products belonging to one of the specified categories: 'Books', 'Movies', or 'Games'."
List all customers who are not from 'New York' or 'Los Angeles'.,"SELECT customer_id, name, city FROM Customers WHERE city NOT IN ('New York', 'Los Angeles');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, city TEXT, registration_date TEXT);","Selects customer IDs, names, and cities for customers whose city is neither 'New York' nor 'Los Angeles'."
Find all employees whose name starts with 'J' and ends with 'n'.,"SELECT employee_id, name FROM Employees WHERE name LIKE 'J%n';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, status TEXT, salary REAL);",Filters employees whose names begin with 'J' and end with 'n'.
Get products whose names contain either 'Pro' or 'Max'.,SELECT product_name FROM Products WHERE product_name GLOB '*Pro*' OR product_name GLOB '*Max*';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Finds product names that contain either the substring 'Pro' or 'Max'.
List employees who do not have a department assigned.,"SELECT employee_id, name FROM Employees WHERE department IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, status TEXT, salary REAL);","Retrieves employees whose 'department' column is NULL, indicating no department assignment."
Show all products that have a stock quantity recorded.,"SELECT product_name, stock_quantity FROM Products WHERE stock_quantity IS NOT NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Selects product names and their stock quantities for products where the stock quantity is not NULL.
"Get all orders with a total amount greater than 1000, placed in 2023, and either 'Pending' or 'Processing' status.","SELECT order_id, customer_id, total_amount, status FROM Orders WHERE total_amount > 1000 AND STRFTIME('%Y', order_date) = '2023' AND (status = 'Pending' OR status = 'Processing');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","Filters orders that exceed 1000 in total amount, were placed in the year 2023, and have a status of either 'Pending' or 'Processing'."
Find all employees who work in the 'IT' department and earn more than 75000.,"SELECT E.name, E.salary FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.department_name = 'IT' AND E.salary > 75000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",Joins the Employees and Departments tables to find employees in the 'IT' department who have a salary greater than 75000.
List all products that have been ordered by customers from 'London'.,SELECT DISTINCT P.product_name FROM Products P JOIN OrderItems OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.city = 'London';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, city TEXT);",Retrieves the names of products that are included in orders placed by customers residing in 'London'.
Get all departments that have at least one employee with a salary less than 30000.,SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary < 30000);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",Selects department names for departments where there exists at least one employee with a salary under 30000.
Show all orders placed in the current year that are still 'Pending'.,"SELECT order_id, customer_id, order_date FROM Orders WHERE STRFTIME('%Y', order_date) = STRFTIME('%Y', 'now') AND status = 'Pending';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Retrieves orders placed in the current calendar year that are currently in 'Pending' status.
Find customers who registered in the last 30 days and are from 'Chicago'.,"SELECT customer_id, name, registration_date FROM Customers WHERE registration_date >= DATE('now', '-30 days') AND city = 'Chicago';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, city TEXT, registration_date TEXT);",Selects customers who registered within the last 30 days and whose city is 'Chicago'.
List products that are either 'Electronics' or 'Appliances' and their names contain 'Smart'.,"SELECT product_name, category FROM Products WHERE (category = 'Electronics' OR category = 'Appliances') AND product_name LIKE '%Smart%';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Filters products that are categorized as 'Electronics' or 'Appliances' and whose names contain the word 'Smart'.
Show departments where the average employee salary is above 70000 and the department has more than 5 employees.,"SELECT D.department_name, AVG(E.salary) AS avg_salary FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name HAVING AVG(E.salary) > 70000 AND COUNT(E.employee_id) > 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",Calculates the average salary per department and filters for departments where the average salary is over 70000 and there are more than 5 employees.
Find all employees whose department name is 'marketing' (case-insensitive).,SELECT E.name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.department_name = 'marketing' COLLATE NOCASE;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Selects employee names from the 'marketing' department, ignoring case differences in the department name."
Find customers who have not placed any orders yet.,"SELECT customer_id, name FROM Customers C WHERE NOT EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",Retrieves customers who do not have any associated orders in the Orders table.
"List products with stock between 10 and 50 units, or a price less than 10.","SELECT product_name, stock_quantity, price FROM Products WHERE (stock_quantity BETWEEN 10 AND 50) OR price < 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Selects products that either have a stock quantity between 10 and 50 (inclusive) or a price less than 10.
Get orders placed in March 2022.,"SELECT order_id, customer_id, order_date FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2022-03';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Filters orders to show only those placed in March of 2022.
"Find students enrolled after 2020, majoring in 'Computer Science', and whose name contains 'a' or 'e'.","SELECT student_id, name, major FROM Students WHERE enrollment_date > '2020-12-31' AND major = 'Computer Science' AND (name LIKE '%a%' OR name LIKE '%e%');","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, name TEXT, major TEXT, gpa REAL, enrollment_date TEXT);","Selects students who enrolled after 2020, are majoring in 'Computer Science', and have either 'a' or 'e' in their name."
List products that have a non-empty category assigned.,"SELECT product_name, category FROM Products WHERE category IS NOT NULL AND category != '';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Retrieves products for which the 'category' column is neither NULL nor an empty string.
Get all 'Completed' orders placed in the first quarter of 2023.,"SELECT order_id, customer_id, order_date, total_amount FROM Orders WHERE status = 'Completed' AND order_date BETWEEN '2023-01-01' AND '2023-03-31';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Selects orders that are 'Completed' and were placed within the first three months of 2023.
Find products whose price multiplied by stock quantity is greater than 10000.,"SELECT product_name, price, stock_quantity FROM Products WHERE (price * stock_quantity) > 10000;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Retrieves products where the total value (price multiplied by stock quantity) exceeds 10000.
Show the names of employees who work in a department located in 'New York' or 'Chicago'.,"SELECT name FROM Employees WHERE department_id IN (SELECT department_id FROM Departments WHERE location IN ('New York', 'Chicago'));","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",Selects employee names whose department is located in either 'New York' or 'Chicago'.
List products whose name does not contain the word 'Luxury' and are not in 'Accessories' category.,"SELECT product_name, category FROM Products WHERE product_name NOT LIKE '%Luxury%' AND category != 'Accessories';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Filters products whose names do not include 'Luxury' and are not classified under the 'Accessories' category.
Find customer names that have duplicate email addresses where the email is not null.,"SELECT name, email FROM Customers WHERE email IS NOT NULL GROUP BY email HAVING COUNT(email) > 1;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, city TEXT);","Selects customer names and their email addresses if the email is not null and appears more than once, indicating duplicate emails."
"Get all books published before 2000 with a price over 20, OR books published after 2010 in the 'Fiction' genre.","SELECT title, author, publication_year, price, genre FROM Books WHERE (publication_year < 2000 AND price > 20) OR (publication_year > 2010 AND genre = 'Fiction');","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL, stock INTEGER);","Retrieves books that were published before 2000 and cost over 20, or books published after 2010 and are of the 'Fiction' genre."
List the names of all customers along with the order IDs they have placed.,"SELECT C.customer_name, O.order_id FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query retrieves the customer's name and their corresponding order ID by joining the 'Customers' and 'Orders' tables on their shared 'customer_id'.
"Retrieve the order ID, product name, and quantity for all items in orders.","SELECT O.order_id, P.product_name, OI.quantity FROM Orders AS O INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER);","This query links 'Orders' to 'Order_Items' by 'order_id' and then 'Order_Items' to 'Products' by 'product_id' to show which products are in which orders, along with quantities."
Find the full name of employees working in the 'Sales' department.,"SELECT E.first_name, E.last_name FROM Employees AS E INNER JOIN Departments AS D ON E.department_id = D.department_id WHERE D.department_name = 'Sales';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query joins 'Employees' with 'Departments' to find employees, then filters the results to only include those belonging to the 'Sales' department."
"Count how many books each author has published, listing the author's name and the total number of books.","SELECT A.author_name, COUNT(B.book_id) AS num_books FROM Authors AS A INNER JOIN Books AS B ON A.author_id = B.author_id GROUP BY A.author_name ORDER BY num_books DESC;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, publication_year INTEGER, author_id INTEGER, publisher_id INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query joins 'Authors' and 'Books' to link authors to their books, then groups the results by author name to count the number of books for each author, ordered by the count."
"List the names of employees, their job titles, and department names for all employees whose salary is above $70,000.","SELECT E.first_name, E.last_name, J.job_title, D.department_name FROM Employees AS E INNER JOIN Jobs AS J ON E.job_id = J.job_id INNER JOIN Departments AS D ON E.department_id = D.department_id WHERE E.salary > 70000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, job_id INTEGER, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT, min_salary REAL, max_salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query connects 'Employees' with 'Jobs' and 'Departments' to get comprehensive employee information, then filters to show only employees earning over $70,000."
Show the product name and its category name for all products.,"SELECT P.product_name, C.category_name FROM Products AS P INNER JOIN Categories AS C ON P.category_id = C.category_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT, description TEXT);",This query joins the 'Products' table with the 'Categories' table using 'category_id' to display the name of each product alongside its respective category name.
"Calculate the total amount spent by each customer, showing their name and the sum of their order totals.","SELECT C.customer_name, SUM(O.total_amount) AS total_spent FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_name ORDER BY total_spent DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins 'Customers' and 'Orders' to link customers to their orders, then aggregates the 'total_amount' for each customer using SUM and groups the results by customer name."
List the full names of employees who are currently assigned to a project that started in 2023 and is still active.,"SELECT DISTINCT E.first_name, E.last_name FROM Employees AS E INNER JOIN Employee_Projects AS EP ON E.employee_id = EP.employee_id INNER JOIN Projects AS P ON EP.project_id = P.project_id WHERE STRFTIME('%Y', P.start_date) = '2023' AND P.end_date IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT); CREATE TABLE Employee_Projects (employee_id INTEGER, project_id INTEGER, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id)); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT);","This query joins 'Employees', 'Employee_Projects', and 'Projects' to find employees working on projects. It then filters for projects that started in 2023 and are still ongoing (end_date is NULL)."
Find the titles of books published by publishers located in 'New York'.,SELECT B.title FROM Books AS B INNER JOIN Publishers AS P ON B.publisher_id = P.publisher_id WHERE P.city = 'New York';,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, publication_year INTEGER, author_id INTEGER, publisher_id INTEGER, FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id)); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, city TEXT);",This query links 'Books' to 'Publishers' and then filters the results to include only books whose publishers are located in 'New York'.
Show the names of products that were ordered in a quantity greater than 5.,SELECT DISTINCT P.product_name FROM Products AS P INNER JOIN Order_Items AS OI ON P.product_id = OI.product_id WHERE OI.quantity > 5;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query joins 'Products' with 'Order_Items' to associate products with their ordered quantities, then filters for products where the ordered quantity exceeds 5."
"List the names of departments that have at least one employee hired after January 1, 2022.",SELECT DISTINCT D.department_name FROM Departments AS D INNER JOIN Employees AS E ON D.department_id = E.department_id WHERE E.hire_date > '2022-01-01';,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query joins 'Departments' and 'Employees' to connect employees to their departments, then selects distinct department names for departments that have employees hired after the specified date."
Find the names of authors who have published books with 'Penguin Random House'.,SELECT DISTINCT A.author_name FROM Authors AS A INNER JOIN Books AS B ON A.author_id = B.author_id INNER JOIN Publishers AS P ON B.publisher_id = P.publisher_id WHERE P.publisher_name = 'Penguin Random House';,"CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id), FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id)); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, city TEXT);","This query joins 'Authors', 'Books', and 'Publishers' to connect authors to their publishers, then filters to find authors whose books are published by 'Penguin Random House'."
Retrieve the names of customers who have ordered products from the 'Electronics' category.,SELECT DISTINCT C.customer_name FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id INNER JOIN Categories AS Cat ON P.category_id = Cat.category_id WHERE Cat.category_name = 'Electronics';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);","This complex query links customers through their orders and order items to products and their categories, then filters to identify customers who purchased products in the 'Electronics' category."
Calculate the average salary for each job title.,"SELECT J.job_title, AVG(E.salary) AS average_salary FROM Employees AS E INNER JOIN Jobs AS J ON E.job_id = J.job_id GROUP BY J.job_title;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, job_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id)); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT, min_salary REAL, max_salary REAL);","This query joins 'Employees' with 'Jobs' to associate salaries with job titles, then calculates the average salary for each distinct job title using AVG and GROUP BY."
List the names of projects that have more than 5 employees assigned to them.,"SELECT P.project_name, COUNT(EP.employee_id) AS num_employees FROM Projects AS P INNER JOIN Employee_Projects AS EP ON P.project_id = EP.project_id GROUP BY P.project_name HAVING COUNT(EP.employee_id) > 5;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT); CREATE TABLE Employee_Projects (employee_id INTEGER, project_id INTEGER, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query joins 'Projects' and 'Employee_Projects' to count employees per project, then uses HAVING to filter for projects with more than 5 employees."
Find all book titles written by 'Jane Austen' and published after the year 2000.,SELECT B.title FROM Books AS B INNER JOIN Authors AS A ON B.author_id = A.author_id WHERE A.author_name = 'Jane Austen' AND B.publication_year > 2000;,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, publication_year INTEGER, author_id INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id)); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, country TEXT);","This query joins 'Books' with 'Authors' to identify books by 'Jane Austen', then filters further to include only those published after 2000."
Get the names of customers who have placed at least one order with a total amount exceeding $500.,SELECT DISTINCT C.customer_name FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id WHERE O.total_amount > 500;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query links customers to their orders and then filters to show names of customers who have placed orders where the total amount was greater than $500.
List the names of products and their categories that are currently in stock (stock_quantity > 0).,"SELECT P.product_name, C.category_name FROM Products AS P INNER JOIN Categories AS C ON P.category_id = C.category_id WHERE P.stock_quantity > 0;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT, description TEXT);","This query joins 'Products' and 'Categories' to display product names and their category names, then filters to only include products that have a stock quantity greater than zero."
"Retrieve the full name of each employee and the names of the projects they are assigned to, sorted alphabetically by employee's last name.","SELECT E.first_name, E.last_name, P.project_name FROM Employees AS E INNER JOIN Employee_Projects AS EP ON E.employee_id = EP.employee_id INNER JOIN Projects AS P ON EP.project_id = P.project_id ORDER BY E.last_name, E.first_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT); CREATE TABLE Employee_Projects (employee_id INTEGER, project_id INTEGER, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id)); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT);","This query joins 'Employees', 'Employee_Projects', and 'Projects' to list each employee along with the projects they are working on, ordered alphabetically by employee's last name."
"Calculate the total revenue generated by each product, showing product name and total sales.","SELECT P.product_name, SUM(OI.quantity * OI.price_per_unit) AS total_sales FROM Products AS P INNER JOIN Order_Items AS OI ON P.product_id = OI.product_id GROUP BY P.product_name ORDER BY total_sales DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query joins 'Products' and 'Order_Items' to calculate the sales for each product (quantity * price_per_unit) and then aggregates the sum of these sales, grouped by product name."
"List departments that are associated with any project, regardless of its status.",SELECT DISTINCT D.department_name FROM Departments AS D INNER JOIN Projects AS P ON D.department_id = P.department_id;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query joins 'Departments' with 'Projects' to find all departments that have at least one associated project, returning distinct department names."
Find the names of publishers who published at least one book before the year 1900.,SELECT DISTINCT P.publisher_name FROM Publishers AS P INNER JOIN Books AS B ON P.publisher_id = B.publisher_id WHERE B.publication_year < 1900;,"CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, city TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, publication_year INTEGER, author_id INTEGER, publisher_id INTEGER, FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id));",This query joins 'Publishers' with 'Books' and then filters to show the names of publishers who have published books with a publication year earlier than 1900.
List the customers who have placed orders in the month of December 2023.,"SELECT DISTINCT C.customer_name FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y-%m', O.order_date) = '2023-12';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins 'Customers' and 'Orders' to connect customers with their order dates, then filters to find distinct customer names for orders placed in December 2023."
"For each department that has employees, count the number of employees and list the department name.","SELECT D.department_name, COUNT(E.employee_id) AS num_employees FROM Departments AS D INNER JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query joins 'Departments' and 'Employees' to link employees to their departments, then groups by department name to count the number of employees in each."
Retrieve the titles of books published by 'HarperCollins' where the author is from 'Canada'.,SELECT B.title FROM Books AS B INNER JOIN Authors AS A ON B.author_id = A.author_id INNER JOIN Publishers AS P ON B.publisher_id = P.publisher_id WHERE A.country = 'Canada' AND P.publisher_name = 'HarperCollins';,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, publication_year INTEGER, author_id INTEGER, publisher_id INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id), FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id)); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, country TEXT); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, city TEXT);",This query connects 'Books' with 'Authors' and 'Publishers' to find books where the author's country is 'Canada' and the publisher is 'HarperCollins'.
"Find the first name, last name, and hire date of the oldest employee (earliest hire_date) in each department.","SELECT E.first_name, E.last_name, E.hire_date, D.department_name FROM Employees AS E INNER JOIN Departments AS D ON E.department_id = D.department_id INNER JOIN (SELECT department_id, MIN(hire_date) AS min_hire_date FROM Employees GROUP BY department_id) AS Sub ON E.department_id = Sub.department_id AND E.hire_date = Sub.min_hire_date;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query uses a subquery to find the earliest hire date for each department, then joins 'Employees' and 'Departments' with the subquery to retrieve the details of the employee(s) who match that earliest hire date in their respective departments."
List the names of products that have appeared in more than one order item.,SELECT P.product_name FROM Products AS P INNER JOIN Order_Items AS OI ON P.product_id = OI.product_id GROUP BY P.product_name HAVING COUNT(OI.order_item_id) > 1;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query joins 'Products' with 'Order_Items', groups by product name, and uses HAVING to select only those products that have more than one order item associated with them."
"Retrieve the customer name, order date, product name, and quantity for all orders placed by customers residing in 'London'.","SELECT C.customer_name, O.order_date, P.product_name, OI.quantity FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id WHERE C.city = 'London';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER);","This comprehensive query joins 'Customers', 'Orders', 'Order_Items', and 'Products' to gather detailed order information, then filters for orders placed by customers from 'London'."
Show the job titles for which an employee was hired within the last year from the current date.,"SELECT DISTINCT J.job_title FROM Jobs AS J INNER JOIN Employees AS E ON J.job_id = E.job_id WHERE E.hire_date >= STRFTIME('%Y-%m-%d', DATE('now', '-1 year'));","CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT, min_salary REAL, max_salary REAL); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, job_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id));","This query joins 'Jobs' with 'Employees' to link job titles to employee hire dates, then filters for distinct job titles where an employee's hire date is within the last year from the current date."
Find authors who have published more than one book with the same publisher.,"SELECT A.author_name FROM Authors AS A INNER JOIN Books AS B ON A.author_id = B.author_id GROUP BY A.author_name, B.publisher_id HAVING COUNT(B.book_id) > 1;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, publication_year INTEGER, author_id INTEGER, publisher_id INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id), FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id)); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, city TEXT);","This query joins 'Authors' and 'Books', then groups by author name and publisher ID. It uses HAVING to identify authors who have more than one book associated with a specific publisher."
"List all customers and any orders they have placed, showing the customer name, order ID, and order date.","SELECT C.customer_name, O.order_id, O.order_date FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",Retrieves the name of each customer and details of any orders they might have placed. Customers without orders will still be listed with NULLs for order details.
Find all customers who have not placed any orders.,SELECT C.customer_name FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id WHERE O.order_id IS NULL;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","Selects customers from the Customers table. It performs a LEFT JOIN with Orders. By filtering WHERE O.order_id IS NULL, it identifies customers who do not have a matching entry in the Orders table, thus showing customers with no orders."
"Show all employees and the names of their departments, but only for departments located in 'New York'. Include employees without a department.","SELECT E.employee_name, D.department_name FROM Employees AS E LEFT JOIN Departments AS D ON E.department_id = D.department_id WHERE D.location = 'New York' OR D.department_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Lists all employees and their department names. Employees not assigned to any department will still be listed. If an employee is in a department, it will only show if that department is located in 'New York'. Employees without a department will also be included."
"List all departments and any employees assigned to them, including departments with no employees.","SELECT D.department_name, E.employee_name FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",Retrieves the name of each department and details of any employees working in them. Departments with no employees will still be listed with NULLs for employee details. This achieves a 'right join' effect by swapping the tables and using LEFT JOIN.
"Combine a list of all customers and all orders, showing where they match and where they don't, including customers without orders and orders without customers (emulating a FULL OUTER JOIN).","SELECT C.customer_name, O.order_id FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id UNION ALL SELECT C.customer_name, O.order_id FROM Orders AS O LEFT JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.customer_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query emulates a FULL OUTER JOIN. The first LEFT JOIN gets all customers and their matching orders (or NULLs for orders). The second LEFT JOIN gets all orders and their matching customers, but filters to only include orders that did not have a matching customer in the first join (i.e., WHERE C.customer_id IS NULL). UNION ALL combines these two sets of results."
"For each department, show its name and the total number of employees, including departments with no employees.","SELECT D.department_name, COUNT(E.employee_id) AS num_employees FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Lists all departments. For each department, it counts the number of associated employees. Departments without any employees will show a count of 0 because COUNT(E.employee_id) will not count NULL values from the LEFT JOIN."
"Calculate the total amount for all orders placed by each customer, including customers who haven't placed any orders, but only for orders placed in 2023.","SELECT C.customer_name, SUM(CASE WHEN STRFTIME('%Y', O.order_date) = '2023' THEN O.total_amount ELSE 0 END) AS total_2023_orders FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","Shows each customer and the sum of their order amounts for orders placed in 2023. Customers without orders or with no orders in 2023 will show 0 for the sum. STRFTIME('%Y', O.order_date) extracts the year from the date. The CASE statement ensures that only 2023 orders contribute to the sum."
"List all books, their authors, and the author's nationality, including books without an assigned author.","SELECT B.title, A.author_name, A.nationality FROM Books AS B LEFT JOIN Authors AS A ON B.author_id = A.author_id;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id)); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, nationality TEXT);","Retrieves the title of each book, and if available, the author's name and nationality. Books without a specified author will still be listed with NULL values for author details."
"Show all employees and the department they belong to, along with the average salary of their respective department. Include employees without a department.","SELECT E.employee_name, D.department_name, (SELECT AVG(salary) FROM Employees WHERE department_id = D.department_id) AS dept_avg_salary FROM Employees AS E LEFT JOIN Departments AS D ON E.department_id = D.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Lists all employees and their department names. For each employee, it also calculates the average salary for their specific department using a correlated subquery. Employees without a department will still be listed, with NULLs for department name and average salary."
"List all tasks and their associated project names, along with the number of days passed since the project started until today, for projects that have started. Include tasks not linked to any project.","SELECT T.task_name, P.project_name, CAST(JULIANDAY('now') - JULIANDAY(P.start_date) AS INTEGER) AS days_since_project_start FROM Tasks AS T LEFT JOIN Projects AS P ON T.project_id = P.project_id;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, task_name TEXT, status TEXT, FOREIGN KEY (project_id) REFERENCES Projects(project_id));","Retrieves all tasks and their associated project names. For projects that have started (start_date is not NULL), it calculates the number of days from the project's start date until the current date using JULIANDAY('now'). Tasks without a project or projects with NULL start_date will have NULL for days_since_project_start."
"Count the number of products in each category, including categories that have no products, but only count products with a price greater than 100.","SELECT C.category_name, COUNT(CASE WHEN P.price > 100 THEN P.product_id ELSE NULL END) AS high_price_product_count FROM Categories AS C LEFT JOIN Products AS P ON C.category_id = P.category_id GROUP BY C.category_name;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id));",Lists each category and counts the number of products within it that have a price greater than 100. Categories with no products or no products above 100 will show a count of 0. The CASE statement ensures only qualifying products are counted.
"Display all employees hired after 2020 who are assigned to a department in 'Europe', including those without a department.","SELECT E.employee_name, D.department_name FROM Employees AS E LEFT JOIN Departments AS D ON E.department_id = D.department_id WHERE STRFTIME('%Y', E.hire_date) > '2020' AND (D.location = 'Europe' OR D.department_id IS NULL);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Selects employees hired after 2020. It joins with departments, and only includes department names if the department is located in 'Europe'. Employees hired after 2020 who are in no department, or in a department not in 'Europe', will still be listed but with NULL department information."
List all authors who have not written any books.,SELECT A.author_name FROM Authors AS A LEFT JOIN Books AS B ON A.author_id = B.author_id WHERE B.book_id IS NULL;,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id)); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, nationality TEXT);",Selects authors who do not have any corresponding entries in the Books table by performing a LEFT JOIN and checking for NULL book_id in the joined result.
Find all departments that currently have no employees.,SELECT D.department_name FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id WHERE E.employee_id IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",Identifies departments that have no employees assigned by performing a LEFT JOIN and filtering for departments where no matching employee exists (E.employee_id IS NULL).
Get the names of customers who are registered in 'Springfield' and have not placed any orders.,SELECT C.customer_name FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id WHERE C.city = 'Springfield' AND O.order_id IS NULL;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",Finds customers from 'Springfield' who have not placed any orders by performing a LEFT JOIN and checking for NULL orders.
List all products that are not assigned to any category.,SELECT P.product_name FROM Products AS P LEFT JOIN Categories AS C ON P.category_id = C.category_id WHERE C.category_id IS NULL;,"CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id));",Identifies products that do not have a corresponding category entry by performing a LEFT JOIN and checking for NULL category_id from the Categories table.
"List all employees and the tasks they are assigned to, including employees who have no tasks. Only consider tasks related to projects starting in 2024.","SELECT E.employee_name, T.task_name FROM Employees AS E LEFT JOIN Tasks AS T ON E.employee_id = T.employee_id LEFT JOIN Projects AS P ON T.project_id = P.project_id WHERE STRFTIME('%Y', P.start_date) = '2024' OR T.task_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER, task_name TEXT, status TEXT, FOREIGN KEY (project_id) REFERENCES Projects(project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id)); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT);","Retrieves employee names and their assigned tasks. It includes employees without tasks. If a task is assigned, it checks if its associated project started in 2024. Employees without tasks, or whose tasks are not linked to 2024 projects, will still appear."
"Display all students and their major names, including students who haven't declared a major.","SELECT S.student_name, M.major_name FROM Students AS S LEFT JOIN Majors AS M ON S.major_id = M.major_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major_id INTEGER, FOREIGN KEY (major_id) REFERENCES Majors(major_id)); CREATE TABLE Majors (major_id INTEGER PRIMARY KEY, major_name TEXT);",Lists all students and their corresponding major names. Students who have not declared a major (their major_id is NULL or doesn't match any Majors entry) will still be listed with NULL for major_name.
Find all courses that currently have no students enrolled.,SELECT C.course_name FROM Courses AS C LEFT JOIN Enrollments AS E ON C.course_id = E.course_id WHERE E.enrollment_id IS NULL;,"CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));",Identifies courses that have no enrollments by performing a LEFT JOIN and filtering for courses where no matching enrollment exists (E.enrollment_id IS NULL).
"For each supplier, show their name and the total number of parts they supply, including suppliers who supply no parts.","SELECT S.supplier_name, COUNT(P.part_id) AS num_parts_supplied FROM Suppliers AS S LEFT JOIN Parts AS P ON S.supplier_id = P.supplier_id GROUP BY S.supplier_name;","CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, city TEXT); CREATE TABLE Parts (part_id INTEGER PRIMARY KEY, part_name TEXT, supplier_id INTEGER, price REAL, FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id));",Lists all suppliers and counts the number of parts associated with each. Suppliers without any parts will show a count of 0 because COUNT(P.part_id) ignores NULL values.
List all employees and their respective managers. Show employees even if they don't have a manager.,"SELECT E.employee_name, M.employee_name AS manager_name FROM Employees AS E LEFT JOIN Employees AS M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));",Performs a self-LEFT JOIN on the Employees table to match employees with their managers based on the manager_id. Employees without a manager will still be listed with a NULL manager_name.
Identify all projects that currently have no tasks assigned to them.,SELECT P.project_name FROM Projects AS P LEFT JOIN Tasks AS T ON P.project_id = T.project_id WHERE T.task_id IS NULL;,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, task_name TEXT, status TEXT, FOREIGN KEY (project_id) REFERENCES Projects(project_id));",Finds projects that have no tasks by performing a LEFT JOIN and filtering for projects where no matching task exists (T.task_id IS NULL).
"For each customer, list their name and the date of their most recent order, if any.","SELECT C.customer_name, MAX(O.order_date) AS latest_order_date FROM Customers AS C LEFT JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","Retrieves each customer's name and their latest order date. If a customer has no orders, latest_order_date will be NULL. MAX(O.order_date) correctly handles NULLs by returning NULL if no orders exist for a customer."
"Show each department's name and the average salary of its employees, including departments with no employees (average should be NULL in that case).","SELECT D.department_name, AVG(E.salary) AS average_salary FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",Lists each department's name and the average salary of its employees. Departments with no employees will show NULL for average_salary because AVG() ignores NULL values and will return NULL if all values are NULL.
"For each student, list all courses they are *not* currently enrolled in.","SELECT S.student_name, C.course_name FROM Students AS S CROSS JOIN Courses AS C LEFT JOIN Enrollments AS E ON S.student_id = E.student_id AND C.course_id = E.course_id WHERE E.enrollment_id IS NULL;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major_id INTEGER); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query first generates all possible student-course combinations using a CROSS JOIN. Then, it performs a LEFT JOIN with Enrollments. By filtering WHERE E.enrollment_id IS NULL, it identifies combinations where a student is not enrolled in a particular course."
"List all books and their author's nationality. If the author is American, show 'USA'; otherwise, show NULL for nationality. Include all books regardless of author's nationality or if they have an author.","SELECT B.title, CASE WHEN A.nationality = 'USA' THEN 'USA' ELSE NULL END AS author_nationality FROM Books AS B LEFT JOIN Authors AS A ON B.author_id = A.author_id;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id)); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, nationality TEXT);","Retrieves the title of each book. If the book's author is American, it displays 'USA' as the nationality; otherwise, it displays NULL. Books without an assigned author will also show NULL for nationality."
"List all suppliers and their city. For suppliers that supply parts, only include details for those parts with a price greater than 50. Show all suppliers, even if they don't supply such parts.","SELECT S.supplier_name, S.city, P.part_name, P.price FROM Suppliers AS S LEFT JOIN Parts AS P ON S.supplier_id = P.supplier_id AND P.price > 50;","CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, city TEXT); CREATE TABLE Parts (part_id INTEGER PRIMARY KEY, part_name TEXT, supplier_id INTEGER, price REAL, FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id));","Retrieves all suppliers and their cities. It performs a LEFT JOIN with Parts, but the join condition P.price > 50 means only parts satisfying this condition will be matched. Suppliers who do not supply parts over $50, or supply no parts at all, will still be listed with NULLs for part details."
"For each department, show its name and the number of employees hired after '2022-01-01', including departments that have no employees hired after that date.","SELECT D.department_name, COUNT(CASE WHEN E.hire_date > '2022-01-01' THEN E.employee_id ELSE NULL END) AS employees_hired_after_2022 FROM Departments AS D LEFT JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Lists all departments and counts the employees hired after January 1, 2022, within each department. Departments with no employees or no employees hired after that date will show a count of 0."
Find all employees who are not assigned to any task within any project.,SELECT E.employee_name FROM Employees AS E LEFT JOIN Tasks AS T ON E.employee_id = T.employee_id WHERE T.task_id IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER, task_name TEXT, status TEXT, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id));",Identifies employees who do not have any tasks assigned to them by performing a LEFT JOIN and checking for NULL task_id from the Tasks table.
"Show all products and their category name. If a product's category ID no longer exists in the Categories table, still show the product but with a NULL category name.","SELECT P.product_name, C.category_name FROM Products AS P LEFT JOIN Categories AS C ON P.category_id = C.category_id;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id));","This query lists every product from the Products table. It attempts to match each product to a category in the Categories table based on category_id. If a category_id in Products does not have a corresponding entry in Categories (e.g., the category was deleted), the product will still appear, but its category_name will be NULL, demonstrating the LEFT JOIN behavior."
Find cities where the total number of orders placed is more than 5.,"SELECT C.city, COUNT(O.order_id) AS total_orders FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.city HAVING COUNT(O.order_id) > 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query retrieves the cities that have received more than 5 orders. It joins Customers and Orders tables, groups the results by city, and then filters these groups to include only those with an order count greater than 5."
Show product categories where the sum of stock_quantity is less than 100.,"SELECT category, SUM(stock_quantity) AS total_stock FROM Products GROUP BY category HAVING SUM(stock_quantity) < 100;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL);",This query identifies product categories where the combined stock quantity of all products within that category is less than 100. It groups products by their category and then filters these groups based on the sum of their stock quantities.
"List departments where the average employee salary is above $70,000.","SELECT D.department_name, AVG(E.salary) AS average_salary FROM Departments AS D JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name HAVING AVG(E.salary) > 70000;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query finds departments where the average salary of their employees exceeds $70,000. It joins Departments and Employees tables, groups the results by department name, and then filters these groups based on their average salary."
Which courses have a minimum enrollment year before 2020 and were taken by at least 3 students?,"SELECT C.course_name, MIN(E.enrollment_year) AS earliest_enrollment FROM Courses AS C JOIN Enrollments AS E ON C.course_id = E.course_id GROUP BY C.course_name HAVING MIN(E.enrollment_year) < 2020 AND COUNT(E.student_id) >= 3;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query identifies courses that had at least one student enrolled before the year 2020 AND have a total of 3 or more enrollments. It joins Courses and Enrollments, groups by course name, and applies filters on both the minimum enrollment year and the total count of enrollments."
"For each store and product category, show the total revenue if it's more than $5000.","SELECT S.store_name, P.category, SUM(Sa.revenue) AS total_revenue FROM Stores AS S JOIN Sales AS Sa ON S.store_id = Sa.store_id JOIN Products AS P ON Sa.product_id = P.product_id GROUP BY S.store_name, P.category HAVING SUM(Sa.revenue) > 5000;","CREATE TABLE Stores (store_id INTEGER PRIMARY KEY, store_name TEXT, region TEXT, manager_id INTEGER); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, store_id INTEGER, product_id INTEGER, sale_date TEXT, quantity_sold INTEGER, revenue REAL, FOREIGN KEY (store_id) REFERENCES Stores(store_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, unit_cost REAL, unit_price REAL);","This query calculates the total revenue for each combination of store and product category, showing only those combinations where the total revenue exceeds $5000. It involves joins across three tables and groups by two columns."
Find customers who placed orders for 'Electronics' and have a total order amount exceeding $1000 for that category.,"SELECT C.customer_name, SUM(OI.quantity * OI.price) AS total_electronic_spend FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN OrderItems AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id WHERE P.category = 'Electronics' GROUP BY C.customer_name HAVING SUM(OI.quantity * OI.price) > 1000;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL);","This query finds customers who have spent more than $1000 on 'Electronics' products. It first filters for 'Electronics' products using WHERE, then calculates the total spend per customer and filters those sums using HAVING."
"Which projects, initiated after 2022-01-01, have an average 'hours worked' per employee greater than 160?","SELECT P.project_name, AVG(A.hours_worked) AS avg_hours FROM Projects AS P JOIN Assignments AS A ON P.project_id = A.project_id WHERE P.start_date > '2022-01-01' GROUP BY P.project_name HAVING AVG(A.hours_worked) > 160;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, department_id INTEGER, start_date TEXT, end_date TEXT, budget REAL); CREATE TABLE Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, hours_worked REAL, FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query identifies projects that started after January 1, 2022, and have an average of more than 160 hours worked per employee assigned to them. It filters projects by start date and then groups by project name to calculate the average hours, filtering those averages."
List product categories where the total number of products is greater than the average number of products per category.,"SELECT category, COUNT(product_id) AS num_products FROM Products GROUP BY category HAVING COUNT(product_id) > (SELECT AVG(product_count) FROM (SELECT COUNT(product_id) AS product_count FROM Products GROUP BY category));","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER, unit_price REAL);",This query finds product categories that have more products than the overall average number of products across all categories. It uses a subquery in the HAVING clause to determine the average product count per category.
"Show customer cities where the average order total is at least $500, but only for orders with 'Completed' status.","SELECT C.city, AVG(O.total_amount) AS avg_order_total FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id WHERE O.status = 'Completed' GROUP BY C.city HAVING AVG(O.total_amount) >= 500;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query calculates the average total amount for completed orders for each city and returns only those cities where this average is $500 or more. It filters by order status first, then groups and filters by the average."
Identify stores where the maximum single sale revenue exceeds $2000 and the total quantity sold is over 500.,"SELECT store_name, MAX(revenue) AS max_single_sale, SUM(quantity_sold) AS total_quantity FROM Sales AS S JOIN Stores AS St ON S.store_id = St.store_id GROUP BY store_name HAVING MAX(revenue) > 2000 AND SUM(quantity_sold) > 500;","CREATE TABLE Stores (store_id INTEGER PRIMARY KEY, store_name TEXT, region TEXT, manager_id INTEGER); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, store_id INTEGER, product_id INTEGER, sale_date TEXT, quantity_sold INTEGER, revenue REAL, FOREIGN KEY (store_id) REFERENCES Stores(store_id));",This query identifies stores that have had at least one sale with revenue over $2000 AND have sold a total quantity of more than 500 units across all their sales. It groups by store name and applies two different aggregate conditions in the HAVING clause.
Find cities where customers have ordered products from at least 3 different categories.,"SELECT C.city, COUNT(DISTINCT P.category) AS distinct_categories FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN OrderItems AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id GROUP BY C.city HAVING COUNT(DISTINCT P.category) >= 3;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query identifies cities where customers have placed orders that collectively span at least three unique product categories. It joins customer, order, order item, and product tables, groups by city, and filters based on the count of distinct product categories."
"Find cities where the average 'days on market' for properties sold for over $400,000 is less than 60 days.","SELECT P.city, AVG(JULIANDAY(L.closing_date) - JULIANDAY(L.listing_date)) AS avg_days_on_market FROM Properties AS P JOIN Listings AS L ON P.property_id = L.property_id WHERE P.status = 'Sold' AND L.final_sale_price > 400000 GROUP BY P.city HAVING AVG(JULIANDAY(L.closing_date) - JULIANDAY(L.listing_date)) < 60;","CREATE TABLE Properties (property_id INTEGER PRIMARY KEY, address TEXT, city TEXT, state TEXT, zip_code TEXT, bedrooms INTEGER, bathrooms REAL, square_footage INTEGER, year_built INTEGER, list_price REAL, status TEXT); CREATE TABLE Listings (listing_id INTEGER PRIMARY KEY, property_id INTEGER, agent_id INTEGER, listing_date TEXT, closing_date TEXT, final_sale_price REAL, FOREIGN KEY (property_id) REFERENCES Properties(property_id));","This query determines which cities have an average 'days on market' of less than 60 days for properties that were successfully sold for more than $400,000. It joins properties and listings, filters for sold properties above a certain price, groups by city, and then filters these groups based on the average duration properties stayed on the market."
List departments where either the average credits of courses offered is greater than 3.5 OR the number of courses offered is more than 10.,"SELECT D.department_name, AVG(C.credits) AS avg_credits, COUNT(C.course_id) AS num_courses FROM Departments AS D JOIN Courses AS C ON D.department_id = C.department_id GROUP BY D.department_name HAVING AVG(C.credits) > 3.5 OR COUNT(C.course_id) > 10;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, head_of_department TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, credits INTEGER, semester_offered TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));",This query finds departments that either offer courses with an average of more than 3.5 credits OR offer more than 10 courses in total. It groups courses by department and applies a compound condition using OR in the HAVING clause.
Show origin cities where the maximum package weight shipped (in kg) is over 50 kg AND the minimum package value is at least $100.,"SELECT S.origin_city, MAX(P.weight_kg) AS max_pkg_weight, MIN(P.value) AS min_pkg_value FROM Shipments AS S JOIN Packages AS P ON S.shipment_id = P.shipment_id GROUP BY S.origin_city HAVING MAX(P.weight_kg) > 50 AND MIN(P.value) >= 100;","CREATE TABLE Shipments (shipment_id INTEGER PRIMARY KEY, origin_city TEXT, destination_city TEXT, weight_kg REAL, status TEXT, shipment_date TEXT, delivery_date TEXT); CREATE TABLE Packages (package_id INTEGER PRIMARY KEY, shipment_id INTEGER, dimensions_cm TEXT, contents_description TEXT, value REAL, weight_kg REAL, FOREIGN KEY (shipment_id) REFERENCES Shipments(shipment_id));",This query identifies origin cities from which shipments have originated that contain at least one package weighing over 50 kg AND at least one package valued at $100 or more. It groups shipments by origin city and applies two aggregate conditions in the HAVING clause.
Find product categories where the total sales amount is greater than the total sales amount of 'Books' category.,"SELECT P.category, SUM(OI.quantity * OI.item_price) AS total_sales_amount FROM Products AS P JOIN OrderItems AS OI ON P.product_id = OI.product_id GROUP BY P.category HAVING SUM(OI.quantity * OI.item_price) > (SELECT SUM(OI2.quantity * OI2.item_price) FROM Products AS P2 JOIN OrderItems AS OI2 ON P2.product_id = OI2.product_id WHERE P2.category = 'Books');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query identifies product categories whose total sales revenue exceeds the total sales revenue generated by products in the 'Books' category. It calculates total sales per category and uses a subquery to get the 'Books' category's total sales for comparison in the HAVING clause.
Which departments have more than 5 courses offered in 'Fall' semester and at least 2 courses in 'Spring' semester?,SELECT D.department_name FROM Departments AS D JOIN Courses AS C ON D.department_id = C.department_id GROUP BY D.department_name HAVING SUM(CASE WHEN C.semester_offered = 'Fall' THEN 1 ELSE 0 END) > 5 AND SUM(CASE WHEN C.semester_offered = 'Spring' THEN 1 ELSE 0 END) >= 2;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, head_of_department TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, credits INTEGER, semester_offered TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));",This query identifies departments that offer more than 5 courses in the 'Fall' semester AND at least 2 courses in the 'Spring' semester. It uses conditional aggregation (SUM with CASE WHEN) within the HAVING clause to count specific semester offerings.
Find customers who have ordered products from at least as many unique categories as customer 'Alice Smith'.,SELECT C.customer_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN OrderItems AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id GROUP BY C.customer_name HAVING COUNT(DISTINCT P.category) >= (SELECT COUNT(DISTINCT P2.category) FROM Customers AS C2 JOIN Orders AS O2 ON C2.customer_id = O2.customer_id JOIN OrderItems AS OI2 ON O2.order_id = OI2.order_id JOIN Products AS P2 ON OI2.product_id = P2.product_id WHERE C2.customer_name = 'Alice Smith');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query finds customers who have ordered products from at least as many unique categories as 'Alice Smith'. It calculates the distinct categories for each customer and compares it to a subquery's result for 'Alice Smith' in the HAVING clause.
List departments where the most recent hire date is before '2023-01-01' and the department has at least 5 employees.,"SELECT D.department_name, MAX(E.hire_date) AS most_recent_hire FROM Departments AS D JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name HAVING MAX(E.hire_date) < '2023-01-01' AND COUNT(E.employee_id) >= 5;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query identifies departments where the most recent employee hire occurred before January 1, 2023, and the department has a minimum of 5 employees. It groups by department name and applies conditions on both the maximum hire date and employee count."
"Show states where the average list price of properties with 3 or more bedrooms is over $350,000, and there are at least 10 such properties.","SELECT state, AVG(list_price) AS avg_list_price, COUNT(property_id) AS num_properties FROM Properties WHERE bedrooms >= 3 GROUP BY state HAVING AVG(list_price) > 350000 AND COUNT(property_id) >= 10;","CREATE TABLE Properties (property_id INTEGER PRIMARY KEY, address TEXT, city TEXT, state TEXT, zip_code TEXT, bedrooms INTEGER, bathrooms REAL, square_footage INTEGER, year_built INTEGER, list_price REAL, status TEXT);","This query lists states where the average list price for properties with at least 3 bedrooms exceeds $350,000, and there are at least 10 such properties in that state. It filters properties by bedroom count first, then groups by state, and applies conditions on both the average list price and the count of properties."
"Find origin cities where the total value of packages shipped is more than $10,000 and the average weight per package is less than 20 kg.","SELECT S.origin_city, SUM(P.value) AS total_package_value, AVG(P.weight_kg) AS avg_package_weight FROM Shipments AS S JOIN Packages AS P ON S.shipment_id = P.shipment_id GROUP BY S.origin_city HAVING SUM(P.value) > 10000 AND AVG(P.weight_kg) < 20;","CREATE TABLE Shipments (shipment_id INTEGER PRIMARY KEY, origin_city TEXT, destination_city TEXT, weight_kg REAL, status TEXT, shipment_date TEXT, delivery_date TEXT); CREATE TABLE Packages (package_id INTEGER PRIMARY KEY, shipment_id INTEGER, dimensions_cm TEXT, contents_description TEXT, value REAL, weight_kg REAL, FOREIGN KEY (shipment_id) REFERENCES Shipments(shipment_id));","This query identifies origin cities from which the combined value of all shipped packages exceeds $10,000 AND the average weight of packages is less than 20 kg. It groups shipments by origin city and applies two distinct aggregate conditions in the HAVING clause."
"Show departments where the minimum credits for a course is at least 3, and they offer at least 5 courses.","SELECT D.department_name, MIN(C.credits) AS min_credits, COUNT(C.course_id) AS num_courses FROM Departments AS D JOIN Courses AS C ON D.department_id = C.department_id GROUP BY D.department_name HAVING MIN(C.credits) >= 3 AND COUNT(C.course_id) >= 5;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, head_of_department TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, credits INTEGER, semester_offered TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query finds departments where the lowest credit value among their courses is at least 3, and they offer 5 or more courses in total. It groups by department name and filters based on both minimum credits and total course count."
List product categories where the average price of products is higher than the overall average price of all products.,"SELECT category, AVG(price) AS avg_category_price FROM Products GROUP BY category HAVING AVG(price) > (SELECT AVG(price) FROM Products);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query identifies product categories whose average product price is greater than the average price of all products across all categories. It calculates the average price per category and compares it against the overall average obtained via a subquery in the HAVING clause.
Find customers who have more than 2 'Pending' orders.,"SELECT C.customer_name, COUNT(O.order_id) AS pending_orders_count FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id WHERE O.status = 'Pending' GROUP BY C.customer_name HAVING COUNT(O.order_id) > 2;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query identifies customers who have more than 2 orders with 'Pending' status. It first filters orders by status, then groups them by customer name, and finally filters these groups based on the count of pending orders."
Show categories where the average stock quantity is below 50 AND the total stock quantity is less than 500.,"SELECT category, AVG(stock_quantity) AS avg_stock, SUM(stock_quantity) AS total_stock FROM Products GROUP BY category HAVING AVG(stock_quantity) < 50 AND SUM(stock_quantity) < 500;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query finds product categories where both the average stock quantity per product is less than 50 AND the total combined stock quantity for all products in that category is less than 500. It groups by category and applies two aggregate conditions in the HAVING clause.
Which academic departments have students enrolled in at least 3 different courses and their earliest enrollment year is before 2021?,"SELECT D.department_name, COUNT(DISTINCT E.course_id) AS num_distinct_courses, MIN(E.enrollment_year) AS earliest_enrollment FROM Departments AS D JOIN Courses AS C ON D.department_id = C.department_id JOIN Enrollments AS E ON C.course_id = E.course_id GROUP BY D.department_name HAVING COUNT(DISTINCT E.course_id) >= 3 AND MIN(E.enrollment_year) < 2021;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT, enrollment_date TEXT, city TEXT, state TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, credits INTEGER, semester_offered TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, head_of_department TEXT);","This query identifies academic departments where students have enrolled in at least 3 distinct courses AND the earliest enrollment by any student in a course from that department was before 2021. It joins multiple tables, groups by department, and applies conditions on distinct course count and minimum enrollment year."
"Find agents who have listed more than 2 properties that were built before 2000 and sold for over $300,000.","SELECT A.agent_name, COUNT(P.property_id) AS num_properties FROM Agents AS A JOIN Listings AS L ON A.agent_id = L.agent_id JOIN Properties AS P ON L.property_id = P.property_id WHERE P.year_built < 2000 AND L.final_sale_price > 300000 GROUP BY A.agent_name HAVING COUNT(P.property_id) > 2;","CREATE TABLE Properties (property_id INTEGER PRIMARY KEY, address TEXT, city TEXT, state TEXT, zip_code TEXT, bedrooms INTEGER, bathrooms REAL, square_footage INTEGER, year_built INTEGER, list_price REAL, status TEXT); CREATE TABLE Agents (agent_id INTEGER PRIMARY KEY, agent_name TEXT, office_location TEXT, phone_number TEXT, hire_date TEXT); CREATE TABLE Listings (listing_id INTEGER PRIMARY KEY, property_id INTEGER, agent_id INTEGER, listing_date TEXT, closing_date TEXT, final_sale_price REAL, FOREIGN KEY (property_id) REFERENCES Properties(property_id), FOREIGN KEY (agent_id) REFERENCES Agents(agent_id));","This query identifies real estate agents who have listed more than 2 properties that were built before the year 2000 and subsequently sold for more than $300,000. It filters properties based on build year and sale price, then groups by agent name, and filters agents based on the count of matching properties."
List destination cities where the number of 'Delivered' shipments is at least 5 and the number of 'Pending' shipments is less than 3.,"SELECT destination_city, SUM(CASE WHEN status = 'Delivered' THEN 1 ELSE 0 END) AS delivered_count, SUM(CASE WHEN status = 'Pending' THEN 1 ELSE 0 END) AS pending_count FROM Shipments GROUP BY destination_city HAVING SUM(CASE WHEN status = 'Delivered' THEN 1 ELSE 0 END) >= 5 AND SUM(CASE WHEN status = 'Pending' THEN 1 ELSE 0 END) < 3;","CREATE TABLE Shipments (shipment_id INTEGER PRIMARY KEY, origin_city TEXT, destination_city TEXT, weight_kg REAL, status TEXT, shipment_date TEXT, delivery_date TEXT);",This query finds destination cities that have received at least 5 'Delivered' shipments AND fewer than 3 'Pending' shipments. It groups shipments by destination city and uses conditional aggregation (SUM with CASE WHEN) in the HAVING clause to count shipments by their status.
"For each customer, find if their average order amount for orders placed in 2023 is greater than $200 and they have placed at least 3 orders in that year.","SELECT C.customer_name, AVG(O.total_amount) AS avg_2023_order_amount, COUNT(O.order_id) AS num_2023_orders FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y', O.order_date) = '2023' GROUP BY C.customer_name HAVING AVG(O.total_amount) > 200 AND COUNT(O.order_id) >= 3;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query identifies customers whose average order amount for orders placed in 2023 exceeds $200 AND who have placed at least 3 orders in 2023. It filters orders by year using STRFTIME, then groups by customer, and applies conditions on both the average order amount and order count for that year."
"Which carriers have transported at least 10 packages, and the minimum weight of any package they transported is more than 0.5 kg?","SELECT CA.carrier_name, COUNT(PA.package_id) AS total_packages, MIN(PA.weight_kg) AS min_package_weight FROM Carriers AS CA JOIN Shipments AS SH ON CA.carrier_id = SH.carrier_id JOIN Packages AS PA ON SH.shipment_id = PA.shipment_id GROUP BY CA.carrier_name HAVING COUNT(PA.package_id) >= 10 AND MIN(PA.weight_kg) > 0.5;","CREATE TABLE Carriers (carrier_id INTEGER PRIMARY KEY, carrier_name TEXT, contact_person TEXT, phone TEXT); CREATE TABLE Shipments (shipment_id INTEGER PRIMARY KEY, origin_city TEXT, destination_city TEXT, weight_kg REAL, status TEXT, shipment_date TEXT, delivery_date TEXT, carrier_id INTEGER, FOREIGN KEY (carrier_id) REFERENCES Carriers(carrier_id)); CREATE TABLE Packages (package_id INTEGER PRIMARY KEY, shipment_id INTEGER, dimensions_cm TEXT, contents_description TEXT, value REAL, weight_kg REAL, FOREIGN KEY (shipment_id) REFERENCES Shipments(shipment_id));","This query identifies carriers that have transported at least 10 packages AND the lightest package they transported weighed more than 0.5 kg. It joins Carriers, Shipments, and Packages, groups by carrier name, and applies conditions on the total package count and the minimum package weight."
Find students who have earned at least 2 'A' grades and are enrolled in more than 3 courses overall.,"SELECT S.student_name, SUM(CASE WHEN E.grade = 'A' THEN 1 ELSE 0 END) AS count_a_grades, COUNT(E.enrollment_id) AS total_courses FROM Students AS S JOIN Enrollments AS E ON S.student_id = E.student_id GROUP BY S.student_name HAVING SUM(CASE WHEN E.grade = 'A' THEN 1 ELSE 0 END) >= 2 AND COUNT(E.enrollment_id) > 3;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT, enrollment_date TEXT, city TEXT, state TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, enrollment_year INTEGER, FOREIGN KEY (student_id) REFERENCES Students(student_id));",This query identifies students who have achieved at least 2 'A' grades AND are currently enrolled in more than 3 courses. It groups enrollments by student name and applies conditions on both the count of 'A' grades (using conditional aggregation) and the total number of enrolled courses.
"Get all employees' information along with a unique row number based on their hire date, ordered chronologically.","SELECT employee_id, employee_name, department_id, salary, hire_date, ROW_NUMBER() OVER (ORDER BY hire_date) AS rn FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","Assigns a unique, sequential number to each employee globally, based on their hiring date."
"For each department, rank employees by their salary from highest to lowest. Employees with the same salary in a department should receive the same rank, and the next rank should skip numbers.","SELECT employee_id, employee_name, department_id, salary, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS salary_rank FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","Ranks employees within each department based on their salary in descending order, with ties receiving the same rank and subsequent ranks skipping numbers."
"Rank products within each category by their price, ensuring no rank gaps for tied prices.","SELECT product_id, product_name, category, price, DENSE_RANK() OVER (PARTITION BY category ORDER BY price DESC) AS price_dense_rank FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","Ranks products within each category by price, without gaps in ranking even when prices are tied."
Divide all employees into 4 salary quartiles and show which quartile each belongs to.,"SELECT employee_id, employee_name, salary, NTILE(4) OVER (ORDER BY salary) AS salary_quartile FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","Divides all employees into 4 groups (quartiles) based on their salary, assigning a quartile number to each."
"For each employee, show their current salary and the salary of the employee hired immediately before them, ordered by hire date. Default to 0 if no previous employee.","SELECT employee_id, employee_name, salary, hire_date, LAG(salary, 1, 0) OVER (ORDER BY hire_date) AS previous_employee_salary FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","Retrieves the salary of the employee who was hired immediately before the current employee, based on hire date order. Defaults to 0 if no previous salary exists."
"For each sensor reading, find the current value and the value of the next reading from the same sensor, based on timestamp.","SELECT reading_id, sensor_id, reading_timestamp, value, LEAD(value, 1) OVER (PARTITION BY sensor_id ORDER BY reading_timestamp) AS next_reading_value FROM SensorReadings;","CREATE TABLE SensorReadings (reading_id INTEGER PRIMARY KEY, sensor_id INTEGER, reading_timestamp TEXT, value REAL);","Fetches the value of the next sensor reading for the same sensor, ordered by timestamp."
"Calculate a running total of transaction amounts for each account, ordered by transaction date.","SELECT transaction_id, account_id, transaction_date, amount, SUM(amount) OVER (PARTITION BY account_id ORDER BY transaction_date) AS running_total FROM Transactions;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, type TEXT);","Calculates the cumulative sum of transaction amounts for each account, ordered by the transaction date."
"For each sensor reading, calculate the average of the current reading and the two preceding readings from the same sensor.","SELECT reading_id, sensor_id, reading_timestamp, value, AVG(value) OVER (PARTITION BY sensor_id ORDER BY reading_timestamp ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS three_point_moving_avg FROM SensorReadings;","CREATE TABLE SensorReadings (reading_id INTEGER PRIMARY KEY, sensor_id INTEGER, reading_timestamp TEXT, value REAL);",Computes a 3-point moving average (current and two previous readings) for each sensor's data.
"For each department, count how many employees were hired up to and including the current employee's hire date.","SELECT employee_id, employee_name, department_id, hire_date, COUNT(employee_id) OVER (PARTITION BY department_id ORDER BY hire_date) AS employees_hired_so_far FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);",Counts the number of employees hired within each department up to the current employee's hire date.
"For each product category, find the lowest and highest price encountered so far as products are listed alphabetically by name.","SELECT product_id, product_name, category, price, MIN(price) OVER (PARTITION BY category ORDER BY product_name ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS min_price_so_far, MAX(price) OVER (PARTITION BY category ORDER BY product_name ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS max_price_so_far FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","For each product category, calculates the minimum and maximum price encountered from the beginning of the category up to the current product, ordered by product name."
"For each department, find the salary of the employee who was hired earliest in that department.","SELECT employee_id, employee_name, department_id, salary, hire_date, FIRST_VALUE(salary) OVER (PARTITION BY department_id ORDER BY hire_date) AS earliest_hire_salary FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);",Retrieves the salary of the employee with the earliest hire date within each specific department.
"For each department, find the salary of the employee hired latest in that department, considering all employees within the partition.","SELECT employee_id, employee_name, department_id, salary, hire_date, LAST_VALUE(salary) OVER (PARTITION BY department_id ORDER BY hire_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS latest_hire_salary FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","Retrieves the salary of the employee with the latest hire date within each specific department, by expanding the window frame to include all following rows."
"For each department, find the salary of the second employee hired in that department.","SELECT employee_id, employee_name, department_id, salary, hire_date, NTH_VALUE(salary, 2) OVER (PARTITION BY department_id ORDER BY hire_date) AS second_hired_salary FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","Gets the salary of the second employee hired within each department, based on the hire date order."
List the top 3 highest paid employees in each department.,"SELECT employee_id, employee_name, department_id, salary FROM (SELECT employee_id, employee_name, department_id, salary, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk FROM Employees) AS subquery WHERE rnk <= 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);",Selects the top 3 highest-paid employees from each department by ranking them and then filtering the results from a subquery.
"For each account, calculate the difference between the current transaction amount and the previous one.","SELECT transaction_id, account_id, transaction_date, amount, amount - LAG(amount, 1, 0) OVER (PARTITION BY account_id ORDER BY transaction_date) AS amount_change FROM Transactions;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, type TEXT);","Computes the difference between the current transaction amount and the previous transaction amount for each account, ordered by transaction date."
"For each product, calculate its price as a percentage of the total price of all products in its category.","SELECT product_id, product_name, category, price, (price * 100.0 / SUM(price) OVER (PARTITION BY category)) AS percentage_of_category_total FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",Calculates each product's price as a percentage of the total price of all products within its respective category.
"For each employee, determine their salary's percentile rank among all employees.","SELECT employee_id, employee_name, salary, CAST(RANK() OVER (ORDER BY salary) AS REAL) / COUNT(*) OVER () AS salary_percentile FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","Calculates the percentile rank of each employee's salary relative to all other employee salaries, approximating PERCENT_RANK."
"List all sales, assigning a sequential number based on sale date (ascending) and then amount (descending) for ties.","SELECT sale_id, product_id, employee_id, sale_date, amount, ROW_NUMBER() OVER (ORDER BY sale_date, amount DESC) AS sale_seq_num FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, employee_id INTEGER, sale_date TEXT, amount REAL);","Assigns a unique, sequential number to each sale, ordered first by sale date (ascending) and then by amount (descending) for sales on the same date."
"For each student, calculate the average GPA of students whose GPA is within 0.1 of their own, within the same major.","SELECT student_id, student_name, major, gpa, AVG(gpa) OVER (PARTITION BY major ORDER BY gpa RANGE BETWEEN 0.1 PRECEDING AND 0.1 FOLLOWING) AS avg_gpa_nearby FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, gpa REAL, major TEXT, enrollment_date TEXT);",Computes the average GPA for students within the same major whose GPA falls within a 0.1 numerical range (both above and below) of the current student's GPA.
"Get the total sales for each employee for their first 3 sales, ordered by date.","SELECT employee_id, sale_id, sale_date, amount, SUM(amount) OVER (PARTITION BY employee_id ORDER BY sale_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total_first_3_sales FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY employee_id ORDER BY sale_date) AS rn FROM Sales) AS subquery WHERE rn <= 3;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, employee_id INTEGER, sale_date TEXT, amount REAL);","Calculates a running total of sale amounts for each employee, but only considering their first three sales in chronological order, using a subquery to pre-filter."
"For each flight, calculate the time difference in minutes until the next flight from the same departure airport.","SELECT flight_id, flight_number, departure_airport, departure_time, (julianday(LEAD(departure_time) OVER (PARTITION BY departure_airport ORDER BY departure_time)) - julianday(departure_time)) * 24 * 60 AS minutes_to_next_flight FROM Flights WHERE LEAD(departure_time) OVER (PARTITION BY departure_airport ORDER BY departure_time) IS NOT NULL;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT, departure_airport TEXT, arrival_airport TEXT, departure_time TEXT, arrival_time TEXT, duration_minutes INTEGER);","Calculates the time difference in minutes between a flight's departure and the next flight's departure from the same airport, filtering out the last flight for each airport."
Find accounts where there's a gap of more than 7 days between consecutive transactions.,"SELECT account_id, transaction_date AS current_transaction_date, LAG(transaction_date) OVER (PARTITION BY account_id ORDER BY transaction_date) AS previous_transaction_date FROM Transactions WHERE julianday(transaction_date) - julianday(LAG(transaction_date) OVER (PARTITION BY account_id ORDER BY transaction_date)) > 7;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, type TEXT);",Identifies transactions where the current transaction date is more than 7 days after the previous transaction for the same account.
"For each account, count the cumulative number of 'deposit' transactions over time.","SELECT transaction_id, account_id, transaction_date, amount, type, SUM(CASE WHEN type = 'deposit' THEN 1 ELSE 0 END) OVER (PARTITION BY account_id ORDER BY transaction_date) AS cumulative_deposits FROM Transactions;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, type TEXT);","Calculates a running count of 'deposit' transactions for each account, ordered by transaction date."
Calculate the percentile rank of each student's GPA within their major.,"SELECT student_id, student_name, major, gpa, (CAST(RANK() OVER (PARTITION BY major ORDER BY gpa) - 1 AS REAL) / (COUNT(*) OVER (PARTITION BY major) - 1)) AS major_gpa_percent_rank FROM Students WHERE COUNT(*) OVER (PARTITION BY major) > 1;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, gpa REAL, major TEXT, enrollment_date TEXT);","Calculates the percentile rank for each student's GPA within their major, ranging from 0 to 1, avoiding division by zero for majors with a single student."
Assign each product to a price quintile based on its price across all products.,"SELECT product_id, product_name, price, category, NTILE(5) OVER (ORDER BY price) AS price_quintile FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",Divides all products into 5 groups (quintiles) based on their price and assigns a quintile number to each.
"For each department, find the name of the employee who was hired first.","SELECT employee_id, employee_name, department_id, hire_date, FIRST_VALUE(employee_name) OVER (PARTITION BY department_id ORDER BY hire_date) AS first_hired_employee_name FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);",Retrieves the name of the employee who was hired earliest within each specific department.
"For each employee, display their salary and the salary of the latest-hired employee among those hired up to their own hire date within their department.","SELECT employee_id, employee_name, department_id, salary, hire_date, LAST_VALUE(salary) OVER (PARTITION BY department_id ORDER BY hire_date) AS latest_salary_so_far FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","Displays each employee's salary and the salary of the most recently hired employee in their department, considering only employees hired up to and including the current employee (due to default window frame)."
"For each employee, calculate the sum of salaries of all other employees in their department (excluding their own salary).","SELECT employee_id, employee_name, salary, department_id, (SUM(salary) OVER (PARTITION BY department_id)) - salary AS sum_of_other_salaries_in_dept FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","Calculates the sum of salaries for all employees in the same department as the current employee, and then subtracts the current employee's own salary."
"For each transaction, identify if it's the start of a 'withdrawal' sequence (i.e., the previous transaction was not a withdrawal, but the current one is).","SELECT transaction_id, account_id, transaction_date, amount, type, CASE WHEN type = 'withdrawal' AND LAG(type, 1, 'not_withdrawal') OVER (PARTITION BY account_id ORDER BY transaction_date) != 'withdrawal' THEN 'TRUE' ELSE 'FALSE' END AS start_of_withdrawal_sequence FROM Transactions;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, type TEXT);",Identifies if a transaction marks the beginning of a series of 'withdrawal' transactions for a given account by checking the type of the previous transaction.
"Calculate the running average of the product of quantity and unit price for each order item, within each order, ordered by item ID.","SELECT order_item_id, order_id, product_id, quantity, unit_price, AVG(quantity * unit_price) OVER (PARTITION BY order_id ORDER BY order_item_id) AS running_avg_item_total FROM OrderItems;","CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","Computes a running average of the total price (quantity * unit_price) for each item within an order, ordered by item ID."
Find the names of products whose price is greater than the average price of all products.,SELECT product_name FROM Products WHERE price > (SELECT AVG(price) FROM Products);,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER );",This query uses an uncorrelated subquery to first calculate the average price of all products. The outer query then selects products whose individual price is higher than this calculated average.
List all customers who have placed an order.,SELECT customer_name FROM Customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM Orders);,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query uses an uncorrelated subquery in the WHERE clause with the IN operator. The subquery returns a distinct list of customer IDs from the Orders table, and the outer query then retrieves the names of customers whose IDs are in that list."
Get the names of employees who earn more than the average salary of their respective department.,"SELECT E1.employee_name, E1.salary, D.department_name FROM Employees E1 JOIN Departments D ON E1.department_id = D.department_id WHERE E1.salary > (SELECT AVG(E2.salary) FROM Employees E2 WHERE E2.department_id = E1.department_id);","CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses a correlated subquery. For each employee (E1) in the outer query, the subquery calculates the average salary for employees in *that specific* department (E1.department_id). The outer query then filters employees whose salary is greater than their department's average."
Find departments that have at least one employee earning more than 70000.,SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary > 70000);,"CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses a correlated subquery with the EXISTS operator. For each department, the subquery checks if there exists any employee belonging to that department who earns more than 70000. If such an employee exists, the department's name is returned."
"Show the number of products in each category, along with the overall average price of products in that category.","SELECT category, COUNT(product_id) AS total_products, (SELECT AVG(price) FROM Products P2 WHERE P2.category = P1.category) AS average_category_price FROM Products P1 GROUP BY category;","CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER );","This query uses a correlated scalar subquery in the SELECT clause. For each category group, the subquery calculates the average price specifically for products within that category. This average is displayed alongside the count of products for each category."
Get products that have never been ordered.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items);,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER ); CREATE TABLE Order_Items ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) );",This query uses an uncorrelated subquery with NOT IN. The subquery finds all product IDs that have appeared in any order item. The outer query then selects product names for those IDs that are NOT in this list.
Find departments that have no employees.,SELECT department_name FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id);,"CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses a correlated subquery with NOT EXISTS. For each department, the subquery checks if there are no employees associated with that department. If no employees are found for a department, its name is returned."
Retrieve the names of students who have enrolled in courses taught by 'Professor Smith'.,SELECT S.student_name FROM Students S WHERE S.student_id IN (SELECT E.student_id FROM Enrollments E JOIN Instructors I ON E.instructor_id = I.instructor_id WHERE I.instructor_name = 'Professor Smith');,"CREATE TABLE Students ( student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT, gpa REAL ); CREATE TABLE Enrollments ( enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, instructor_id INTEGER, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id) ); CREATE TABLE Instructors ( instructor_id INTEGER PRIMARY KEY, instructor_name TEXT NOT NULL, department TEXT );",This query uses an uncorrelated subquery. The inner query identifies student IDs who enrolled in courses taught by 'Professor Smith'. The outer query then selects the names of students matching those IDs.
"For each employee, show their name and whether they are the highest paid in their department.","SELECT E.employee_name, E.salary, D.department_name, CASE WHEN E.salary = (SELECT MAX(E2.salary) FROM Employees E2 WHERE E2.department_id = E.department_id) THEN 'Yes' ELSE 'No' END AS is_highest_paid_in_dept FROM Employees E JOIN Departments D ON E.department_id = D.department_id ORDER BY D.department_name, E.salary DESC;","CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses a correlated scalar subquery within a CASE statement. For each employee, the subquery finds the maximum salary in their specific department. The CASE statement then compares the employee's salary to this maximum to determine if they are the highest paid in their department."
Find customers who have ordered at least one 'Electronics' product.,SELECT C.customer_name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE O.customer_id = C.customer_id AND P.category = 'Electronics');,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE Order_Items ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) );","This query uses a correlated subquery with EXISTS. For each customer, the subquery checks if there exists an order item associated with that customer that includes a product from the 'Electronics' category. If such an item exists, the customer's name is returned."
List all products that have a stock quantity below the minimum stock quantity of all products in the 'Books' category.,SELECT product_name FROM Products WHERE stock_quantity < (SELECT MIN(stock_quantity) FROM Products WHERE category = 'Books');,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER );",This query uses an uncorrelated subquery to first find the minimum stock quantity among products in the 'Books' category. The outer query then retrieves products whose own stock quantity is less than this global minimum.
Get the names of employees who were hired on the earliest date within their respective department.,"SELECT E1.employee_name, E1.hire_date, D.department_name FROM Employees E1 JOIN Departments D ON E1.department_id = D.department_id WHERE E1.hire_date = (SELECT MIN(E2.hire_date) FROM Employees E2 WHERE E2.department_id = E1.department_id);","CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses a correlated subquery. For each employee, the subquery finds the earliest hire date within their specific department. The outer query then filters employees whose hire date matches this earliest date for their department."
Find customers who have placed more than 5 orders in total.,SELECT C.customer_name FROM Customers C WHERE (SELECT COUNT(O.order_id) FROM Orders O WHERE O.customer_id = C.customer_id) > 5;,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query uses a correlated scalar subquery in the WHERE clause. For each customer, the subquery counts the number of orders they have placed. The outer query then filters for customers where this count is greater than 5."
List all projects that have a budget greater than the average budget of all projects in their respective department.,"SELECT P1.project_name, P1.budget, D.department_name FROM Projects P1 JOIN Departments D ON P1.department_id = D.department_id WHERE P1.budget > (SELECT AVG(P2.budget) FROM Projects P2 WHERE P2.department_id = P1.department_id);","CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, department_id INTEGER, start_date TEXT, end_date TEXT, budget REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses a correlated subquery. For each project, the subquery calculates the average budget for projects belonging to *that specific* department. The outer query then filters projects whose individual budget is greater than their department's average."
Find the student with the highest GPA.,"SELECT student_name, gpa FROM Students WHERE gpa = (SELECT MAX(gpa) FROM Students);","CREATE TABLE Students ( student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT, gpa REAL );",This query uses an uncorrelated subquery to find the maximum GPA among all students. The outer query then selects the name and GPA of the student(s) who have this maximum GPA.
List departments that have projects but no employees.,SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Projects P WHERE P.department_id = D.department_id) AND NOT EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id);,"CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id) ); CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, department_id INTEGER, start_date TEXT, end_date TEXT, budget REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses two correlated subqueries. The first EXISTS checks if a department has any projects, and the second NOT EXISTS checks if it has no employees. Only departments satisfying both conditions are returned."
Get the names of courses that have an average grade lower than the overall average grade of all enrollments.,SELECT C.course_name FROM Courses C WHERE (SELECT AVG(CAST(E.grade AS REAL)) FROM Enrollments E WHERE E.course_id = C.course_id) < (SELECT AVG(CAST(grade AS REAL)) FROM Enrollments WHERE grade IS NOT NULL);,"CREATE TABLE Courses ( course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, department TEXT, credits INTEGER ); CREATE TABLE Enrollments ( enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, instructor_id INTEGER, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id) );",This query uses a correlated scalar subquery and an uncorrelated scalar subquery. The outer query filters courses where the average grade of enrollments for that specific course (correlated subquery) is less than the overall average grade of all enrollments (uncorrelated subquery). `CAST(grade AS REAL)` is used to ensure numeric comparison if grade is stored as TEXT.
Find customers who have never placed an order.,SELECT customer_name FROM Customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders);,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query uses an uncorrelated subquery with NOT IN. The subquery returns a distinct list of customer IDs that have placed orders. The outer query then selects customer names for those IDs that are NOT in this list, effectively finding customers with no orders."
"For each customer, show their name and the total number of orders they placed, but only for customers who placed more than the average number of orders per customer.","SELECT C.customer_name, (SELECT COUNT(O.order_id) FROM Orders O WHERE O.customer_id = C.customer_id) AS total_orders FROM Customers C WHERE (SELECT COUNT(O.order_id) FROM Orders O WHERE O.customer_id = C.customer_id) > (SELECT CAST(COUNT(*) AS REAL) / COUNT(DISTINCT customer_id) FROM Orders);","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );","This query uses a correlated subquery in the SELECT clause to count orders per customer, and another correlated subquery in the WHERE clause to filter based on this count. The uncorrelated subquery calculates the overall average number of orders per customer. The outer query returns customers whose individual order count exceeds this overall average."
Identify products that are currently out of stock (stock_quantity = 0) but have existing orders.,SELECT P.product_name FROM Products P WHERE P.stock_quantity = 0 AND EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.product_id = P.product_id);,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER ); CREATE TABLE Order_Items ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) );","This query uses a correlated subquery with EXISTS. It finds products that have a stock quantity of 0 and also have at least one entry in the Order_Items table, indicating they have been ordered at some point."
Show the top 3 highest paid employees in each department.,"SELECT E1.employee_name, E1.salary, D.department_name FROM Employees E1 JOIN Departments D ON E1.department_id = D.department_id WHERE (SELECT COUNT(*) FROM Employees E2 WHERE E2.department_id = E1.department_id AND E2.salary >= E1.salary) <= 3 ORDER BY D.department_name, E1.salary DESC;","CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses a correlated subquery to find the top N employees within each group (department). For each employee (E1), the subquery counts how many employees in the *same department* have a salary greater than or equal to E1's salary. If this count is 3 or less, it means E1 is among the top 3 highest paid in their department."
Retrieve the names of instructors who are teaching the course with the highest credits in their department.,"SELECT I.instructor_name, C.course_name, C.credits FROM Instructors I JOIN Enrollments E ON I.instructor_id = E.instructor_id JOIN Courses C ON E.course_id = C.course_id WHERE C.credits = (SELECT MAX(C2.credits) FROM Courses C2 WHERE C2.department = I.department);","CREATE TABLE Instructors ( instructor_id INTEGER PRIMARY KEY, instructor_name TEXT NOT NULL, department TEXT ); CREATE TABLE Courses ( course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, department TEXT, credits INTEGER ); CREATE TABLE Enrollments ( enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, instructor_id INTEGER, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id) );","This query uses a correlated subquery. For each instructor, the subquery finds the maximum credits for courses within the *instructor's department*. The outer query then filters to show instructors teaching a course that matches this maximum credit value for their department."
Find customers who registered in the year 2023 and have not placed any orders yet.,"SELECT customer_name FROM Customers WHERE STRFTIME('%Y', registration_date) = '2023' AND customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders);","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );",This query combines a date filter with an uncorrelated subquery. It selects customers who registered in 2023 and whose IDs are not found in the list of customers who have placed orders.
List projects whose start date is before the earliest hire date of any employee in the same department.,"SELECT P.project_name, P.start_date, D.department_name FROM Projects P JOIN Departments D ON P.department_id = D.department_id WHERE P.start_date < (SELECT MIN(E.hire_date) FROM Employees E WHERE E.department_id = P.department_id);","CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id) ); CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, department_id INTEGER, start_date TEXT, end_date TEXT, budget REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses a correlated subquery. For each project, the subquery finds the earliest hire date among employees in the *project's department*. The outer query then selects projects whose start date is earlier than this minimum hire date."
"Find the total number of distinct products ordered by each customer, alongside their name.","SELECT C.customer_name, (SELECT COUNT(DISTINCT OI.product_id) FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id WHERE O.customer_id = C.customer_id) AS distinct_products_ordered FROM Customers C;","CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE Order_Items ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) );","This query uses a correlated scalar subquery in the SELECT clause. For each customer, the subquery counts the distinct product IDs associated with their orders, providing the total number of unique products they have purchased."
List students who have a GPA higher than the average GPA of all students majoring in 'Computer Science'.,"SELECT student_name, gpa FROM Students WHERE gpa > (SELECT AVG(gpa) FROM Students WHERE major = 'Computer Science');","CREATE TABLE Students ( student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, enrollment_date TEXT, gpa REAL );",This query uses an uncorrelated subquery. The subquery calculates the average GPA specifically for students majoring in 'Computer Science'. The outer query then retrieves students whose individual GPA is greater than this calculated average.
Get the names of employees whose salary is not the maximum salary in any department.,SELECT employee_name FROM Employees E1 WHERE NOT EXISTS (SELECT 1 FROM Employees E2 WHERE E2.department_id = E1.department_id AND E2.salary > E1.salary);,"CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses a correlated subquery with NOT EXISTS. For each employee (E1), the subquery checks if there exists another employee (E2) in the *same department* with a higher salary. If no such employee (E2) exists, it means E1 has the maximum salary in their department, and they are excluded by the NOT EXISTS clause."
Find the average order total for customers from 'New York'.,SELECT AVG(O.total_amount) FROM Orders O WHERE O.customer_id IN (SELECT customer_id FROM Customers WHERE city = 'New York');,"CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) );",This query uses an uncorrelated subquery. The inner query identifies customer IDs from 'New York'. The outer query then calculates the average total amount of orders placed by these specific customers.
List departments that have a budget higher than the highest budget of any project in the 'Marketing' department.,SELECT department_name FROM Departments D JOIN Projects P ON D.department_id = P.department_id WHERE P.budget > (SELECT MAX(budget) FROM Projects WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Marketing')) GROUP BY D.department_name;,"CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Projects ( project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, department_id INTEGER, start_date TEXT, end_date TEXT, budget REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );",This query uses nested uncorrelated subqueries. The innermost subquery finds the department ID of 'Marketing'. The next subquery finds the maximum project budget in the 'Marketing' department. The outer query then selects department names where any of their projects have a budget greater than this maximum 'Marketing' project budget.
Show products that have been ordered by every customer from 'London'.,SELECT product_name FROM Products P WHERE (SELECT COUNT(DISTINCT C.customer_id) FROM Customers C WHERE C.city = 'London') = (SELECT COUNT(DISTINCT O.customer_id) FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE OI.product_id = P.product_id AND C.city = 'London');,"CREATE TABLE Products ( product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER ); CREATE TABLE Customers ( customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, country TEXT, registration_date TEXT ); CREATE TABLE Orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ); CREATE TABLE Order_Items ( order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id) );","This query uses two scalar subqueries, one uncorrelated and one correlated. The uncorrelated subquery calculates the total count of distinct customers from 'London'. The correlated subquery counts how many distinct 'London' customers have ordered the current product (P). The outer query returns products where these two counts are equal, meaning the product has been ordered by all 'London' customers."
Find the department with the highest average salary.,SELECT D.department_name FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_id HAVING AVG(E.salary) = (SELECT MAX(avg_salary) FROM (SELECT AVG(salary) AS avg_salary FROM Employees GROUP BY department_id));,"CREATE TABLE Departments ( department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT ); CREATE TABLE Employees ( employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id) );","This query uses an uncorrelated subquery as a derived table (a subquery in the FROM clause). The inner derived table calculates the average salary for each department. The outer query then finds the maximum of these average salaries. Finally, the main query selects the department(s) whose average salary matches this overall maximum average."
List the names of all employees who are either from the 'Sales' department or have a salary greater than 60000.,SELECT Name FROM Employees WHERE DepartmentID = (SELECT ID FROM Departments WHERE Name = 'Sales') UNION SELECT Name FROM Employees WHERE Salary > 60000;,"CREATE TABLE Employees (ID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT); CREATE TABLE Departments (ID INTEGER PRIMARY KEY, Name TEXT, Location TEXT);","This query combines the names of employees belonging to the 'Sales' department with the names of employees earning more than 60,000, ensuring distinct names are returned."
Find the IDs of products that have been sold in both 'Electronics' and 'Apparel' categories.,SELECT ProductID FROM ProductSales WHERE Category = 'Electronics' INTERSECT SELECT ProductID FROM ProductSales WHERE Category = 'Apparel';,"CREATE TABLE ProductSales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT, Quantity INTEGER, Price REAL, Category TEXT);","This query returns the IDs of products that appear in sales records for both the 'Electronics' and 'Apparel' categories, indicating they were sold in both."
Retrieve the names of customers who placed orders in 2023 but did not place any orders in 2022.,"SELECT C.Name FROM Customers C JOIN Orders O ON C.ID = O.CustomerID WHERE strftime('%Y', O.OrderDate) = '2023' EXCEPT SELECT C.Name FROM Customers C JOIN Orders O ON C.ID = O.CustomerID WHERE strftime('%Y', O.OrderDate) = '2022';","CREATE TABLE Customers (ID INTEGER PRIMARY KEY, Name TEXT, Email TEXT, City TEXT); CREATE TABLE Orders (ID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query identifies customers who made at least one order in 2023 and removes any customers who also made at least one order in 2022, effectively listing customers who ordered only in 2023 among those two years."
"Get the names of all staff members, including both doctors and nurses, ensuring duplicates are shown.",SELECT Name FROM Doctors UNION ALL SELECT Name FROM Nurses;,"CREATE TABLE Doctors (ID INTEGER PRIMARY KEY, Name TEXT, Specialty TEXT); CREATE TABLE Nurses (ID INTEGER PRIMARY KEY, Name TEXT, Department TEXT);","This query combines the names of all doctors and nurses into a single list, including duplicate names if a person appears in both tables or multiple times within one table."
"List the titles of books that are categorized as 'Fiction' and also have 'Mystery' in their title, excluding 'Mystery' as a genre.",SELECT Title FROM Books WHERE Genre = 'Fiction' AND Title LIKE '%Mystery%' EXCEPT SELECT Title FROM Books WHERE Genre = 'Mystery';,"CREATE TABLE Books (ID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, Genre TEXT, PublicationYear INTEGER);","This query finds books whose genre is 'Fiction' and title contains 'Mystery', then excludes any of those books whose genre is specifically 'Mystery'."
Find distinct cities where either a customer or a supplier is located.,SELECT City FROM Customers UNION SELECT City FROM Suppliers;,"CREATE TABLE Customers (ID INTEGER PRIMARY KEY, Name TEXT, City TEXT); CREATE TABLE Suppliers (ID INTEGER PRIMARY KEY, Name TEXT, City TEXT, ProductType TEXT);",This query combines all unique cities from the Customers table with all unique cities from the Suppliers table into a single list of distinct cities.
Identify employees who have a salary greater than 70000 and also work in a department located in 'New York'.,SELECT E.Name FROM Employees E WHERE E.Salary > 70000 INTERSECT SELECT E.Name FROM Employees E JOIN Departments D ON E.DepartmentID = D.ID WHERE D.Location = 'New York';,"CREATE TABLE Employees (ID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL); CREATE TABLE Departments (ID INTEGER PRIMARY KEY, Name TEXT, Location TEXT);","This query returns the names of employees who satisfy two conditions simultaneously: their salary is over 70,000 AND their department is located in 'New York'."
Show products that have a stock quantity less than 50 but have not been sold in the last 30 days.,"SELECT P.ProductName FROM Products P WHERE P.StockQuantity < 50 EXCEPT SELECT P.ProductName FROM Products P JOIN Sales S ON P.ProductID = S.ProductID WHERE S.SaleDate >= DATE('now', '-30 days');","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, StockQuantity INTEGER, Price REAL); CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT, QuantitySold INTEGER);",This query lists the names of products with a low stock quantity (less than 50) that have not had any sales recorded within the last 30 days.
"Get a combined list of employee names and their salaries, along with customer names and a placeholder for salary, ordered by name.","SELECT Name, Salary FROM Employees UNION ALL SELECT Name, NULL AS Salary FROM Customers ORDER BY Name;","CREATE TABLE Employees (ID INTEGER PRIMARY KEY, Name TEXT, Salary REAL); CREATE TABLE Customers (ID INTEGER PRIMARY KEY, Name TEXT, Email TEXT);","This query combines employee names and their salaries with customer names (and a NULL value for their salary), then orders the entire combined list by name. UNION ALL is used to include potential duplicate names."
Find authors who have written books in both 'Fantasy' and 'Sci-Fi' genres.,SELECT A.AuthorName FROM Authors A JOIN Books B ON A.AuthorID = B.AuthorID WHERE B.Genre = 'Fantasy' INTERSECT SELECT A.AuthorName FROM Authors A JOIN Books B ON A.AuthorID = B.AuthorID WHERE B.Genre = 'Sci-Fi';,"CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT); CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, Genre TEXT);",This query identifies authors who have written at least one book categorized as 'Fantasy' and at least one book categorized as 'Sci-Fi'.
List all department names except those that have more than 5 employees.,SELECT Name FROM Departments EXCEPT SELECT D.Name FROM Departments D JOIN Employees E ON D.ID = E.DepartmentID GROUP BY D.ID HAVING COUNT(E.ID) > 5;,"CREATE TABLE Departments (ID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Employees (ID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER);","This query returns the names of departments that do not have more than 5 employees. It first lists all department names, then removes those names that correspond to departments with an employee count greater than 5."
"Combine the names of students enrolled after 2022 with the names of students whose major is 'Computer Science', sorted alphabetically.",SELECT Name FROM Students WHERE EnrollmentDate > '2022-12-31' UNION SELECT Name FROM Students WHERE Major = 'Computer Science' ORDER BY Name;,"CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, Name TEXT, Major TEXT, EnrollmentDate TEXT);","This query combines the names of students enrolled after 2022 with those majoring in 'Computer Science', and then sorts the resulting distinct list of names alphabetically."
Find the IDs of courses that have enrollments from students in 'History' major and also 'Literature' major.,SELECT E.CourseID FROM Enrollments E JOIN Students S ON E.StudentID = S.StudentID WHERE S.Major = 'History' INTERSECT SELECT E.CourseID FROM Enrollments E JOIN Students S ON E.StudentID = S.StudentID WHERE S.Major = 'Literature';,"CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, Name TEXT, Major TEXT); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Grade TEXT);",This query identifies course IDs for courses that have at least one student from the 'History' major enrolled and also at least one student from the 'Literature' major enrolled.
List product categories that have sales recorded but no products currently in stock in that category.,SELECT DISTINCT Category FROM SalesRecords EXCEPT SELECT Category FROM ProductsInStock;,"CREATE TABLE SalesRecords (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, Category TEXT, SaleDate TEXT); CREATE TABLE ProductsInStock (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Quantity INTEGER);",This query returns product categories for which there are sales records but no corresponding products currently marked as in stock.
Show all distinct cities of departments or project locations.,SELECT Location FROM Departments UNION SELECT ProjectLocation FROM Projects;,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, ProjectLocation TEXT);",This query combines all unique department locations and unique project locations into a single list of distinct cities.
Retrieve employees who were hired in 2020 and also have a salary greater than the average salary of their department.,"SELECT E.Name FROM Employees E WHERE strftime('%Y', E.HireDate) = '2020' INTERSECT SELECT E.Name FROM Employees E JOIN (SELECT DepartmentID, AVG(Salary) AS AvgDeptSalary FROM Employees GROUP BY DepartmentID) AS DeptAvg ON E.DepartmentID = DeptAvg.DepartmentID WHERE E.Salary > DeptAvg.AvgDeptSalary;","CREATE TABLE Employees (ID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);",This query finds employees hired in 2020 who also earn more than the average salary of their respective departments.
List all product names that have been sold but are not currently available (stock quantity is 0 or NULL).,SELECT DISTINCT P.ProductName FROM Products P JOIN OrderItems OI ON P.ProductID = OI.ProductID EXCEPT SELECT ProductName FROM Products WHERE StockQuantity > 0;,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, StockQuantity INTEGER); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, ProductID INTEGER, Quantity INTEGER);","This query identifies products that have appeared in any order item (meaning they were sold) but currently have a stock quantity of 0 or are not listed as having stock (null or <=0), effectively showing sold-out items that were once sold."
Get the names of all patients who have appointments scheduled in the future OR whose last name starts with 'Smith'.,SELECT P.Name FROM Patients P JOIN Appointments A ON P.PatientID = A.PatientID WHERE A.AppointmentDate > DATE('now') UNION SELECT Name FROM Patients WHERE Name LIKE '% Smith%';,"CREATE TABLE Patients (PatientID INTEGER PRIMARY KEY, Name TEXT, DateOfBirth TEXT); CREATE TABLE Appointments (AppointmentID INTEGER PRIMARY KEY, PatientID INTEGER, DoctorID INTEGER, AppointmentDate TEXT);","This query combines patients with future appointments and patients whose name contains ' Smith' (assuming this denotes last name starting with Smith), returning a distinct list of names."
Find doctors who have performed procedures of both 'Surgery' and 'Diagnosis' types.,SELECT D.DoctorName FROM Doctors D JOIN Procedures P ON D.DoctorID = P.DoctorID WHERE P.ProcedureType = 'Surgery' INTERSECT SELECT D.DoctorName FROM Doctors D JOIN Procedures P ON D.DoctorID = P.DoctorID WHERE P.ProcedureType = 'Diagnosis';,"CREATE TABLE Doctors (DoctorID INTEGER PRIMARY KEY, DoctorName TEXT); CREATE TABLE Procedures (ProcedureID INTEGER PRIMARY KEY, DoctorID INTEGER, ProcedureType TEXT, ProcedureDate TEXT);",This query identifies doctors who have recorded at least one 'Surgery' procedure and at least one 'Diagnosis' procedure.
List products whose price is above 100 but are not in the 'Electronics' category.,SELECT ProductName FROM Products WHERE Price > 100 EXCEPT SELECT ProductName FROM Products WHERE Category = 'Electronics';,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, Category TEXT);","This query returns the names of products that cost more than 100, excluding any products that belong to the 'Electronics' category."
Retrieve the names of employees or contractors who are active.,SELECT Name FROM Employees WHERE Status = 'Active' UNION SELECT Name FROM Contractors WHERE ContractStatus = 'Active';,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Status TEXT); CREATE TABLE Contractors (ContractorID INTEGER PRIMARY KEY, Name TEXT, ContractStatus TEXT);",This query combines the names of active employees and active contractors into a single distinct list.
Find customers who have placed orders with a total amount greater than 500 and also have placed orders with a total amount less than 100.,SELECT CustomerID FROM Orders WHERE TotalAmount > 500 INTERSECT SELECT CustomerID FROM Orders WHERE TotalAmount < 100;,"CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL, OrderDate TEXT);",This query identifies customer IDs for customers who have placed at least one order exceeding 500 in total amount AND at least one order less than 100 in total amount.
List items that are in 'InventoryA' but not in 'InventoryB'.,SELECT ItemName FROM InventoryA EXCEPT SELECT ItemName FROM InventoryB;,"CREATE TABLE InventoryA (ItemID INTEGER PRIMARY KEY, ItemName TEXT, Quantity INTEGER); CREATE TABLE InventoryB (ItemID INTEGER PRIMARY KEY, ItemName TEXT, Quantity INTEGER);",This query returns the names of items that are present in InventoryA but are not found in InventoryB.
"Get a list of all names of employees and managers, including duplicates.",SELECT Name FROM Employees UNION ALL SELECT Name FROM Managers;,"CREATE TABLE Employees (ID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER); CREATE TABLE Managers (ID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER);","This query combines the names of all employees and managers into a single list, including duplicate names if a person is both an employee and a manager, or if names are repeated within either table."
Find projects that started in 2023 and also have a budget exceeding 100000.,"SELECT ProjectName FROM Projects WHERE strftime('%Y', StartDate) = '2023' INTERSECT SELECT ProjectName FROM Projects WHERE Budget > 100000;","CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, StartDate TEXT, Budget REAL);","This query identifies projects that meet two criteria: they started in the year 2023 AND their budget is greater than 100,000."
List all active user IDs who have not logged in within the last 90 days.,"SELECT UserID FROM Users WHERE Status = 'Active' EXCEPT SELECT UserID FROM UserLogins WHERE LoginDate >= DATE('now', '-90 days');","CREATE TABLE Users (UserID INTEGER PRIMARY KEY, UserName TEXT, Status TEXT); CREATE TABLE UserLogins (LoginID INTEGER PRIMARY KEY, UserID INTEGER, LoginDate TEXT);",This query returns the IDs of users who are currently marked as 'Active' but have no recorded logins in the last 90 days.
"Combine the names and emails of customers and vendors, ordering by name.","SELECT Name, Email FROM Customers UNION SELECT Name, Email FROM Vendors ORDER BY Name;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT); CREATE TABLE Vendors (VendorID INTEGER PRIMARY KEY, Name TEXT, Email TEXT);","This query creates a single list of distinct names and emails by combining entries from the Customers and Vendors tables, then sorts the combined list by name."
Identify products that are available in 'Warehouse A' and also in 'Warehouse B'.,SELECT ProductName FROM WarehouseAStock INTERSECT SELECT ProductName FROM WarehouseBStock;,"CREATE TABLE WarehouseAStock (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Quantity INTEGER); CREATE TABLE WarehouseBStock (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Quantity INTEGER);",This query returns the names of products that are listed as being in stock in both 'Warehouse A' and 'Warehouse B'.
"List employees who work in 'IT' or 'HR' department and earn more than 50000, excluding those hired before 2020.","SELECT Name FROM Employees WHERE Department IN ('IT', 'HR') AND Salary > 50000 EXCEPT SELECT Name FROM Employees WHERE HireDate < '2020-01-01';","CREATE TABLE Employees (ID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary REAL, HireDate TEXT);","This query first selects employees who are in 'IT' or 'HR' and earn over 50000, then removes any of those employees who were hired before January 1, 2020."
Show distinct countries where either authors or publishers are located.,SELECT Country FROM Authors UNION SELECT Country FROM Publishers;,"CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT, Country TEXT); CREATE TABLE Publishers (PublisherID INTEGER PRIMARY KEY, PublisherName TEXT, Country TEXT);",This query combines all unique countries from the Authors table with all unique countries from the Publishers table into a single list of distinct countries.
Find tasks that are assigned to 'John Doe' and also have a 'High' priority.,SELECT TaskName FROM Tasks WHERE AssignedTo = 'John Doe' INTERSECT SELECT TaskName FROM Tasks WHERE Priority = 'High';,"CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, TaskName TEXT, AssignedTo TEXT, Priority TEXT, Status TEXT);",This query identifies tasks that are simultaneously assigned to 'John Doe' and have a 'High' priority.
Get the current date.,SELECT DATE('now');,N/A,Returns the current date in 'YYYY-MM-DD' format.
Show the current full timestamp.,SELECT DATETIME('now');,N/A,Provides the current date and time in 'YYYY-MM-DD HH:MM:SS' format.
Find all orders placed today.,"SELECT order_id, customer_id, total_amount FROM Orders WHERE DATE(order_date) = DATE('now');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT, total_amount REAL);","Retrieves order details for orders placed on the current date, ignoring time components."
List orders placed in the last 7 days.,"SELECT order_id, order_date, total_amount FROM Orders WHERE order_date >= DATE('now', '-7 days');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT, total_amount REAL);",Selects orders with an order_date greater than or equal to 7 days ago from the current date.
Get all orders placed in the current month.,"SELECT order_id, order_date, customer_id FROM Orders WHERE STRFTIME('%Y-%m', order_date) = STRFTIME('%Y-%m', 'now');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT, total_amount REAL);",Filters orders to include only those placed within the current year and month.
"For each employee, show their name and current age in years.","SELECT first_name, last_name, CAST(STRFTIME('%Y', 'now') - STRFTIME('%Y', date_of_birth) AS INTEGER) - (CAST(STRFTIME('%m-%d', 'now') < STRFTIME('%m-%d', date_of_birth) AS INTEGER)) AS age FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, date_of_birth TEXT, hire_date TEXT, salary REAL);","Calculates the age of each employee by subtracting their birth year from the current year, adjusting for birthdays later in the current year."
Find all employees hired in the year 2023.,"SELECT employee_id, first_name, hire_date FROM Employees WHERE STRFTIME('%Y', hire_date) = '2023';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, date_of_birth TEXT, hire_date TEXT, salary REAL);",Retrieves employees whose hire_date falls within the year 2023.
Count the number of orders for each day in January 2023.,"SELECT DATE(order_date) AS order_day, COUNT(order_id) AS total_orders FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-01' GROUP BY order_day ORDER BY order_day;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT, total_amount REAL);",Groups orders by their date and counts the total orders for each day in January 2023.
List events scheduled to start next week (Monday to Sunday).,"SELECT event_name, event_start_time FROM Events WHERE event_start_time BETWEEN DATE('now', 'weekday 1', '+7 days') AND DATE('now', 'weekday 0', '+7 days', '+6 days');","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_start_time TEXT, event_end_time TEXT, location TEXT);","Selects events that start between the upcoming Monday and the subsequent Sunday. 'weekday 1' is Monday, 'weekday 0' is Sunday."
"For each appointment, calculate its duration in minutes.","SELECT appointment_id, patient_id, (julianday(appointment_end_time) - julianday(appointment_start_time)) * 1440 AS duration_minutes FROM Appointments;","CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, appointment_start_time TEXT, appointment_end_time TEXT, status TEXT);",Calculates the duration of each appointment in minutes by finding the difference in Julian days and converting to minutes (1 day = 1440 minutes).
Find all appointments scheduled for today after 3 PM.,"SELECT appointment_id, patient_id, appointment_start_time FROM Appointments WHERE DATE(appointment_start_time) = DATE('now') AND TIME(appointment_start_time) >= '15:00:00';","CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, appointment_start_time TEXT, appointment_end_time TEXT, status TEXT);",Retrieves appointments that are scheduled for the current date and start at or after 3 PM.
Calculate the average number of orders per day for the previous month.,"SELECT AVG(daily_orders) FROM (SELECT DATE(order_date) AS order_day, COUNT(order_id) AS daily_orders FROM Orders WHERE STRFTIME('%Y-%m', order_date) = STRFTIME('%Y-%m', 'now', '-1 month') GROUP BY order_day);","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT, total_amount REAL);","First, counts daily orders for the previous month, then calculates the average of these daily counts."
List unique user IDs who have logged in during the last hour.,"SELECT DISTINCT user_id FROM Logins WHERE login_timestamp >= DATETIME('now', '-1 hour');","CREATE TABLE Logins (login_id INTEGER PRIMARY KEY, user_id INTEGER, login_timestamp TEXT, ip_address TEXT);",Selects distinct user IDs whose login_timestamp is within the last 60 minutes from the current time.
Find all employees who have a birthday in the current month.,"SELECT employee_id, first_name, last_name, date_of_birth FROM Employees WHERE STRFTIME('%m', date_of_birth) = STRFTIME('%m', 'now');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, date_of_birth TEXT, hire_date TEXT, salary REAL);",Retrieves employees whose birth month matches the current month.
Get all articles published on a Sunday.,"SELECT article_id, title, publish_date FROM Articles WHERE STRFTIME('%w', publish_date) = '0';","CREATE TABLE Articles (article_id INTEGER PRIMARY KEY, title TEXT, publish_date TEXT, last_modified_date TEXT);",Filters articles to show only those published on a Sunday (where '%w' returns '0' for Sunday).
"Show tasks that are due in the next three days, including today, and are not yet completed.","SELECT task_id, task_name, due_date FROM Tasks WHERE due_date BETWEEN DATE('now') AND DATE('now', '+3 days') AND completed_date IS NULL;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, created_date TEXT, due_date TEXT, completed_date TEXT, status TEXT);","Lists incomplete tasks whose due date falls within the next three days, starting from today."
Calculate the total sales for each quarter of 2023.,"SELECT CASE STRFTIME('%m', order_date) WHEN '01' THEN 'Q1' WHEN '02' THEN 'Q1' WHEN '03' THEN 'Q1' WHEN '04' THEN 'Q2' WHEN '05' THEN 'Q2' WHEN '06' THEN 'Q2' WHEN '07' THEN 'Q3' WHEN '08' THEN 'Q3' WHEN '09' THEN 'Q3' WHEN '10' THEN 'Q4' WHEN '11' THEN 'Q4' WHEN '12' THEN 'Q4' END AS quarter, SUM(total_amount) AS quarterly_sales FROM Orders WHERE STRFTIME('%Y', order_date) = '2023' GROUP BY quarter ORDER BY quarter;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT, total_amount REAL);",Groups orders from 2023 into quarters based on their month and sums the total_amount for each quarter.
"For each user, find their earliest and latest login times.","SELECT user_id, MIN(login_timestamp) AS first_login, MAX(login_timestamp) AS last_login FROM Logins GROUP BY user_id;","CREATE TABLE Logins (login_id INTEGER PRIMARY KEY, user_id INTEGER, login_timestamp TEXT, ip_address TEXT);","For every unique user, retrieves the minimum (earliest) and maximum (latest) login timestamps."
Identify customer IDs who have not placed any orders in the last six months.,"SELECT customer_id FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Orders WHERE order_date >= DATE('now', '-6 months')) ORDER BY customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT, total_amount REAL);",Selects customer IDs from the Customers table that do not have any associated orders placed within the last six months.
List events that have a duration longer than 3 hours.,"SELECT event_name, event_start_time, event_end_time FROM Events WHERE (julianday(event_end_time) - julianday(event_start_time)) * 24 > 3;","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_start_time TEXT, event_end_time TEXT, location TEXT);","Retrieves events where the difference between their start and end times, converted to hours, is greater than 3."
Find employees whose 90-day probation period will end next month.,"SELECT employee_id, first_name, hire_date FROM Employees WHERE STRFTIME('%Y-%m', DATE(hire_date, '+90 days')) = STRFTIME('%Y-%m', 'now', '+1 month');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, date_of_birth TEXT, hire_date TEXT, salary REAL);",Identifies employees whose hiring date plus 90 days falls into the next calendar month.
Provide a count of completed tasks for each year.,"SELECT STRFTIME('%Y', completed_date) AS completion_year, COUNT(task_id) AS tasks_completed FROM Tasks WHERE completed_date IS NOT NULL GROUP BY completion_year ORDER BY completion_year;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, created_date TEXT, due_date TEXT, completed_date TEXT, status TEXT);",Groups completed tasks by the year of their completion and counts the number of tasks completed in each year.
Calculate the average number of days between an order being placed and shipped.,SELECT AVG(julianday(ship_date) - julianday(order_date)) AS avg_shipping_days FROM Orders WHERE ship_date IS NOT NULL;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT, total_amount REAL);",Computes the average difference in days between the order_date and ship_date for all orders that have been shipped.
List all orders that were placed on the last day of any month.,"SELECT order_id, order_date FROM Orders WHERE DATE(order_date) = DATE(order_date, 'start of month', '+1 month', '-1 day');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT, total_amount REAL);",Selects orders where the order_date is equal to the last day of its respective month.
Create a list of all dates in January 2024.,"WITH RECURSIVE Dates(date_value) AS (SELECT '2024-01-01' UNION ALL SELECT DATE(date_value, '+1 day') FROM Dates WHERE DATE(date_value, '+1 day') <= '2024-01-31') SELECT date_value FROM Dates;",N/A,Generates a series of dates starting from '2024-01-01' and incrementing by one day until '2024-01-31' is reached.
"Find events that are active between 10 AM and 2 PM on a specific date (e.g., '2024-07-15').",SELECT event_name FROM Events WHERE DATE(event_start_time) = '2024-07-15' AND (TIME(event_start_time) < '14:00:00' AND TIME(event_end_time) > '10:00:00');,"CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_start_time TEXT, event_end_time TEXT, location TEXT);",Identifies events on '2024-07-15' that have any temporal overlap with the time window between 10 AM and 2 PM.
List articles that were last updated in the last 7 days.,"SELECT article_id, title, last_modified_date FROM Articles WHERE last_modified_date >= DATETIME('now', '-7 days');","CREATE TABLE Articles (article_id INTEGER PRIMARY KEY, title TEXT, publish_date TEXT, last_modified_date TEXT);",Retrieves articles whose last_modified_date is within the last seven days from the current date and time.
"For each month, count how many new employees were hired.","SELECT STRFTIME('%Y-%m', hire_date) AS hire_month, COUNT(employee_id) AS new_hires FROM Employees GROUP BY hire_month ORDER BY hire_month;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, date_of_birth TEXT, hire_date TEXT, salary REAL);",Groups employees by their hiring month (year-month) and counts the number of employees hired in each respective month.
Identify users who logged in at least once in each of the last three consecutive months (including current partial month).,"SELECT DISTINCT user_id FROM Logins WHERE STRFTIME('%Y-%m', login_timestamp) IN (STRFTIME('%Y-%m', 'now'), STRFTIME('%Y-%m', 'now', '-1 month'), STRFTIME('%Y-%m', 'now', '-2 months')) GROUP BY user_id HAVING COUNT(DISTINCT STRFTIME('%Y-%m', login_timestamp)) = 3;","CREATE TABLE Logins (login_id INTEGER PRIMARY KEY, user_id INTEGER, login_timestamp TEXT, ip_address TEXT);","Filters for logins in the last three months, then groups by user and checks if each user has distinct logins in all three of those months."
Show products that have an expiration date within the next 90 days.,"SELECT product_name, expiration_date FROM Products WHERE expiration_date BETWEEN DATE('now') AND DATE('now', '+90 days');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, expiration_date TEXT, price REAL);",Retrieves products whose expiration_date falls between the current date and 90 days from now.
List all products ordered by their price from lowest to highest.,"SELECT product_id, name, price FROM Products ORDER BY price ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, price REAL, stock_quantity INTEGER, category TEXT);","Retrieves the product ID, name, and price for all products, sorted in ascending order by their price."
"Show the names of all employees, with the highest salaries first.","SELECT name, salary FROM Employees ORDER BY salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER);","Selects the name and salary of all employees, ordered by salary in descending order."
"Retrieve all movies, first ordered by release year from oldest to newest, and then by IMDb rating from highest to lowest for movies released in the same year.","SELECT title, release_year, imdb_rating FROM Movies ORDER BY release_year ASC, imdb_rating DESC;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, release_year INTEGER, genre TEXT, imdb_rating REAL);","Fetches the title, release year, and IMDb rating for all movies, sorting primarily by release year ascending and secondarily by IMDb rating descending."
Get the 5 cheapest products.,"SELECT name, price FROM Products ORDER BY price ASC LIMIT 5;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, price REAL, stock_quantity INTEGER, category TEXT);",Returns the names and prices of the five products with the lowest prices.
"Show the next 10 customers after the first 20, ordered by their registration date.","SELECT customer_id, first_name, last_name FROM Customers ORDER BY registration_date ASC LIMIT 10 OFFSET 20;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","Selects the customer ID, first name, and last name for 10 customers, skipping the first 20 results, and ordering by registration date ascending. This is for pagination."
Find the 3 newest employees in the 'Engineering' department.,"SELECT E.name, E.hire_date FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.name = 'Engineering' ORDER BY E.hire_date DESC LIMIT 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, name TEXT, location TEXT);",Retrieves the name and hire date of the three most recently hired employees who work in the 'Engineering' department.
"List all employees showing their annual salary increase by 5%, ordered by this new projected salary from highest to lowest.","SELECT name, salary * 1.05 AS projected_salary FROM Employees ORDER BY projected_salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER);","Selects employee names and a calculated projected salary (current salary plus 5%), then orders the results by this projected salary in descending order."
"Get all customer emails, putting those without an email at the end, then sort by first name.","SELECT first_name, last_name, email FROM Customers ORDER BY email IS NULL ASC, first_name ASC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","Retrieves first name, last name, and email for all customers. Customers with a NULL email will appear last, and then the results are sorted by first name in ascending order."
"List the top 3 product categories by their average price, from highest to lowest.","SELECT category, AVG(price) AS average_price FROM Products GROUP BY category ORDER BY average_price DESC LIMIT 3;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, price REAL, stock_quantity INTEGER, category TEXT);","Calculates the average price for each product category, then lists the top 3 categories based on their average price in descending order."
"Return no products, but show the product name and price columns.","SELECT name, price FROM Products LIMIT 0;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, price REAL, stock_quantity INTEGER, category TEXT);",Returns an empty result set with the columns 'name' and 'price' from the Products table.
Select 5 random movies.,SELECT title FROM Movies ORDER BY RANDOM() LIMIT 5;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, release_year INTEGER, genre TEXT, imdb_rating REAL);",Retrieves the titles of 5 movies selected randomly from the table.
Show the 10 oldest orders.,"SELECT order_id, order_date, total_amount FROM Orders ORDER BY order_date ASC LIMIT 10;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Fetches the order ID, date, and total amount for the 10 orders with the earliest order dates."
List the 5 most recent orders placed by customer with ID 101.,"SELECT order_id, order_date, total_amount FROM Orders WHERE customer_id = 101 ORDER BY order_date DESC LIMIT 5;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Selects the 5 most recent orders for customer ID 101, showing their ID, date, and total amount."
"Get the 3rd page of employees (10 per page) from the 'Sales' department, sorted by their name alphabetically.","SELECT E.employee_id, E.name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.name = 'Sales' ORDER BY E.name ASC LIMIT 10 OFFSET 20;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, name TEXT, location TEXT);","Retrieves the employee ID and name for 10 employees from the 'Sales' department, skipping the first 20 results, and ordering them alphabetically by name."
"List all product names, ordered by the length of their name from shortest to longest.",SELECT name FROM Products ORDER BY LENGTH(name) ASC;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, price REAL, stock_quantity INTEGER, category TEXT);",Selects all product names and sorts them in ascending order based on the number of characters in their name.
Find the student with the highest GPA in each major.,"SELECT student_id, name, major, gpa FROM (SELECT student_id, name, major, gpa, ROW_NUMBER() OVER(PARTITION BY major ORDER BY gpa DESC) as rn FROM Students) WHERE rn = 1;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, name TEXT, age INTEGER, major TEXT, gpa REAL);","Uses a common table expression (CTE) to assign a rank to students within each major based on their GPA, then selects only the student with rank 1 (highest GPA) for each major."
Show the 7 products with the lowest stock quantity.,"SELECT name, stock_quantity FROM Products ORDER BY stock_quantity ASC LIMIT 7;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, price REAL, stock_quantity INTEGER, category TEXT);",Retrieves the name and stock quantity of the seven products that have the fewest items in stock.
"List all employees along with their department name, ordered alphabetically by department name, then by employee name.","SELECT E.name, D.name AS department_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id ORDER BY D.name ASC, E.name ASC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, name TEXT, location TEXT);","Selects employee names and their corresponding department names, sorting results first by department name alphabetically, then by employee name alphabetically."
"List the top 5 customers who have placed the most orders, showing their ID and the count of their orders.","SELECT C.customer_id, C.first_name, COUNT(O.order_id) AS order_count FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.first_name ORDER BY order_count DESC LIMIT 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Counts the number of orders for each customer, then lists the top 5 customers who have placed the most orders, along with their order count."
Find the oldest customer who has placed at least one order.,"SELECT C.first_name, C.last_name, C.registration_date FROM Customers C WHERE C.customer_id IN (SELECT DISTINCT customer_id FROM Orders) ORDER BY C.registration_date ASC LIMIT 1;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","First identifies customers who have placed orders, then from that filtered list, selects the oldest customer based on their registration date."
Show all products except the first 10 when ordered by price ascending.,"SELECT name, price FROM Products ORDER BY price ASC OFFSET 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, price REAL, stock_quantity INTEGER, category TEXT);","Retrieves all product names and prices, sorted by price ascending, but skips the first 10 products."
"List movies by their IMDb rating, but handle cases where the rating might be stored as text and needs to be treated numerically.","SELECT title, imdb_rating FROM Movies ORDER BY CAST(imdb_rating AS REAL) DESC;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, release_year INTEGER, genre TEXT, imdb_rating TEXT);","Selects movie titles and their IMDb ratings, sorting them in descending order by casting the IMDb rating to a real number to ensure correct numerical sorting."
Find the employee with the second highest salary.,"SELECT name, salary FROM Employees ORDER BY salary DESC LIMIT 1 OFFSET 1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER);","Retrieves the name and salary of the employee who has the second highest salary by sorting salaries in descending order, skipping the first (highest) one, and taking the next one."
What is the 5th lowest price among all products?,SELECT price FROM Products ORDER BY price ASC LIMIT 1 OFFSET 4;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, price REAL, stock_quantity INTEGER, category TEXT);","Finds the 5th lowest price from the Products table by ordering prices ascending, skipping the first 4, and taking the next price."
"List employees who were hired within the last year, ordered by how recently they were hired (most recent first).","SELECT name, hire_date FROM Employees WHERE julianday('now') - julianday(hire_date) <= 365 ORDER BY hire_date DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER);","Selects employees whose hire date is within the last 365 days from today and orders them by their hire date, with the most recently hired appearing first."
"List products, prioritizing those in stock (quantity > 0) first, then by name alphabetically.","SELECT name, stock_quantity FROM Products ORDER BY (stock_quantity > 0) DESC, name ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, price REAL, stock_quantity INTEGER, category TEXT);","Retrieves product names and stock quantities, sorting first by whether the stock quantity is greater than 0 (true values come before false values in descending order), and then alphabetically by name."
"Show the top 2 departments by total employee salary, but only for departments with more than 5 employees.","SELECT D.name AS department_name, SUM(E.salary) AS total_salary FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.name HAVING COUNT(E.employee_id) > 5 ORDER BY total_salary DESC LIMIT 2;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, name TEXT, location TEXT);","Calculates the total salary for each department, filters out departments with 5 or fewer employees, then returns the top 2 departments with the highest total salary."
"List all students, ordered by their major alphabetically, then by their GPA from highest to lowest, and finally by age from youngest to oldest.","SELECT name, major, gpa, age FROM Students ORDER BY major ASC, gpa DESC, age ASC;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, name TEXT, age INTEGER, major TEXT, gpa REAL);","Retrieves student names, majors, GPAs, and ages, sorting results first by major ascending, then by GPA descending, and finally by age ascending."
Get the most expensive product and its price.,"SELECT name, price FROM Products ORDER BY price DESC LIMIT 1;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, price REAL, stock_quantity INTEGER, category TEXT);",Finds the product with the highest price and returns its name and price.
Show 5 movies that come after 'Inception' alphabetically by title.,"SELECT title, release_year FROM Movies WHERE title > 'Inception' ORDER BY title ASC LIMIT 5;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, release_year INTEGER, genre TEXT, imdb_rating REAL);","Retrieves the titles and release years of 5 movies that appear alphabetically after 'Inception', ordered alphabetically by title."
Find the names of all products that belong to the 'Electronics' or 'Apparel' categories.,"SELECT product_name FROM Products WHERE category IN ('Electronics', 'Apparel');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects the names of products where their category is either 'Electronics' or 'Apparel' using the IN operator.
List all customers who have placed an order.,SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query retrieves the names of customers whose IDs exist in the Orders table, indicating they have placed at least one order. It uses IN with a subquery."
"Show products that are not in the 'Books', 'Movies', or 'Music' categories.","SELECT product_name, category FROM Products WHERE category NOT IN ('Books', 'Movies', 'Music');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects products whose category is not 'Books', 'Movies', or 'Music' using the NOT IN operator."
Find employees who are not assigned to any existing department.,"SELECT first_name, last_name FROM Employees WHERE department_id NOT IN (SELECT department_id FROM Departments);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query lists employees whose department_id does not correspond to any department_id present in the Departments table, using NOT IN with a subquery."
"Retrieve orders placed between January 1, 2023, and March 31, 2023.","SELECT order_id, customer_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-03-31';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query fetches orders with an order_date falling within the specified date range, inclusive of the start and end dates, using the BETWEEN operator."
"List books published between the years 2000 and 2010, inclusive.","SELECT title, author, publication_year FROM Books WHERE publication_year BETWEEN 2000 AND 2010;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL);","This query selects books published within the year range 2000 to 2010, using the BETWEEN operator on an integer column."
Show products with prices not between $10 and $50.,"SELECT product_name, price FROM Products WHERE price NOT BETWEEN 10.00 AND 50.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects products whose price is outside the range of $10.00 to $50.00, using the NOT BETWEEN operator."
Find employees whose hire date is not between '2020-01-01' and '2022-12-31'.,"SELECT first_name, last_name, hire_date FROM Employees WHERE hire_date NOT BETWEEN '2020-01-01' AND '2022-12-31';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL);","This query lists employees whose hire_date falls outside the specified date range, using the NOT BETWEEN operator."
Get customers whose email addresses contain 'example.com'.,"SELECT customer_name, email FROM Customers WHERE email LIKE '%example.com%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT, city TEXT);",This query finds customers whose email contains the substring 'example.com' using the LIKE operator with percentage wildcards.
Find products whose names start with 'Smart'.,SELECT product_name FROM Products WHERE product_name LIKE 'Smart%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects products whose names begin with 'Smart' using the LIKE operator and a trailing percentage wildcard.
List employees whose last names end with 'son'.,"SELECT first_name, last_name FROM Employees WHERE last_name LIKE '%son';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL);",This query retrieves employees whose last names end with 'son' using the LIKE operator and a leading percentage wildcard.
"Show products whose names have 'Phone' as the second word, assuming words are space-separated.",SELECT product_name FROM Products WHERE product_name LIKE '_% Phone%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query finds products where 'Phone' appears as the second word in their name. `_` matches a single character, `%` matches zero or more characters."
Get departments whose names do not contain the word 'Sales'.,SELECT department_name FROM Departments WHERE department_name NOT LIKE '%Sales%';,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query selects department names that do not contain the substring 'Sales' anywhere within them, using the NOT LIKE operator."
"Find customers who registered in the year 2023, regardless of month or day.","SELECT customer_name, registration_date FROM Customers WHERE registration_date LIKE '2023-%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT, city TEXT);","This query identifies customers whose registration_date starts with '2023-', effectively filtering for registrations in the year 2023."
List all products that have an order placed against them.,SELECT product_name FROM Products WHERE EXISTS (SELECT 1 FROM OrderItems WHERE OrderItems.product_id = Products.product_id);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","This query selects product names for which there is at least one corresponding entry in the OrderItems table, indicating they have been ordered. It uses a correlated subquery with EXISTS."
Find customers who have placed an order with a total amount greater than $100.,SELECT customer_name FROM Customers WHERE EXISTS (SELECT 1 FROM Orders WHERE Orders.customer_id = Customers.customer_id AND Orders.total_amount > 100);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query finds customers who have at least one order with a total amount exceeding $100, using EXISTS with a correlated subquery and an additional condition."
List departments that have no employees.,SELECT department_name FROM Departments WHERE NOT EXISTS (SELECT 1 FROM Employees WHERE Employees.department_id = Departments.department_id);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL);","This query selects department names for which there are no associated employees in the Employees table, using NOT EXISTS with a correlated subquery."
Find employees who have never been assigned to any department (department_id is NULL or not in Departments table).,"SELECT first_name, last_name FROM Employees WHERE Employees.department_id IS NULL OR NOT EXISTS (SELECT 1 FROM Departments WHERE Departments.department_id = Employees.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query identifies employees who either have a NULL department_id or whose department_id does not exist in the Departments table, combining IS NULL with NOT EXISTS."
Get the names of courses that have at least one student enrolled.,SELECT course_name FROM Courses WHERE EXISTS (SELECT 1 FROM Enrollments WHERE Enrollments.course_id = Courses.course_id);,"CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT);","This query returns course names for which there is at least one record in the Enrollments table, indicating student enrollment, using EXISTS."
"Find products with stock quantity between 50 and 100, inclusive.","SELECT product_name, stock_quantity FROM Products WHERE stock_quantity BETWEEN 50 AND 100;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects products where the stock quantity is within the range of 50 to 100, using the BETWEEN operator."
List all customers whose names start with 'A' or 'J'.,SELECT customer_name FROM Customers WHERE customer_name LIKE 'A%' OR customer_name LIKE 'J%';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT, city TEXT);","This query retrieves customer names that begin with either 'A' or 'J', combining the LIKE operator with an OR condition."
"Find orders placed on a specific list of dates: '2023-01-15', '2023-02-20', '2023-03-10'.","SELECT order_id, customer_id, order_date FROM Orders WHERE order_date IN ('2023-01-15', '2023-02-20', '2023-03-10');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects orders that were placed on any of the specific dates provided in the list using the IN operator.
Get employees whose job title contains 'Manager' but does not start with 'Senior'.,"SELECT first_name, last_name, job_title FROM Employees WHERE job_title LIKE '%Manager%' AND job_title NOT LIKE 'Senior%';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, job_title TEXT);","This query selects employees whose job title includes 'Manager' but does not begin with 'Senior', combining LIKE and NOT LIKE operators with an AND condition."
Find all products that have been ordered by customers from 'New York'.,SELECT DISTINCT P.product_name FROM Products P JOIN OrderItems OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.city = 'New York';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT, city TEXT);","This query selects the names of products that have been ordered by customers residing in 'New York'. Although not directly using IN/EXISTS/BETWEEN/LIKE for the main filter, it sets up a scenario where these operators could be used for further filtering. (The prompt explicitly asked for using these operators, this query demonstrates a join approach but also could be rephrased with IN or EXISTS if I wanted to force it)."
Find all products that have been ordered by customers from 'New York' using IN.,SELECT product_name FROM Products WHERE product_id IN (SELECT product_id FROM OrderItems WHERE order_id IN (SELECT order_id FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE city = 'New York')));,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT, city TEXT);","This query finds products that have been ordered by customers from 'New York' by nesting IN subqueries to filter down from city to customer, order, order item, and finally product."
List students who have enrolled in courses with more than 3 credits.,SELECT S.student_name FROM Students S WHERE EXISTS (SELECT 1 FROM Enrollments E JOIN Courses C ON E.course_id = C.course_id WHERE E.student_id = S.student_id AND C.credits > 3);,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT, enroll_date TEXT, gpa REAL); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, credits INTEGER);","This query selects student names if there exists an enrollment for them in a course that has more than 3 credits, using EXISTS with a join inside the subquery."
Find books with titles that contain a number.,"SELECT title, author FROM Books WHERE title LIKE '%0%' OR title LIKE '%1%' OR title LIKE '%2%' OR title LIKE '%3%' OR title LIKE '%4%' OR title LIKE '%5%' OR title LIKE '%6%' OR title LIKE '%7%' OR title LIKE '%8%' OR title LIKE '%9%';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL);","This query finds books whose titles contain any digit from 0 to 9, using multiple LIKE conditions combined with OR."
Retrieve employees whose salary is between 50000 and 75000 and work in departments 'HR' or 'Finance'.,"SELECT E.first_name, E.last_name, E.salary, D.department_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE E.salary BETWEEN 50000 AND 75000 AND D.department_name IN ('HR', 'Finance');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, job_title TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query selects employees whose salary falls within the specified range AND whose department is either 'HR' or 'Finance', combining BETWEEN and IN with a JOIN."
List products whose names are exactly 5 characters long.,SELECT product_name FROM Products WHERE product_name LIKE '_____';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects products where the product name consists of exactly 5 characters, using five underscore wildcards with LIKE."
Get customers who have not placed any orders since '2023-01-01'.,SELECT customer_name FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Orders WHERE Orders.customer_id = Customers.customer_id AND Orders.order_date >= '2023-01-01');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query finds customers for whom no orders exist that were placed on or after '2023-01-01', using NOT EXISTS with a date comparison."
Find orders with a total amount that falls outside the range of $50 to $200 and are marked as 'Pending'.,"SELECT order_id, total_amount, status FROM Orders WHERE total_amount NOT BETWEEN 50 AND 200 AND status = 'Pending';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects orders where the total amount is outside the $50-$200 range AND the order status is 'Pending', combining NOT BETWEEN with an equality check."
Show all unique product categories that have products costing more than $500.,SELECT DISTINCT category FROM Products WHERE EXISTS (SELECT 1 FROM Products AS P2 WHERE P2.category = Products.category AND P2.price > 500);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query finds unique product categories for which there is at least one product costing more than $500, using EXISTS with a correlated subquery on the same table."
"List each product's name and its price, alongside the average price of all products.","SELECT product_name, price, (SELECT AVG(price) FROM Products) AS overall_average_price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","For each product, this query retrieves its name and price, and also includes a subquery in the SELECT clause to show the average price of all products in the 'Products' table as a constant value for every row."
Find the names of customers who have placed more than 3 orders.,SELECT C.customer_name FROM Customers AS C JOIN (SELECT customer_id FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 3) AS HighVolumeCustomers ON C.customer_id = HighVolumeCustomers.customer_id;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query first creates a derived table 'HighVolumeCustomers' by finding customer IDs who have more than 3 orders. It then joins this derived table with the 'Customers' table to retrieve the names of those customers.
List the names of employees who work in departments located in 'New York'.,SELECT name FROM Employees WHERE department_id IN (SELECT department_id FROM Departments WHERE location = 'New York');,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query selects employee names from the 'Employees' table where their department ID matches any department ID found in the subquery, which lists departments located in 'New York'."
Find the names of departments that have at least one employee.,SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));",This query retrieves the names of departments for which there exists at least one corresponding entry in the 'Employees' table with the same department ID.
Find employees whose salary is greater than the average salary of their respective department.,"SELECT name, salary, department_id FROM Employees E WHERE salary > (SELECT AVG(salary) FROM Employees WHERE department_id = E.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);",This query selects employees whose salary is greater than the average salary calculated specifically for their own department using a correlated subquery.
"For each department, list its name and the number of employees it has.","SELECT D.department_name, (SELECT COUNT(E.employee_id) FROM Employees E WHERE E.department_id = D.department_id) AS number_of_employees FROM Departments D;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query lists each department's name and, for each department, a correlated subquery counts how many employees belong to that specific department."
Get the names of the top 3 customers by their total order amount.,"SELECT C.customer_name, OrdersSummary.total_spent FROM Customers AS C JOIN (SELECT customer_id, SUM(total_amount) AS total_spent FROM Orders GROUP BY customer_id ORDER BY total_spent DESC LIMIT 3) AS OrdersSummary ON C.customer_id = OrdersSummary.customer_id ORDER BY OrdersSummary.total_spent DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query first creates a derived table 'OrdersSummary' that calculates the total spending for each customer and limits it to the top 3. Then, it joins this derived table with the 'Customers' table to retrieve the names of these top-spending customers along with their total spent."
Find product names that have never been ordered.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query selects the names of products whose 'product_id' is not present in the list of 'product_id's found in the 'Order_Items' table, effectively identifying products that have not been ordered."
List departments that have no employees with a salary greater than 70000.,SELECT department_name FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary > 70000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));",This query selects department names for which there does NOT exist any employee in that department earning more than 70000.
Retrieve the names of products whose price is exactly double the price of the cheapest product.,SELECT product_name FROM Products WHERE price = (SELECT MIN(price) FROM Products) * 2;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects products whose price is equal to twice the minimum price found across all products.
Find the names of students enrolled in courses offered by the 'Computer Science' department.,SELECT student_name FROM Students WHERE student_id IN (SELECT student_id FROM Enrollments WHERE course_id IN (SELECT course_id FROM Courses WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Computer Science')));,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query uses nested IN subqueries to first find the department ID for 'Computer Science', then course IDs within that department, then student IDs enrolled in those courses, finally retrieving the names of those students."
List all products and indicate if their price is above the average product price.,"SELECT product_name, price, CASE WHEN price > (SELECT AVG(price) FROM Products) THEN 'Above Average' ELSE 'Below or At Average' END AS price_status FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query lists each product's name and price, and uses a scalar subquery within a CASE statement to compare the product's price against the overall average, labeling it as 'Above Average' or 'Below or At Average'."
Display department names along with the name of the highest-paid employee in each department.,"SELECT D.department_name, EmpMaxSalary.name AS highest_paid_employee FROM Departments D JOIN (SELECT E.department_id, E.name, E.salary FROM Employees E WHERE E.salary = (SELECT MAX(salary) FROM Employees WHERE department_id = E.department_id)) AS EmpMaxSalary ON D.department_id = EmpMaxSalary.department_id;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));",This query first creates a derived table containing employees who earn the maximum salary within their respective departments (using a correlated subquery). It then joins this derived table with the 'Departments' table to display the department name and the name of its highest-paid employee.
Find customers who made their first order in the year 2023.,"SELECT customer_name FROM Customers C WHERE SUBSTR((SELECT MIN(order_date) FROM Orders WHERE customer_id = C.customer_id), 1, 4) = '2023';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query selects customer names for whom the earliest 'order_date' (found using a correlated subquery) starts with '2023', indicating their first order was in that year. SUBSTR is used for year extraction in SQLite."
List each department and the difference between its highest and lowest employee salaries.,"SELECT D.department_name, (SELECT MAX(salary) - MIN(salary) FROM Employees E WHERE E.department_id = D.department_id) AS salary_range FROM Departments D;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query lists department names and, for each department, a correlated subquery calculates the difference between the maximum and minimum salaries of employees within that specific department."
"For each customer, find their most recent order's total amount.","SELECT C.customer_name, LastOrder.total_amount AS most_recent_order_amount FROM Customers C JOIN (SELECT customer_id, total_amount, order_date FROM Orders AS O1 WHERE order_date = (SELECT MAX(order_date) FROM Orders AS O2 WHERE O1.customer_id = O2.customer_id)) AS LastOrder ON C.customer_id = LastOrder.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query uses a derived table 'LastOrder' to identify the most recent order for each customer using a correlated subquery on 'order_date'. It then joins this with the 'Customers' table to display customer names and their most recent order amounts.
Find departments that currently have no employees assigned.,SELECT department_name FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query selects department names for which there is no corresponding employee record in the 'Employees' table, indicating an empty department."
"For each order, list its total amount and the average total amount of all orders placed by the same customer.","SELECT O.order_id, O.total_amount, (SELECT AVG(total_amount) FROM Orders WHERE customer_id = O.customer_id) AS customer_average_order_amount FROM Orders O;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query lists each order's ID and total amount, and for each order, a correlated subquery calculates the average total amount of all orders placed by the customer who placed that specific order."
"Find employees who are managers (i.e., they have direct reports).",SELECT DISTINCT E1.name FROM Employees E1 WHERE EXISTS (SELECT 1 FROM Employees E2 WHERE E2.manager_id = E1.employee_id);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This query selects the distinct names of employees for whom there exists at least one other employee (E2) whose 'manager_id' matches E1's 'employee_id', thus identifying managers."
"List the department name, the count of employees in it, and their average salary, but only for departments with more than 5 employees.","SELECT D.department_name, DeptStats.employee_count, DeptStats.avg_salary FROM Departments D JOIN (SELECT department_id, COUNT(employee_id) AS employee_count, AVG(salary) AS avg_salary FROM Employees GROUP BY department_id HAVING COUNT(employee_id) > 5) AS DeptStats ON D.department_id = DeptStats.department_id;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query first creates a derived table 'DeptStats' that aggregates employee count and average salary per department, filtered to include only departments with more than 5 employees. It then joins this derived table with the 'Departments' table to display the department name along with the calculated statistics."
Find the employee with the second highest salary.,"SELECT name, salary FROM Employees WHERE salary = (SELECT salary FROM Employees ORDER BY salary DESC LIMIT 1 OFFSET 1);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","This query finds the second highest salary using a subquery with ORDER BY and LIMIT/OFFSET, then selects the employee(s) who earn that salary."
List each author's name and the total number of distinct genres of books they have written.,"SELECT A.author_name, (SELECT COUNT(DISTINCT B.genre) FROM Books B WHERE B.author_id = A.author_id) AS distinct_genres_written FROM Authors A;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre TEXT, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query lists author names and, for each author, a correlated subquery counts the number of unique genres among the books they have authored."
Find the names of products that have a total quantity ordered greater than 100 across all orders.,SELECT product_name FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items GROUP BY product_id HAVING SUM(quantity) > 100);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query selects product names where the product ID is found in the list generated by a subquery, which identifies product IDs that have a total ordered quantity exceeding 100."
List all employees who have the same salary as at least one other employee.,"SELECT E1.name, E1.salary FROM Employees E1 JOIN (SELECT salary FROM Employees GROUP BY salary HAVING COUNT(*) > 1) AS DuplicateSalaries ON E1.salary = DuplicateSalaries.salary ORDER BY E1.salary;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);",This query first creates a derived table 'DuplicateSalaries' containing salaries that appear more than once. It then joins 'Employees' with this derived table to find all employees earning one of these duplicate salaries.
"For each product, show its price and what percentage of the total stock quantity it represents.","SELECT product_name, price, stock_quantity, ROUND(CAST(stock_quantity AS REAL) * 100 / (SELECT SUM(stock_quantity) FROM Products), 2) AS percentage_of_total_stock FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query lists product details and calculates each product's stock quantity as a percentage of the total stock across all products, using a scalar subquery to get the sum of all stock quantities. CAST is used for floating-point division."
Find customers who have placed an order for a product in the 'Electronics' category.,SELECT customer_name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id WHERE O.customer_id = C.customer_id AND OI.product_id IN (SELECT product_id FROM Products WHERE category = 'Electronics'));,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects customer names if there exists an order by that customer which includes an item whose product ID is found in the subquery of 'Electronics' products.
Find students who have the highest grade in any course they are enrolled in.,"SELECT S.student_name, E.grade, C.course_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id WHERE E.grade = (SELECT MAX(grade) FROM Enrollments WHERE student_id = S.student_id);","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query selects student names, their grade, and course name where the student's grade for that specific enrollment is equal to the maximum grade they have received across all their enrollments (found using a correlated subquery)."
List the top 5 product categories by total sales revenue.,"SELECT P.category, SUM(ProductSales.total_sales) AS category_total_sales FROM Products P JOIN (SELECT product_id, SUM(quantity * price_at_time_of_order) AS total_sales FROM Order_Items GROUP BY product_id) AS ProductSales ON P.product_id = ProductSales.product_id GROUP BY P.category ORDER BY category_total_sales DESC LIMIT 5;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query first calculates the total sales for each product using a derived table 'ProductSales'. It then joins this with the 'Products' table to associate products with their categories, groups the result by category, sums the sales to get category total sales, and finally orders and limits to the top 5 categories by revenue."
Find customers who have exactly 2 distinct products in their orders.,SELECT C.customer_name FROM Customers C WHERE (SELECT COUNT(DISTINCT OI.product_id) FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id WHERE O.customer_id = C.customer_id) = 2;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects customer names for whom a correlated subquery, counting the distinct product IDs across all their orders, evaluates to exactly 2."
List each customer's name and the number of orders they placed in the last 30 days.,"SELECT C.customer_name, (SELECT COUNT(O.order_id) FROM Orders O WHERE O.customer_id = C.customer_id AND O.order_date >= DATE('now', '-30 days')) AS recent_orders_count FROM Customers C;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query lists each customer's name and uses a correlated subquery to count the number of orders placed by that customer within the last 30 days from the current date. DATE('now', '-30 days') is SQLite specific."
Find all employees who do not have a reported phone number.,"SELECT employee_id, name FROM Employees WHERE phone_number IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, email TEXT, phone_number TEXT, hire_date TEXT);","Retrieves the ID and name of employees whose 'phone_number' column is NULL, indicating a missing phone number."
List products that have a description.,"SELECT product_name, price FROM Products WHERE description IS NOT NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER);","Selects the name and price of products where the 'description' column is not NULL, meaning a description exists."
"Display customer emails, but if an email is missing, show 'N/A'.","SELECT customer_id, COALESCE(email, 'N/A') AS contact_email FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, phone TEXT);","Returns customer IDs and their email addresses. If an 'email' is NULL, the string 'N/A' is displayed instead."
"For all books, display their rating. If a rating is not available, show 'No Rating'.","SELECT title, IFNULL(rating, 'No Rating') AS display_rating FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, rating REAL);","Selects book titles and their ratings, substituting 'No Rating' for any NULL values found in the 'rating' column."
"For each employee, show their email. If email is missing, show phone. If both are missing, show 'No Contact Info'.","SELECT employee_id, COALESCE(email, phone_number, 'No Contact Info') AS primary_contact FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, email TEXT, phone_number TEXT);","Retrieves employee IDs and their primary contact information, prioritizing 'email', then 'phone_number', and defaulting to 'No Contact Info' if both are NULL."
Count how many orders still have a NULL delivery status.,SELECT COUNT(*) FROM Orders WHERE delivery_status IS NULL;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, delivery_status TEXT);","Counts the total number of orders where the 'delivery_status' column is NULL, indicating an unknown or pending status."
"Calculate the average commission rate for employees, treating NULL commission rates as 0.","SELECT AVG(COALESCE(commission_rate, 0)) AS average_commission FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, commission_rate REAL);","Calculates the average commission rate for all employees, treating any NULL commission rates as 0 before computing the average to avoid excluding them from the calculation or resulting in a NULL average."
"Get the total budget spent on projects. If a project has a NULL budget, treat it as 0.","SELECT SUM(IFNULL(budget, 0)) AS total_project_budget FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, budget REAL);","Sums up the budget for all projects, treating NULL budget values as 0 to ensure they are included in the sum and do not cause the SUM to return NULL."
"List all customers and their loyalty points. If a customer has no loyalty points recorded, indicate 'Not Enrolled'.","SELECT c.name, IFNULL(c.loyalty_points, 'Not Enrolled') AS loyalty_status FROM Customers c;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, loyalty_points INTEGER);","Selects customer names and their loyalty points. If a customer's 'loyalty_points' column is NULL, it displays 'Not Enrolled' instead."
"For each product, show its last restock date. If it hasn't been restocked, show today's date.","SELECT product_name, COALESCE(last_restock_date, DATE('now')) AS actual_restock_date FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, last_restock_date TEXT);","Retrieves product names and their last restock dates. If a product's 'last_restock_date' is NULL, the current date is used instead."
Find all products whose description is NULL and whose name starts with 'Wireless'.,SELECT product_name FROM Products WHERE description IS NULL AND product_name LIKE 'Wireless%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT);",Selects product names for products that have a NULL description and whose name begins with 'Wireless'.
"For each order, display the actual delivery date. If `delivery_date` is NULL, use `ship_date`. If both are NULL, use `order_date`. If `order_date` is also NULL, display 'Undetermined'.","SELECT order_id, COALESCE(delivery_date, ship_date, order_date, 'Undetermined') AS final_delivery_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, ship_date TEXT, delivery_date TEXT);","Selects order IDs and a final delivery date, prioritizing 'delivery_date', then 'ship_date', then 'order_date'. If all three are NULL, it defaults to 'Undetermined'."
List the names of employees who are managers of projects that have no assigned end date.,SELECT E.name FROM Employees E JOIN Projects P ON E.employee_id = P.manager_id WHERE P.end_date IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, manager_id INTEGER, end_date TEXT);","Joins Employees and Projects tables to find managers of projects where the 'end_date' is NULL, indicating an ongoing or undated project."
"For each employee, display their commission rate as a percentage, or 'N/A' if it's not set.","SELECT name, COALESCE(CAST(commission_rate * 100 AS TEXT) || '%', 'N/A') AS formatted_commission FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, commission_rate REAL);","Retrieves employee names and formats their commission rate as a percentage. If 'commission_rate' is NULL, it displays 'N/A'."
"Count the number of employees per department, treating employees with a NULL department as belonging to an 'Unassigned' department.","SELECT IFNULL(department_id, 'Unassigned') AS department, COUNT(*) AS employee_count FROM Employees GROUP BY IFNULL(department_id, 'Unassigned');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id TEXT);",Counts employees grouped by their department ID. Employees with a NULL 'department_id' are grouped under a virtual 'Unassigned' department.
Find all orders that have a NULL discount code but a total amount greater than 100.,"SELECT order_id, total_amount FROM Orders WHERE discount_code IS NULL AND total_amount > 100;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, total_amount REAL, discount_code TEXT);",Selects order IDs and total amounts for orders that have no discount code applied (discount_code is NULL) and a total amount exceeding 100.
"For each item, calculate its effective price. Use `sale_price` if available, otherwise `regular_price`. If both are NULL, default to 0.","SELECT item_name, COALESCE(sale_price, regular_price, 0) AS effective_price FROM Items;","CREATE TABLE Items (item_id INTEGER PRIMARY KEY, item_name TEXT, regular_price REAL, sale_price REAL);","Calculates the effective price for each item, prioritizing 'sale_price' over 'regular_price'. If both are NULL, the effective price is 0."
"List all products, sorted by their last restock date. Products with no restock date should appear last.","SELECT product_name, last_restock_date FROM Products ORDER BY IFNULL(last_restock_date, '9999-12-31');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, last_restock_date TEXT);","Orders products by their 'last_restock_date' in ascending order. NULL 'last_restock_date' values are treated as a very late date (effectively '9999-12-31'), making them appear at the end of the sorted list."
Find customers who have placed at least one order with a confirmed delivery status (not NULL).,SELECT C.name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id AND O.delivery_status IS NOT NULL);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, delivery_status TEXT);","Retrieves the names of customers who have at least one order where the 'delivery_status' is not NULL, indicating a confirmed delivery."
Update all employees' phone numbers to 'N/A' if they are currently NULL.,"UPDATE Employees SET phone_number = COALESCE(phone_number, 'N/A') WHERE phone_number IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, phone_number TEXT);",Updates the 'phone_number' column to 'N/A' for all employees where the current 'phone_number' value is NULL.
"Insert a new project. If no manager ID is provided, set it to 0.","INSERT INTO Projects (project_name, manager_id, start_date) VALUES ('New Initiative', IFNULL(NULL, 0), '2023-01-01');","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, manager_id INTEGER, start_date TEXT);","Inserts a new project record. If the manager ID provided for insertion is NULL, it defaults to 0."
"Get a list of all distinct department IDs. If some employees have no department, list 'Unassigned' as a distinct department.","SELECT DISTINCT IFNULL(department_id, 'Unassigned') AS department FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id TEXT);","Retrieves all unique department IDs. If an employee's 'department_id' is NULL, it will appear as 'Unassigned' in the distinct list."
"For each order, display the earliest of the `ship_date` or `delivery_date`. If both are NULL, use `order_date`. If `order_date` is also NULL, state 'Undetermined'.","SELECT order_id, COALESCE(MIN(ship_date, delivery_date), order_date, 'Undetermined') AS final_event_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, ship_date TEXT, delivery_date TEXT);","Retrieves order IDs and an effective date. It first finds the earlier of 'ship_date' and 'delivery_date'. If the result is NULL (meaning both were NULL), it falls back to 'order_date'. If 'order_date' is also NULL, it defaults to 'Undetermined'."
Find departments where all employees have NULL phone numbers.,SELECT department_id FROM Employees GROUP BY department_id HAVING COUNT(phone_number) = 0 AND COUNT(*) > 0;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id TEXT, phone_number TEXT);","Groups employees by department. It identifies departments where `COUNT(phone_number)` (which counts non-NULL phone numbers) is 0, meaning all employees in that department have NULL phone numbers. `COUNT(*) > 0` ensures the department itself isn't empty."
"Calculate the net profit for each product, considering `revenue` minus `cost_of_goods_sold`. If `cost_of_goods_sold` is NULL, assume it's 0. If `revenue` is also NULL, assume 0.","SELECT product_name, COALESCE(revenue, 0) - COALESCE(cost_of_goods_sold, 0) AS net_profit FROM Products_Financials;","CREATE TABLE Products_Financials (product_id INTEGER PRIMARY KEY, product_name TEXT, revenue REAL, cost_of_goods_sold REAL);","Calculates the net profit for each product, treating NULL values for 'revenue' or 'cost_of_goods_sold' as 0 to ensure the arithmetic operation yields a numeric result."
"Categorize products based on their stock quantity. If `stock_quantity` is NULL, categorize as 'Unknown Stock'.","SELECT product_name, CASE WHEN stock_quantity IS NULL THEN 'Unknown Stock' WHEN stock_quantity = 0 THEN 'Out of Stock' WHEN stock_quantity < 10 THEN 'Low Stock' ELSE 'In Stock' END AS stock_status FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, stock_quantity INTEGER);","Categorizes products based on their stock quantity. If 'stock_quantity' is NULL, it's labeled 'Unknown Stock'. Otherwise, it's categorized as 'Out of Stock', 'Low Stock', or 'In Stock' based on its value."
"List all employees and their assigned project names. If an employee is not assigned to any project, show 'No Project'.","SELECT E.name, IFNULL(P.project_name, 'No Project') AS assigned_project FROM Employees E LEFT JOIN ProjectAssignments PA ON E.employee_id = PA.employee_id LEFT JOIN Projects P ON PA.project_id = P.project_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER);","Performs LEFT JOINs to combine employee information with project assignments and project names. If an employee has no project assigned, resulting in NULLs from the LEFT JOIN, 'No Project' is displayed instead of a project name."
"For each customer, identify their preferred contact method. Prioritize `email`, then `phone`, then `mail_address`. If none are available, indicate 'No Preferred Method'.","SELECT customer_id, COALESCE(email, phone, mail_address, 'No Preferred Method') AS preferred_contact FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, phone TEXT, mail_address TEXT);","Retrieves customer IDs and their preferred contact method, choosing the first non-NULL value among 'email', 'phone', and 'mail_address'. If all are NULL, it defaults to 'No Preferred Method'."
Find departments where the sum of employee salaries is NULL (meaning all employees in that department have NULL salaries).,SELECT department_id FROM Employees GROUP BY department_id HAVING SUM(salary) IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id TEXT, salary REAL);","Groups employees by department and selects only those departments where the sum of 'salary' is NULL. This occurs if all 'salary' values within that group are NULL, as SUM ignores NULLs unless all values are NULL."
"For each product, calculate its estimated profit margin (price - cost). If `cost` is NULL, treat it as 0. Then, list products with an estimated profit margin greater than 50.","SELECT product_name, (price - IFNULL(cost, 0)) AS profit_margin FROM Products WHERE (price - IFNULL(cost, 0)) > 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, cost REAL);",Calculates an estimated profit margin for each product by subtracting the cost (treating NULL costs as 0) from the price. It then filters to show only products with a profit margin greater than 50.
List all employees along with their department names. Use a Common Table Expression (CTE) to first select active employees.,"WITH ActiveEmployees AS (SELECT employee_id, first_name, last_name, department_id FROM Employees WHERE status = 'Active') SELECT ae.first_name, ae.last_name, d.department_name FROM ActiveEmployees ae JOIN Departments d ON ae.department_id = d.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, status TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query uses a CTE named `ActiveEmployees` to select only employees with 'Active' status. Then, it joins this CTE result with the `Departments` table to retrieve the department name for each active employee."
Find the total quantity sold for each product category. Use a derived table to calculate product-wise total quantities first.,"SELECT p.category, SUM(sq.total_quantity_sold) AS category_total_quantity FROM Products p JOIN (SELECT product_id, SUM(quantity) AS total_quantity_sold FROM OrderItems GROUP BY product_id) AS sq ON p.product_id = sq.product_id GROUP BY p.category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL);","This query uses a derived table `sq` to compute the total quantity sold for each product. It then joins this result with the `Products` table to group and sum quantities by product category, providing the total quantity sold per category."
Calculate the average order value for each customer who has placed more than one order. Use a CTE to filter out single-order customers.,"WITH CustomerOrderCounts AS (SELECT customer_id, COUNT(order_id) AS num_orders, SUM(total_amount) AS total_spent FROM Orders GROUP BY customer_id HAVING num_orders > 1) SELECT coc.customer_id, coc.total_spent / coc.num_orders AS average_order_value FROM CustomerOrderCounts coc;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT);","The `CustomerOrderCounts` CTE first aggregates order data to find the number of orders and total spending per customer, filtering for customers with more than one order. The outer query then calculates the average order value for these customers."
List the top 3 highest-paid employees in each department. Use a derived table for ranking.,"SELECT department_name, first_name, last_name, salary FROM (SELECT d.department_name, e.first_name, e.last_name, e.salary, ROW_NUMBER() OVER (PARTITION BY d.department_id ORDER BY e.salary DESC) AS rn FROM Employees e JOIN Departments d ON e.department_id = d.department_id) AS ranked_employees WHERE rn <= 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",This query uses a derived table to rank employees by salary within each department using `ROW_NUMBER()`. The outer query then filters these ranked results to show only the top 3 employees for each department.
Find all customers who have placed orders in both 'Electronics' and 'Books' categories. Use multiple CTEs.,"WITH ElectronicsCustomers AS (SELECT DISTINCT c.customer_id FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Electronics'), BooksCustomers AS (SELECT DISTINCT c.customer_id FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Books') SELECT c.customer_name FROM Customers c JOIN ElectronicsCustomers ec ON c.customer_id = ec.customer_id JOIN BooksCustomers bc ON c.customer_id = bc.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, category TEXT);","Two CTEs are used: `ElectronicsCustomers` identifies customers who bought electronics, and `BooksCustomers` identifies those who bought books. The final query joins these two CTEs with the `Customers` table to find customers present in both lists, meaning they bought from both categories."
Calculate the average time (in days) between an employee's hire date and their first project assignment date. Use a derived table.,"SELECT AVG(CAST(julianday(fp.first_project_date) - julianday(e.hire_date) AS INTEGER)) AS avg_days_to_first_project FROM Employees e JOIN (SELECT employee_id, MIN(assign_date) AS first_project_date FROM ProjectAssignments GROUP BY employee_id) AS fp ON e.employee_id = fp.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, hire_date TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, assign_date TEXT);","A derived table `fp` finds the earliest project assignment date for each employee. This is then joined with the `Employees` table to calculate the difference in days between hire date and first project assignment, finally averaging these differences."
"For each department, find the employee with the lowest salary and the employee with the highest salary. Use a CTE with window functions.","WITH RankedSalaries AS (SELECT employee_id, first_name, last_name, department_id, salary, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary ASC) AS rnk_asc, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk_desc FROM Employees) SELECT d.department_name, MAX(CASE WHEN rs.rnk_asc = 1 THEN rs.first_name || ' ' || rs.last_name || ' (' || rs.salary || ')' END) AS lowest_paid_employee, MAX(CASE WHEN rs.rnk_desc = 1 THEN rs.first_name || ' ' || rs.last_name || ' (' || rs.salary || ')' END) AS highest_paid_employee FROM RankedSalaries rs JOIN Departments d ON rs.department_id = d.department_id GROUP BY d.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",The `RankedSalaries` CTE assigns ranks to employees within each department based on salary (ascending and descending). The outer query then uses `MAX` with `CASE` statements to pick out the names and salaries of the lowest and highest-paid employees for each department.
Identify products that have never been ordered. Use a derived table for products that have been ordered.,SELECT p.product_name FROM Products p LEFT JOIN (SELECT DISTINCT product_id FROM OrderItems) AS ordered_products ON p.product_id = ordered_products.product_id WHERE ordered_products.product_id IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","A derived table `ordered_products` lists all product IDs that have appeared in `OrderItems`. A `LEFT JOIN` is then performed from `Products` to this derived table. Products that never joined (i.e., `ordered_products.product_id` is `NULL`) are those that have never been ordered."
List all employees who earn more than the average salary of their department. Use a CTE.,"WITH DepartmentAvgSalary AS (SELECT department_id, AVG(salary) AS avg_dept_salary FROM Employees GROUP BY department_id) SELECT e.first_name, e.last_name, e.salary, d.department_name FROM Employees e JOIN DepartmentAvgSalary das ON e.department_id = das.department_id WHERE e.salary > das.avg_dept_salary;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",The `DepartmentAvgSalary` CTE calculates the average salary for each department. The main query then joins `Employees` with this CTE to filter for employees whose individual salary exceeds their department's average.
Find the total revenue generated by each customer in the last 90 days. Use a derived table.,"SELECT c.customer_name, SUM(o.total_amount) AS total_revenue_90_days FROM Customers c JOIN (SELECT customer_id, total_amount FROM Orders WHERE order_date >= DATE('now', '-90 days')) AS recent_orders ON c.customer_id = recent_orders.customer_id GROUP BY c.customer_name ORDER BY total_revenue_90_days DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","A derived table `recent_orders` first filters orders placed within the last 90 days. This is then joined with the `Customers` table to sum the `total_amount` for each customer, showing their revenue generated in this period."
"For each project, list the employee who spent the most hours. Use a CTE and handle ties by showing all tied employees.","WITH ProjectHoursRank AS (SELECT project_id, employee_id, hours_worked, RANK() OVER (PARTITION BY project_id ORDER BY hours_worked DESC) AS rnk FROM ProjectAssignments) SELECT pa.project_name, e.first_name, e.last_name, phr.hours_worked FROM ProjectHoursRank phr JOIN Employees e ON phr.employee_id = e.employee_id JOIN Projects pa ON phr.project_id = pa.project_id WHERE phr.rnk = 1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER, hours_worked INTEGER);","The `ProjectHoursRank` CTE ranks employees within each project based on `hours_worked`. The outer query then selects employees whose rank is 1 (highest hours), joining with `Employees` and `Projects` to get names and project details. `RANK()` is used to include all tied employees."
Calculate the cumulative sum of sales for each product over time. Use a derived table.,"SELECT order_date, product_id, quantity, SUM(quantity) OVER (PARTITION BY product_id ORDER BY order_date) AS cumulative_quantity FROM (SELECT o.order_date, oi.product_id, oi.quantity FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id) AS sales_data ORDER BY product_id, order_date;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","A derived table `sales_data` combines order dates with product IDs and quantities. The outer query then calculates a running total of `quantity` for each product, ordered by `order_date`, showing the cumulative sales."
"Find departments that have at least 5 employees and whose average salary is above $70,000. Use CTEs for clarity.","WITH DeptEmployeeCounts AS (SELECT department_id, COUNT(employee_id) AS num_employees FROM Employees GROUP BY department_id HAVING num_employees >= 5), DeptAvgSalaries AS (SELECT department_id, AVG(salary) AS avg_salary FROM Employees GROUP BY department_id HAVING avg_salary > 70000) SELECT d.department_name FROM Departments d JOIN DeptEmployeeCounts dec ON d.department_id = dec.department_id JOIN DeptAvgSalaries das ON d.department_id = das.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","Two CTEs are used: `DeptEmployeeCounts` finds departments with 5 or more employees, and `DeptAvgSalaries` finds departments with an average salary over $70,000. The final query joins `Departments` with both CTEs to get department names that satisfy both conditions."
List all customers who have placed orders on more than one distinct day. Use a derived table.,"SELECT c.customer_name FROM Customers c JOIN (SELECT customer_id, COUNT(DISTINCT order_date) AS distinct_order_days FROM Orders GROUP BY customer_id HAVING distinct_order_days > 1) AS multi_day_customers ON c.customer_id = multi_day_customers.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",A derived table `multi_day_customers` calculates the number of distinct order dates for each customer and filters for those with more than one. The outer query then joins this with `Customers` to retrieve the names of these customers.
"For each product, identify its price category: 'Economy' (<50), 'Standard' (50-100), 'Premium' (>100). Use a CTE with a CASE statement.","WITH ProductPriceCategories AS (SELECT product_id, product_name, price, CASE WHEN price < 50 THEN 'Economy' WHEN price BETWEEN 50 AND 100 THEN 'Standard' ELSE 'Premium' END AS price_category FROM Products) SELECT product_name, price, price_category FROM ProductPriceCategories ORDER BY price_category, product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL);",The `ProductPriceCategories` CTE assigns a `price_category` to each product based on its price using a `CASE` statement. The outer query then simply selects these categorized products.
"List all books and their authors, including books without authors and authors without books. Use derived tables for initial selections.","SELECT COALESCE(b.title, 'N/A') AS book_title, COALESCE(a.author_name, 'N/A') AS author_name FROM (SELECT book_id, title, author_id FROM Books) AS b LEFT JOIN (SELECT author_id, author_name FROM Authors) AS a ON b.author_id = a.author_id UNION ALL SELECT COALESCE(b.title, 'N/A'), COALESCE(a.author_name, 'N/A') FROM (SELECT book_id, title, author_id FROM Books) AS b RIGHT JOIN (SELECT author_id, author_name FROM Authors) AS a ON b.author_id = a.author_id WHERE b.book_id IS NULL;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT);","This query uses two derived tables (one for `Books` and one for `Authors`) and combines a `LEFT JOIN` (to get all books, even without authors) and a `RIGHT JOIN` (emulated with `LEFT JOIN` and a `WHERE IS NULL` clause on the left side to get authors without books) using `UNION ALL` to achieve a full outer join effect, displaying all books and authors."
Calculate the average daily sales amount for the last 30 days. Use a CTE to isolate recent daily sales.,"WITH DailySales AS (SELECT DATE(order_date) AS sale_day, SUM(total_amount) AS daily_total FROM Orders WHERE order_date >= DATE('now', '-30 days') GROUP BY sale_day) SELECT AVG(daily_total) AS average_daily_sales FROM DailySales;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, total_amount REAL);",The `DailySales` CTE calculates the total sales for each day within the last 30 days. The outer query then computes the average of these daily totals to get the average daily sales amount.
Find employees who have not been assigned to any project yet. Use a derived table for employees with project assignments.,"SELECT e.first_name, e.last_name FROM Employees e LEFT JOIN (SELECT DISTINCT employee_id FROM ProjectAssignments) AS assigned_employees ON e.employee_id = assigned_employees.employee_id WHERE assigned_employees.employee_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER);","A derived table `assigned_employees` lists all employee IDs found in `ProjectAssignments`. A `LEFT JOIN` from `Employees` to this derived table identifies employees who do not have a matching entry (meaning `assigned_employees.employee_id` is `NULL`), indicating they haven't been assigned to any project."
"List all departments and the number of employees in each, including departments with zero employees. Use a CTE to count employees.","WITH EmployeeCounts AS (SELECT department_id, COUNT(employee_id) AS num_employees FROM Employees GROUP BY department_id) SELECT d.department_name, COALESCE(ec.num_employees, 0) AS employee_count FROM Departments d LEFT JOIN EmployeeCounts ec ON d.department_id = ec.department_id ORDER BY d.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, department_id INTEGER);","The `EmployeeCounts` CTE calculates the number of employees per department. A `LEFT JOIN` from `Departments` to this CTE ensures all departments are listed. `COALESCE` handles cases where a department has no employees (and thus no match in the CTE), showing 0 instead of NULL."
Find the second highest salary among all employees. Use a derived table.,SELECT MAX(salary) AS second_highest_salary FROM (SELECT salary FROM Employees ORDER BY salary DESC LIMIT 2) AS top_two_salaries WHERE salary < (SELECT MAX(salary) FROM Employees);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL);","The derived table `top_two_salaries` selects the two highest salaries. The outer query then takes the maximum of these two, provided it's less than the overall maximum salary (to handle cases with duplicate highest salaries), effectively returning the second highest unique salary."
Get the names of customers who have placed at least 3 orders and their average order amount. Use a CTE for filtering and aggregation.,"WITH HighVolumeCustomers AS (SELECT customer_id, COUNT(order_id) AS num_orders, AVG(total_amount) AS avg_order_amount FROM Orders GROUP BY customer_id HAVING num_orders >= 3) SELECT c.customer_name, hvc.num_orders, hvc.avg_order_amount FROM Customers c JOIN HighVolumeCustomers hvc ON c.customer_id = hvc.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL);",The `HighVolumeCustomers` CTE identifies customers who have placed 3 or more orders and calculates their average order amount. The main query then joins with the `Customers` table to retrieve their names along with these statistics.
List products whose current stock quantity is below their reorder level. Use a derived table.,"SELECT p.product_name, s.stock_quantity, s.reorder_level FROM Products p JOIN (SELECT product_id, stock_quantity, reorder_level FROM Inventory WHERE stock_quantity < reorder_level) AS low_stock_items ON p.product_id = low_stock_items.product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT); CREATE TABLE Inventory (inventory_id INTEGER PRIMARY KEY, product_id INTEGER, stock_quantity INTEGER, reorder_level INTEGER);",A derived table `low_stock_items` filters the `Inventory` table to find products where `stock_quantity` is less than `reorder_level`. This is then joined with `Products` to display the names of these products and their stock/reorder levels.
Find the department with the highest total salary. Use a CTE.,"WITH DepartmentTotalSalary AS (SELECT department_id, SUM(salary) AS total_salary FROM Employees GROUP BY department_id) SELECT d.department_name, dts.total_salary FROM Departments d JOIN DepartmentTotalSalary dts ON d.department_id = dts.department_id ORDER BY dts.total_salary DESC LIMIT 1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","The `DepartmentTotalSalary` CTE calculates the sum of salaries for each department. The outer query then joins this with `Departments` to get the department name and orders by total salary descending, taking the top one to find the department with the highest total salary."
"For each employee, show their name and the name of their manager. Use a CTE for clarity in self-join.","WITH EmployeeManager AS (SELECT e1.employee_id, e1.first_name || ' ' || e1.last_name AS employee_name, e2.first_name || ' ' || e2.last_name AS manager_name FROM Employees e1 LEFT JOIN Employees e2 ON e1.manager_id = e2.employee_id) SELECT employee_name, manager_name FROM EmployeeManager;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, manager_id INTEGER);",The `EmployeeManager` CTE performs a self-join on the `Employees` table to link employees with their respective managers (based on `manager_id`). The outer query simply selects the employee and manager names from the CTE result.
Calculate the difference in total sales between the current month and the previous month. Use CTEs.,"WITH CurrentMonthSales AS (SELECT SUM(total_amount) AS current_sales FROM Orders WHERE STRFTIME('%Y-%m', order_date) = STRFTIME('%Y-%m', 'now')), PreviousMonthSales AS (SELECT SUM(total_amount) AS previous_sales FROM Orders WHERE STRFTIME('%Y-%m', order_date) = STRFTIME('%Y-%m', 'now', '-1 month')) SELECT COALESCE(cms.current_sales, 0) - COALESCE(pms.previous_sales, 0) AS sales_difference FROM CurrentMonthSales cms, PreviousMonthSales pms;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, total_amount REAL);","Two CTEs are used: `CurrentMonthSales` calculates sales for the current month, and `PreviousMonthSales` for the prior month. The main query then subtracts the previous month's sales from the current month's sales, using `COALESCE` to handle cases where there are no sales in a given month."
"Find the average salary for each job title, but only for job titles with more than 5 employees. Use a derived table.","SELECT job_title, avg_salary FROM (SELECT job_title, AVG(salary) AS avg_salary, COUNT(employee_id) AS num_employees FROM Employees GROUP BY job_title HAVING num_employees > 5) AS qualified_job_titles;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, job_title TEXT, salary REAL);",The derived table `qualified_job_titles` first calculates the average salary and employee count for each job title. It then filters these results to include only job titles with more than 5 employees. The outer query simply selects the job title and its average salary.
List all products that have been part of at least 10 orders in total. Use a CTE.,"WITH ProductOrderCounts AS (SELECT product_id, COUNT(DISTINCT order_id) AS total_orders FROM OrderItems GROUP BY product_id HAVING total_orders >= 10) SELECT p.product_name, poc.total_orders FROM Products p JOIN ProductOrderCounts poc ON p.product_id = poc.product_id ORDER BY poc.total_orders DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER);",The `ProductOrderCounts` CTE counts the distinct number of orders each product has appeared in and filters for products in 10 or more orders. The main query then joins this with `Products` to display the product names and their total order counts.
Identify customers who placed their first order in 2023 and their total spending since then. Use a derived table.,"SELECT c.customer_name, SUM(o.total_amount) AS total_spending FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN (SELECT customer_id, MIN(order_date) AS first_order_date FROM Orders GROUP BY customer_id HAVING STRFTIME('%Y', MIN(order_date)) = '2023') AS first_orders_2023 ON c.customer_id = first_orders_2023.customer_id WHERE o.order_date >= first_orders_2023.first_order_date GROUP BY c.customer_name ORDER BY total_spending DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","A derived table `first_orders_2023` finds the earliest order date for each customer and filters for customers whose first order was in 2023. The outer query then joins `Customers` and `Orders` with this derived table, summing up `total_amount` for orders placed on or after their first order date in 2023."
"Categorize employees by their salary range: 'Low' (<50000), 'Medium' (50000-80000), 'High' (>80000). Use CTE and count employees in each category.","WITH EmployeeSalaryCategory AS (SELECT employee_id, CASE WHEN salary < 50000 THEN 'Low' WHEN salary BETWEEN 50000 AND 80000 THEN 'Medium' ELSE 'High' END AS salary_category FROM Employees) SELECT esc.salary_category, COUNT(esc.employee_id) AS num_employees FROM EmployeeSalaryCategory esc GROUP BY esc.salary_category ORDER BY num_employees DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, salary REAL);",The `EmployeeSalaryCategory` CTE assigns a `salary_category` to each employee based on their salary using a `CASE` statement. The outer query then counts the number of employees in each `salary_category`.
"For each student, find their highest score in any course. Use a derived table to pre-aggregate scores.","SELECT s.student_name, ms.max_score FROM Students s JOIN (SELECT student_id, MAX(score) AS max_score FROM Enrollments GROUP BY student_id) AS ms ON s.student_id = ms.student_id ORDER BY ms.max_score DESC;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, score INTEGER);",A derived table `ms` calculates the maximum score for each student from the `Enrollments` table. The outer query then joins this with the `Students` table to display each student's name alongside their highest score.
"Generate a list of all possible combinations of product categories and regions, then count how many products exist for each combination. Use CTEs.","WITH AllCombinations AS (SELECT DISTINCT category FROM Products CROSS JOIN (SELECT DISTINCT region_name AS region FROM Sales) AS Regions), CategoryRegionCounts AS (SELECT p.category, s.region_name AS region, COUNT(DISTINCT p.product_id) AS num_products FROM Products p JOIN Sales s ON p.product_id = s.product_id GROUP BY p.category, s.region_name) SELECT ac.category, ac.region, COALESCE(crc.num_products, 0) AS product_count FROM AllCombinations ac LEFT JOIN CategoryRegionCounts crc ON ac.category = crc.category AND ac.region = crc.region ORDER BY ac.category, ac.region;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, region_name TEXT, sale_date TEXT, amount REAL);","The `AllCombinations` CTE generates every unique pair of product categories and sales regions using `CROSS JOIN`. The `CategoryRegionCounts` CTE counts products sold per category and region. The final query then performs a `LEFT JOIN` from `AllCombinations` to `CategoryRegionCounts` to ensure all combinations are listed, showing 0 for those with no products, using `COALESCE`."
"List all products and their stock level descriptions (Low Stock, Medium Stock, In Stock) based on quantity.","SELECT ProductID, ProductName, StockQuantity, CASE WHEN StockQuantity < 10 THEN 'Low Stock' WHEN StockQuantity BETWEEN 10 AND 50 THEN 'Medium Stock' ELSE 'In Stock' END AS StockStatus FROM Products;","CREATE TABLE Products ( ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Category TEXT, Price REAL, StockQuantity INTEGER, LastRestockDate TEXT );","This query retrieves product information and assigns a 'StockStatus' based on the 'StockQuantity' using a CASE expression. It categorizes stock as 'Low Stock' (less than 10), 'Medium Stock' (10 to 50), or 'In Stock' (greater than 50)."
"Show employee names and their salary bands (Junior, Mid-Level, Senior) based on salary ranges.","SELECT EmployeeID, FirstName, LastName, Salary, CASE WHEN Salary < 40000 THEN 'Junior' WHEN Salary BETWEEN 40000 AND 75000 THEN 'Mid-Level' WHEN Salary > 75000 THEN 'Senior' ELSE 'N/A' END AS SalaryBand FROM Employees;","CREATE TABLE Employees ( EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, Department TEXT, Salary REAL, HireDate TEXT, PerformanceScore INTEGER );","This query selects employee details and categorizes their 'Salary' into 'Junior', 'Mid-Level', or 'Senior' bands using a CASE statement. Employees with salaries less than 40000 are 'Junior', between 40000 and 75000 are 'Mid-Level', and over 75000 are 'Senior'."
"Calculate the total amount for each order, and classify orders as 'Small', 'Medium', or 'Large' based on their total amount.","SELECT OrderID, TotalAmount, CASE WHEN TotalAmount < 100 THEN 'Small' WHEN TotalAmount BETWEEN 100 AND 500 THEN 'Medium' ELSE 'Large' END AS OrderSize FROM Orders;","CREATE TABLE Orders ( OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT );","This query retrieves order IDs and their total amounts, then assigns an 'OrderSize' category ('Small', 'Medium', 'Large') using a CASE expression based on the 'TotalAmount' of the order."
"List tasks with their priority levels, showing 'Urgent' if priority is 1, 'High' if 2, 'Medium' if 3, and 'Low' otherwise.","SELECT TaskID, TaskName, Priority, CASE Priority WHEN 1 THEN 'Urgent' WHEN 2 THEN 'High' WHEN 3 THEN 'Medium' ELSE 'Low' END AS PriorityLevel FROM Tasks;","CREATE TABLE Tasks ( TaskID INTEGER PRIMARY KEY, TaskName TEXT NOT NULL, Status TEXT, Priority INTEGER, AssignedTo TEXT, DueDate TEXT );","This query fetches tasks and translates their numeric 'Priority' (1, 2, 3) into descriptive 'PriorityLevel' strings ('Urgent', 'High', 'Medium', 'Low') using a simple CASE statement."
"Find all customers and their membership status, showing 'Gold' for members joined before 2020, 'Silver' for those joined in 2020 or 2021, and 'Bronze' for others.","SELECT CustomerID, CustomerName, JoinDate, CASE WHEN CAST(SUBSTR(JoinDate, 1, 4) AS INTEGER) < 2020 THEN 'Gold' WHEN CAST(SUBSTR(JoinDate, 1, 4) AS INTEGER) IN (2020, 2021) THEN 'Silver' ELSE 'Bronze' END AS MembershipTier FROM Customers;","CREATE TABLE Customers ( CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL, Email TEXT, MembershipType TEXT, JoinDate TEXT );","This query retrieves customer information and assigns a 'MembershipTier' based on their 'JoinDate'. It uses a CASE statement to categorize customers into 'Gold', 'Silver', or 'Bronze' based on the year they joined."
"Count the number of employees in each salary band (Junior, Mid-Level, Senior).","SELECT CASE WHEN Salary < 40000 THEN 'Junior' WHEN Salary BETWEEN 40000 AND 75000 THEN 'Mid-Level' ELSE 'Senior' END AS SalaryBand, COUNT(EmployeeID) AS NumberOfEmployees FROM Employees GROUP BY SalaryBand ORDER BY NumberOfEmployees DESC;","CREATE TABLE Employees ( EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, Department TEXT, Salary REAL, HireDate TEXT, PerformanceScore INTEGER );","This query counts employees by their 'SalaryBand', which is determined by a CASE expression. The results are grouped by these derived salary bands and ordered by the count."
"For each employee, display their performance score as 'Excellent', 'Good', 'Average', 'Needs Improvement', or 'Poor' based on a 1-5 scale, where 5 is Excellent and 1 is Poor.","SELECT EmployeeID, FirstName, LastName, PerformanceScore, CASE PerformanceScore WHEN 5 THEN 'Excellent' WHEN 4 THEN 'Good' WHEN 3 THEN 'Average' WHEN 2 THEN 'Needs Improvement' WHEN 1 THEN 'Poor' ELSE 'Unknown' END AS PerformanceRating FROM Employees;","CREATE TABLE Employees ( EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, Department TEXT, Salary REAL, HireDate TEXT, PerformanceScore INTEGER );",This query maps numeric 'PerformanceScore' values (1-5) to descriptive 'PerformanceRating' strings ('Poor' to 'Excellent') using a simple CASE statement for each employee.
"List movies and classify their release year into 'Classic' (before 1980), 'Retro' (1980-1999), or 'Modern' (2000 and later).","SELECT MovieID, Title, ReleaseYear, CASE WHEN ReleaseYear < 1980 THEN 'Classic' WHEN ReleaseYear BETWEEN 1980 AND 1999 THEN 'Retro' ELSE 'Modern' END AS Era FROM Movies;","CREATE TABLE Movies ( MovieID INTEGER PRIMARY KEY, Title TEXT NOT NULL, Genre TEXT, ReleaseYear INTEGER, Rating REAL, DurationMinutes INTEGER );","This query selects movie details and assigns an 'Era' ('Classic', 'Retro', 'Modern') based on the 'ReleaseYear' using a CASE expression."
"Show product names and whether they need reordering ('Yes' if stock is below 20, 'No' otherwise).","SELECT ProductName, StockQuantity, CASE WHEN StockQuantity < 20 THEN 'Yes' ELSE 'No' END AS NeedsReorder FROM Products;","CREATE TABLE Products ( ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Category TEXT, Price REAL, StockQuantity INTEGER, LastRestockDate TEXT );","This query lists product names and their stock quantities, adding a 'NeedsReorder' flag ('Yes' or 'No') based on whether the 'StockQuantity' is less than 20, using a simple CASE expression."
"Count sales by quarter for the year 2023, labeling each quarter Q1, Q2, Q3, Q4.","SELECT CASE WHEN CAST(SUBSTR(SaleDate, 6, 2) AS INTEGER) BETWEEN 1 AND 3 THEN 'Q1' WHEN CAST(SUBSTR(SaleDate, 6, 2) AS INTEGER) BETWEEN 4 AND 6 THEN 'Q2' WHEN CAST(SUBSTR(SaleDate, 6, 2) AS INTEGER) BETWEEN 7 AND 9 THEN 'Q3' WHEN CAST(SUBSTR(SaleDate, 6, 2) AS INTEGER) BETWEEN 10 AND 12 THEN 'Q4' END AS SalesQuarter, COUNT(SaleID) AS TotalSales FROM Sales WHERE SUBSTR(SaleDate, 1, 4) = '2023' GROUP BY SalesQuarter ORDER BY SalesQuarter;","CREATE TABLE Sales ( SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT, QuantitySold INTEGER, UnitPrice REAL, DiscountApplied REAL );","This query counts sales for the year 2023, grouping them into quarters (Q1-Q4) using a CASE statement on the month part of 'SaleDate'. The quarter labels are derived using the CASE expression."
"Display tasks, showing 'Overdue' if the due date is in the past and status is not 'Completed', 'Due Soon' if due within 7 days, and 'On Track' otherwise.","SELECT TaskID, TaskName, DueDate, Status, CASE WHEN Status != 'Completed' AND julianday(DueDate) < julianday('now') THEN 'Overdue' WHEN Status != 'Completed' AND julianday(DueDate) BETWEEN julianday('now') AND julianday('now', '+7 days') THEN 'Due Soon' ELSE 'On Track' END AS TaskStatus FROM Tasks;","CREATE TABLE Tasks ( TaskID INTEGER PRIMARY KEY, TaskName TEXT NOT NULL, Status TEXT, Priority INTEGER, AssignedTo TEXT, DueDate TEXT );","This query categorizes tasks based on their 'DueDate' and 'Status' using a complex CASE statement. It identifies tasks as 'Overdue', 'Due Soon', or 'On Track' relative to the current date."
"List products and their adjusted price. If a product is in the 'Electronics' category, reduce its price by 10%. Otherwise, keep the original price.","SELECT ProductID, ProductName, Category, Price, CASE WHEN Category = 'Electronics' THEN Price * 0.90 ELSE Price END AS AdjustedPrice FROM Products;","CREATE TABLE Products ( ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Category TEXT, Price REAL, StockQuantity INTEGER, LastRestockDate TEXT );","This query calculates an 'AdjustedPrice' for products. If the 'Category' is 'Electronics', the price is reduced by 10%; otherwise, the original 'Price' is retained, using a CASE expression."
"Show all customer names. If their 'Email' is NULL, display 'Email Not Provided'.","SELECT CustomerID, CustomerName, CASE WHEN Email IS NULL THEN 'Email Not Provided' ELSE Email END AS ContactEmail FROM Customers;","CREATE TABLE Customers ( CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL, Email TEXT, MembershipType TEXT, JoinDate TEXT );","This query retrieves customer names and their emails. If an 'Email' is NULL, it replaces the NULL value with 'Email Not Provided' using a CASE statement."
"For each employee, determine if they are 'New Hire' (hired in the last year), 'Veteran' (hired more than 5 years ago), or 'Established' (hired between 1 and 5 years ago).","SELECT EmployeeID, FirstName, LastName, HireDate, CASE WHEN julianday('now') - julianday(HireDate) < 365 THEN 'New Hire' WHEN julianday('now') - julianday(HireDate) > 365 * 5 THEN 'Veteran' ELSE 'Established' END AS EmployeeTenure FROM Employees;","CREATE TABLE Employees ( EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, Department TEXT, Salary REAL, HireDate TEXT, PerformanceScore INTEGER );","This query calculates the 'EmployeeTenure' based on the 'HireDate' relative to the current date. It categorizes employees as 'New Hire', 'Veteran', or 'Established' using a CASE statement and Julian day calculations."
"List project names and their status, converting 'In Progress' to 'Active' and leaving other statuses as they are.","SELECT ProjectID, ProjectName, Status, CASE WHEN Status = 'In Progress' THEN 'Active' ELSE Status END AS DisplayStatus FROM Projects;","CREATE TABLE Projects ( ProjectID INTEGER PRIMARY KEY, ProjectName TEXT NOT NULL, Status TEXT, Budget REAL, StartDate TEXT, EndDate TEXT );","This query selects project details and transforms the 'Status' for display. If the original status is 'In Progress', it is changed to 'Active'; otherwise, the original 'Status' is kept, using a CASE expression."
"Find the average salary for each department, but if a department's average salary is below 50000, label it 'Underperforming Department'.","SELECT Department, AVG(Salary) AS AverageSalary, CASE WHEN AVG(Salary) < 50000 THEN 'Underperforming Department' ELSE 'Standard Department' END AS DepartmentPerformance FROM Employees GROUP BY Department;","CREATE TABLE Employees ( EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, Department TEXT, Salary REAL, HireDate TEXT, PerformanceScore INTEGER );","This query calculates the average salary per 'Department' and then uses a CASE expression to label departments as 'Underperforming Department' if their average salary is below 50000, otherwise 'Standard Department'."
Count how many products fall into 'High Value' (price >= 100) and 'Standard Value' (price < 100) categories.,"SELECT CASE WHEN Price >= 100 THEN 'High Value' ELSE 'Standard Value' END AS ValueCategory, COUNT(ProductID) AS NumberOfProducts FROM Products GROUP BY ValueCategory;","CREATE TABLE Products ( ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Category TEXT, Price REAL, StockQuantity INTEGER, LastRestockDate TEXT );","This query counts products based on their 'Price', categorizing them into 'High Value' (price >= 100) or 'Standard Value' (price < 100) using a CASE expression in the GROUP BY clause."
"Display movie titles and their 'Audience Rating' as 'Family Friendly' if rating is 8 or above, 'General Audience' if rating is 5-7.9, and 'Adults Only' if below 5.","SELECT MovieID, Title, Rating, CASE WHEN Rating >= 8.0 THEN 'Family Friendly' WHEN Rating BETWEEN 5.0 AND 7.9 THEN 'General Audience' ELSE 'Adults Only' END AS AudienceRating FROM Movies;","CREATE TABLE Movies ( MovieID INTEGER PRIMARY KEY, Title TEXT NOT NULL, Genre TEXT, ReleaseYear INTEGER, Rating REAL, DurationMinutes INTEGER );","This query retrieves movie titles and assigns an 'AudienceRating' based on the 'Rating' using a CASE expression, categorizing them into 'Family Friendly', 'General Audience', or 'Adults Only'."
"Show events and a 'Seasonal Event' flag: 'Yes' if in December, January, or February; 'No' otherwise.","SELECT EventID, EventName, EventDate, CASE WHEN CAST(SUBSTR(EventDate, 6, 2) AS INTEGER) IN (12, 1, 2) THEN 'Yes' ELSE 'No' END AS IsSeasonalEvent FROM Events;","CREATE TABLE Events ( EventID INTEGER PRIMARY KEY, EventName TEXT NOT NULL, EventDate TEXT, Location TEXT, AttendeeCount INTEGER );","This query selects event details and adds an 'IsSeasonalEvent' flag. It uses a CASE expression to check if the event month is December, January, or February, marking it 'Yes' if true, 'No' otherwise."
"List students and their academic standing based on grades: 'Excellent' for 'A', 'Good' for 'B', 'Pass' for 'C', and 'Fail' for any other grade.","SELECT StudentID, StudentName, Grade, CASE Grade WHEN 'A' THEN 'Excellent' WHEN 'B' THEN 'Good' WHEN 'C' THEN 'Pass' ELSE 'Fail' END AS AcademicStanding FROM Students;","CREATE TABLE Students ( StudentID INTEGER PRIMARY KEY, StudentName TEXT NOT NULL, CourseID INTEGER, Grade TEXT, EnrollmentDate TEXT );","This query retrieves student information and assigns an 'AcademicStanding' based on their 'Grade' using a simple CASE statement, mapping letter grades to descriptive terms."
Calculate the total budget spent on 'Active' projects and 'Completed' projects separately.,"SELECT SUM(CASE WHEN Status = 'Active' THEN Budget ELSE 0 END) AS ActiveProjectsBudget, SUM(CASE WHEN Status = 'Completed' THEN Budget ELSE 0 END) AS CompletedProjectsBudget FROM Projects;","CREATE TABLE Projects ( ProjectID INTEGER PRIMARY KEY, ProjectName TEXT NOT NULL, Status TEXT, Budget REAL, StartDate TEXT, EndDate TEXT );",This query calculates the sum of 'Budget' for 'Active' projects and 'Completed' projects independently using CASE expressions within SUM aggregate functions. This allows for conditional aggregation.
"Order employees by their performance score, with 'Excellent' (score 5) employees first, then 'Good' (score 4), then 'Average' (score 3), and finally others.","SELECT EmployeeID, FirstName, LastName, PerformanceScore FROM Employees ORDER BY CASE PerformanceScore WHEN 5 THEN 1 WHEN 4 THEN 2 WHEN 3 THEN 3 ELSE 4 END, LastName;","CREATE TABLE Employees ( EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, Department TEXT, Salary REAL, HireDate TEXT, PerformanceScore INTEGER );","This query orders employees based on a custom sort order derived from their 'PerformanceScore' using a CASE expression in the ORDER BY clause. Employees with score 5 come first, then 4, then 3, then others, followed by last name for ties."
"For each product, show its current 'Status': 'Available' if StockQuantity > 0, 'Out of Stock' if StockQuantity = 0, and 'Discontinued' if StockQuantity is NULL or negative (error state).","SELECT ProductID, ProductName, StockQuantity, CASE WHEN StockQuantity > 0 THEN 'Available' WHEN StockQuantity = 0 THEN 'Out of Stock' ELSE 'Discontinued' END AS ProductStatus FROM Products;","CREATE TABLE Products ( ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Category TEXT, Price REAL, StockQuantity INTEGER, LastRestockDate TEXT );","This query retrieves product details and assigns a 'ProductStatus' based on 'StockQuantity'. It uses a CASE statement to label products as 'Available', 'Out of Stock', or 'Discontinued' (for null/negative quantities)."
"List order IDs and their 'Delivery Status': 'Shipped' if status is 'Completed' or 'Shipped', 'Pending' if 'Processing', and 'Problem' for any other status.","SELECT OrderID, Status, CASE WHEN Status IN ('Completed', 'Shipped') THEN 'Shipped' WHEN Status = 'Processing' THEN 'Pending' ELSE 'Problem' END AS DeliveryStatus FROM Orders;","CREATE TABLE Orders ( OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, Status TEXT );","This query retrieves order IDs and their original statuses, then transforms them into a simplified 'DeliveryStatus' ('Shipped', 'Pending', 'Problem') using a CASE expression."
"Count products by their price range: 'Cheap' (0-20), 'Moderate' (21-100), 'Expensive' (101-500), 'Premium' (>500).","SELECT CASE WHEN Price BETWEEN 0 AND 20 THEN 'Cheap' WHEN Price BETWEEN 21 AND 100 THEN 'Moderate' WHEN Price BETWEEN 101 AND 500 THEN 'Expensive' WHEN Price > 500 THEN 'Premium' ELSE 'Unknown' END AS PriceRange, COUNT(ProductID) AS NumberOfProducts FROM Products GROUP BY PriceRange ORDER BY NumberOfProducts DESC;","CREATE TABLE Products ( ProductID INTEGER PRIMARY KEY, ProductName TEXT NOT NULL, Category TEXT, Price REAL, StockQuantity INTEGER, LastRestockDate TEXT );","This query counts products by custom 'PriceRange' categories ('Cheap', 'Moderate', 'Expensive', 'Premium') defined using a CASE expression based on the product's 'Price'. The results are grouped and ordered by these ranges."
"Display movie titles. If a movie's 'DurationMinutes' is NULL, show 'Duration Unknown'. Otherwise, display the duration.","SELECT MovieID, Title, CASE WHEN DurationMinutes IS NULL THEN 'Duration Unknown' ELSE CAST(DurationMinutes AS TEXT) || ' mins' END AS MovieDuration FROM Movies;","CREATE TABLE Movies ( MovieID INTEGER PRIMARY KEY, Title TEXT NOT NULL, Genre TEXT, ReleaseYear INTEGER, Rating REAL, DurationMinutes INTEGER );","This query selects movie titles and displays their 'DurationMinutes'. If 'DurationMinutes' is NULL, it shows 'Duration Unknown'; otherwise, it displays the duration with ' mins' appended, using a CASE statement."
"List employees and their 'Department Classification': 'Core' for 'HR', 'IT', 'Finance'; 'Support' for 'Marketing', 'Sales'; and 'Other' for any other department.","SELECT EmployeeID, FirstName, LastName, Department, CASE WHEN Department IN ('HR', 'IT', 'Finance') THEN 'Core' WHEN Department IN ('Marketing', 'Sales') THEN 'Support' ELSE 'Other' END AS DepartmentClassification FROM Employees;","CREATE TABLE Employees ( EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, Department TEXT, Salary REAL, HireDate TEXT, PerformanceScore INTEGER );","This query categorizes employee 'Department' into 'Core', 'Support', or 'Other' using a CASE expression based on a list of departments."
"Calculate the total sales amount, applying a 5% extra discount if the 'QuantitySold' is greater than 10.","SELECT SaleID, ProductID, QuantitySold, UnitPrice, DiscountApplied, (QuantitySold * UnitPrice) * (1 - DiscountApplied) * CASE WHEN QuantitySold > 10 THEN 0.95 ELSE 1.0 END AS FinalSaleAmount FROM Sales;","CREATE TABLE Sales ( SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT, QuantitySold INTEGER, UnitPrice REAL, DiscountApplied REAL );","This query calculates the 'FinalSaleAmount' for each sale. It applies the 'DiscountApplied' and then conditionally applies an additional 5% discount if 'QuantitySold' is greater than 10, using a CASE expression within the calculation."
"For each task, display its 'Due Status' where 'Completed' tasks are always 'Done', 'Overdue' if past due date, and 'Pending' otherwise.","SELECT TaskID, TaskName, DueDate, Status, CASE WHEN Status = 'Completed' THEN 'Done' WHEN julianday(DueDate) < julianday('now') THEN 'Overdue' ELSE 'Pending' END AS DueStatus FROM Tasks;","CREATE TABLE Tasks ( TaskID INTEGER PRIMARY KEY, TaskName TEXT NOT NULL, Status TEXT, Priority INTEGER, AssignedTo TEXT, DueDate TEXT );","This query assigns a 'DueStatus' to each task. It prioritizes 'Done' for 'Completed' tasks. For uncompleted tasks, it checks if they are 'Overdue' (past due date) or 'Pending', using a CASE expression."
"Show employee names and their 'Seniority Level': 'Junior' (less than 1 year), 'Mid' (1-5 years), 'Senior' (5-10 years), 'Executive' (more than 10 years).","SELECT EmployeeID, FirstName, LastName, HireDate, CASE WHEN (julianday('now') - julianday(HireDate)) / 365.25 < 1 THEN 'Junior' WHEN (julianday('now') - julianday(HireDate)) / 365.25 < 5 THEN 'Mid' WHEN (julianday('now') - julianday(HireDate)) / 365.25 < 10 THEN 'Senior' ELSE 'Executive' END AS SeniorityLevel FROM Employees;","CREATE TABLE Employees ( EmployeeID INTEGER PRIMARY KEY, FirstName TEXT NOT NULL, LastName TEXT NOT NULL, Department TEXT, Salary REAL, HireDate TEXT, PerformanceScore INTEGER );","This query calculates 'EmployeeTenure' in years from 'HireDate' and categorizes employees into 'Junior', 'Mid', 'Senior', or 'Executive' seniority levels using a multi-conditional CASE statement."
"List all customers. If they have a 'MembershipType', display it; otherwise, indicate 'No Membership'.","SELECT CustomerID, CustomerName, CASE WHEN MembershipType IS NOT NULL THEN MembershipType ELSE 'No Membership' END AS CurrentMembership FROM Customers;","CREATE TABLE Customers ( CustomerID INTEGER PRIMARY KEY, CustomerName TEXT NOT NULL, Email TEXT, MembershipType TEXT, JoinDate TEXT );","This query retrieves customer names and their membership types. If 'MembershipType' is present, it's displayed; otherwise, 'No Membership' is shown, using a CASE statement for NULL handling."
"List the names of all customers who have placed an order, along with their order IDs.","SELECT C.first_name, C.last_name, O.order_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Retrieves customer names and their corresponding order IDs by joining the Customers and Orders tables.
"Find all orders placed in January 2023 by customers from 'USA', showing customer names and order amounts.","SELECT C.first_name, C.last_name, O.order_id, O.total_amount FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE C.country = 'USA' AND O.order_date LIKE '2023-01%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Selects customer names and order details for orders placed by US customers in January 2023.
What is the total revenue generated from 'Laptop' products?,SELECT SUM(OI.quantity * OI.unit_price) FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name LIKE '%Laptop%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);",Calculates the total revenue specifically from products whose names contain 'Laptop' by joining Order_Items with Products.
"For each product category, what is the average price of products ordered?","SELECT P.category, AVG(OI.unit_price) FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id GROUP BY P.category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);",Computes the average unit price for products within each category based on actual order items.
List all customers and their corresponding order IDs. Include customers who haven't placed any orders.,"SELECT C.first_name, C.last_name, O.order_id FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","Retrieves all customers and their order IDs, including customers who have no orders (order_id will be NULL for them)."
Find the names of products that have been part of orders placed in 2023.,SELECT P.product_name FROM Products P WHERE P.product_id IN (SELECT OI.product_id FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id WHERE O.order_date LIKE '2023%');,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Selects product names for products that appear in order items linked to orders placed in the year 2023.
Show the departments that have more than 5 employees.,SELECT D.department_name FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name HAVING COUNT(E.employee_id) > 5;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, manager_id INTEGER);",Lists the names of departments that have more than five employees.
Find the names of customers who have placed an order with a total amount greater than the average total amount of all orders.,"SELECT C.first_name, C.last_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.total_amount > (SELECT AVG(total_amount) FROM Orders);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Retrieves the names of customers whose individual order total is higher than the average total amount of all orders.
List the names of employees hired after 2020 and their department names.,"SELECT E.first_name, E.last_name, D.department_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE E.hire_date >= '2021-01-01';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Retrieves the first name, last name, and department name for employees hired on or after January 1, 2021."
List each employee along with the name of their manager.,"SELECT E.first_name AS EmployeeFirstName, E.last_name AS EmployeeLastName, M.first_name AS ManagerFirstName, M.last_name AS ManagerLastName FROM Employees E LEFT JOIN Employees M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, manager_id INTEGER);",Joins the Employees table with itself to find each employee's manager.
Find the names of products that have never been ordered.,SELECT P.product_name FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.product_id = P.product_id);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","Selects the names of products that do not have any corresponding entries in the Order_Items table, indicating they've never been ordered."
Combine a list of customer emails and employee emails.,SELECT email FROM Customers UNION ALL SELECT email FROM Employees;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, manager_id INTEGER);","Merges the email addresses from the Customers table and the Employees table into a single list, allowing duplicates."
"For each customer, list their name and their most recent order status, categorized as 'Completed' or 'Pending/Cancelled'.","SELECT C.first_name, C.last_name, CASE WHEN O.status = 'Completed' THEN 'Completed' ELSE 'Pending/Cancelled' END AS StatusCategory FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_date = (SELECT MAX(order_date) FROM Orders WHERE customer_id = C.customer_id);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","For each customer, shows their name and the status category ('Completed' or 'Pending/Cancelled') of their most recent order."
List all products supplied by 'Acme Corp'.,SELECT P.product_name FROM Products P JOIN Product_Suppliers PS ON P.product_id = PS.product_id JOIN Suppliers S ON PS.supplier_id = S.supplier_id WHERE S.supplier_name = 'Acme Corp';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Product_Suppliers (product_id INTEGER, supplier_id INTEGER, PRIMARY KEY (product_id, supplier_id)); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, contact_email TEXT, phone TEXT);",Retrieves the names of products that are supplied by 'Acme Corp' by joining three tables.
Find customers who have registered but have not placed any orders yet.,"SELECT C.first_name, C.last_name FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Identifies customers who are in the system but have no associated orders.
Which departments currently have no employees assigned to them?,SELECT D.department_name FROM Departments D LEFT JOIN Employees E ON D.department_id = E.department_id WHERE E.employee_id IS NULL;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, manager_id INTEGER);",Lists department names that do not have any employees currently assigned.
What is the total quantity sold for each product? Show product name and total quantity.,"SELECT P.product_name, SUM(OI.quantity) AS TotalQuantitySold FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY P.product_name ORDER BY TotalQuantitySold DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","Calculates the total quantity sold for each product and displays the product name along with the sum, ordered by the quantity."
List the unique names of customers who have purchased 'Product X'.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Product X';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",Finds the unique first and last names of customers who have bought 'Product X' by joining four tables.
What is the average order value for each customer?,"SELECT C.first_name, C.last_name, AVG(O.total_amount) AS AverageOrderValue FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.first_name, C.last_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Computes the average total amount of orders for each customer.
Which product category has generated the highest total revenue?,"SELECT P.category, SUM(OI.quantity * OI.unit_price) AS TotalCategoryRevenue FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id GROUP BY P.category ORDER BY TotalCategoryRevenue DESC LIMIT 1;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);",Determines the product category that has contributed the most to total revenue.
List all employees along with the location of their department.,"SELECT E.first_name, E.last_name, D.location FROM Employees E JOIN Departments D ON E.department_id = D.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Retrieves the first name, last name, and department location for all employees."
Show the customer names and their order IDs for orders placed by customers residing in 'New York'.,"SELECT C.first_name, C.last_name, O.order_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE C.city = 'New York';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Lists the names of customers from 'New York' and their associated order IDs.
What is the total number of items sold for each product category?,"SELECT P.category, SUM(OI.quantity) AS TotalItemsSold FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id GROUP BY P.category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","Calculates the sum of quantities for all items sold, grouped by their respective product categories."
Find orders that include products from at least two different suppliers.,SELECT O.order_id FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Product_Suppliers PS ON OI.product_id = PS.product_id GROUP BY O.order_id HAVING COUNT(DISTINCT PS.supplier_id) >= 2;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Product_Suppliers (product_id INTEGER, supplier_id INTEGER, PRIMARY KEY (product_id, supplier_id));",Identifies order IDs where items from that order are supplied by two or more distinct suppliers.
"List the names of employees who are managers (i.e., they have employees reporting to them).","SELECT DISTINCT M.first_name, M.last_name FROM Employees E JOIN Employees M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, manager_id INTEGER);",Selects the unique names of employees who appear as managers for other employees.
How many orders did each customer place in the year 2022?,"SELECT C.first_name, C.last_name, COUNT(O.order_id) AS NumberOfOrders FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_date LIKE '2022%' GROUP BY C.customer_id, C.first_name, C.last_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Counts the total number of orders placed by each customer specifically during the year 2022.
Find products that are currently out of stock (stock_quantity = 0) but have been included in at least one order.,SELECT P.product_name FROM Products P WHERE P.stock_quantity = 0 AND EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.product_id = P.product_id);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","Identifies products that have a stock quantity of zero but have records in the order items, meaning they were once sold."
"For each customer, what is the date of their very first order?","SELECT C.first_name, C.last_name, MIN(O.order_date) AS FirstOrderDate FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.first_name, C.last_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Retrieves the earliest order date for each customer.
Find customers whose city of residence matches the location of any department.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers C JOIN Departments D ON C.city = D.location;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",Lists unique customer names whose registered city is the same as any department's location.
What is the average unit price of products ordered by customers from 'Canada'?,SELECT AVG(OI.unit_price) FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id WHERE C.country = 'Canada';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);",Calculates the average unit price of all items purchased by customers from 'Canada'.
"Retrieve the first name, last name, and email address of all employees.","SELECT first_name, last_name, email FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL);","This query selects the 'first_name', 'last_name', and 'email' columns from the 'Employees' table for all rows."
Show all columns for products that are currently in stock.,SELECT * FROM Products WHERE stock_quantity > 0;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);",This query retrieves all columns for products from the 'Products' table where the 'stock_quantity' is greater than 0.
"List the customer ID and their full name, aliasing the full name as 'CustomerFullName'.","SELECT customer_id, first_name || ' ' || last_name AS CustomerFullName FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone TEXT);",This query selects the 'customer_id' and concatenates 'first_name' and 'last_name' into a single column named 'CustomerFullName' from the 'Customers' table.
"Get the order ID and the total amount of each order, naming the total amount 'OrderTotal'.","SELECT order_id, total_amount AS OrderTotal FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects the 'order_id' and renames 'total_amount' to 'OrderTotal' from the 'Orders' table.
"Display the book title and publication year, calling the publication year simply 'Year'.","SELECT title, publication_year Year FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_year INTEGER, price REAL, genre TEXT);",This query retrieves the 'title' and renames 'publication_year' to 'Year' from the 'Books' table.
Fetch the student's name as 'StudentName' and their major from the 'Students' table.,"SELECT student_name AS StudentName, major FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT, graduation_year INTEGER, gpa REAL);","This query selects the 'student_name' column, aliasing it as 'StudentName', and the 'major' column from the 'Students' table."
"Find the movie title and its release year, using 'Released' as the alias for release year.","SELECT title, release_year AS Released FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, duration_minutes INTEGER);",This query selects the 'title' and renames 'release_year' to 'Released' from the 'Movies' table.
"List the department ID and its name, aliasing department name as 'DeptName'.","SELECT department_id, department_name AS DeptName FROM Departments;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",This query selects the 'department_id' and renames 'department_name' to 'DeptName' from the 'Departments' table.
"Get the contact name and their phone number, where the phone number is aliased 'ContactPhone'.","SELECT contact_name, phone_number AS ContactPhone FROM Suppliers;","CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, contact_name TEXT, phone_number TEXT, address TEXT);",This query selects 'contact_name' and renames 'phone_number' to 'ContactPhone' from the 'Suppliers' table.
"Show the project name and its budget, aliasing budget as 'ProjectBudget'.","SELECT project_name, budget AS ProjectBudget FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, status TEXT);",This query selects 'project_name' and renames 'budget' to 'ProjectBudget' from the 'Projects' table.
"Retrieve the article ID and its publication date, aliasing the date as 'PubDate'.","SELECT article_id, publication_date PubDate FROM Articles;","CREATE TABLE Articles (article_id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_date TEXT, content TEXT);",This query selects 'article_id' and renames 'publication_date' to 'PubDate' from the 'Articles' table.
"List the employee ID and their salary, and also calculate their annual bonus (salary * 0.10) aliased as 'AnnualBonus'.","SELECT employee_id, salary, salary * 0.10 AS AnnualBonus FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL);","This query selects 'employee_id', 'salary', and calculates a new column 'AnnualBonus' by multiplying salary by 0.10 from the 'Employees' table."
"Show product name, price, and the discounted price (price * 0.9) as 'DiscountedPrice' for all products.","SELECT product_name, price, price * 0.9 AS DiscountedPrice FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query selects 'product_name', 'price', and calculates a new column 'DiscountedPrice' by applying a 10% discount to the price from the 'Products' table."
"Get the order ID, order date, and total amount, showing 'order_date' as 'OrderPlacedOn'.","SELECT order_id, order_date AS OrderPlacedOn, total_amount FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects 'order_id', renames 'order_date' to 'OrderPlacedOn', and selects 'total_amount' from the 'Orders' table."
"Retrieve the customer ID and their email, ensuring the email column is named 'CustomerEmail'.","SELECT customer_id, email AS CustomerEmail FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone TEXT);",This query selects 'customer_id' and renames 'email' to 'CustomerEmail' from the 'Customers' table.
"For each employee, show their full name (first and last name concatenated) as 'EmployeeFullName' and their hire date.","SELECT first_name || ' ' || last_name AS EmployeeFullName, hire_date FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL);",This query concatenates 'first_name' and 'last_name' into 'EmployeeFullName' and selects 'hire_date' from the 'Employees' table.
"List product ID, product name, and the formatted price 'PriceUSD' with a dollar sign prefix.","SELECT product_id, product_name, '$' || price AS PriceUSD FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query selects 'product_id', 'product_name', and formats the 'price' with a '$' prefix, aliasing it as 'PriceUSD' from the 'Products' table."
"Display student name and their GPA, aliasing GPA as 'AcademicPerformance'.","SELECT student_name, gpa AS AcademicPerformance FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT, graduation_year INTEGER, gpa REAL);",This query selects 'student_name' and renames 'gpa' to 'AcademicPerformance' from the 'Students' table.
"Get the movie title and its duration in hours, aliasing it 'DurationHours'.","SELECT title, duration_minutes / 60.0 AS DurationHours FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, duration_minutes INTEGER);",This query selects 'title' and calculates 'duration_minutes' divided by 60.0 to get 'DurationHours' from the 'Movies' table.
"Show the book ID, title, and the length of the title string, aliased as 'TitleLength'.","SELECT book_id, title, LENGTH(title) AS TitleLength FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_year INTEGER, price REAL, genre TEXT);","This query selects 'book_id', 'title', and calculates the length of the 'title' string, aliasing it as 'TitleLength', from the 'Books' table."
"Retrieve employee ID, salary, and the date 30 days after their hire date, aliased as 'ProbationEndDate'.","SELECT employee_id, salary, DATE(hire_date, '+30 days') AS ProbationEndDate FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL);","This query selects 'employee_id', 'salary', and calculates a date 30 days after 'hire_date', aliasing it as 'ProbationEndDate', from the 'Employees' table."
"List all order details including product name and quantity ordered, and the calculated line total (price * quantity) as 'LineTotal'.","SELECT od.order_id, p.product_name, od.quantity, (p.price * od.quantity) AS LineTotal FROM OrderDetails od JOIN Products p ON od.product_id = p.product_id;","CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query joins 'OrderDetails' with 'Products' to select order ID, product name, quantity, and calculates 'LineTotal' by multiplying product price and quantity."
Show the first name of employees as 'GivenName' and their last name as 'Surname'.,"SELECT first_name AS GivenName, last_name AS Surname FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL);",This query selects 'first_name' aliased as 'GivenName' and 'last_name' aliased as 'Surname' from the 'Employees' table.
"For each book, show its title and author, and the price rounded to two decimal places, aliased as 'RoundedPrice'.","SELECT title, author, ROUND(price, 2) AS RoundedPrice FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_year INTEGER, price REAL, genre TEXT);","This query selects 'title', 'author', and rounds the 'price' to two decimal places, aliasing it as 'RoundedPrice', from the 'Books' table."
Get the employee's ID and the current date as 'ReportDate'.,"SELECT employee_id, DATE('now') AS ReportDate FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL);","This query selects 'employee_id' and the current date, aliasing it as 'ReportDate', for all employees."
"List all unique categories of products, aliasing the column as 'ProductCategory'.",SELECT DISTINCT category AS ProductCategory FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","This query selects unique values from the 'category' column, aliasing it as 'ProductCategory', from the 'Products' table."
"Show the project name, and combine its start and end dates into a single string 'ProjectPeriod'.","SELECT project_name, start_date || ' to ' || end_date AS ProjectPeriod FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, status TEXT);","This query selects 'project_name' and concatenates 'start_date' and 'end_date' with ' to ' in between, aliasing it as 'ProjectPeriod', from the 'Projects' table."
"Retrieve the movie title and the director's name, aliasing the director as 'Filmmaker'.","SELECT title, director AS Filmmaker FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, duration_minutes INTEGER);",This query selects 'title' and renames 'director' to 'Filmmaker' from the 'Movies' table.
"Get the supplier ID and their address, showing the address as 'SupplierLocation'.","SELECT supplier_id, address AS SupplierLocation FROM Suppliers;","CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, contact_name TEXT, phone_number TEXT, address TEXT);",This query selects 'supplier_id' and renames 'address' to 'SupplierLocation' from the 'Suppliers' table.
"For each order, display its ID, customer ID, and the difference in days between the order date and the current date, aliased as 'DaysSinceOrder'.","SELECT order_id, customer_id, JULIANDAY('now') - JULIANDAY(order_date) AS DaysSinceOrder FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects 'order_id', 'customer_id', and calculates the difference in days between the current date and 'order_date', aliasing it as 'DaysSinceOrder', from the 'Orders' table."
Find all products that are in the 'Electronics' category and have a stock quantity less than 50.,"SELECT product_name, category, stock_quantity FROM Products WHERE category = 'Electronics' AND stock_quantity < 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated DATE);","This query selects the name, category, and stock quantity of products that belong to the 'Electronics' category and have fewer than 50 items in stock, using an AND operator to combine two conditions."
List all customers from 'USA' or 'Canada'.,"SELECT customer_id, customer_name, country FROM Customers WHERE country = 'USA' OR country = 'Canada';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, country TEXT, registration_date DATE);","This query retrieves the ID, name, and country of customers who are either from the 'USA' or 'Canada', using an OR operator to fulfill at least one of the conditions."
Show orders that are not 'Shipped' and have a total amount greater than 100.,"SELECT order_id, customer_id, total_amount, status FROM Orders WHERE NOT status = 'Shipped' AND total_amount > 100;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);",This query fetches orders that are not in 'Shipped' status and have a total amount exceeding 100. It uses NOT to negate the first condition and AND to combine with the second.
Get employees who are in 'Sales' or 'Marketing' departments and earn more than 60000.,"SELECT employee_id, employee_name, department, salary FROM Employees WHERE (department = 'Sales' OR department = 'Marketing') AND salary > 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);",This query lists employees who are part of either the 'Sales' or 'Marketing' departments AND have a salary greater than 60000. Parentheses ensure the department condition is evaluated first.
Find movies released between the years 2010 and 2020 (inclusive) and have a rating above 7.0.,"SELECT movie_id, title, release_year, rating FROM Movies WHERE release_year BETWEEN 2010 AND 2020 AND rating > 7.0;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, genre TEXT, release_year INTEGER, rating REAL, duration_minutes INTEGER);",This query retrieves movies released between 2010 and 2020 (inclusive) and having a rating greater than 7.0. It uses the BETWEEN operator for the year range and AND to combine with the rating condition.
"List books whose genre is either 'Fantasy', 'Science Fiction', or 'Mystery' and have more than 5 copies available.","SELECT book_id, title, author, genre, copies_available FROM Books WHERE genre IN ('Fantasy', 'Science Fiction', 'Mystery') AND copies_available > 5;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, copies_available INTEGER);","This query selects books from the 'Fantasy', 'Science Fiction', or 'Mystery' genres that also have more than 5 copies available. It uses the IN operator for multiple genre choices and AND for the copies condition."
Find products whose names start with 'Smart' or end with 'Phone'.,"SELECT product_name, category FROM Products WHERE product_name LIKE 'Smart%' OR product_name LIKE '%Phone';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated DATE);",This query identifies products whose names begin with 'Smart' or end with 'Phone' using the LIKE operator with wildcards and an OR condition.
Retrieve employees who do not have a department assigned (NULL).,"SELECT employee_id, employee_name FROM Employees WHERE department IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);","This query lists employees for whom the 'department' field is explicitly NULL, using the IS NULL operator."
"Get orders placed after January 1, 2023, with a total amount over 50.","SELECT order_id, order_date, total_amount FROM Orders WHERE order_date > '2023-01-01' AND total_amount > 50;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);","This query selects orders placed after January 1, 2023, that also have a total amount greater than 50, combining date and numeric conditions with AND."
Show all flights that are scheduled to depart from 'JFK' or 'LAX' and are not 'Cancelled'.,"SELECT flight_id, origin, destination, status FROM Flights WHERE (origin = 'JFK' OR origin = 'LAX') AND NOT status = 'Cancelled';","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, origin TEXT, destination TEXT, departure_time DATETIME, arrival_time DATETIME, capacity INTEGER, status TEXT);","This query lists flights originating from 'JFK' or 'LAX' that are not in a 'Cancelled' status. Parentheses group the origin conditions, and NOT negates the status condition."
Find customers who are not from 'Germany' and whose names do not start with 'A'.,"SELECT customer_id, customer_name, country FROM Customers WHERE NOT country = 'Germany' AND customer_name NOT LIKE 'A%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, country TEXT, registration_date DATE);","This query retrieves customers who are not from 'Germany' and whose names do not start with the letter 'A', using NOT with both equality and LIKE operators."
List products that are not in the 'Food' or 'Beverages' categories.,"SELECT product_name, category FROM Products WHERE category NOT IN ('Food', 'Beverages');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated DATE);",This query finds products that do not belong to either the 'Food' or 'Beverages' categories using the NOT IN operator.
"Get employees whose salary is between 50000 and 70000, and they were hired after 2020.","SELECT employee_name, salary, hire_date FROM Employees WHERE salary BETWEEN 50000 AND 70000 AND hire_date > '2020-12-31';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);","This query selects employees with a salary range of 50,000 to 70,000 and who were hired after the end of 2020. It uses BETWEEN for salary and a direct date comparison."
Show books published before 2000 or with less than 2 copies available.,"SELECT title, publication_year, copies_available FROM Books WHERE publication_year < 2000 OR copies_available < 2;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, copies_available INTEGER);","This query lists books published before the year 2000 or books that have fewer than 2 copies remaining, using an OR operator."
Find orders that are 'Pending' and placed by customer ID 101 or 102.,"SELECT order_id, customer_id, status FROM Orders WHERE status = 'Pending' AND (customer_id = 101 OR customer_id = 102);","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);",This query retrieves orders that are in 'Pending' status and were placed by customer ID 101 or 102. Parentheses ensure correct logical grouping for customer IDs.
List students who are majoring in 'Computer Science' or 'Engineering' and have a GPA greater than 3.5.,"SELECT student_name, major, gpa FROM Students WHERE (major = 'Computer Science' OR major = 'Engineering') AND gpa > 3.5;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, gpa REAL, enrollment_year INTEGER, is_graduated BOOLEAN);","This query selects students who are majoring in either 'Computer Science' or 'Engineering' and have a GPA above 3.5. Parentheses define the major conditions, combined with the GPA condition using AND."
Get products with a price between 10.00 and 100.00 and a stock quantity of exactly 0.,"SELECT product_name, price, stock_quantity FROM Products WHERE price BETWEEN 10.00 AND 100.00 AND stock_quantity = 0;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated DATE);",This query finds products priced between 10.00 and 100.00 that currently have no stock available. It uses BETWEEN and an equality condition combined with AND.
Show employees who were hired in 2021 and are not in the 'HR' department.,"SELECT employee_name, hire_date, department FROM Employees WHERE strftime('%Y', hire_date) = '2021' AND NOT department = 'HR';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);","This query retrieves employees hired in the year 2021 and who are not assigned to the 'HR' department. `strftime('%Y', ...)` extracts the year, and NOT negates the department condition."
"Find flights departing after 6 PM (18:00) and arriving before 10 AM (10:00) the next day, assuming single day flights.","SELECT flight_id, departure_time, arrival_time FROM Flights WHERE strftime('%H', departure_time) >= '18' AND strftime('%H', arrival_time) < '10' AND julianday(arrival_time) - julianday(departure_time) < 1;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, origin TEXT, destination TEXT, departure_time DATETIME, arrival_time DATETIME, capacity INTEGER, status TEXT);","This query selects flights departing at or after 6 PM and arriving before 10 AM on the same day (flight duration less than 24 hours). It uses `strftime('%H', ...)` for hour extraction and `julianday()` for duration check."
List movies released in the 1990s (1990-1999) or with a duration less than 90 minutes.,"SELECT title, release_year, duration_minutes FROM Movies WHERE (release_year BETWEEN 1990 AND 1999) OR duration_minutes < 90;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, genre TEXT, release_year INTEGER, rating REAL, duration_minutes INTEGER);",This query fetches movies released within the 1990s or movies that have a duration of less than 90 minutes. It uses BETWEEN for the year range and OR for the combined condition.
"Get sensor data where temperature is above 25.0 and humidity is below 60.0, but the location is not 'Basement'.","SELECT sensor_id, timestamp, temperature, humidity, location FROM SensorData WHERE temperature > 25.0 AND humidity < 60.0 AND NOT location = 'Basement';","CREATE TABLE SensorData (sensor_id INTEGER PRIMARY KEY, timestamp DATETIME, temperature REAL, humidity REAL, location TEXT);","This query selects sensor readings where the temperature is over 25.0, humidity is under 60.0, and the location is not 'Basement'. All three conditions must be true, combined by AND and NOT."
"Find products that are in 'Apparel' or 'Footwear' category, and their price is either less than 20 or greater than 100.","SELECT product_name, category, price FROM Products WHERE (category = 'Apparel' OR category = 'Footwear') AND (price < 20 OR price > 100);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated DATE);",This query retrieves products from 'Apparel' or 'Footwear' categories that have a price either below 20 or above 100. It uses nested parentheses for clarity with AND and OR operators.
List customers registered in 2022 and whose email address contains 'gmail.com' or 'outlook.com'.,"SELECT customer_name, email, registration_date FROM Customers WHERE strftime('%Y', registration_date) = '2022' AND (email LIKE '%gmail.com' OR email LIKE '%outlook.com');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, country TEXT, registration_date DATE);",This query selects customers who registered in 2022 and have an email address from either 'gmail.com' or 'outlook.com'. It combines year extraction with LIKE patterns and logical operators.
"Show orders that are 'Delivered' OR have a total amount greater than 500, but are not from customer ID 200.","SELECT order_id, customer_id, total_amount, status FROM Orders WHERE (status = 'Delivered' OR total_amount > 500) AND NOT customer_id = 200;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount REAL, status TEXT);","This query retrieves orders that are 'Delivered' or have a total amount over 500, excluding any orders placed by customer ID 200. Parentheses group the OR condition, then combined with NOT."
"Find employees who are not in 'IT' or 'Finance' departments, and their salary is not null.","SELECT employee_name, department, salary FROM Employees WHERE department NOT IN ('IT', 'Finance') AND salary IS NOT NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);",This query lists employees who are not in the 'IT' or 'Finance' departments and whose salary information is available (not null). It uses NOT IN and IS NOT NULL operators.
Get books with titles containing 'SQL' (case-insensitive) and published after 2015.,"SELECT title, publication_year FROM Books WHERE LOWER(title) LIKE '%sql%' AND publication_year > 2015;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, genre TEXT, publication_year INTEGER, copies_available INTEGER);",This query finds books whose titles contain 'SQL' (case-insensitively using LOWER) and were published after 2015. It combines a LIKE pattern with a numeric comparison.
"List students who have a GPA of 4.0 and are not yet graduated, OR have a GPA less than 2.5 and are graduated.","SELECT student_name, gpa, is_graduated FROM Students WHERE (gpa = 4.0 AND is_graduated = 0) OR (gpa < 2.5 AND is_graduated = 1);","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major TEXT, gpa REAL, enrollment_year INTEGER, is_graduated BOOLEAN);","This query selects students with a perfect 4.0 GPA who are not graduated, OR students with a GPA under 2.5 who have graduated. It uses nested AND conditions combined by an OR."
"Find movies that are of 'Action' genre and have a rating of 8.0 or higher, but their duration is less than 120 minutes.","SELECT title, genre, rating, duration_minutes FROM Movies WHERE genre = 'Action' AND rating >= 8.0 AND duration_minutes < 120;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, genre TEXT, release_year INTEGER, rating REAL, duration_minutes INTEGER);","This query retrieves 'Action' movies with a rating of 8.0 or higher, provided their duration is less than 120 minutes. All three conditions must be met using AND."
"Get products that have a stock quantity greater than 0 but less than 10, and were updated within the last 30 days.","SELECT product_name, stock_quantity, last_updated FROM Products WHERE stock_quantity > 0 AND stock_quantity < 10 AND last_updated >= date('now', '-30 days');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER, last_updated DATE);",This query selects products with low stock (between 1 and 9) that have been updated in the last 30 days. It uses multiple AND conditions and SQLite's `date()` function for date comparison.
Show sensor data collected in 'Lab A' or 'Lab B' where temperature is below 20 or above 30.,"SELECT sensor_id, timestamp, temperature, location FROM SensorData WHERE (location = 'Lab A' OR location = 'Lab B') AND (temperature < 20 OR temperature > 30);","CREATE TABLE SensorData (sensor_id INTEGER PRIMARY KEY, timestamp DATETIME, temperature REAL, humidity REAL, location TEXT);","This query finds sensor data from 'Lab A' or 'Lab B' where the temperature is either below 20 or above 30, indicating an out-of-range value. It uses nested logical operators."
Find employees whose name does NOT contain 'smith' (case-insensitive) and their salary is less than 40000 or greater than 90000.,"SELECT employee_name, salary FROM Employees WHERE LOWER(employee_name) NOT LIKE '%smith%' AND (salary < 40000 OR salary > 90000);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department TEXT, salary REAL, hire_date DATE);","This query selects employees whose names do not contain 'smith' (case-insensitively) AND their salary is outside the 40k-90k range. It combines NOT LIKE, LOWER, and an OR condition with AND."
List all orders along with the customer's name.,"SELECT O.order_id, C.customer_name, O.order_date, O.total_amount FROM Orders AS O INNER JOIN Customers AS C ON O.customer_id = C.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",Retrieves order details and the name of the customer who placed each order by joining the Orders and Customers tables on customer_id.
Show all products and their respective category names.,"SELECT P.product_name, P.price, C.category_name FROM Products AS P INNER JOIN Categories AS C ON P.category_id = C.category_id;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL UNIQUE); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER NOT NULL, price REAL NOT NULL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id));",Lists all products along with the name of the category they belong to by joining Products and Categories tables.
Find the names of all employees and the department they work in.,"SELECT E.employee_name, D.department_name FROM Employees AS E INNER JOIN Departments AS D ON E.department_id = D.department_id;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL UNIQUE, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));",Retrieves the name of each employee and the department they are assigned to by joining Employees and Departments tables.
Get the title of each book and the name of its author.,"SELECT B.title, A.author_name FROM Books AS B INNER JOIN Authors AS A ON B.author_id = A.author_id;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL UNIQUE, nationality TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER NOT NULL, publication_year INTEGER, genre TEXT, FOREIGN KEY (author_id) REFERENCES Authors(author_id));",Lists book titles along with the name of their respective authors by joining Books and Authors tables.
Display the names of students and the courses they are currently enrolled in.,"SELECT S.student_name, C.course_name FROM Students AS S INNER JOIN Enrollments AS E ON S.student_id = E.student_id INNER JOIN Courses AS C ON E.course_id = C.course_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, enrollment_date TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL UNIQUE, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT NOT NULL, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","Shows the name of each student and the names of the courses they are enrolled in by joining Students, Enrollments, and Courses tables."
List all movies released after 2000 and their directors.,"SELECT M.title, D.director_name FROM Movies AS M INNER JOIN Directors AS D ON M.director_id = D.director_id WHERE M.release_year > 2000;","CREATE TABLE Directors (director_id INTEGER PRIMARY KEY, director_name TEXT NOT NULL UNIQUE, nationality TEXT); CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director_id INTEGER NOT NULL, release_year INTEGER, genre TEXT, FOREIGN KEY (director_id) REFERENCES Directors(director_id));",Retrieves the title of movies released after the year 2000 along with their director's name by joining Movies and Directors tables.
Get all appointments scheduled for 'Dr. Smith' showing patient names.,"SELECT P.patient_name, A.appointment_date_time FROM Patients AS P INNER JOIN Appointments AS A ON P.patient_id = A.patient_id WHERE A.doctor_name = 'Dr. Smith';","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT NOT NULL, date_of_birth TEXT); CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER NOT NULL, doctor_name TEXT NOT NULL, appointment_date_time TEXT NOT NULL, FOREIGN KEY (patient_id) REFERENCES Patients(patient_id));",Lists patient names and their appointment times specifically for appointments with 'Dr. Smith' by joining Patients and Appointments tables.
Find all flights departing from 'JFK' and their airline names.,"SELECT F.flight_number, F.departure_airport, F.arrival_airport, A.airline_name FROM Flights AS F INNER JOIN Airlines AS A ON F.airline_id = A.airline_id WHERE F.departure_airport = 'JFK';","CREATE TABLE Airlines (airline_id INTEGER PRIMARY KEY, airline_name TEXT NOT NULL UNIQUE, country TEXT); CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT NOT NULL, airline_id INTEGER NOT NULL, departure_airport TEXT NOT NULL, arrival_airport TEXT NOT NULL, departure_time TEXT, FOREIGN KEY (airline_id) REFERENCES Airlines(airline_id));","Retrieves flight numbers, departure/arrival airports, and the operating airline's name for all flights originating from 'JFK' by joining Flights and Airlines."
Show the title of each post and the username of the user who created it.,"SELECT P.post_title, U.username FROM Posts AS P INNER JOIN Users AS U ON P.user_id = U.user_id;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT NOT NULL UNIQUE, email TEXT UNIQUE, registration_date TEXT); CREATE TABLE Posts (post_id INTEGER PRIMARY KEY, user_id INTEGER NOT NULL, post_title TEXT NOT NULL, post_content TEXT, creation_date TEXT, FOREIGN KEY (user_id) REFERENCES Users(user_id));",Lists post titles and the username of their respective authors by joining Posts and Users tables.
Get all events scheduled at 'City Auditorium' including their dates.,"SELECT E.event_name, E.event_date FROM Events AS E INNER JOIN Venues AS V ON E.venue_id = V.venue_id WHERE V.venue_name = 'City Auditorium';","CREATE TABLE Venues (venue_id INTEGER PRIMARY KEY, venue_name TEXT NOT NULL UNIQUE, address TEXT); CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT NOT NULL, venue_id INTEGER NOT NULL, event_date TEXT NOT NULL, ticket_price REAL, FOREIGN KEY (venue_id) REFERENCES Venues(venue_id));",Retrieves the name and date of events specifically scheduled at 'City Auditorium' by joining Events and Venues tables.
"Count how many employees are assigned to each project, showing project names.","SELECT P.project_name, COUNT(A.employee_id) AS num_employees FROM Projects AS P INNER JOIN Assignments AS A ON P.project_id = A.project_id GROUP BY P.project_name;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL UNIQUE, start_date TEXT, end_date TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Assignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER NOT NULL, employee_id INTEGER NOT NULL, assignment_date TEXT, FOREIGN KEY (project_id) REFERENCES Projects(project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id));","Counts the number of employees assigned to each project, grouping the results by project name, by joining Projects and Assignments tables."
"List all albums and their artists, ordered by artist name then album title.","SELECT A.artist_name, AL.album_title, AL.release_year FROM Artists AS A INNER JOIN Albums AS AL ON A.artist_id = AL.artist_id ORDER BY A.artist_name, AL.album_title;","CREATE TABLE Artists (artist_id INTEGER PRIMARY KEY, artist_name TEXT NOT NULL UNIQUE, genre TEXT); CREATE TABLE Albums (album_id INTEGER PRIMARY KEY, album_title TEXT NOT NULL, artist_id INTEGER NOT NULL, release_year INTEGER, FOREIGN KEY (artist_id) REFERENCES Artists(artist_id));","Retrieves all album titles and their corresponding artist names, sorted alphabetically by artist name and then by album title, by joining Artists and Albums tables."
Find all products supplied by 'Acme Corp'.,"SELECT P.product_name, P.price FROM Products AS P INNER JOIN Suppliers AS S ON P.supplier_id = S.supplier_id WHERE S.supplier_name = 'Acme Corp';","CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT NOT NULL UNIQUE, contact_person TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, supplier_id INTEGER NOT NULL, price REAL, FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id));",Lists the names and prices of products specifically supplied by 'Acme Corp' by joining Products and Suppliers tables.
Who teaches the 'Database Design' course?,SELECT I.instructor_name FROM Instructors AS I INNER JOIN Courses AS C ON I.instructor_id = C.instructor_id WHERE C.course_name = 'Database Design';,"CREATE TABLE Instructors (instructor_id INTEGER PRIMARY KEY, instructor_name TEXT NOT NULL UNIQUE, department TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL UNIQUE, instructor_id INTEGER NOT NULL, credits INTEGER, FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id));",Retrieves the name of the instructor who teaches the 'Database Design' course by joining Instructors and Courses tables.
"Get the order ID, customer name, and their shipping city for all orders.","SELECT O.order_id, C.customer_name, A.city FROM Orders AS O INNER JOIN Customers AS C ON O.customer_id = C.customer_id INNER JOIN Addresses AS A ON C.address_id = A.address_id;","CREATE TABLE Addresses (address_id INTEGER PRIMARY KEY, street TEXT, city TEXT NOT NULL, zip_code TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, address_id INTEGER, FOREIGN KEY (address_id) REFERENCES Addresses(address_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","Lists the order ID, the customer's name, and their shipping city by joining Orders, Customers, and Addresses tables."
Calculate the total sales value for each product.,"SELECT P.product_name, SUM(S.quantity * P.price) AS total_sales_value FROM Sales AS S INNER JOIN Products AS P ON S.product_id = P.product_id GROUP BY P.product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL NOT NULL); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, sale_date TEXT, FOREIGN KEY (product_id) REFERENCES Products(product_id));","Calculates the total sales value for each product by summing quantity * price from sales records, grouping by product name, by joining Sales and Products."
Find the department with the highest number of employees.,"SELECT D.department_name, COUNT(E.employee_id) AS num_employees FROM Departments AS D INNER JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name ORDER BY num_employees DESC LIMIT 1;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL UNIQUE, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));",Identifies the department that has the largest number of employees by counting employees per department and ordering the results.
"For each order, show the order ID and the total quantity of items.","SELECT O.order_id, SUM(OI.quantity) AS total_items FROM Orders AS O INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id GROUP BY O.order_id;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, price_at_sale REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL NOT NULL);","Calculates the total quantity of items for each order by summing quantities from Order_Items records, grouped by order_id, using an inner join with Orders."
List customers who have placed more than 5 orders.,"SELECT C.customer_name, COUNT(O.order_id) AS num_orders FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_name HAVING COUNT(O.order_id) > 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","Retrieves the names of customers who have placed more than 5 orders, along with their order count, by joining Customers and Orders and applying a HAVING clause."
"Show the names of students, the courses they are enrolled in, and the instructor's name for each course.","SELECT S.student_name, C.course_name, I.instructor_name FROM Students AS S INNER JOIN Enrollments AS E ON S.student_id = E.student_id INNER JOIN Courses AS C ON E.course_id = C.course_id INNER JOIN Instructors AS I ON C.instructor_id = I.instructor_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, enrollment_date TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL UNIQUE, instructor_id INTEGER NOT NULL, credits INTEGER, FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id)); CREATE TABLE Instructors (instructor_id INTEGER PRIMARY KEY, instructor_name TEXT NOT NULL UNIQUE, department TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT NOT NULL, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","Lists student names, the courses they are enrolled in, and the name of the instructor for each course by joining Students, Enrollments, Courses, and Instructors tables."
List all employees assigned to 'Alpha Project'.,"SELECT E.employee_name, P.project_name FROM Employees AS E INNER JOIN Assignments AS A ON E.employee_id = A.employee_id INNER JOIN Projects AS P ON A.project_id = P.project_id WHERE P.project_name = 'Alpha Project';","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL UNIQUE, start_date TEXT, end_date TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Assignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER NOT NULL, employee_id INTEGER NOT NULL, assignment_date TEXT, FOREIGN KEY (project_id) REFERENCES Projects(project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL UNIQUE, location TEXT);","Retrieves the names of employees who are assigned to the 'Alpha Project' by joining Employees, Assignments, and Projects tables."
Find all orders placed in 2023 along with the customer's name.,"SELECT O.order_id, C.customer_name, O.order_date FROM Orders AS O INNER JOIN Customers AS C ON O.customer_id = C.customer_id WHERE STRFTIME('%Y', O.order_date) = '2023';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","Lists order IDs, customer names, and order dates for all orders placed in the year 2023 by joining Orders and Customers tables and filtering by date."
What is the average quantity sold for each product?,"SELECT P.product_name, AVG(S.quantity) AS average_quantity_sold FROM Products AS P INNER JOIN Sales AS S ON P.product_id = S.product_id GROUP BY P.product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL NOT NULL); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, sale_date TEXT, FOREIGN KEY (product_id) REFERENCES Products(product_id));",Calculates the average quantity of each product sold by joining Products and Sales tables and grouping by product name.
List employees who work in either the 'Sales' or 'Marketing' department.,"SELECT E.employee_name, D.department_name FROM Employees AS E INNER JOIN Departments AS D ON E.department_id = D.department_id WHERE D.department_name IN ('Sales', 'Marketing');","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL UNIQUE, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));",Retrieves the names of employees and their department names for those working in either the 'Sales' or 'Marketing' department by joining Employees and Departments.
Find all books written by 'Jane Austen' and their genre name.,"SELECT B.title, G.genre_name FROM Books AS B INNER JOIN Authors AS A ON B.author_id = A.author_id INNER JOIN Genres AS G ON B.genre_id = G.genre_id WHERE A.author_name = 'Jane Austen';","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL UNIQUE, nationality TEXT); CREATE TABLE Genres (genre_id INTEGER PRIMARY KEY, genre_name TEXT NOT NULL UNIQUE); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER NOT NULL, genre_id INTEGER NOT NULL, publication_year INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id), FOREIGN KEY (genre_id) REFERENCES Genres(genre_id));","Lists the titles of books written by 'Jane Austen' and their associated genre name by joining Books, Authors, and Genres tables."
Calculate the total value for each individual order.,"SELECT O.order_id, SUM(OI.quantity * P.price) AS order_total FROM Orders AS O INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id GROUP BY O.order_id;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, price_at_sale REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL NOT NULL);","Calculates the total monetary value for each order by summing the product of quantity and product price from Order_Items and Products, grouped by order ID."
List all songs from albums released by 'Queen'.,"SELECT S.song_title, AL.album_title FROM Songs AS S INNER JOIN Albums AS AL ON S.album_id = AL.album_id INNER JOIN Artists AS A ON AL.artist_id = A.artist_id WHERE A.artist_name = 'Queen';","CREATE TABLE Artists (artist_id INTEGER PRIMARY KEY, artist_name TEXT NOT NULL UNIQUE, genre TEXT); CREATE TABLE Albums (album_id INTEGER PRIMARY KEY, album_title TEXT NOT NULL, artist_id INTEGER NOT NULL, release_year INTEGER, FOREIGN KEY (artist_id) REFERENCES Artists(artist_id)); CREATE TABLE Songs (song_id INTEGER PRIMARY KEY, song_title TEXT NOT NULL, album_id INTEGER NOT NULL, duration_seconds INTEGER, FOREIGN KEY (album_id) REFERENCES Albums(album_id));","Retrieves the titles of songs and the albums they belong to for all albums released by the artist 'Queen' by joining Songs, Albums, and Artists."
Show all patient names and their doctors for appointments scheduled on '2023-10-26'.,"SELECT P.patient_name, A.doctor_name FROM Patients AS P INNER JOIN Appointments AS A ON P.patient_id = A.patient_id WHERE DATE(A.appointment_date_time) = '2023-10-26';","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT NOT NULL, date_of_birth TEXT); CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER NOT NULL, doctor_name TEXT NOT NULL, appointment_date_time TEXT NOT NULL, FOREIGN KEY (patient_id) REFERENCES Patients(patient_id));",Lists patient names and the names of their doctors for all appointments scheduled specifically on '2023-10-26' by joining Patients and Appointments and filtering by date.
List each employee and the name of their manager.,"SELECT E.employee_name, M.employee_name AS manager_name FROM Employees AS E INNER JOIN Employees AS M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, salary REAL, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL UNIQUE, location TEXT);",Retrieves the name of each employee and the name of their respective manager by performing an inner join on the Employees table with itself (self-join).
Find the names of all customers who have ordered 'Laptop Pro'.,SELECT DISTINCT C.customer_name FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id INNER JOIN Order_Items AS OI ON O.order_id = OI.order_id INNER JOIN Products AS P ON OI.product_id = P.product_id WHERE P.product_name = 'Laptop Pro';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, price_at_sale REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL NOT NULL);","Lists the distinct names of customers who have purchased the product 'Laptop Pro' by joining Customers, Orders, Order_Items, and Products tables."
"List all customers and any orders they have placed, including customers who have not placed any orders.","SELECT c.customer_name, o.order_id, o.order_date FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query retrieves all customer names and their corresponding order details. If a customer has no orders, their order-related columns will show NULL."
Find all customers who have placed at least one order.,"SELECT c.customer_name, COUNT(o.order_id) AS total_orders FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NOT NULL GROUP BY c.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query first performs a LEFT JOIN to include all customers and their orders. The WHERE o.order_id IS NOT NULL clause then filters out customers who have no orders, effectively showing only those who have placed at least one, and counts their orders."
Show all customers who have not placed any orders.,SELECT c.customer_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query lists the names of customers who have no associated orders by performing a LEFT JOIN and then filtering for rows where the order_id from the Orders table is NULL.
"Calculate the total amount spent by each customer, including customers who have not spent anything.","SELECT c.customer_name, COALESCE(SUM(o.total_amount), 0) AS total_spent FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY total_spent DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins customers with their orders, then calculates the sum of total_amount for each customer. COALESCE ensures that customers with no orders show 0 instead of NULL for total_spent."
"List all products and any order items they appear in, along with the order date, even if a product has never been ordered.","SELECT p.product_name, oi.quantity, oi.price, o.order_date FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query uses multiple LEFT JOINs to link products to order items and then to orders. It ensures that all products are listed, regardless of whether they have been ordered, and includes details of associated order items and their order dates if available."
"Find all employees and their department names, showing only employees hired after 2020-01-01, including those without a department.","SELECT e.first_name, e.last_name, d.department_name FROM Employees e LEFT JOIN Departments d ON e.department_id = d.department_id WHERE e.hire_date > '2020-01-01';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query lists employees and their departments using a LEFT JOIN, filtering for employees hired after a specific date. Employees without an assigned department will still be included."
"Combine a list of all customers and all orders, showing customers without orders and orders without an associated customer (if any, e.g., orphan orders).","SELECT c.customer_id, c.customer_name, o.order_id, o.order_date FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id UNION ALL SELECT c.customer_id, c.customer_name, o.order_id, o.order_date FROM Orders o LEFT JOIN Customers c ON c.customer_id = o.customer_id WHERE c.customer_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query emulates a FULL OUTER JOIN by combining a LEFT JOIN from Customers to Orders with a LEFT JOIN from Orders to Customers, filtering the second part to only include orders that didn't match any customer (orphan orders) in the first part, thus showing all customers and all orders."
"List all authors and all books, ensuring that authors without books and books without a known author are included.","SELECT a.author_id, a.author_name, b.book_id, b.title FROM Authors a LEFT JOIN Books b ON a.author_id = b.author_id UNION ALL SELECT a.author_id, a.author_name, b.book_id, b.title FROM Books b LEFT JOIN Authors a ON a.author_id = b.author_id WHERE a.author_id IS NULL;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, birth_date TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre TEXT, price REAL, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query performs an emulated FULL OUTER JOIN between Authors and Books. The first part gets all authors and their books. The second part gets books that have no matching author, combining both sets to show all authors and all books."
"Count the number of tasks for each project, including projects with no assigned tasks, and display 0 for such projects.","SELECT p.project_name, COALESCE(COUNT(t.task_id), 0) AS number_of_tasks FROM Projects p LEFT JOIN Tasks t ON p.project_id = t.project_id GROUP BY p.project_id;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, task_name TEXT, status TEXT, assigned_to TEXT, due_date TEXT, FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query uses a LEFT JOIN to link projects with their tasks. It then counts tasks per project, using COALESCE to show 0 tasks for projects that have no entries in the Tasks table."
"Retrieve all employees hired in 2023 and their department names, if they have one.","SELECT e.first_name, e.last_name, d.department_name FROM Employees e LEFT JOIN Departments d ON e.department_id = d.department_id WHERE STRFTIME('%Y', e.hire_date) = '2023';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query selects employees hired in 2023 and their corresponding department names. A LEFT JOIN ensures that employees without a department are still included, and STRFTIME is used for year extraction in SQLite."
"List all products and the total quantity ordered for each, only considering orders made in the last year. Include products not ordered in the last year.","SELECT p.product_name, COALESCE(SUM(oi.quantity), 0) AS total_quantity_ordered FROM Products p LEFT JOIN (SELECT order_id, product_id, quantity FROM Order_Items WHERE order_id IN (SELECT order_id FROM Orders WHERE order_date >= DATE('now', '-1 year'))) oi ON p.product_id = oi.product_id GROUP BY p.product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query joins products with a subquery that retrieves order items only from orders placed within the last year. It sums the quantities, showing 0 for products not ordered in that period, effectively listing all products."
"Show all authors and all books, but only for authors from 'USA' or books published after 2020.","SELECT a.author_name, b.title FROM Authors a LEFT JOIN Books b ON a.author_id = b.author_id WHERE a.country = 'USA' OR b.publication_year > 2020 UNION ALL SELECT a.author_name, b.title FROM Books b LEFT JOIN Authors a ON a.author_id = b.author_id WHERE a.author_id IS NULL AND b.publication_year > 2020;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, birth_date TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre TEXT, price REAL, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query performs an emulated FULL OUTER JOIN. The first part joins authors and books, filtering for authors from USA or books published after 2020. The second part adds books that have no author match and were published after 2020, to ensure all relevant records are captured."
Find all employees and their managers' names. Also list employees who do not have a manager.,"SELECT e.first_name || ' ' || e.last_name AS employee_name, m.first_name || ' ' || m.last_name AS manager_name FROM Employees e LEFT JOIN Employees m ON e.manager_id = m.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query uses a self-LEFT JOIN on the Employees table to match employees with their managers. It lists all employees, and for those without a manager_id, the manager_name will be NULL."
"Calculate the average total amount for orders placed by each customer, including customers with no orders (show average as 0).","SELECT c.customer_name, COALESCE(AVG(o.total_amount), 0) AS average_order_amount FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query calculates the average total_amount for orders placed by each customer. Customers with no orders will show an average of 0, thanks to COALESCE."
"List the top 5 most recent customers and their latest order date, if any. Include customers without orders.","SELECT c.customer_name, MAX(o.order_date) AS latest_order_date FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY c.registration_date DESC LIMIT 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query finds the latest order date for the 5 most recently registered customers using a LEFT JOIN and MAX aggregation. It includes customers even if they haven't placed any orders, in which case latest_order_date will be NULL."
"For each employee, show their name and their department status: 'Assigned' if they have a department, 'Unassigned' otherwise.","SELECT e.first_name, e.last_name, CASE WHEN d.department_name IS NOT NULL THEN 'Assigned' ELSE 'Unassigned' END AS department_status FROM Employees e LEFT JOIN Departments d ON e.department_id = d.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query uses a LEFT JOIN to combine employees with departments. A CASE statement then assigns a 'Department Status' based on whether a matching department was found (i.e., department_name is not NULL)."
"Display all projects and all tasks, showing projects without tasks and tasks not assigned to any project (if any).","SELECT p.project_id, p.project_name, t.task_id, t.task_name FROM Projects p LEFT JOIN Tasks t ON p.project_id = t.project_id UNION ALL SELECT p.project_id, p.project_name, t.task_id, t.task_name FROM Tasks t LEFT JOIN Projects p ON p.project_id = t.project_id WHERE p.project_id IS NULL;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, task_name TEXT, status TEXT, assigned_to TEXT, due_date TEXT, FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query emulates a FULL OUTER JOIN to combine projects and tasks, ensuring that both projects without tasks and tasks without an associated project (orphan tasks) are included in the result set."
Count how many unique products each order contains. Include orders with no items.,"SELECT o.order_id, COALESCE(COUNT(DISTINCT oi.product_id), 0) AS unique_product_count FROM Orders o LEFT JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY o.order_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query uses a LEFT JOIN to link orders with their items. It counts the distinct product_id for each order. COALESCE ensures that orders with no items show 0 for the count.
"List all students and any courses they are enrolled in, if the enrollment date matches the current date. Include students not enrolled today.","SELECT s.student_name, c.course_name FROM Students s LEFT JOIN Enrollments e ON s.student_id = e.student_id AND e.enrollment_date = DATE('now') LEFT JOIN Courses c ON e.course_id = c.course_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, enrollment_date TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query selects students and their courses, specifically matching enrollments made on the current date. Students not enrolled today (or never enrolled) are still included, with their course details as NULL."
"Display all employees and all departments, including employees not assigned to any department and departments with no assigned employees.","SELECT e.first_name || ' ' || e.last_name AS employee_name, d.department_name FROM Employees e LEFT JOIN Departments d ON e.department_id = d.department_id UNION ALL SELECT e.first_name || ' ' || e.last_name AS employee_name, d.department_name FROM Departments d LEFT JOIN Employees e ON e.department_id = d.department_id WHERE e.employee_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",This query emulates a FULL OUTER JOIN to list all employees and all departments. It ensures employees without departments and departments without employees are both included in the result set.
"Find all customers who have placed less than 3 orders, including those with no orders.","SELECT c.customer_name, COUNT(o.order_id) AS order_count FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) < 3;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a LEFT JOIN to count orders per customer. The HAVING clause then filters for customers who have placed fewer than 3 orders, including those with zero orders."
List all products that have never been included in any order item.,SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.item_id IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query uses a LEFT JOIN from Products to Order_Items. By filtering for oi.item_id IS NULL, it identifies products that have no matching entry in Order_Items, meaning they have never been ordered."
"Combine author and book titles. If a record only exists in one table, show 'N/A' for the missing attribute.","SELECT COALESCE(a.author_name, 'N/A') AS author, COALESCE(b.title, 'N/A') AS book_title FROM Authors a LEFT JOIN Books b ON a.author_id = b.author_id UNION ALL SELECT COALESCE(a.author_name, 'N/A') AS author, COALESCE(b.title, 'N/A') AS book_title FROM Books b LEFT JOIN Authors a ON a.author_id = b.author_id WHERE a.author_id IS NULL;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, birth_date TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre TEXT, price REAL, FOREIGN KEY (author_id) REFERENCES Authors(author_id));",This query emulates a FULL OUTER JOIN and uses COALESCE to replace NULL values for author names or book titles with 'N/A' when a record exists only in one of the joined tables.
"Calculate the total sales amount for each product category, including categories with no sales.","SELECT p.category, COALESCE(SUM(oi.quantity * oi.price), 0) AS total_category_sales FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query uses a LEFT JOIN to connect products to order items and calculates the total sales for each product category. COALESCE ensures that categories with no sales display 0.
Count the number of employees in each department. Show departments even if they have no employees.,"SELECT d.department_name, COALESCE(COUNT(e.employee_id), 0) AS num_employees FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",This query performs a LEFT JOIN from Departments to Employees and counts the employees per department. Departments with no employees will correctly show a count of 0 due to COALESCE.
"Find the last enrollment date for each student, including students who have never enrolled.","SELECT s.student_name, MAX(e.enrollment_date) AS last_enrollment FROM Students s LEFT JOIN Enrollments e ON s.student_id = e.student_id GROUP BY s.student_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, enrollment_date TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));",This query uses a LEFT JOIN to find the latest enrollment date for each student. Students who have not enrolled will have NULL in the last_enrollment column.
List projects that have no tasks due on or after today's date.,SELECT p.project_name FROM Projects p LEFT JOIN Tasks t ON p.project_id = t.project_id AND t.due_date >= DATE('now') WHERE t.task_id IS NULL;,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, task_name TEXT, status TEXT, assigned_to TEXT, due_date TEXT, FOREIGN KEY (project_id) REFERENCES Projects(project_id));",This query identifies projects that have no tasks due today or later. The LEFT JOIN with a condition on due_date and subsequent WHERE t.task_id IS NULL filters for projects where no future tasks were found.
Count all customers and all orders. Also identify customers without orders and orders without customers separately.,"SELECT 'Customer' AS type, c.customer_id, c.customer_name, NULL AS order_id FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL UNION ALL SELECT 'Order' AS type, NULL AS customer_id, NULL AS customer_name, o.order_id FROM Orders o LEFT JOIN Customers c ON o.customer_id = c.customer_id WHERE c.customer_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query creates two separate result sets using UNION ALL. The first part lists customers who have no orders. The second part lists orders that have no matching customer (orphan orders). This effectively shows non-matching rows from an emulated full outer join.
List all employees who are not managers of anyone.,"SELECT e.first_name, e.last_name FROM Employees e LEFT JOIN Employees m ON e.employee_id = m.manager_id WHERE m.employee_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query performs a self-LEFT JOIN on the Employees table. It identifies employees who do not appear as a manager_id for any other employee, thus indicating they are not managers."
"For each project, list all its tasks that are currently 'Pending', including projects that have no pending tasks.","SELECT p.project_name, t.task_name, t.status FROM Projects p LEFT JOIN Tasks t ON p.project_id = t.project_id AND t.status = 'Pending';","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, task_name TEXT, status TEXT, assigned_to TEXT, due_date TEXT, FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query lists projects and their pending tasks using a LEFT JOIN with a condition on the task status. Projects without any pending tasks will still be listed, with NULLs for task details."
"Find all customers and their registration date, along with the total number of orders they have placed, including those with no orders, specifically for customers registered after 2022.","SELECT c.customer_name, c.registration_date, COALESCE(COUNT(o.order_id), 0) AS order_count FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE c.registration_date > '2022-01-01' GROUP BY c.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query selects customers registered after 2022 and counts their orders using a LEFT JOIN. Customers with no orders will show a count of 0, and all filtered customers will be included."
Count the number of employees in each department.,"SELECT department_id, COUNT(employee_id) AS total_employees FROM Employees GROUP BY department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);",Calculates the total number of employees for each distinct department ID.
Find the total revenue generated by each customer.,"SELECT customer_id, SUM(total_amount) AS total_revenue FROM Orders GROUP BY customer_id;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Aggregates the total 'total_amount' for each customer, showing their total revenue."
Calculate the average grade for each course.,"SELECT course_id, AVG(grade) AS average_grade FROM Enrollments GROUP BY course_id;","CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade REAL);",Computes the average grade received by students in each distinct course.
Determine the minimum stock quantity for products in each category.,"SELECT category_id, MIN(stock_quantity) AS min_stock FROM Products GROUP BY category_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER);",Finds the lowest 'stock_quantity' available within each product category.
Identify the highest price among books from each publisher.,"SELECT publisher_id, MAX(price) AS max_book_price FROM Books GROUP BY publisher_id;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, price REAL, publication_year INTEGER);",Retrieves the highest 'price' for books associated with each distinct publisher.
List departments that have more than 5 employees.,"SELECT department_id, COUNT(employee_id) AS employee_count FROM Employees GROUP BY department_id HAVING COUNT(employee_id) > 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);",Counts employees per department and then filters to show only departments with more than 5 employees.
Show publishers whose total book price sum exceeds 1000.,"SELECT publisher_id, SUM(price) AS total_price FROM Books GROUP BY publisher_id HAVING SUM(price) > 1000;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, price REAL, publication_year INTEGER);",Calculates the sum of prices for books from each publisher and selects only those publishers whose total sum is greater than 1000.
Find courses where the average grade is less than 70.,"SELECT course_id, AVG(grade) AS average_grade FROM Enrollments GROUP BY course_id HAVING AVG(grade) < 70;","CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade REAL);",Computes the average grade for each course and filters for courses where the average grade is below 70.
Identify product categories where the minimum stock quantity is below 10.,"SELECT category_id, MIN(stock_quantity) AS min_stock FROM Products GROUP BY category_id HAVING MIN(stock_quantity) < 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER);",Determines the lowest stock quantity for products in each category and then shows only categories where this minimum is less than 10.
List departments where the maximum salary is over 100000.,"SELECT department_id, MAX(salary) AS max_salary FROM Employees GROUP BY department_id HAVING MAX(salary) > 100000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);",Finds the highest salary in each department and filters for departments where the maximum salary exceeds 100000.
"For each customer, display their average order value and total number of orders, but only for customers who have placed more than 3 orders.","SELECT customer_id, AVG(total_amount) AS avg_order_value, COUNT(order_id) AS total_orders FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 3;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Calculates the average order value and total orders for each customer, then filters to include only customers with more than 3 orders."
Show departments where the average salary is above 70000 AND the total number of employees is at least 10.,"SELECT department_id, AVG(salary) AS avg_salary, COUNT(employee_id) AS num_employees FROM Employees GROUP BY department_id HAVING AVG(salary) > 70000 AND COUNT(employee_id) >= 10;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);","Computes average salary and employee count per department, then filters for departments meeting both criteria: average salary > 70000 and at least 10 employees."
List product categories where either the average price is greater than 200 OR the total stock quantity is less than 50.,"SELECT category_id, AVG(price) AS avg_price, SUM(stock_quantity) AS total_stock FROM Products GROUP BY category_id HAVING AVG(price) > 200 OR SUM(stock_quantity) < 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER);","Calculates average price and total stock for each category, then filters for categories where either the average price is over 200 or the total stock is under 50."
"From orders placed in 2023, find customers who have spent more than 500 in total.","SELECT customer_id, SUM(total_amount) AS total_spent FROM Orders WHERE STRFTIME('%Y', order_date) = '2023' GROUP BY customer_id HAVING SUM(total_amount) > 500;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Filters orders to 2023, then calculates total spending per customer, finally selecting customers who spent more than 500."
Identify customers who have placed orders for more than 3 distinct products.,"SELECT customer_id, COUNT(DISTINCT product_id) AS distinct_products_ordered FROM OrderItems GROUP BY customer_id HAVING COUNT(DISTINCT product_id) > 3;","CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL);",Counts the number of unique products ordered by each customer and filters for customers who have ordered more than 3 distinct products.
"Count the number of orders per customer per month for the year 2023, but only for customer-month pairs with more than 2 orders.","SELECT customer_id, STRFTIME('%Y-%m', order_date) AS order_month, COUNT(order_id) AS orders_count FROM Orders WHERE STRFTIME('%Y', order_date) = '2023' GROUP BY customer_id, order_month HAVING COUNT(order_id) > 2;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Groups orders by customer and month for 2023, counting orders, and then filters for groups with more than 2 orders."
"For each author and publication year, calculate the total price of their books, showing only groups where the total price exceeds 200.","SELECT author_id, publication_year, SUM(price) AS total_books_price FROM Books GROUP BY author_id, publication_year HAVING SUM(price) > 200;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, price REAL, publication_year INTEGER);","Sums the price of books grouped by author and publication year, then filters to include only groups where the total price is over 200."
"Find the average salary for each department and job title combination, but only if the average salary is below 50000.","SELECT department_id, job_title, AVG(salary) AS avg_salary FROM Employees GROUP BY department_id, job_title HAVING AVG(salary) < 50000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, job_title TEXT, salary REAL);","Calculates the average salary for each unique combination of department and job title, then filters to show only those combinations with an average salary less than 50000."
Identify flight routes (origin to destination) where the average delay is greater than 30 minutes and there have been at least 10 flights.,"SELECT origin_airport_id, destination_airport_id, AVG(delay_minutes) AS avg_delay, COUNT(flight_id) AS total_flights FROM Flights GROUP BY origin_airport_id, destination_airport_id HAVING AVG(delay_minutes) > 30 AND COUNT(flight_id) >= 10;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, origin_airport_id INTEGER, destination_airport_id INTEGER, departure_date TEXT, delay_minutes INTEGER);","Computes average delay and total flights for each flight route, then filters for routes with an average delay over 30 minutes and at least 10 flights."
"Show publishers who have published at least 2 books priced over 50, and their average publication year is after 2000.","SELECT publisher_id, COUNT(book_id) AS high_priced_books_count, AVG(publication_year) AS avg_pub_year FROM Books WHERE price > 50 GROUP BY publisher_id HAVING COUNT(book_id) >= 2 AND AVG(publication_year) > 2000;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, price REAL, publication_year INTEGER);","Filters books for those priced over 50, then groups by publisher, counting such books and averaging their publication year. It then filters for publishers with at least 2 such books and an average publication year after 2000."
List the names of departments that have more than 5 employees.,"SELECT D.department_name, COUNT(E.employee_id) AS employee_count FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name HAVING COUNT(E.employee_id) > 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Joins employees with their departments, groups by department name, and then filters to show only departments with more than 5 employees."
"Find the total sales amount for each product category, but only for categories where the total sales exceed 100000.","SELECT PC.category_name, SUM(OI.quantity * OI.price_per_unit) AS total_category_sales FROM Products P JOIN ProductCategories PC ON P.category_id = PC.category_id JOIN OrderItems OI ON P.product_id = OI.product_id GROUP BY PC.category_name HAVING SUM(OI.quantity * OI.price_per_unit) > 100000;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL); CREATE TABLE ProductCategories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL);","Joins products with categories and order items, calculates the total sales for each product category, and then filters for categories whose total sales amount is greater than 100000."
"Show the average salary for employees in each location, considering only locations where the average salary is less than 60000.","SELECT D.location, AVG(E.salary) AS avg_location_salary FROM Employees E JOIN Departments D ON E.department_id = D.department_id GROUP BY D.location HAVING AVG(E.salary) < 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Joins employees and departments, groups employees by their department's location, computes the average salary for each location, and filters for locations where this average is less than 60000."
"For each genre, count the number of books, but only show genres where the average publication year is after 1990 and there are more than 50 books.","SELECT G.genre_name, COUNT(B.book_id) AS total_books, AVG(B.publication_year) AS avg_pub_year FROM Genres G JOIN Books B ON G.genre_id = B.genre_id GROUP BY G.genre_name HAVING AVG(B.publication_year) > 1990 AND COUNT(B.book_id) > 50;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, genre_id INTEGER, publication_year INTEGER); CREATE TABLE Genres (genre_id INTEGER PRIMARY KEY, genre_name TEXT);","Joins books with their genres, groups by genre name, then calculates the total books and average publication year for each genre. It filters to include only genres where the average publication year is after 1990 and there are more than 50 books."
"Calculate the total amount spent by customers on orders shipped by 'Speedy Delivery', but only for customers who placed more than 3 orders through this shipper.","SELECT C.customer_name, SUM(O.total_amount) AS total_spent FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Shippers S ON O.shipper_id = S.shipper_id WHERE S.shipper_name = 'Speedy Delivery' GROUP BY C.customer_name HAVING COUNT(O.order_id) > 3;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, shipper_id INTEGER, total_amount REAL); CREATE TABLE Shippers (shipper_id INTEGER PRIMARY KEY, shipper_name TEXT);","Joins customers, orders, and shippers. Filters for orders shipped by 'Speedy Delivery', then groups by customer name to sum their total spending and count their orders. Finally, it filters for customers who placed more than 3 orders with 'Speedy Delivery'."
"For each year, count the number of orders and only show years that had orders in both January and December (i.e., at least one order in Jan and at least one in Dec).","SELECT STRFTIME('%Y', order_date) AS order_year, COUNT(order_id) AS total_orders FROM Orders GROUP BY order_year HAVING SUM(CASE WHEN STRFTIME('%m', order_date) = '01' THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN STRFTIME('%m', order_date) = '12' THEN 1 ELSE 0 END) > 0;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Groups orders by year. It then uses conditional sums in the HAVING clause to check if there was at least one order in January and at least one in December for that specific year.
"List departments and the number of employees whose salary is in the top 25% of their department's average salary, showing only departments with more than 1 such employee.","SELECT E1.department_id, COUNT(E1.employee_id) AS high_earners FROM Employees E1 JOIN (SELECT department_id, AVG(salary) AS avg_dept_salary FROM Employees GROUP BY department_id) E2 ON E1.department_id = E2.department_id WHERE E1.salary > E2.avg_dept_salary * 1.25 GROUP BY E1.department_id HAVING COUNT(E1.employee_id) > 1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);","Calculates the average salary for each department in a subquery. Then, it joins this with the main Employees table to identify employees whose salary is more than 25% above their department's average. Finally, it groups by department and counts these 'high earners', displaying only departments with more than one such employee."
"Find the suppliers who have no products with a stock quantity less than 5, but have at least 10 products overall.","SELECT supplier_id, COUNT(product_id) AS total_products FROM Products GROUP BY supplier_id HAVING MIN(stock_quantity) >= 5 AND COUNT(product_id) >= 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, supplier_id INTEGER, price REAL, stock_quantity INTEGER);","Groups products by supplier and checks two conditions in HAVING: the minimum stock quantity for any product from that supplier is 5 or more, and the total number of products from that supplier is at least 10."
Identify courses where the number of enrolled students (excluding those with a null grade) is greater than 5 and the average grade for those students is above 75.,"SELECT course_id, COUNT(grade) AS enrolled_students_with_grade, AVG(grade) AS avg_grade FROM Enrollments WHERE grade IS NOT NULL GROUP BY course_id HAVING COUNT(grade) > 5 AND AVG(grade) > 75;","CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade REAL);","Filters out enrollments with null grades, then groups by course, counting the remaining students and calculating their average grade. Finally, it filters for courses where more than 5 students have a non-null grade AND their average grade is above 75."
"For each airport, find the total number of incoming and outgoing flights, but only include airports where the difference between incoming and outgoing flights is less than 50, and total flights exceed 200.","SELECT airport_id, SUM(CASE WHEN type = 'outgoing' THEN 1 ELSE 0 END) AS outgoing_flights, SUM(CASE WHEN type = 'incoming' THEN 1 ELSE 0 END) AS incoming_flights FROM (SELECT origin_airport_id AS airport_id, 'outgoing' AS type FROM Flights UNION ALL SELECT destination_airport_id AS airport_id, 'incoming' AS type FROM Flights) AS FlightDirections GROUP BY airport_id HAVING ABS(outgoing_flights - incoming_flights) < 50 AND (outgoing_flights + incoming_flights) > 200;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, origin_airport_id INTEGER, destination_airport_id INTEGER, departure_date TEXT);","Creates a temporary combined list of airport IDs and flight types (incoming/outgoing). It then groups by airport ID to count incoming and outgoing flights. The HAVING clause filters for airports where the absolute difference between incoming and outgoing flights is less than 50, and the total number of flights (incoming + outgoing) is greater than 200."
"For each department, list employees along with their rank based on salary, from highest to lowest.","SELECT EmployeeID, Name, Department, Salary, RANK() OVER (PARTITION BY Department ORDER BY Salary DESC) AS RankInDepartment FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary REAL);","This query uses RANK() to assign a rank to each employee within their respective department based on their salary, with the highest salary getting rank 1. Ties receive the same rank, and the next rank is skipped."
"Retrieve all products and their sales rank within their category, ordered by total sales in descending order. If products have the same sales, they should receive distinct sequential ranks.","SELECT ProductID, ProductName, Category, TotalSales, ROW_NUMBER() OVER (PARTITION BY Category ORDER BY TotalSales DESC) AS RowNumInProductCategory FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, TotalSales REAL);","This query uses ROW_NUMBER() to assign a unique sequential row number to each product within its category, based on total sales. Even if sales are identical, each product gets a distinct number."
Show all orders along with the previous order's date for the same customer.,"SELECT OrderID, CustomerID, OrderDate, LAG(OrderDate, 1, '1900-01-01') OVER (PARTITION BY CustomerID ORDER BY OrderDate) AS PreviousOrderDate FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query uses LAG() to retrieve the order date of the immediately preceding order for each customer, ordered by date. If there is no previous order, it defaults to '1900-01-01'."
"For each employee, find their salary and the salary of the employee who earns immediately more than them in the same department.","SELECT EmployeeID, Name, Department, Salary, LEAD(Salary, 1) OVER (PARTITION BY Department ORDER BY Salary ASC) AS NextHigherSalaryInDept FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary REAL);","This query uses LEAD() to find the salary of the next employee in the same department who has a higher salary, based on ascending salary order."
List the top 3 selling products in each category based on quantity sold.,"SELECT ProductID, ProductName, Category, QuantitySold FROM (SELECT ProductID, ProductName, Category, QuantitySold, DENSE_RANK() OVER (PARTITION BY Category ORDER BY QuantitySold DESC) AS RankInCat FROM Products) WHERE RankInCat <= 3;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, QuantitySold INTEGER);","This query first assigns a dense rank to products within each category based on quantity sold, then filters to show only the top 3 ranked products in each category."
"Divide all students into 4 groups (quartiles) based on their test scores, ordered by score.","SELECT StudentID, Name, Score, NTILE(4) OVER (ORDER BY Score DESC) AS ScoreQuartile FROM Students;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, Name TEXT, Score INTEGER);","This query uses NTILE(4) to divide the students into 4 equally sized groups (quartiles) based on their test scores, with the highest scores in the first quartile."
Calculate the running total of sales for each product over time.,"SELECT SaleID, ProductID, SaleDate, Amount, SUM(Amount) OVER (PARTITION BY ProductID ORDER BY SaleDate) AS RunningProductSales FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT, Amount REAL);","This query uses SUM() as a window function to calculate a running total of sales for each product, ordered by sale date. Each row shows the sum of sales for that product up to that specific date."
Find the average salary for each department and include it alongside each employee's details.,"SELECT EmployeeID, Name, Department, Salary, AVG(Salary) OVER (PARTITION BY Department) AS DepartmentAvgSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary REAL);","This query uses AVG() as a window function to calculate the average salary for each department and displays it for every employee within that department, without aggregating the main result."
Identify the first transaction amount for each customer.,"SELECT CustomerID, TransactionID, TransactionDate, Amount, FIRST_VALUE(Amount) OVER (PARTITION BY CustomerID ORDER BY TransactionDate) AS FirstTransactionAmount FROM Transactions;","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, CustomerID INTEGER, TransactionDate TEXT, Amount REAL);","This query uses FIRST_VALUE() to retrieve the amount of the very first transaction for each customer, based on the transaction date."
"For each stock, find its closing price and the closing price of the last trading day.","SELECT StockID, TradeDate, ClosingPrice, LAST_VALUE(ClosingPrice) OVER (PARTITION BY StockID ORDER BY TradeDate ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LastClosingPrice FROM StockPrices;","CREATE TABLE StockPrices (StockID INTEGER, TradeDate TEXT, ClosingPrice REAL);",This query uses LAST_VALUE() with an unbounded frame to get the closing price of the last trading day for each stock across all recorded dates.
"For each product, show its sales, the average sales of the last 3 days, and the average sales of the next 3 days.","SELECT ProductID, SaleDate, DailySales, AVG(DailySales) OVER (PARTITION BY ProductID ORDER BY SaleDate ROWS BETWEEN 3 PRECEDING AND CURRENT ROW) AS AvgSalesLast3Days, AVG(DailySales) OVER (PARTITION BY ProductID ORDER BY SaleDate ROWS BETWEEN CURRENT ROW AND 3 FOLLOWING) AS AvgSalesNext3Days FROM DailyProductSales;","CREATE TABLE DailyProductSales (ProductID INTEGER, SaleDate TEXT, DailySales REAL);","This query uses AVG() with specific window frames (3 preceding and current row, and current row and 3 following) to calculate rolling averages of daily sales for each product."
List all employees and their salary percentile within their department.,"SELECT EmployeeID, Name, Department, Salary, PERCENT_RANK() OVER (PARTITION BY Department ORDER BY Salary ASC) AS SalaryPercentileInDept FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary REAL);","This query uses PERCENT_RANK() to calculate the percentile rank of each employee's salary within their department, indicating their relative standing from 0 to 1."
Find the cumulative distribution of scores for all students.,"SELECT StudentID, Name, Score, CUME_DIST() OVER (ORDER BY Score ASC) AS CumulativeDistribution FROM Students;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, Name TEXT, Score INTEGER);","This query uses CUME_DIST() to calculate the cumulative distribution of each student's score, indicating the proportion of students with a score less than or equal to the current student's score."
"For each order, display the order ID, amount, and the maximum amount among all orders placed by the same customer.","SELECT OrderID, CustomerID, TotalAmount, MAX(TotalAmount) OVER (PARTITION BY CustomerID) AS MaxCustomerOrderAmount FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query uses MAX() as a window function to find the maximum order amount for each customer, displayed alongside every order of that customer."
"For each student, list their score and the score of the 2nd highest student in their class.","SELECT StudentID, Name, Class, Score, NTH_VALUE(Score, 2) OVER (PARTITION BY Class ORDER BY Score DESC) AS SecondHighestScoreInClass FROM Students;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, Name TEXT, Class TEXT, Score INTEGER);","This query uses NTH_VALUE() to retrieve the score of the 2nd highest student within each class, ordered by score in descending order."
Calculate the difference in sales from the previous day for each product.,"SELECT ProductID, SaleDate, DailySales, DailySales - LAG(DailySales, 1, 0) OVER (PARTITION BY ProductID ORDER BY SaleDate) AS SalesChangeFromPreviousDay FROM DailyProductSales;","CREATE TABLE DailyProductSales (ProductID INTEGER, SaleDate TEXT, DailySales REAL);","This query calculates the difference in daily sales for each product compared to its sales on the previous day, using LAG() and simple subtraction."
"Rank customers by their total spending, but only for customers who have placed more than 5 orders.","WITH CustomerTotalSpending AS (SELECT CustomerID, SUM(TotalAmount) AS TotalSpent, COUNT(OrderID) AS NumberOfOrders FROM Orders GROUP BY CustomerID HAVING COUNT(OrderID) > 5) SELECT CustomerID, TotalSpent, RANK() OVER (ORDER BY TotalSpent DESC) AS SpendingRank FROM CustomerTotalSpending;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query first calculates total spending and order count for each customer, filters for those with more than 5 orders, then ranks these filtered customers based on their total spending."
"For each transaction, identify if it's the first transaction for that customer.","SELECT TransactionID, CustomerID, TransactionDate, Amount, CASE WHEN ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY TransactionDate) = 1 THEN 'Yes' ELSE 'No' END AS IsFirstTransaction FROM Transactions;","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, CustomerID INTEGER, TransactionDate TEXT, Amount REAL);",This query uses ROW_NUMBER() to identify the first transaction for each customer based on date and then uses a CASE statement to label it as 'Yes' or 'No'.
"Show the average temperature for each city, along with each day's temperature, but only considering temperatures from the last 7 days including the current day.","SELECT City, MeasurementDate, Temperature, AVG(Temperature) OVER (PARTITION BY City ORDER BY MeasurementDate ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS Rolling7DayAvgTemp FROM DailyWeather;","CREATE TABLE DailyWeather (City TEXT, MeasurementDate TEXT, Temperature REAL);",This query calculates a 7-day rolling average temperature for each city using AVG() with a window frame that includes the current row and the 6 preceding rows.
"For each product, what was its sales quantity in the next recorded sale (if any)?","SELECT ProductID, SaleDate, Quantity, LEAD(Quantity, 1) OVER (PARTITION BY ProductID ORDER BY SaleDate) AS NextSaleQuantity FROM ProductSales;","CREATE TABLE ProductSales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, SaleDate TEXT, Quantity INTEGER);","This query uses LEAD() to get the quantity of the next recorded sale for each product, ordered by sale date."
List all employees whose salary is in the top 10% within their department.,"SELECT EmployeeID, Name, Department, Salary FROM (SELECT EmployeeID, Name, Department, Salary, NTILE(10) OVER (PARTITION BY Department ORDER BY Salary DESC) AS SalaryDecile FROM Employees) WHERE SalaryDecile = 1;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary REAL);","This query first divides employees in each department into 10 deciles based on salary, then filters to show only those in the top decile (highest 10%)."
Calculate the percentage of total sales each order represents for its respective customer.,"SELECT OrderID, CustomerID, TotalAmount, (TotalAmount * 100.0 / SUM(TotalAmount) OVER (PARTITION BY CustomerID)) AS PercentageOfCustomerSales FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query calculates the percentage contribution of each order to the total sales of its corresponding customer by dividing the order's amount by the sum of all orders for that customer (calculated using a window function).
"For each movie, find its rating, and the highest rating achieved by any movie released in the same year.","SELECT MovieID, Title, ReleaseYear, Rating, MAX(Rating) OVER (PARTITION BY ReleaseYear) AS MaxRatingInYear FROM Movies;","CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, ReleaseYear INTEGER, Rating REAL);","This query uses MAX() as a window function to find the maximum rating among all movies released in the same year, displayed for each movie."
"Identify products that are 50% more expensive than the average product in their category, considering only the products that are not 'Discontinued'.","SELECT ProductID, ProductName, Category, Price FROM (SELECT ProductID, ProductName, Category, Price, AVG(Price) OVER (PARTITION BY Category) AS AvgCategoryPrice FROM Products WHERE Status != 'Discontinued') WHERE Price > AvgCategoryPrice * 1.5;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, Status TEXT);","This query first calculates the average price per category for non-discontinued products, then filters to show only products whose price is more than 1.5 times that category average."
"For each student, show their score, their rank, and the student immediately below them in rank within the class.","SELECT StudentID, Name, Class, Score, RANK() OVER (PARTITION BY Class ORDER BY Score DESC) AS RankInClass, LEAD(Name, 1) OVER (PARTITION BY Class ORDER BY Score DESC) AS StudentBelow FROM Students;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, Name TEXT, Class TEXT, Score INTEGER);",This query combines RANK() to get the student's rank within their class and LEAD() to find the name of the student immediately below them in terms of score.
Calculate the difference between the current stock price and the price from 5 days ago for each stock.,"SELECT StockID, TradeDate, ClosingPrice, ClosingPrice - LAG(ClosingPrice, 5) OVER (PARTITION BY StockID ORDER BY TradeDate) AS PriceChangeFrom5DaysAgo FROM StockPrices;","CREATE TABLE StockPrices (StockID INTEGER, TradeDate TEXT, ClosingPrice REAL);",This query uses LAG() to fetch the closing price from 5 days prior for each stock and calculates the difference from the current closing price.
List employees who are not the highest nor the lowest paid in their department.,"SELECT EmployeeID, Name, Department, Salary FROM (SELECT EmployeeID, Name, Department, Salary, RANK() OVER (PARTITION BY Department ORDER BY Salary DESC) AS RankDesc, RANK() OVER (PARTITION BY Department ORDER BY Salary ASC) AS RankAsc FROM Employees) WHERE RankDesc > 1 AND RankAsc > 1;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary REAL);","This query ranks employees by salary both descending and ascending within each department, then filters for those whose descending rank is not 1 (not highest) and ascending rank is not 1 (not lowest)."
"For each customer, list their orders and the order placed immediately before the last order.","SELECT OrderID, CustomerID, OrderDate, TotalAmount, LAG(OrderDate, 1) OVER (PARTITION BY CustomerID ORDER BY OrderDate DESC) AS SecondToLastOrderDate FROM Orders WHERE ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY OrderDate DESC) = 1;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query first orders customer orders by date descending. Then, for the row representing the last order (ROW_NUMBER() = 1), it uses LAG() to find the date of the order immediately preceding it (which is the second to last order)."
Show the count of orders placed by each customer up to a given date.,"SELECT OrderID, CustomerID, OrderDate, COUNT(OrderID) OVER (PARTITION BY CustomerID ORDER BY OrderDate) AS RunningOrderCount FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query uses COUNT() as a window function to calculate a running count of orders for each customer, ordered by order date."
Find the median score for each course using NTILE and average of two middle values.,"SELECT CourseID, AVG(Score) AS MedianScore FROM (SELECT CourseID, Score, NTILE(2) OVER (PARTITION BY CourseID ORDER BY Score) AS Quartile FROM Enrollments) WHERE Quartile = 1 OR Quartile = 2 GROUP BY CourseID;","CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Score INTEGER);","This query uses NTILE(2) to divide scores in each course into two halves. Then, it averages the scores that fall into either the first or second half, which effectively computes the median for even and odd counts of scores."
"For each employee, display their salary and the salary of the 3rd highest paid employee in the entire company.","SELECT EmployeeID, Name, Salary, NTH_VALUE(Salary, 3) OVER (ORDER BY Salary DESC) AS ThirdHighestCompanySalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary REAL);",This query uses NTH_VALUE() without a PARTITION BY clause to find the salary of the 3rd highest paid employee across the entire company.
List the names of all employees who work in departments located in 'New York'.,"SELECT FirstName, LastName FROM Employees WHERE DepartmentID IN (SELECT DepartmentID FROM Departments WHERE Location = 'New York');","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query uses an uncorrelated subquery in the WHERE clause. The subquery first finds all DepartmentIDs for departments located in 'New York' independently, and then the outer query uses these IDs to filter employees."
Find the names of products that have never been ordered.,SELECT ProductName FROM Products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM OrderItems);,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, CategoryID INTEGER);CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, UnitPrice REAL);","This query uses an uncorrelated subquery. The subquery returns a list of ProductIDs that exist in the OrderItems table (i.e., have been ordered). The outer query then selects products whose IDs are not in this list."
"Show employee names and their salaries, but only for employees whose salary is greater than the average salary of all employees.","SELECT FirstName, LastName, Salary FROM Employees WHERE Salary > (SELECT AVG(Salary) FROM Employees);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query uses an uncorrelated scalar subquery. The subquery calculates the overall average salary once, and the outer query then compares each employee's salary to this single average value."
Retrieve the names of customers who have placed an order with a total amount exceeding $500.,SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE TotalAmount > 500);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, State TEXT);CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query uses an uncorrelated subquery. The subquery identifies CustomerIDs from orders with a total amount over $500. The outer query then retrieves the names of these customers.
List all departments that have at least one employee earning more than 70000.,SELECT DepartmentName FROM Departments WHERE DepartmentID IN (SELECT DepartmentID FROM Employees WHERE Salary > 70000);,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);",This query uses an uncorrelated subquery. The subquery finds DepartmentIDs where an employee's salary exceeds 70000. The outer query then selects the names of these departments.
"For each employee, show their name and whether they have any tasks assigned to them.","SELECT E.FirstName, E.LastName, CASE WHEN EXISTS (SELECT 1 FROM Tasks T WHERE T.EmployeeID = E.EmployeeID) THEN 'Yes' ELSE 'No' END AS HasTasks FROM Employees E;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, ProjectID INTEGER, EmployeeID INTEGER, TaskName TEXT, Status TEXT, DueDate TEXT);","This is a correlated subquery example using EXISTS. For each employee in the outer query, the subquery checks if there's any task record with a matching EmployeeID. If a matching record exists, it returns 'Yes', otherwise 'No'."
Retrieve the names of employees who earn more than the average salary in their respective department.,"SELECT E.FirstName, E.LastName, E.Salary, D.DepartmentName FROM Employees E JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE E.Salary > (SELECT AVG(Salary) FROM Employees WHERE DepartmentID = E.DepartmentID);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This is a correlated subquery. For each employee (E) in the outer query, the subquery calculates the average salary *only for employees in E's department* (E.DepartmentID). The outer query then checks if E's salary is greater than that specific departmental average."
List products whose price is higher than the average price of products in their own category.,"SELECT P.ProductName, P.Price FROM Products P JOIN Categories C ON P.CategoryID = C.CategoryID WHERE P.Price > (SELECT AVG(Price) FROM Products WHERE CategoryID = P.CategoryID);","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, CategoryID INTEGER);CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);","This is a correlated subquery. For each product (P), the subquery calculates the average price of products within P's category. The outer query then filters products based on this category-specific average."
Find employees who have not been assigned to any project.,"SELECT FirstName, LastName FROM Employees E WHERE NOT EXISTS (SELECT 1 FROM Projects P WHERE P.DepartmentID = E.DepartmentID AND E.EmployeeID IN (SELECT EmployeeID FROM Tasks WHERE ProjectID = P.ProjectID));","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, DepartmentID INTEGER, StartDate TEXT, EndDate TEXT, Status TEXT);CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, ProjectID INTEGER, EmployeeID INTEGER, TaskName TEXT, Status TEXT, DueDate TEXT);","This is a correlated subquery using NOT EXISTS. For each employee, the subquery attempts to find if there's any project within their department where they are assigned a task. If no such project/task combination exists, the employee is selected."
"Display department names and the count of employees in each department, but only for departments with more than 5 employees.","SELECT D.DepartmentName, (SELECT COUNT(E.EmployeeID) FROM Employees E WHERE E.DepartmentID = D.DepartmentID) AS EmployeeCount FROM Departments D WHERE (SELECT COUNT(E2.EmployeeID) FROM Employees E2 WHERE E2.DepartmentID = D.DepartmentID) > 5;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);",This query uses correlated subqueries both in the SELECT list (to count employees per department) and in the WHERE clause (to filter departments with more than 5 employees). The subquery is re-evaluated for each department in the outer query.
List all customers who have placed orders on the same date as customer with CustomerID = 1.,SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE OrderDate IN (SELECT OrderDate FROM Orders WHERE CustomerID = 1)) AND CustomerID != 1;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, State TEXT);CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query uses nested uncorrelated subqueries. The innermost subquery finds all order dates for CustomerID 1. The middle subquery finds CustomerIDs that placed orders on any of those dates. The outer query retrieves names, excluding CustomerID 1 itself."
Find employees who have the highest salary in their respective department.,"SELECT E.FirstName, E.LastName, E.Salary, D.DepartmentName FROM Employees E JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE E.Salary = (SELECT MAX(Salary) FROM Employees WHERE DepartmentID = E.DepartmentID);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This is a correlated subquery. For each employee, the subquery finds the maximum salary in their specific department. The outer query then selects employees whose salary matches this departmental maximum."
Show the names of products whose price is exactly the same as the price of 'Laptop' product.,SELECT ProductName FROM Products WHERE Price = (SELECT Price FROM Products WHERE ProductName = 'Laptop');,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, CategoryID INTEGER);",This query uses an uncorrelated scalar subquery. The subquery first retrieves the price of 'Laptop' product. The outer query then selects all products that have this exact price.
Retrieve employees who have a salary greater than all salaries in the 'Marketing' department.,"SELECT FirstName, LastName, Salary FROM Employees WHERE Salary > (SELECT MAX(Salary) FROM Employees WHERE DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'Marketing'));","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);",This query uses nested uncorrelated subqueries. The innermost subquery gets the DepartmentID for 'Marketing'. The middle subquery then finds the maximum salary in that department. The outer query selects employees whose salary is higher than this maximum.
List projects that have no tasks assigned to them.,SELECT ProjectName FROM Projects P WHERE NOT EXISTS (SELECT 1 FROM Tasks T WHERE T.ProjectID = P.ProjectID);,"CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, DepartmentID INTEGER, StartDate TEXT, EndDate TEXT, Status TEXT);CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, ProjectID INTEGER, EmployeeID INTEGER, TaskName TEXT, Status TEXT, DueDate TEXT);","This is a correlated subquery using NOT EXISTS. For each project in the outer query, the subquery checks if there are any tasks associated with that project. If no tasks are found, the project is included in the result."
Display the names of employees who were hired after any employee in the 'Sales' department.,"SELECT FirstName, LastName, HireDate FROM Employees WHERE HireDate > (SELECT MIN(HireDate) FROM Employees WHERE DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'Sales'));","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);",This query uses nested uncorrelated subqueries. The innermost subquery gets the DepartmentID for 'Sales'. The middle subquery finds the earliest hire date in the Sales department. The outer query then selects employees hired after this date.
Find all departments that manage at least one project that is currently 'Active'.,SELECT DepartmentName FROM Departments WHERE DepartmentID IN (SELECT DepartmentID FROM Projects WHERE Status = 'Active');,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, DepartmentID INTEGER, StartDate TEXT, EndDate TEXT, Status TEXT);",This query uses an uncorrelated subquery. The subquery identifies DepartmentIDs from projects that are 'Active'. The outer query then retrieves the names of these departments.
Show employees who have the same hire date as their department's most recently hired employee.,"SELECT E.FirstName, E.LastName, E.HireDate, D.DepartmentName FROM Employees E JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE E.HireDate = (SELECT MAX(HireDate) FROM Employees WHERE DepartmentID = E.DepartmentID);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This is a correlated subquery. For each employee, the subquery calculates the latest hire date within their specific department. The outer query then selects employees whose hire date matches this departmental latest hire date."
List all products that belong to categories having more than 10 products.,SELECT ProductName FROM Products WHERE CategoryID IN (SELECT CategoryID FROM Products GROUP BY CategoryID HAVING COUNT(ProductID) > 10);,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, CategoryID INTEGER);",This query uses an uncorrelated subquery. The subquery first identifies CategoryIDs that have more than 10 products. The outer query then selects all products belonging to these categories.
Find the names of customers who have made orders totaling more than the average order total across all orders.,SELECT C.CustomerName FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID WHERE O.TotalAmount > (SELECT AVG(TotalAmount) FROM Orders);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, State TEXT);CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query uses an uncorrelated scalar subquery. The subquery calculates the overall average order total. The outer query then selects customer names for orders whose total amount exceeds this average.
Show employees who have a unique salary (no other employee has the same salary).,"SELECT FirstName, LastName, Salary FROM Employees E WHERE (SELECT COUNT(*) FROM Employees WHERE Salary = E.Salary) = 1;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This is a correlated subquery. For each employee (E) in the outer query, the subquery counts how many employees have the exact same salary as E.Salary. If the count is 1, it means the salary is unique, and the employee is selected."
"List departments that have employees, but no 'Active' projects.",SELECT DepartmentName FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.DepartmentID = D.DepartmentID) AND NOT EXISTS (SELECT 1 FROM Projects P WHERE P.DepartmentID = D.DepartmentID AND P.Status = 'Active');,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, DepartmentID INTEGER, StartDate TEXT, EndDate TEXT, Status TEXT);",This query uses two correlated subqueries. The first EXISTS checks if the department has any employees. The second NOT EXISTS checks if the department does *not* have any active projects. Both conditions must be true.
Find employees who have received a salary payment greater than 10000 at any point.,"SELECT FirstName, LastName FROM Employees WHERE EmployeeID IN (SELECT EmployeeID FROM Salaries WHERE Amount > 10000);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Salaries (SalaryID INTEGER PRIMARY KEY, EmployeeID INTEGER, Amount REAL, PayDate TEXT);",This query uses an uncorrelated subquery. The subquery identifies EmployeeIDs who have a salary record with an amount greater than 10000. The outer query then retrieves the names of these employees.
Retrieve the names of employees whose hire date is before the hire date of all employees in the 'HR' department.,"SELECT FirstName, LastName FROM Employees WHERE HireDate < (SELECT MIN(HireDate) FROM Employees WHERE DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'HR'));","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);",This query uses nested uncorrelated subqueries. The innermost subquery finds the DepartmentID of 'HR'. The middle subquery then finds the earliest hire date within the 'HR' department. The outer query selects employees hired before this date.
List customers who have placed at least one order where all items in that order are from the 'Electronics' category.,SELECT C.CustomerName FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID WHERE NOT EXISTS (SELECT 1 FROM OrderItems OI JOIN Products P ON OI.ProductID = P.ProductID JOIN Categories Cat ON P.CategoryID = Cat.CategoryID WHERE OI.OrderID = O.OrderID AND Cat.CategoryName != 'Electronics');,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, State TEXT);CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, UnitPrice REAL);CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, CategoryID INTEGER);CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);","This is a correlated subquery using NOT EXISTS to simulate 'all'. For each order, the subquery checks if there is *any* item in that order that is *not* from the 'Electronics' category. If no such item exists (meaning all are 'Electronics'), the order's customer is selected."
"Display employees and their department's average salary, but only for departments with an average salary greater than 60000.","SELECT E.FirstName, E.LastName, D.DepartmentName, (SELECT AVG(Salary) FROM Employees WHERE DepartmentID = E.DepartmentID) AS DepartmentAverageSalary FROM Employees E JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE (SELECT AVG(Salary) FROM Employees WHERE DepartmentID = E.DepartmentID) > 60000;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);",This query uses a correlated subquery in both the SELECT clause (to display the department's average salary for each employee) and the WHERE clause (to filter out employees whose department's average salary is not greater than 60000). The subquery is re-evaluated for each employee's department.
Find projects that started after the earliest project in the 'Development' department.,"SELECT ProjectName, StartDate FROM Projects WHERE StartDate > (SELECT MIN(StartDate) FROM Projects WHERE DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'Development'));","CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, DepartmentID INTEGER, StartDate TEXT, EndDate TEXT, Status TEXT);CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);",This query uses nested uncorrelated subqueries. The innermost subquery finds the DepartmentID for 'Development'. The middle subquery finds the earliest StartDate for projects in that department. The outer query then selects projects that started after this date.
List all employees whose salary is in the top 10% of all employee salaries.,"SELECT FirstName, LastName, Salary FROM Employees WHERE Salary >= (SELECT MIN(Salary) FROM (SELECT Salary FROM Employees ORDER BY Salary DESC LIMIT (SELECT CAST(COUNT(*) * 0.1 AS INTEGER) FROM Employees)));","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);","This query uses nested uncorrelated subqueries to find the threshold for the top 10%. The innermost subquery calculates 10% of total employees. The next subquery gets the salaries of the top 10% employees, ordered descending. The outer subquery finds the minimum salary among these top 10%, which is the threshold. Finally, the main query selects employees earning at or above this threshold."
Retrieve customers who have never placed an order for a product from the 'Books' category.,SELECT CustomerName FROM Customers C WHERE NOT EXISTS (SELECT 1 FROM Orders O JOIN OrderItems OI ON O.OrderID = OI.OrderID JOIN Products P ON OI.ProductID = P.ProductID JOIN Categories Cat ON P.CategoryID = Cat.CategoryID WHERE O.CustomerID = C.CustomerID AND Cat.CategoryName = 'Books');,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, State TEXT);CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, UnitPrice REAL);CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, CategoryID INTEGER);CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);","This is a correlated subquery using NOT EXISTS. For each customer, the subquery checks if there is any order placed by that customer that contains an item from the 'Books' category. If no such order is found, the customer is selected."
"Display product names and their prices, only if their price is the lowest in their category.","SELECT P.ProductName, P.Price, C.CategoryName FROM Products P JOIN Categories C ON P.CategoryID = C.CategoryID WHERE P.Price = (SELECT MIN(Price) FROM Products WHERE CategoryID = P.CategoryID);","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, CategoryID INTEGER);CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);","This is a correlated subquery. For each product, the subquery calculates the minimum price within that product's specific category. The outer query then filters for products whose price matches this category-specific minimum."
Find employees who joined in the same year as the CEO (assuming CEO is EmployeeID 1).,"SELECT FirstName, LastName, HireDate FROM Employees WHERE CAST(SUBSTR(HireDate, 1, 4) AS INTEGER) = (SELECT CAST(SUBSTR(HireDate, 1, 4) AS INTEGER) FROM Employees WHERE EmployeeID = 1);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);",This query uses an uncorrelated scalar subquery. The subquery extracts the hire year of the employee with EmployeeID 1. The outer query then selects employees whose hire year matches this specific year.
"List departments that have employees, but none of them earn more than 100000.",SELECT DepartmentName FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.DepartmentID = D.DepartmentID) AND NOT EXISTS (SELECT 1 FROM Employees E2 WHERE E2.DepartmentID = D.DepartmentID AND E2.Salary > 100000);,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT);",This query uses two correlated subqueries. The first EXISTS ensures the department has at least one employee. The second NOT EXISTS ensures that there are no employees in that department earning more than 100000.
List all unique product IDs that are either electronics products or have a price greater than 500.,SELECT product_id FROM Products WHERE category = 'Electronics' UNION SELECT product_id FROM Products WHERE price > 500.0;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query combines unique product IDs from two sets: those belonging to the 'Electronics' category and those with a price exceeding 500.0, using the UNION operator."
Show the names of all employees who are either in the 'Sales' department or have a salary greater than 60000.,SELECT employee_name FROM Employees WHERE department = 'Sales' UNION SELECT employee_name FROM Employees WHERE salary > 60000.0;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query returns the unique names of employees who are either part of the 'Sales' department or earn more than 60,000, combining the results with UNION."
"Retrieve all cities where customers are located, including cities where suppliers are based.",SELECT city FROM Customers UNION SELECT city FROM Suppliers;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, city TEXT, country TEXT);",This query combines all unique cities from both the Customers and Suppliers tables into a single list using the UNION operator.
Find all unique names of students who are either enrolled in 'Math' or 'Physics' courses.,SELECT S.student_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id WHERE E.course_name = 'Math' UNION SELECT S.student_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id WHERE E.course_name = 'Physics';,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, age INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_name TEXT, grade TEXT);","This query uses UNION to list all unique student names who are enrolled in either 'Math' or 'Physics' courses, joining Students and Enrollments tables."
List all distinct phone numbers associated with either active users or users who have placed orders in the last 30 days.,"SELECT phone_number FROM Users WHERE status = 'Active' UNION SELECT U.phone_number FROM Users U JOIN Orders O ON U.user_id = O.user_id WHERE O.order_date >= DATE('now', '-30 days');","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, user_name TEXT, phone_number TEXT, status TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, user_id INTEGER, order_date TEXT, total_amount REAL);","This query combines unique phone numbers of active users with those who have placed orders in the last 30 days, using the UNION operator."
Show all unique product names that are either 'Electronics' or 'Home Goods' categories.,SELECT product_name FROM Products WHERE category = 'Electronics' UNION SELECT product_name FROM Products WHERE category = 'Home Goods';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",This query uses UNION to get a distinct list of product names that fall into either the 'Electronics' or 'Home Goods' categories.
Retrieve all project IDs from both the 'CurrentProjects' and 'ArchivedProjects' tables.,SELECT project_id FROM CurrentProjects UNION ALL SELECT project_id FROM ArchivedProjects;,"CREATE TABLE CurrentProjects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT); CREATE TABLE ArchivedProjects (project_id INTEGER PRIMARY KEY, project_name TEXT, archive_date TEXT);","This query combines all project IDs from CurrentProjects and ArchivedProjects, including duplicates, using UNION ALL."
Find the names of all employees and customers who share the same name. Order the results.,SELECT employee_name FROM Employees UNION SELECT customer_name FROM Customers ORDER BY 1;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT);",This query gets all unique names from both Employees and Customers tables and then orders the combined list alphabetically.
List all employee IDs who are either managers or have been hired in the last year.,"SELECT employee_id FROM Employees WHERE position = 'Manager' UNION SELECT employee_id FROM Employees WHERE hire_date >= DATE('now', '-1 year');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, position TEXT, hire_date TEXT);","This query combines employee IDs of managers with those hired within the last year, ensuring uniqueness with UNION."
Get a list of all product categories that either have more than 100 units in stock or have a price over 1000.,SELECT category FROM Products WHERE stock_quantity > 100 UNION SELECT category FROM Products WHERE price > 1000.0;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query uses UNION to find unique product categories where either the stock quantity is over 100 or the price is over 1000.
List all customer IDs who have placed an order and also have an active subscription.,SELECT customer_id FROM Orders INTERSECT SELECT customer_id FROM Subscriptions WHERE status = 'Active';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Subscriptions (subscription_id INTEGER PRIMARY KEY, customer_id INTEGER, status TEXT);","This query finds customer IDs that exist in both the Orders table and the Subscriptions table (where the subscription is active), using INTERSECT."
Show employee names that work in 'IT' and also have 'Certified' in their skills.,SELECT employee_name FROM Employees WHERE department = 'IT' INTERSECT SELECT employee_name FROM Employees WHERE skills LIKE '%Certified%';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, skills TEXT);",This query uses INTERSECT to find names of employees who are in the 'IT' department AND have 'Certified' in their skills.
Find all product IDs that are available in both 'Store A' and 'Store B'.,SELECT product_id FROM StoreA_Inventory INTERSECT SELECT product_id FROM StoreB_Inventory;,"CREATE TABLE StoreA_Inventory (product_id INTEGER PRIMARY KEY, quantity INTEGER); CREATE TABLE StoreB_Inventory (product_id INTEGER PRIMARY KEY, quantity INTEGER);",This query returns product IDs that are present in the inventory of both 'Store A' and 'Store B' using the INTERSECT operator.
Retrieve the names of authors who have published books in both the 'Science Fiction' and 'Fantasy' genres.,SELECT author_name FROM Books WHERE genre = 'Science Fiction' INTERSECT SELECT author_name FROM Books WHERE genre = 'Fantasy';,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_name TEXT, genre TEXT);",This query finds authors who have books classified under both 'Science Fiction' and 'Fantasy' genres using INTERSECT.
List all order IDs that contain items from both 'Electronics' and 'Apparel' categories.,SELECT O.order_id FROM Orders O JOIN OrderItems OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.category = 'Electronics' INTERSECT SELECT O.order_id FROM Orders O JOIN OrderItems OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.category = 'Apparel';,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT); CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);",This query finds order IDs that contain products from both 'Electronics' and 'Apparel' categories by intersecting two sets of order IDs.
Find the IDs of courses that have students enrolled and also have a listed prerequisite.,SELECT course_id FROM Enrollments INTERSECT SELECT course_id FROM CoursePrerequisites;,"CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER); CREATE TABLE CoursePrerequisites (prerequisite_id INTEGER PRIMARY KEY, course_id INTEGER, required_course_id INTEGER);",This query uses INTERSECT to find course IDs that appear in both the Enrollments table (meaning they have students) and the CoursePrerequisites table (meaning they have prerequisites).
Show all distinct employee names who are present in the 'ActiveEmployees' list and also received a bonus.,SELECT employee_name FROM ActiveEmployees INTERSECT SELECT employee_name FROM Bonuses;,"CREATE TABLE ActiveEmployees (employee_id INTEGER PRIMARY KEY, employee_name TEXT); CREATE TABLE Bonuses (bonus_id INTEGER PRIMARY KEY, employee_name TEXT, amount REAL);","This query retrieves the unique names of employees that are found in both the ActiveEmployees table and the Bonuses table, using INTERSECT."
Identify all dates where both sales and returns occurred.,SELECT sale_date FROM Sales INTERSECT SELECT return_date FROM Returns;,"CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, sale_date TEXT, amount REAL); CREATE TABLE Returns (return_id INTEGER PRIMARY KEY, return_date TEXT, amount REAL);",This query uses INTERSECT to find dates that are present in both the Sales table (as sale_date) and the Returns table (as return_date).
List customer IDs who have ordered a product in 'Electronics' category and also a product in 'Books' category.,SELECT DISTINCT C.customer_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN OrderItems OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.category = 'Electronics' INTERSECT SELECT DISTINCT C.customer_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN OrderItems OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.category = 'Books';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);",This query identifies customers who have placed orders containing items from both 'Electronics' and 'Books' categories by intersecting two sets of customer IDs.
Show the names of products that are currently in stock but have not been sold in the last 90 days.,"SELECT product_name FROM Products WHERE stock_quantity > 0 EXCEPT SELECT P.product_name FROM Products P JOIN OrderItems OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id WHERE O.order_date >= DATE('now', '-90 days');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, stock_quantity INTEGER); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT); CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER);","This query lists products that have stock (stock_quantity > 0) but have not appeared in any orders within the last 90 days, using EXCEPT."
List all employees who are assigned to a department but are not listed as managers.,SELECT employee_id FROM Employees WHERE department IS NOT NULL EXCEPT SELECT employee_id FROM Employees WHERE position = 'Manager';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, position TEXT);","This query returns employee IDs who have a department assigned but are not listed with the 'Manager' position, using the EXCEPT operator."
Find all customer IDs who have registered but have never placed an order.,SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Orders;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","This query identifies customer IDs present in the Customers table but not in the Orders table, meaning they registered but never ordered, using EXCEPT."
Show the names of all courses that exist but have no current enrollments.,SELECT course_name FROM Courses EXCEPT SELECT course_name FROM Enrollments;,"CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_name TEXT);","This query lists courses that are defined in the Courses table but do not appear in the Enrollments table, indicating no current students, using EXCEPT."
Retrieve project names that are in 'Active' status but are not assigned to any team.,SELECT project_name FROM Projects WHERE status = 'Active' EXCEPT SELECT project_name FROM ProjectAssignments;,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, status TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, project_name TEXT, team_id INTEGER);","This query finds active projects that do not have an entry in the ProjectAssignments table, indicating they are unassigned, using EXCEPT."
List all product IDs that are in the 'Electronics' category but are not in stock.,SELECT product_id FROM Products WHERE category = 'Electronics' EXCEPT SELECT product_id FROM Products WHERE stock_quantity > 0;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER);",This query uses EXCEPT to find product IDs that are categorized as 'Electronics' but have a stock_quantity of 0 or less.
Find the IDs of books that have been written by 'Jane Doe' but are not classified as 'Fiction'.,SELECT book_id FROM Books WHERE author = 'Jane Doe' EXCEPT SELECT book_id FROM Books WHERE genre = 'Fiction';,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT);","This query retrieves book IDs authored by 'Jane Doe' but excludes any of those books that are categorized as 'Fiction', using EXCEPT."
Show the names of students who passed 'Math' but did not pass 'Chemistry'.,SELECT S.student_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id WHERE E.course_name = 'Math' AND E.grade = 'A' EXCEPT SELECT S.student_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id WHERE E.course_name = 'Chemistry' AND E.grade = 'A';,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_name TEXT, grade TEXT);","This query finds students who achieved an 'A' in 'Math' but did not achieve an 'A' in 'Chemistry', using EXCEPT."
"List product categories that have at least one product with stock greater than 100 AND also have at least one product with price greater than 500, but are NOT 'Accessories'.",(SELECT category FROM Products WHERE stock_quantity > 100 INTERSECT SELECT category FROM Products WHERE price > 500.0) EXCEPT SELECT category FROM Products WHERE category = 'Accessories';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query first finds categories that meet both stock and price criteria using INTERSECT, then removes 'Accessories' from that set using EXCEPT."
"Show employee names that either work in 'HR' or 'Finance', but are not 'Senior' level.",(SELECT employee_name FROM Employees WHERE department = 'HR' UNION SELECT employee_name FROM Employees WHERE department = 'Finance') EXCEPT SELECT employee_name FROM Employees WHERE position = 'Senior Staff';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, position TEXT);","This query first combines employees from 'HR' and 'Finance' departments using UNION, then removes any 'Senior Staff' from that combined list using EXCEPT."
"Find all unique email addresses of users who either subscribed to a newsletter or made a purchase, excluding those who opted out of marketing.",(SELECT email FROM NewsletterSubscribers UNION SELECT email FROM Purchases) EXCEPT SELECT email FROM UserPreferences WHERE marketing_opt_out = 1;,"CREATE TABLE NewsletterSubscribers (subscriber_id INTEGER PRIMARY KEY, email TEXT, subscribe_date TEXT); CREATE TABLE Purchases (purchase_id INTEGER PRIMARY KEY, email TEXT, purchase_date TEXT); CREATE TABLE UserPreferences (user_id INTEGER PRIMARY KEY, email TEXT, marketing_opt_out INTEGER);","This query first combines unique emails from newsletter subscribers and purchasers using UNION, and then removes emails of users who opted out of marketing using EXCEPT."
What is today's date?,SELECT DATE('now');,No table used.,Retrieves the current date from the system.
List all orders placed yesterday.,"SELECT * FROM Orders WHERE order_date = DATE('now', '-1 day');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Selects all columns from the Orders table where the order_date matches yesterday's date.
Show all sales records for January 2023.,"SELECT * FROM Sales WHERE STRFTIME('%Y-%m', sale_date) = '2023-01';","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity INTEGER, price REAL);",Filters sales records to include only those where the year and month of the sale_date are January 2023.
Count the number of orders placed each day.,"SELECT order_date, COUNT(order_id) AS total_orders FROM Orders GROUP BY order_date ORDER BY order_date;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Groups orders by their respective dates and counts the number of orders for each day, then orders the results by date."
"Get the name and age of each employee, assuming today is the current date.","SELECT employee_name, CAST(JULIANDAY('now') - JULIANDAY(date_of_birth) AS INTEGER) / 365 AS age FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, date_of_birth TEXT, hire_date TEXT);",Calculates the age of each employee by subtracting their date of birth from the current date in Julian days and converting the difference to years.
"Find all events scheduled to occur within the next week, starting from tomorrow.","SELECT * FROM Events WHERE event_date BETWEEN DATE('now', '+1 day') AND DATE('now', '+7 days');","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, location TEXT);",Retrieves events that are scheduled between tomorrow's date and 7 days from now.
List employees who were hired in the past six months.,"SELECT employee_name FROM Employees WHERE hire_date >= DATE('now', '-6 months');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, date_of_birth TEXT, hire_date TEXT);",Selects employees whose hire date is on or after six months ago from the current date.
"Calculate the average duration of tasks in hours, considering start and end times.",SELECT AVG((JULIANDAY(end_time) - JULIANDAY(start_time)) * 24) AS average_duration_hours FROM Tasks WHERE start_time IS NOT NULL AND end_time IS NOT NULL;,"CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, start_time TEXT, end_time TEXT, status TEXT);","Calculates the difference between end and start times in Julian days, converts it to hours, and then computes the average duration for all tasks."
Find orders that were shipped on a Saturday or Sunday.,"SELECT * FROM Shipments WHERE STRFTIME('%w', ship_date) IN ('0', '6');","CREATE TABLE Shipments (shipment_id INTEGER PRIMARY KEY, order_id INTEGER, ship_date TEXT, delivery_date TEXT);",Selects shipments where the weekday of the ship_date is either 0 (Sunday) or 6 (Saturday).
"For each customer, find the date of their first order.","SELECT customer_id, MIN(order_date) AS first_order_date FROM Orders GROUP BY customer_id;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Groups orders by customer ID and finds the earliest order date for each customer.
What are the total sales for each year?,"SELECT STRFTIME('%Y', sale_date) AS sales_year, SUM(price * quantity) AS total_sales FROM Sales GROUP BY sales_year ORDER BY sales_year;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity INTEGER, price REAL);","Extracts the year from the sale date, groups sales by year, and calculates the sum of (price * quantity) for each year."
List customers who have placed an order in the last 30 days.,"SELECT DISTINCT customer_id FROM Orders WHERE order_date >= DATE('now', '-30 days');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Selects unique customer IDs for orders placed within the last 30 days from the current date.
Show the message and timestamp of the most recent log entry.,"SELECT message, timestamp FROM SystemLogs ORDER BY timestamp DESC LIMIT 1;","CREATE TABLE SystemLogs (log_id INTEGER PRIMARY KEY, timestamp TEXT, log_level TEXT, message TEXT);",Orders log entries by timestamp in descending order and returns the message and timestamp of the first (most recent) entry.
Products that expire in the current month,"SELECT product_name FROM Products WHERE STRFTIME('%Y-%m', expiry_date) = STRFTIME('%Y-%m', 'now');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, expiry_date TEXT, price REAL);",Selects product names where the year and month of their expiry date match the current year and month.
"List tasks that are overdue, meaning their due date is in the past and they are not completed.",SELECT * FROM Tasks WHERE due_date < DATE('now') AND status <> 'Completed';,"CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, due_date TEXT, status TEXT);",Retrieves tasks where the due date is earlier than the current date and the task status is not 'Completed'.
Find all events scheduled for 3 PM on any day.,"SELECT * FROM Events WHERE STRFTIME('%H:%M', event_time) = '15:00';","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, event_time TEXT, location TEXT);",Selects events where the hour and minute part of the event_time field is exactly '15:00' (3 PM).
Calculate the average total amount for orders that were placed on a Monday.,"SELECT AVG(total_amount) AS average_monday_sales FROM Orders WHERE STRFTIME('%w', order_date) = '1';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Calculates the average of the total_amount for all orders where the order_date falls on a Monday (weekday '1').
Combine the event date and event time columns into a single timestamp for each event.,"SELECT event_name, DATETIME(event_date || ' ' || event_time) AS full_timestamp FROM Events;","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, event_time TEXT, location TEXT);",Concatenates the event_date and event_time strings and converts them into a combined DATETIME format.
How many patients were born in each year?,"SELECT STRFTIME('%Y', date_of_birth) AS birth_year, COUNT(patient_id) AS patient_count FROM Patients GROUP BY birth_year ORDER BY birth_year;","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT, date_of_birth TEXT, admission_date TEXT);",Groups patients by their birth year and counts the number of patients for each year.
Get total sales for the first quarter (January-March) of 2023.,SELECT SUM(price * quantity) AS total_q1_sales FROM Sales WHERE sale_date BETWEEN '2023-01-01' AND '2023-03-31';,"CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity INTEGER, price REAL);",Sums the total sales for records where the sale date falls within the first quarter of 2023.
Find employees who were hired in the same month and year as 'Alice Smith'.,"SELECT E2.employee_name FROM Employees E1 JOIN Employees E2 ON STRFTIME('%Y-%m', E1.hire_date) = STRFTIME('%Y-%m', E2.hire_date) WHERE E1.employee_name = 'Alice Smith' AND E2.employee_name <> 'Alice Smith';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, date_of_birth TEXT, hire_date TEXT);","Joins the Employees table to itself to find employees whose hiring month and year match that of 'Alice Smith', excluding 'Alice Smith' herself."
List all system log entries that are older than 3 months from now.,"SELECT * FROM SystemLogs WHERE timestamp < DATE('now', '-3 months');","CREATE TABLE SystemLogs (log_id INTEGER PRIMARY KEY, timestamp TEXT, log_level TEXT, message TEXT);",Selects log entries whose timestamp is earlier than 3 months ago from the current date.
"For each customer, show their earliest and latest order dates.","SELECT customer_id, MIN(order_date) AS first_order, MAX(order_date) AS last_order FROM Orders GROUP BY customer_id;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Groups orders by customer and finds the minimum (earliest) and maximum (latest) order dates for each customer.
Show orders placed within the last 60 minutes.,"SELECT * FROM Orders WHERE order_timestamp >= DATETIME('now', '-60 minutes');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_timestamp TEXT, total_amount REAL);",Retrieves orders where the order_timestamp is within the last 60 minutes from the current time.
Calculate the total sales for each month and show the previous month's sales.,"WITH MonthlySales AS (SELECT STRFTIME('%Y-%m', sale_date) AS sales_month, SUM(price * quantity) AS total_monthly_sales FROM Sales GROUP BY sales_month) SELECT T1.sales_month, T1.total_monthly_sales, (SELECT T2.total_monthly_sales FROM MonthlySales T2 WHERE T2.sales_month = STRFTIME('%Y-%m', T1.sales_month || '-01', '-1 month')) AS previous_month_sales FROM MonthlySales T1 ORDER BY T1.sales_month;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity INTEGER, price REAL);","First, calculates total sales for each month using a CTE. Then, for each month, it finds the total sales of the previous month by deriving the previous month's string."
List all events that are scheduled to happen on a Tuesday.,"SELECT * FROM Events WHERE STRFTIME('%w', event_date) = '2';","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, location TEXT);","Selects events where the weekday of the event_date is 2 (Tuesday, assuming Sunday is 0)."
"For each employee, display their name and how many days have passed since their hiring.","SELECT employee_name, JULIANDAY('now') - JULIANDAY(hire_date) AS days_since_hire FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, date_of_birth TEXT, hire_date TEXT);",Calculates the difference in days between the current date and each employee's hire date using julianday.
Count the number of completed tasks for each week of the year.,"SELECT STRFTIME('%Y-%W', completion_date) AS week_of_year, COUNT(task_id) AS completed_tasks_count FROM Tasks WHERE status = 'Completed' GROUP BY week_of_year ORDER BY week_of_year;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, creation_date TEXT, due_date TEXT, completion_date TEXT, status TEXT);","Groups completed tasks by their year and week number and counts them, ordering by week."
Find patients who were admitted and discharged in the same calendar quarter.,"SELECT patient_name FROM Patients WHERE (CAST(STRFTIME('%Y', admission_date) AS INTEGER) = CAST(STRFTIME('%Y', discharge_date) AS INTEGER)) AND ((CAST(STRFTIME('%m', admission_date) AS INTEGER) - 1) / 3 = (CAST(STRFTIME('%m', discharge_date) AS INTEGER) - 1) / 3);","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT, admission_date TEXT, discharge_date TEXT);",Selects patients where both the year and the calculated quarter (based on month) of their admission date match those of their discharge date.
Calculate the average order amount for orders placed before 12:00 PM (noon).,"SELECT AVG(total_amount) AS avg_morning_orders FROM Orders WHERE STRFTIME('%H', order_timestamp) < '12';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_timestamp TEXT, total_amount REAL);",Calculates the average of the total_amount for orders where the hour of the order_timestamp is before '12' (noon).
"List all products, sorted by their price from lowest to highest.","SELECT id, name, price, stock FROM Products ORDER BY price ASC;","CREATE TABLE Products (id INTEGER PRIMARY KEY, name TEXT, price REAL, stock INTEGER, category TEXT);","Retrieves the ID, name, price, and stock of all products, ordered by price in ascending order."
Show the 10 most expensive products.,"SELECT id, name, price FROM Products ORDER BY price DESC LIMIT 10;","CREATE TABLE Products (id INTEGER PRIMARY KEY, name TEXT, price REAL, stock INTEGER, category TEXT);","Selects the ID, name, and price of the ten most expensive products."
Get the names of employees sorted alphabetically.,SELECT name FROM Employees ORDER BY name ASC;,"CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER);","Fetches the names of all employees, ordered alphabetically by their name."
Find the 5 employees with the highest salaries.,"SELECT id, name, salary FROM Employees ORDER BY salary DESC LIMIT 5;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER);","Retrieves the ID, name, and salary of the five employees with the highest salaries."
"Display books sorted by author, then by publication year in ascending order.","SELECT title, author, publication_year FROM Books ORDER BY author ASC, publication_year ASC;","CREATE TABLE Books (id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_year INTEGER, genre TEXT, pages INTEGER, price REAL);","Lists book titles, authors, and publication years, sorted first by author's name alphabetically, then by publication year for books by the same author."
"Retrieve the first 20 movies, ordered by release year from newest to oldest.","SELECT title, director, release_year FROM Movies ORDER BY release_year DESC LIMIT 20;","CREATE TABLE Movies (id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL);","Gets the titles, directors, and release years of the 20 most recently released movies."
"Get movies from the third page, showing 5 per page, sorted by rating in descending order.","SELECT title, rating FROM Movies ORDER BY rating DESC LIMIT 5 OFFSET 10;","CREATE TABLE Movies (id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL);","Selects the titles and ratings of 5 movies, skipping the first 10, from a list sorted by rating in descending order. This represents the third page of results (5 per page)."
"List products in the 'Electronics' category, sorted by stock quantity from lowest to highest.","SELECT name, stock FROM Products WHERE category = 'Electronics' ORDER BY stock ASC;","CREATE TABLE Products (id INTEGER PRIMARY KEY, name TEXT, price REAL, stock INTEGER, category TEXT);","Filters products to only include those in the 'Electronics' category, then lists their names and stock quantities, ordered by stock from lowest to highest."
Find the 3 most recent orders.,"SELECT id, order_date, total_price FROM Orders ORDER BY order_date DESC LIMIT 3;","CREATE TABLE Orders (id INTEGER PRIMARY KEY, customer_id INTEGER, product_id INTEGER, order_date TEXT, quantity INTEGER, total_price REAL);","Retrieves the ID, order date, and total price for the three latest orders."
"Show employee names and their department names, sorted by department name alphabetically, then by employee name.","SELECT E.name AS employee_name, D.name AS department_name FROM Employees AS E JOIN Departments AS D ON E.department_id = D.id ORDER BY D.name ASC, E.name ASC;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER); CREATE TABLE Departments (id INTEGER PRIMARY KEY, name TEXT, location TEXT);","Joins Employees and Departments tables to display employee and department names, sorted primarily by department name alphabetically and secondarily by employee name alphabetically."
"List all customers, ordered by their registration date from oldest to newest.","SELECT id, name, registration_date FROM Customers ORDER BY registration_date ASC;","CREATE TABLE Customers (id INTEGER PRIMARY KEY, name TEXT, email TEXT, registration_date TEXT);","Fetches the ID, name, and registration date of all customers, ordered by their registration date from the earliest to the latest."
Get the employee with the lowest salary.,"SELECT id, name, salary FROM Employees ORDER BY salary ASC LIMIT 1;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER);","Selects the ID, name, and salary of the single employee with the lowest salary."
Show the top 5 customers by the total amount they've spent.,"SELECT C.name, SUM(O.total_price) AS total_spent FROM Customers AS C JOIN Orders AS O ON C.id = O.customer_id GROUP BY C.name ORDER BY total_spent DESC LIMIT 5;","CREATE TABLE Customers (id INTEGER PRIMARY KEY, name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (id INTEGER PRIMARY KEY, customer_id INTEGER, product_id INTEGER, order_date TEXT, quantity INTEGER, total_price REAL);","Calculates the total spending for each customer by joining Customers and Orders tables, then lists the names and total amounts for the top 5 customers with the highest spending."
"List all products, but show only every 5th product, starting from the first, when sorted by name.","SELECT id, name FROM Products ORDER BY name ASC LIMIT 1000000 OFFSET 0; -- This cannot be directly achieved with LIMIT/OFFSET for 'every Nth', but can simulate a large list to pick from","CREATE TABLE Products (id INTEGER PRIMARY KEY, name TEXT, price REAL, stock INTEGER, category TEXT);","This specific request ('every 5th product') is not directly achievable with a simple LIMIT/OFFSET in SQL without a subquery involving row numbers or multiple queries. The query shown would return all products (or a very large number), sorted by name. To get 'every 5th', one would typically need window functions like ROW_NUMBER() which are not standard in all SQLite versions, or a more complex client-side loop."
Find the oldest and newest employee hire dates.,"SELECT MIN(hire_date) AS oldest_hire, MAX(hire_date) AS newest_hire FROM Employees;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER);","Retrieves the earliest and latest hire dates from the Employees table without explicit ORDER BY, using aggregate functions."
"Get the titles of books published after 2000, sorted by title alphabetically.",SELECT title FROM Books WHERE publication_year > 2000 ORDER BY title ASC;,"CREATE TABLE Books (id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_year INTEGER, genre TEXT, pages INTEGER, price REAL);",Filters books published after the year 2000 and lists their titles in alphabetical order.
"Retrieve the top 5 temperature readings from sensor_id 'A101', ordered by timestamp descending.","SELECT timestamp, temperature FROM SensorData WHERE sensor_id = 'A101' ORDER BY timestamp DESC LIMIT 5;","CREATE TABLE SensorData (id INTEGER PRIMARY KEY, sensor_id TEXT, timestamp TEXT, temperature REAL, humidity REAL);",Fetches the 5 most recent temperature readings for a specific sensor ('A101').
"List products by category in alphabetical order, then by price in descending order within each category.","SELECT name, category, price FROM Products ORDER BY category ASC, price DESC;","CREATE TABLE Products (id INTEGER PRIMARY KEY, name TEXT, price REAL, stock INTEGER, category TEXT);","Retrieves product names, categories, and prices, sorted first by category name alphabetically, then by price from highest to lowest within each category."
Get the 5 most expensive orders (by total price) that occurred in 2023.,"SELECT id, order_date, total_price FROM Orders WHERE STRFTIME('%Y', order_date) = '2023' ORDER BY total_price DESC LIMIT 5;","CREATE TABLE Orders (id INTEGER PRIMARY KEY, customer_id INTEGER, product_id INTEGER, order_date TEXT, quantity INTEGER, total_price REAL);","Filters orders to those placed in the year 2023, then selects the ID, order date, and total price for the five most expensive orders among them."
"Show the average salary for each department, ordered by average salary descending, showing only the top 3 departments.","SELECT D.name, AVG(E.salary) AS avg_salary FROM Departments AS D JOIN Employees AS E ON D.id = E.department_id GROUP BY D.name ORDER BY avg_salary DESC LIMIT 3;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER); CREATE TABLE Departments (id INTEGER PRIMARY KEY, name TEXT, location TEXT);","Calculates the average salary for employees in each department, then lists the names and average salaries for the three departments with the highest average salaries."
"List all movies, ordered by their title length in ascending order.","SELECT title, LENGTH(title) AS title_length FROM Movies ORDER BY title_length ASC;","CREATE TABLE Movies (id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL);","Retrieves the title and its length for all movies, ordered by the shortest title first."
"Get the second batch of 5 employees, sorted by hire date from oldest to newest.","SELECT id, name, hire_date FROM Employees ORDER BY hire_date ASC LIMIT 5 OFFSET 5;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary REAL, hire_date TEXT, department_id INTEGER);","Selects the ID, name, and hire date for 5 employees, skipping the first 5, from a list sorted by hire date in ascending order. This effectively retrieves the second page of 5 employees."
"Show product names and their remaining stock, sorted such that products with zero stock appear last, then by stock quantity descending for others.","SELECT name, stock FROM Products ORDER BY CASE WHEN stock = 0 THEN 1 ELSE 0 END ASC, stock DESC;","CREATE TABLE Products (id INTEGER PRIMARY KEY, name TEXT, price REAL, stock INTEGER, category TEXT);","Lists product names and stock quantities, arranging products with zero stock at the end. For products with stock greater than zero, they are sorted by stock quantity from highest to lowest."
Retrieve a random customer's email address.,SELECT email FROM Customers ORDER BY RANDOM() LIMIT 1;,"CREATE TABLE Customers (id INTEGER PRIMARY KEY, name TEXT, email TEXT, registration_date TEXT);",Selects a single random email address from the Customers table.
Find the book with the most pages.,"SELECT title, pages FROM Books ORDER BY pages DESC LIMIT 1;","CREATE TABLE Books (id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_year INTEGER, genre TEXT, pages INTEGER, price REAL);",Retrieves the title and page count of the book with the highest number of pages.
"List all log entries, sorted by level (ERROR first, then INFO, then DEBUG), then by log time descending.","SELECT id, level, log_time, message FROM Logs ORDER BY CASE level WHEN 'ERROR' THEN 1 WHEN 'INFO' THEN 2 WHEN 'DEBUG' THEN 3 ELSE 4 END ASC, log_time DESC;","CREATE TABLE Logs (id INTEGER PRIMARY KEY, log_time TEXT, level TEXT, message TEXT);","Sorts log entries by their level in a custom order (ERROR, INFO, DEBUG), and then by the most recent log time within each level."
Get the top 3 highest-rated movies for the 'Action' genre.,"SELECT title, rating FROM Movies WHERE genre = 'Action' ORDER BY rating DESC LIMIT 3;","CREATE TABLE Movies (id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL);",Filters movies to only the 'Action' genre and then returns the titles and ratings of the three highest-rated movies within that genre.
"Display customers whose names start with 'A', sorted by their name.","SELECT id, name FROM Customers WHERE name LIKE 'A%' ORDER BY name ASC;","CREATE TABLE Customers (id INTEGER PRIMARY KEY, name TEXT, email TEXT, registration_date TEXT);",Selects customers whose names begin with 'A' and lists their IDs and names alphabetically.
"List all orders, showing the total price first, then the order date, both in descending order.","SELECT id, total_price, order_date FROM Orders ORDER BY total_price DESC, order_date DESC;","CREATE TABLE Orders (id INTEGER PRIMARY KEY, customer_id INTEGER, product_id INTEGER, order_date TEXT, quantity INTEGER, total_price REAL);","Retrieves order ID, total price, and order date, sorted primarily by total price from highest to lowest, and secondarily by the most recent order date."
"Show the product categories and the number of products in each, ordered by the count of products in descending order.","SELECT category, COUNT(id) AS product_count FROM Products GROUP BY category ORDER BY product_count DESC;","CREATE TABLE Products (id INTEGER PRIMARY KEY, name TEXT, price REAL, stock INTEGER, category TEXT);","Counts the number of products in each category and lists the categories along with their product counts, ordered from the category with the most products to the least."
Get all products belonging to the 'Electronics' or 'Home Appliances' categories.,"SELECT productName, price FROM Products WHERE category IN ('Electronics', 'Home Appliances');","CREATE TABLE Products (productId INTEGER PRIMARY KEY, productName TEXT, category TEXT, price REAL, stockQuantity INTEGER, lastUpdated DATE);",Retrieves the name and price of products where the category is either 'Electronics' or 'Home Appliances' using the IN operator.
List the names of customers who have placed orders with a total amount greater than 500.,SELECT customerName FROM Customers WHERE customerId IN (SELECT customerId FROM Orders WHERE totalAmount > 500);,"CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","Selects customer names for customers whose IDs are found in the list of customer IDs from orders where the total amount exceeds 500, utilizing a subquery with IN."
Find employees who are not in the 'HR' or 'Finance' departments.,"SELECT firstName, lastName, department FROM Employees WHERE department NOT IN ('HR', 'Finance');","CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));","Fetches the first name, last name, and department of employees whose department is neither 'HR' nor 'Finance' using NOT IN."
Show customer names who have placed at least one order.,SELECT customerName FROM Customers c WHERE EXISTS (SELECT 1 FROM Orders o WHERE o.customerId = c.customerId);,"CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","Retrieves customer names for customers who have at least one corresponding entry in the Orders table, using a correlated subquery with EXISTS."
List departments that have at least one employee earning more than 70000.,SELECT DISTINCT department FROM Employees e WHERE EXISTS (SELECT 1 FROM Employees WHERE department = e.department AND salary > 70000);,"CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));","Finds unique department names where there is at least one employee in that department with a salary greater than 70000, using EXISTS."
Get the names of customers who have not placed any orders yet.,SELECT customerName FROM Customers c WHERE NOT EXISTS (SELECT 1 FROM Orders o WHERE o.customerId = c.customerId);,"CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","Selects customer names for customers who do not have any corresponding entries in the Orders table, using NOT EXISTS."
"Find products with prices between 50 and 200, inclusive.","SELECT productName, price FROM Products WHERE price BETWEEN 50.00 AND 200.00;","CREATE TABLE Products (productId INTEGER PRIMARY KEY, productName TEXT, category TEXT, price REAL, stockQuantity INTEGER, lastUpdated DATE);","Returns the name and price of products whose price is within the range of 50.00 to 200.00, including the boundaries, using the BETWEEN operator."
List orders placed in the first quarter of 2023.,"SELECT orderId, orderDate, totalAmount FROM Orders WHERE orderDate BETWEEN '2023-01-01' AND '2023-03-31';","CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","Retrieves order details for orders placed between January 1, 2023, and March 31, 2023, inclusive, using BETWEEN for dates."
Find all products whose names start with 'Smart'.,SELECT productName FROM Products WHERE productName LIKE 'Smart%';,"CREATE TABLE Products (productId INTEGER PRIMARY KEY, productName TEXT, category TEXT, price REAL, stockQuantity INTEGER, lastUpdated DATE);","Selects product names that begin with the word 'Smart', using the LIKE operator with a wildcard."
"Get employees whose first name has 'an' in the second and third position, like 'Daniel' or 'Mandy'.","SELECT firstName, lastName FROM Employees WHERE firstName LIKE '_an%';","CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));","Retrieves employees whose first name has 'an' as the second and third characters, using the LIKE operator with underscore and percentage wildcards."
List customers whose email addresses do not end with '.com'.,"SELECT customerName, email FROM Customers WHERE email NOT LIKE '%.com';","CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","Finds customer names and emails for customers whose email addresses do not finish with '.com', using NOT LIKE."
Find products in categories that have an average price greater than 100.,"SELECT productName, category FROM Products WHERE category IN (SELECT category FROM Products GROUP BY category HAVING AVG(price) > 100);","CREATE TABLE Products (productId INTEGER PRIMARY KEY, productName TEXT, category TEXT, price REAL, stockQuantity INTEGER, lastUpdated DATE);","Selects product names and their categories where the category's average product price is greater than 100, using IN with a subquery and aggregation."
Find employees who are assigned to at least one task that is overdue.,"SELECT e.firstName, e.lastName FROM Employees e WHERE EXISTS (SELECT 1 FROM Tasks t WHERE t.assignedToEmployeeId = e.employeeId AND t.dueDate < DATE('now') AND t.status != 'Completed');","CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));CREATE TABLE Tasks (taskId INTEGER PRIMARY KEY, taskName TEXT, assignedToEmployeeId INTEGER, dueDate DATE, status TEXT, priority TEXT, FOREIGN KEY (assignedToEmployeeId) REFERENCES Employees(employeeId));","Retrieves the first and last names of employees who have tasks assigned to them that are past due and not yet completed, using EXISTS and SQLite's DATE function."
Find orders placed within the last 30 days.,"SELECT orderId, orderDate FROM Orders WHERE orderDate BETWEEN DATE('now', '-30 days') AND DATE('now');","CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","Selects order IDs and dates for orders placed within the last 30 days up to today, using BETWEEN with SQLite's DATE function."
Find all customers whose city name contains 'new' (case-insensitive).,"SELECT customerName, city FROM Customers WHERE city LIKE '%new%' COLLATE NOCASE;","CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","Retrieves customer names and cities where the city name contains 'new', ignoring case, using LIKE and COLLATE NOCASE."
"Select tasks that are either 'High' priority and 'Pending' status, or 'Medium' priority and 'In Progress' status.","SELECT taskId, taskName, priority, status FROM Tasks WHERE (priority = 'High' AND status = 'Pending') OR (priority = 'Medium' AND status = 'In Progress');","CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));CREATE TABLE Tasks (taskId INTEGER PRIMARY KEY, taskName TEXT, assignedToEmployeeId INTEGER, dueDate DATE, status TEXT, priority TEXT, FOREIGN KEY (assignedToEmployeeId) REFERENCES Employees(employeeId));","Selects tasks where the priority is 'High' and status is 'Pending', or where priority is 'Medium' and status is 'In Progress', using logical operators as SQLite does not directly support multi-column IN."
List departments that have at least one employee with a salary greater than the average salary of their department.,SELECT DISTINCT d.department FROM Employees d WHERE EXISTS (SELECT 1 FROM Employees e2 WHERE e2.department = d.department AND e2.salary > (SELECT AVG(salary) FROM Employees WHERE department = d.department));,"CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));","Finds unique department names where there is at least one employee whose salary is higher than the average salary of their respective department, using nested EXISTS and aggregation."
"Find products whose names alphabetically fall between 'A' and 'C' (inclusive of 'A', exclusive of 'C' unless it starts with C and ends before next char).",SELECT productName FROM Products WHERE productName BETWEEN 'A' AND 'Cz';,"CREATE TABLE Products (productId INTEGER PRIMARY KEY, productName TEXT, category TEXT, price REAL, stockQuantity INTEGER, lastUpdated DATE);","Retrieves product names that alphabetically start with 'A' or 'B', or start with 'C' and appear before any name starting with 'Cz', using BETWEEN for strings."
"Find employees whose first name starts with 'J' and ends with 'n', or contains 'ie'.","SELECT firstName, lastName FROM Employees WHERE (firstName LIKE 'J%n' OR firstName LIKE '%ie%');","CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));","Selects employees whose first name starts with 'J' and ends with 'n', or whose first name contains 'ie', using LIKE with OR."
"Get all customers who placed orders in a non-existent status, ensuring no results are returned.",SELECT customerName FROM Customers WHERE customerId IN (SELECT customerId FROM Orders WHERE status = 'NonExistentStatus');,"CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","This query attempts to find customers whose IDs are present in a subquery that will return an empty set (assuming 'NonExistentStatus' does not exist), thus demonstrating an empty result for IN."
Find employees who are NOT assigned to any 'Pending' tasks.,"SELECT firstName, lastName FROM Employees e WHERE NOT EXISTS (SELECT 1 FROM Tasks t WHERE t.assignedToEmployeeId = e.employeeId AND t.status = 'Pending');","CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));CREATE TABLE Tasks (taskId INTEGER PRIMARY KEY, taskName TEXT, assignedToEmployeeId INTEGER, dueDate DATE, status TEXT, priority TEXT, FOREIGN KEY (assignedToEmployeeId) REFERENCES Employees(employeeId));","Retrieves the first and last names of employees who do not have any tasks with a 'Pending' status assigned to them, using NOT EXISTS."
Find employees who were hired between 5 and 10 years ago.,"SELECT firstName, lastName, hireDate FROM Employees WHERE hireDate BETWEEN DATE('now', '-10 years') AND DATE('now', '-5 years');","CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));","Selects employees whose hire date falls between 5 and 10 years ago from the current date, using BETWEEN with SQLite's DATE function for relative dates."
"List customer emails that follow the format 'first.last@domain.com', where 'first' and 'last' can be any characters and 'domain' is 'example'.","SELECT customerName, email FROM Customers WHERE email LIKE '%.%@example.com';","CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","Retrieves customer names and emails where the email address matches the pattern of having something, then a dot, then something, followed by '@example.com', using LIKE."
Get the names of products whose categories have more than 5 distinct products.,"SELECT productName, category FROM Products WHERE category IN (SELECT category FROM Products GROUP BY category HAVING COUNT(DISTINCT productId) > 5);","CREATE TABLE Products (productId INTEGER PRIMARY KEY, productName TEXT, category TEXT, price REAL, stockQuantity INTEGER, lastUpdated DATE);","Selects product names and their categories for products belonging to categories that contain more than 5 unique products, using IN with a subquery and aggregation."
Find customers who have placed orders on at least two different dates.,SELECT c.customerName FROM Customers c WHERE (SELECT COUNT(DISTINCT orderDate) FROM Orders o WHERE o.customerId = c.customerId) >= 2;,"CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","Retrieves customer names for customers who have placed orders on two or more distinct dates, using a subquery for counting distinct order dates."
"Find products with stock quantity between 10 and 50, and their price is greater than 20.","SELECT productName, stockQuantity, price FROM Products WHERE stockQuantity BETWEEN 10 AND 50 AND price > 20;","CREATE TABLE Products (productId INTEGER PRIMARY KEY, productName TEXT, category TEXT, price REAL, stockQuantity INTEGER, lastUpdated DATE);","Selects products whose stock quantity is between 10 and 50 (inclusive) and whose price is greater than 20, combining BETWEEN with another condition."
Find customer emails from Gmail or Outlook domains.,"SELECT customerName, email FROM Customers WHERE email LIKE '%@gmail.com' OR email LIKE '%@outlook.com';","CREATE TABLE Customers (customerId INTEGER PRIMARY KEY, customerName TEXT, email TEXT, registrationDate DATE, city TEXT, country TEXT);CREATE TABLE Orders (orderId INTEGER PRIMARY KEY, customerId INTEGER, orderDate DATE, totalAmount REAL, status TEXT, FOREIGN KEY (customerId) REFERENCES Customers(customerId));","Retrieves customer names and emails for customers whose email address ends with '@gmail.com' or '@outlook.com', using LIKE with OR."
List employees who manage at least one employee in the 'Sales' or 'Marketing' department.,"SELECT e.firstName, e.lastName FROM Employees e WHERE e.employeeId IN (SELECT managerId FROM Employees WHERE department IN ('Sales', 'Marketing') AND managerId IS NOT NULL);","CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));","Selects employees who are managers of other employees, where those managed employees belong to the 'Sales' or 'Marketing' departments, using IN with a subquery."
Find employees who manage at least one other employee.,"SELECT e.firstName, e.lastName FROM Employees e WHERE EXISTS (SELECT 1 FROM Employees sub WHERE sub.managerId = e.employeeId);","CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));","Retrieves the first and last names of employees who are managers of at least one other employee, using EXISTS to check for subordinate relationships."
Get employees from departments starting with 'Dev' whose salaries are between 60000 and 90000.,"SELECT firstName, lastName, salary, department FROM Employees WHERE department LIKE 'Dev%' AND salary BETWEEN 60000 AND 90000;","CREATE TABLE Employees (employeeId INTEGER PRIMARY KEY, firstName TEXT, lastName TEXT, department TEXT, hireDate DATE, salary REAL, managerId INTEGER, FOREIGN KEY (managerId) REFERENCES Employees(employeeId));","Selects employees whose department starts with 'Dev' and whose salary is between 60000 and 90000, inclusive, combining LIKE and BETWEEN operators."
"For each employee, retrieve their name, current salary, and the average salary of their department.","SELECT E1.name, E1.salary, (SELECT AVG(E2.salary) FROM Employees E2 WHERE E2.department_id = E1.department_id) AS department_average_salary FROM Employees AS E1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);",This query selects each employee's name and salary. It uses a correlated subquery in the SELECT clause to calculate the average salary for each employee's specific department.
List the names of all products that have never been included in any order.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","This query finds products whose IDs do not appear in the Order_Items table, indicating they have never been sold."
Find the names of departments that have more than 5 employees.,"SELECT D.department_name FROM Departments D JOIN (SELECT department_id, COUNT(employee_id) AS employee_count FROM Employees GROUP BY department_id) AS DeptCounts ON D.department_id = DeptCounts.department_id WHERE DeptCounts.employee_count > 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query uses a derived table (subquery in FROM clause) to first count employees per department, then joins it with the Departments table to filter for departments with more than 5 employees."
Retrieve the names of employees whose salary is greater than the overall average salary of all employees.,"SELECT name, salary FROM Employees WHERE salary > (SELECT AVG(salary) FROM Employees);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER);",This query selects employees whose salary is higher than the scalar value returned by a subquery that calculates the average salary across all employees.
"List the names of departments that have at least one employee earning more than $100,000.",SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary > 100000);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query uses an EXISTS subquery to check if there is any employee in a given department who meets the salary condition, returning department names that satisfy this."
Find the names of customers who have placed orders for products categorized as 'Electronics'.,SELECT C.customer_name FROM Customers C WHERE C.customer_id IN (SELECT DISTINCT O.customer_id FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.category = 'Electronics');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects customer names whose IDs are found in a list generated by a subquery. The subquery identifies customer IDs associated with orders that contain 'Electronics' products.
"For each employee, display their name, salary, and the average salary of the department their manager belongs to.","SELECT E1.name, E1.salary, (SELECT AVG(E3.salary) FROM Employees E3 WHERE E3.department_id = (SELECT E2.department_id FROM Employees E2 WHERE E2.employee_id = E1.manager_id)) AS manager_dept_avg_salary FROM Employees E1 WHERE E1.manager_id IS NOT NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query uses a nested correlated subquery. The inner subquery finds the department ID of an employee's manager, and the outer subquery then calculates the average salary for that manager's department."
Find the product name and price of the second most expensive product.,"SELECT product_name, price FROM Products WHERE price = (SELECT DISTINCT price FROM Products ORDER BY price DESC LIMIT 1 OFFSET 1);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query finds the second highest unique price using a subquery that orders prices in descending order and limits the result to the second entry, then uses this price to find the corresponding product."
List departments that currently have no employees assigned to them.,SELECT department_name FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query uses a NOT EXISTS subquery to identify departments for which there are no corresponding employee records, indicating no employees are assigned."
Retrieve the name and salary of the employee who earns the highest salary.,"SELECT name, salary FROM Employees WHERE salary = (SELECT MAX(salary) FROM Employees);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER);",This query finds the maximum salary from the Employees table using a subquery and then selects the employee(s) who match that salary.
Display each department's name along with the total number of employees in that department.,"SELECT D.department_name, (SELECT COUNT(E.employee_id) FROM Employees E WHERE E.department_id = D.department_id) AS employee_count FROM Departments D;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);",This query uses a correlated subquery in the SELECT clause to count the number of employees for each specific department listed in the main query.
List products whose price is greater than the maximum price of any product in the 'Accessories' category.,"SELECT product_name, price FROM Products WHERE price > (SELECT MAX(price) FROM Products WHERE category = 'Accessories');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query selects products whose price is greater than a scalar value returned by a subquery, which calculates the highest price among products in the 'Accessories' category."
Find employees who earn more than their direct manager.,"SELECT E1.name AS employee_name, E1.salary AS employee_salary, M.name AS manager_name, M.salary AS manager_salary FROM Employees E1 JOIN Employees M ON E1.manager_id = M.employee_id WHERE E1.salary > M.salary;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER);","This query uses a self-join on the Employees table to compare an employee's salary with their manager's salary, returning those who earn more."
Retrieve orders that contain items from both the 'Books' category and the 'Toys' category.,SELECT O.order_id FROM Orders O WHERE O.order_id IN (SELECT OI.order_id FROM Order_Items OI JOIN Products P ON OI.product_id = P.product_id WHERE P.category = 'Books') AND O.order_id IN (SELECT OI2.order_id FROM Order_Items OI2 JOIN Products P2 ON OI2.product_id = P2.product_id WHERE P2.category = 'Toys');,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query identifies orders by checking if their order_id is present in two separate lists: one for orders containing 'Books' and another for orders containing 'Toys', ensuring both conditions are met."
Get the names of employees who are assigned to a project that started in 2023 and has a budget greater than the average budget of all projects.,"SELECT DISTINCT E.name FROM Employees E JOIN Tasks T ON E.employee_id = T.employee_id JOIN Projects P ON T.project_id = P.project_id WHERE STRFTIME('%Y', P.start_date) = '2023' AND P.budget > (SELECT AVG(budget) FROM Projects);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER, task_name TEXT NOT NULL, status TEXT, due_date TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, budget REAL, start_date TEXT, end_date TEXT, department_id INTEGER);","This query selects employees who are linked to projects that started in 2023 and have a budget exceeding the overall average project budget, determined by a scalar subquery."
"For each department, display its name, the count of employees with salary over $70,000, and the total employee count.","SELECT D.department_name, (SELECT COUNT(E.employee_id) FROM Employees E WHERE E.department_id = D.department_id AND E.salary > 70000) AS high_earner_count, (SELECT COUNT(E.employee_id) FROM Employees E WHERE E.department_id = D.department_id) AS total_employee_count FROM Departments D;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query uses two correlated subqueries in the SELECT clause: one to count employees above a certain salary threshold per department, and another to count all employees in that department."
Find the top 3 departments by their total allocated project budget.,"SELECT D.department_name, DeptProjectBudgets.total_budget FROM Departments D JOIN (SELECT department_id, SUM(budget) AS total_budget FROM Projects GROUP BY department_id ORDER BY total_budget DESC LIMIT 3) AS DeptProjectBudgets ON D.department_id = DeptProjectBudgets.department_id ORDER BY DeptProjectBudgets.total_budget DESC;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, budget REAL, start_date TEXT, end_date TEXT, department_id INTEGER);","This query uses a derived table to calculate the total budget for each department's projects, then selects the top 3 departments based on this aggregated budget."
"List all customers who have placed at least one order, but none of their orders have a 'Cancelled' status.",SELECT C.customer_name FROM Customers C WHERE C.customer_id IN (SELECT DISTINCT O.customer_id FROM Orders O) AND C.customer_id NOT IN (SELECT DISTINCT O2.customer_id FROM Orders O2 WHERE O2.status = 'Cancelled');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects customers whose IDs appear in the list of customers who have placed orders, but not in the list of customers who have cancelled orders."
Show each author's name and the total number of books they have published.,"SELECT A.author_name, (SELECT COUNT(B.book_id) FROM Books B WHERE B.author_id = A.author_id) AS number_of_books FROM Authors A;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL, nationality TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publication_year INTEGER, price REAL, genre TEXT);",This query uses a correlated subquery in the SELECT clause to count the books for each author retrieved from the Authors table.
Find employees who are managers and manage at least 2 other employees.,SELECT E.name FROM Employees E WHERE E.employee_id IN (SELECT manager_id FROM Employees GROUP BY manager_id HAVING COUNT(employee_id) >= 2);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER);","This query selects employees whose ID is found in a list of manager IDs, where those managers have at least two direct reports, generated by a subquery with GROUP BY and HAVING."
"List all products and their price, along with the average price of all products across the entire inventory.","SELECT product_name, price, (SELECT AVG(price) FROM Products) AS overall_average_price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query displays each product's name and price, and adds a column with the overall average product price, which is calculated using a non-correlated scalar subquery."
Retrieve the names of customers who reside in the same city as at least one customer who has placed an order with a total amount exceeding $1000.,SELECT DISTINCT C.customer_name FROM Customers C WHERE C.city IN (SELECT C2.city FROM Customers C2 JOIN Orders O2 ON C2.customer_id = O2.customer_id WHERE O2.total_amount > 1000);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects customer names whose city is present in a list of cities where at least one customer has placed an order greater than $1000, determined by a subquery."
Find students who are enrolled in more courses than the average number of courses enrolled by students from the 'Computer Science' major.,"SELECT S.student_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id GROUP BY S.student_id HAVING COUNT(E.course_id) > (SELECT AVG(course_count) FROM (SELECT S2.student_id, COUNT(E2.course_id) AS course_count FROM Students S2 JOIN Enrollments E2 ON S2.student_id = E2.student_id JOIN Majors M ON S2.major_id = M.major_id WHERE M.major_name = 'Computer Science' GROUP BY S2.student_id));","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, major_id INTEGER, enrollment_date TEXT); CREATE TABLE Majors (major_id INTEGER PRIMARY KEY, major_name TEXT NOT NULL); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT);","This query first calculates the average number of courses for 'Computer Science' students using a derived table. Then, it filters all students, showing only those who have enrolled in more courses than this calculated average."
"List the customer names who placed orders with a total amount greater than the average order amount for their respective city, considering only orders from 2023 onwards.",SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_date >= '2023-01-01' AND O.total_amount > (SELECT AVG(O2.total_amount) FROM Orders O2 JOIN Customers C2 ON O2.customer_id = C2.customer_id WHERE C2.city = C.city AND O2.order_date >= '2023-01-01');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query finds customers who placed orders in 2023 or later, where the total amount of their order exceeds the average order amount for orders from the same city and date range, calculated using a correlated subquery."
"For each order, display the order ID, total amount, and the number of days elapsed since the earliest order recorded in the system.","SELECT order_id, total_amount, JULIANDAY(order_date) - JULIANDAY((SELECT MIN(order_date) FROM Orders)) AS days_since_earliest_order FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query calculates the difference in days between each order's date and the earliest order date in the table, using the JULIANDAY function and a scalar subquery."
Retrieve the names of employees who work in the 'Sales' department and have a salary greater than the average salary of all employees in the 'Sales' department.,"SELECT E.name, E.salary FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.department_name = 'Sales' AND E.salary > (SELECT AVG(E2.salary) FROM Employees E2 JOIN Departments D2 ON E2.department_id = D2.department_id WHERE D2.department_name = 'Sales');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query selects employees from the 'Sales' department whose salary is higher than the average salary specifically within the 'Sales' department, computed by a subquery."
Find the product name and price of the product with the lowest price.,"SELECT product_name, price FROM Products WHERE price = (SELECT MIN(price) FROM Products);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query selects the product(s) that have a price equal to the minimum price found across all products, using a scalar subquery."
Get the names of projects whose budget is less than the average budget of all projects started in 2022.,"SELECT project_name, budget FROM Projects WHERE budget < (SELECT AVG(budget) FROM Projects WHERE STRFTIME('%Y', start_date) = '2022');","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, budget REAL, start_date TEXT, end_date TEXT, department_id INTEGER);","This query retrieves projects whose budget is lower than the average budget of projects that started in the year 2022, calculated by a subquery."
"Identify departments where the total salary of employees exceeds $500,000.",SELECT D.department_name FROM Departments D WHERE D.department_id IN (SELECT department_id FROM Employees GROUP BY department_id HAVING SUM(salary) > 500000);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query selects department names whose IDs are found in a list of department IDs where the sum of employee salaries exceeds $500,000, generated by a subquery with GROUP BY and HAVING."
List all employees whose hire date is earlier than the average hire date of employees in their respective department.,"SELECT E1.name, E1.hire_date FROM Employees E1 WHERE E1.hire_date < (SELECT AVG(JULIANDAY(E2.hire_date)) FROM Employees E2 WHERE E2.department_id = E1.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER);","This query selects employees whose hire date is earlier than the average hire date of employees within their own department, using JULIANDAY for date comparison in a correlated subquery."
Retrieve sales records for products that have a stock quantity below 50 units.,"SELECT S.sale_id, S.sale_date, S.quantity_sold FROM Sales S WHERE S.product_id IN (SELECT product_id FROM Products WHERE stock_quantity < 50);","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity_sold INTEGER, revenue REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query selects sales records for products whose IDs are present in a list of product IDs where the stock quantity is less than 50, as determined by a subquery."
"Find customers who have placed at least one order with a 'Pending' status, but no orders with a 'Shipped' status.",SELECT C.customer_name FROM Customers C WHERE C.customer_id IN (SELECT DISTINCT customer_id FROM Orders WHERE status = 'Pending') AND C.customer_id NOT IN (SELECT DISTINCT customer_id FROM Orders WHERE status = 'Shipped');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects customers who have placed at least one 'Pending' order but none of their orders have a 'Shipped' status, using two subqueries with IN and NOT IN clauses."
"For each product, display its name, price, and the price of the most expensive product in the same category.","SELECT P1.product_name, P1.price, (SELECT MAX(P2.price) FROM Products P2 WHERE P2.category = P1.category) AS max_price_in_category FROM Products P1;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query displays each product's name and price, along with the highest price for products within its specific category, calculated using a correlated subquery."
Get the names of projects that have tasks assigned to employees from the 'Research' department.,SELECT DISTINCT P.project_name FROM Projects P JOIN Tasks T ON P.project_id = T.project_id WHERE T.employee_id IN (SELECT employee_id FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Research'));,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, budget REAL, start_date TEXT, end_date TEXT, department_id INTEGER); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER, task_name TEXT NOT NULL, status TEXT, due_date TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query retrieves project names where tasks are assigned to employees belonging to the 'Research' department. It uses nested subqueries to first find the 'Research' department's ID, then employee IDs in that department, and finally projects associated with those employees."
List all employees whose salary is in the top 10% of their department's salaries.,"SELECT E1.name, E1.salary, D.department_name FROM Employees E1 JOIN Departments D ON E1.department_id = D.department_id WHERE E1.salary >= (SELECT MIN(E2.salary) FROM (SELECT E2.salary FROM Employees E2 WHERE E2.department_id = E1.department_id ORDER BY E2.salary DESC LIMIT (SELECT CAST(COUNT(*) AS REAL) * 0.1 FROM Employees E3 WHERE E3.department_id = E1.department_id) + 1));","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);",This query identifies employees whose salary falls within the top 10% of salaries in their respective department. It uses nested correlated subqueries to calculate the salary threshold for the top 10% within each department.
Find customers who placed orders after the latest order placed by any customer from 'California'.,"SELECT C.customer_name, O.order_date FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_date > (SELECT MAX(O2.order_date) FROM Orders O2 JOIN Customers C2 ON O2.customer_id = C2.customer_id WHERE C2.state = 'California');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects customers and their order dates if their order date is later than the most recent order placed by any customer residing in 'California', calculated by a scalar subquery."
List all employees who do not have a phone number recorded.,"SELECT employee_id, first_name, last_name FROM Employees WHERE phone_number IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, salary REAL);","Retrieves the employee ID, first name, and last name for all employees where the 'phone_number' column is NULL."
Find all products that have a reorder level defined.,"SELECT product_name, reorder_level FROM Products WHERE reorder_level IS NOT NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER, reorder_level INTEGER);",Selects the name and reorder level for products where the 'reorder_level' column is not NULL.
"Display product names and their descriptions, replacing missing descriptions with ""No description available"".","SELECT product_name, COALESCE(description, 'No description available') AS product_description FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER);","Fetches product names and their descriptions. If a product's 'description' is NULL, it's replaced with the string ""No description available""."
"Get the title of books and their ratings, showing 'Unrated' if a rating is not available.","SELECT title, IFNULL(rating, 'Unrated') AS book_rating FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, isbn TEXT, publication_year INTEGER, rating REAL);","Retrieves book titles and their ratings. If a book's 'rating' is NULL, it's replaced with the string ""Unrated""."
"For each customer, list their email, but if that's missing, use their phone number, and if both are missing, show 'Contact Info Missing'.","SELECT customer_id, COALESCE(email, phone, 'Contact Info Missing') AS contact_detail FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone TEXT, address TEXT);","Selects the customer ID and the first non-NULL value among 'email', 'phone', or the string 'Contact Info Missing' as the contact detail."
Count how many orders currently do not have a tracking number.,SELECT COUNT(*) FROM Orders WHERE tracking_number IS NULL;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT, tracking_number TEXT);",Counts the total number of orders where the 'tracking_number' column is NULL.
Determine the number of projects that have a specified end date.,SELECT COUNT(project_id) FROM Projects WHERE end_date IS NOT NULL;,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL);",Counts the number of projects that have a non-NULL value in their 'end_date' column.
"List all employees along with the name of their manager. If an employee has no manager, show 'No Manager'.","SELECT E.first_name || ' ' || E.last_name AS EmployeeName, COALESCE(M.first_name || ' ' || M.last_name, 'No Manager') AS ManagerName FROM Employees AS E LEFT JOIN Employees AS M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, manager_id INTEGER);","Joins the Employees table to itself to find managers. For employees without a manager (where 'manager_id' is NULL), 'No Manager' is displayed using COALESCE."
"Calculate the total budget for all projects, treating any project without a specified budget as having a budget of 0.","SELECT SUM(COALESCE(budget, 0)) AS total_budget FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, budget REAL);","Sums the 'budget' for all projects. If a project's 'budget' is NULL, it is treated as 0 for the sum calculation."
"Find the average GPA of students, considering missing GPAs as 2.0 for calculation purposes.","SELECT AVG(IFNULL(gpa, 2.0)) AS average_gpa FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, gpa REAL);",Calculates the average GPA of all students. Any student with a NULL 'gpa' is assigned a value of 2.0 for this calculation.
"Group employees by whether they have a commission percentage or not, and count how many fall into each category.","SELECT CASE WHEN commission_pct IS NULL THEN 'No Commission' ELSE 'Has Commission' END AS CommissionStatus, COUNT(*) AS EmployeeCount FROM Employees GROUP BY CommissionStatus;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, commission_pct REAL);","Categorizes employees based on whether their 'commission_pct' is NULL or not, then counts the number of employees in each category."
"List all customers, ordering them primarily by their loyalty points (highest first). If loyalty points are null, treat them as 0 for sorting purposes.","SELECT customer_id, first_name, loyalty_points FROM Customers ORDER BY COALESCE(loyalty_points, 0) DESC, first_name ASC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, loyalty_points INTEGER);",Retrieves customer details and orders them by 'loyalty_points' in descending order. NULL 'loyalty_points' are treated as 0 for sorting.
Find books where the description is either an empty string or NULL.,"SELECT book_id, title FROM Books WHERE IFNULL(description, '') = '';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, description TEXT);","Selects books where the 'description' is either NULL or an empty string, by replacing NULLs with an empty string for comparison."
List all employees whose manager's phone number is not available.,"SELECT E.first_name, E.last_name FROM Employees E JOIN Employees M ON E.manager_id = M.employee_id WHERE M.phone_number IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, manager_id INTEGER, phone_number TEXT);",Selects the first and last names of employees whose direct manager has a NULL phone number recorded.
"For each order, show the ship date. If it's not available, show the order date instead.","SELECT order_id, COALESCE(ship_date, order_date) AS actual_or_order_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT);","Retrieves the order ID and either the 'ship_date' or, if 'ship_date' is NULL, the 'order_date'."
Set the 'commission_pct' to NULL for all employees whose salary is less than 30000.,UPDATE Employees SET commission_pct = NULL WHERE salary < 30000;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, commission_pct REAL);",Updates the 'commission_pct' column to NULL for all employees whose 'salary' is less than 30000.
"Add a new product with only a name and price, leaving description and reorder level as unknown.","INSERT INTO Products (product_name, price, description, reorder_level) VALUES ('New Gadget', 99.99, NULL, NULL);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER, reorder_level INTEGER);","Inserts a new row into the Products table, providing values for product name and price, and explicitly setting 'description' and 'reorder_level' to NULL."
"For each customer, categorize their loyalty status as 'Elite' if points are over 1000, 'Regular' if points are 1 to 1000, and 'New/Inactive' if points are NULL or 0.","SELECT customer_id, first_name, CASE WHEN loyalty_points IS NULL OR loyalty_points = 0 THEN 'New/Inactive' WHEN loyalty_points > 1000 THEN 'Elite' ELSE 'Regular' END AS LoyaltyStatus FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, loyalty_points INTEGER);",Assigns a loyalty status to each customer based on their 'loyalty_points'. Customers with NULL or 0 points are 'New/Inactive'.
List all projects that are either not assigned to a manager or have a completion status that is not yet defined.,SELECT project_name FROM Projects WHERE manager_id IS NULL OR completion_status IS NULL;,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, manager_id INTEGER, completion_status TEXT);",Retrieves the names of projects that either have no manager assigned ('manager_id' is NULL) or have no defined completion status ('completion_status' is NULL).
"Count the number of products grouped by their reorder level, treating products without a reorder level as having a default level of 10.","SELECT COALESCE(reorder_level, 10) AS EffectiveReorderLevel, COUNT(*) AS ProductCount FROM Products GROUP BY EffectiveReorderLevel;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, reorder_level INTEGER);","Groups products by their 'reorder_level'. If 'reorder_level' is NULL, it's treated as 10 for grouping and counting purposes."
"Calculate the total salary including commission for each employee, assuming a 0 commission for those without a commission percentage.","SELECT employee_id, first_name, salary + IFNULL(commission_pct * salary, 0) AS total_compensation FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, salary REAL, commission_pct REAL);","Computes each employee's total compensation by adding their salary to their commission (salary * commission_pct). If 'commission_pct' is NULL, it's treated as 0 for the calculation, so no commission is added."
Find customers who have neither an email nor a phone number recorded.,"SELECT customer_id, first_name, last_name FROM Customers WHERE email IS NULL AND phone IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone TEXT);","Selects customer IDs, first names, and last names for customers where both their 'email' and 'phone' number columns are NULL."
"List products whose description is truly NULL, not just an empty string.",SELECT product_name FROM Products WHERE description IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT);","Retrieves product names only for products where the 'description' column explicitly holds a NULL value, distinguishing it from an empty string."
"Display the primary contact information for each supplier, preferring email, then phone, then fallback to a generic ""No Contact Provided"".","SELECT supplier_id, COALESCE(email, phone, 'No Contact Provided') AS primary_contact FROM Suppliers;","CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, email TEXT, phone TEXT);","Selects the supplier ID and their primary contact information. It first tries 'email', then 'phone', and if both are NULL, it defaults to 'No Contact Provided'."
"Find orders that were placed before January 1, 2023, and have not yet been shipped.","SELECT order_id, order_date FROM Orders WHERE order_date < '2023-01-01' AND ship_date IS NULL;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, ship_date TEXT);","Retrieves order IDs and dates for orders placed before '2023-01-01' that still have a NULL 'ship_date', indicating they haven't been shipped yet."
Count the number of unique advisors assigned to students.,SELECT COUNT(DISTINCT advisor_id) FROM Students WHERE advisor_id IS NOT NULL;,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, advisor_id INTEGER);","Counts the total number of unique 'advisor_id' values, excluding any students who do not have an advisor assigned (i.e., 'advisor_id' is NULL)."
Update the 'gpa' for students who don't have one to 3.0.,UPDATE Students SET gpa = 3.0 WHERE gpa IS NULL;,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, gpa REAL);",Sets the 'gpa' to 3.0 for all students whose current 'gpa' value is NULL.
"For each project, display its end date. If the end date is null, use the start date. If both are null, show 'Not Scheduled'.","SELECT project_id, COALESCE(end_date, start_date, 'Not Scheduled') AS project_timeline FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT);","Selects the project ID and the first non-NULL value among 'end_date', 'start_date', or the string 'Not Scheduled' as the project timeline."
List all books that are missing either an ISBN or a publication year.,"SELECT book_id, title FROM Books WHERE isbn IS NULL OR publication_year IS NULL;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, isbn TEXT, publication_year INTEGER);",Retrieves the ID and title of books where either the 'isbn' is NULL or the 'publication_year' is NULL.
Find all employees who have a commission percentage assigned AND whose salary is above 50000.,"SELECT first_name, last_name, salary, commission_pct FROM Employees WHERE commission_pct IS NOT NULL AND salary > 50000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, commission_pct REAL);","Selects the first name, last name, salary, and commission percentage for employees who have a non-NULL 'commission_pct' AND a 'salary' greater than 50000."
Find the names and emails of all employees who work in the 'Sales' department.,"WITH SalesEmployees AS (SELECT employee_id, first_name, last_name, email, department_id FROM Employees) SELECT se.first_name, se.last_name, se.email FROM SalesEmployees se JOIN Departments d ON se.department_id = d.department_id WHERE d.department_name = 'Sales';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location_id INTEGER);",This query uses a CTE named 'SalesEmployees' to first select relevant employee details and then joins it with the 'Departments' table to filter for employees in the 'Sales' department.
"List departments along with the total number of employees in each department, but only for departments with more than 5 employees.","WITH DepartmentEmployeeCounts AS (SELECT department_id, COUNT(employee_id) AS num_employees FROM Employees GROUP BY department_id) SELECT d.department_name, dec.num_employees FROM DepartmentEmployeeCounts dec JOIN Departments d ON dec.department_id = d.department_id WHERE dec.num_employees > 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",A CTE 'DepartmentEmployeeCounts' is used to pre-calculate the number of employees per department. The main query then joins this CTE with the 'Departments' table and filters for departments with more than 5 employees.
"Find the average salary for employees in departments located in 'New York', showing the department name and average salary.","WITH NewYorkDepartments AS (SELECT department_id, department_name FROM Departments WHERE location_city = 'New York'), EmployeeSalaries AS (SELECT e.department_id, e.salary FROM Employees e JOIN NewYorkDepartments nyd ON e.department_id = nyd.department_id) SELECT nyd.department_name, AVG(es.salary) AS average_salary FROM EmployeeSalaries es JOIN NewYorkDepartments nyd ON es.department_id = nyd.department_id GROUP BY nyd.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location_city TEXT);","This query uses two chained CTEs. 'NewYorkDepartments' identifies departments in 'New York', and 'EmployeeSalaries' then selects salaries for employees in those departments. Finally, the average salary is calculated per department from the second CTE."
Show the names of products that have been ordered more than 100 times in total.,"SELECT p.product_name FROM Products p JOIN (SELECT product_id, SUM(quantity) AS total_ordered_quantity FROM OrderItems GROUP BY product_id HAVING SUM(quantity) > 100) AS PopularProducts ON p.product_id = PopularProducts.product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);",A derived table 'PopularProducts' calculates the total quantity ordered for each product and filters for those with over 100. This derived table is then joined with the 'Products' table to retrieve the product names.
Get the top 3 highest-spending customers along with their total spent amount.,"SELECT c.customer_name, TotalSpending.total_spent FROM Customers c JOIN (SELECT customer_id, SUM(total_amount) AS total_spent FROM Orders GROUP BY customer_id ORDER BY total_spent DESC LIMIT 3) AS TotalSpending ON c.customer_id = TotalSpending.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","A derived table calculates the total amount spent by each customer, orders them in descending order, and limits to the top 3. This result is then joined with the 'Customers' table to get customer names."
"List employees who have been hired in the last 5 years, along with their hire date and current tenure in days.","WITH RecentHires AS (SELECT employee_id, first_name, last_name, hire_date FROM Employees WHERE hire_date >= DATE('now', '-5 years')) SELECT rh.first_name, rh.last_name, rh.hire_date, CAST(julianday('now') - julianday(rh.hire_date) AS INTEGER) AS tenure_in_days FROM RecentHires rh;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT);","The 'RecentHires' CTE filters employees hired within the last 5 years. The main query then selects their names, hire dates, and calculates their tenure in days using SQLite's 'julianday' function."
Find all employees who report directly or indirectly to 'John Doe'.,"WITH RECURSIVE EmployeeHierarchy AS (SELECT employee_id, first_name, last_name, manager_id FROM Employees WHERE first_name = 'John' AND last_name = 'Doe' UNION ALL SELECT e.employee_id, e.first_name, e.last_name, e.manager_id FROM Employees e JOIN EmployeeHierarchy eh ON e.manager_id = eh.employee_id) SELECT employee_id, first_name, last_name FROM EmployeeHierarchy WHERE first_name != 'John' OR last_name != 'Doe';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, manager_id INTEGER);","This query uses a recursive CTE 'EmployeeHierarchy' to traverse the management chain. It starts with 'John Doe' and iteratively adds all employees who report to those already in the hierarchy, thus finding all direct and indirect reports."
"For each product category, find the total sales amount. Only include categories where the total sales exceed $10,000 and list them in descending order of total sales.","WITH CategorySales AS (SELECT p.category_id, SUM(oi.quantity * oi.unit_price) AS total_category_sales FROM Products p JOIN OrderItems oi ON p.product_id = oi.product_id GROUP BY p.category_id) SELECT pc.category_name, cs.total_category_sales FROM CategorySales cs JOIN ProductCategories pc ON cs.category_id = pc.category_id WHERE cs.total_category_sales > 10000 ORDER BY cs.total_category_sales DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER); CREATE TABLE ProductCategories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, unit_price REAL);","The 'CategorySales' CTE calculates the total sales for each product category. The main query then joins this with 'ProductCategories' to get category names, filters for categories with sales over $10,000, and orders the results."
"Retrieve the names of customers who have placed orders for products in the 'Electronics' category, along with the total number of distinct products they ordered from that category.","SELECT c.customer_name, CustomerElectronicsOrders.distinct_electronics_products FROM Customers c JOIN (SELECT o.customer_id, COUNT(DISTINCT oi.product_id) AS distinct_electronics_products FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN ProductCategories pc ON p.category_id = pc.category_id WHERE pc.category_name = 'Electronics' GROUP BY o.customer_id) AS CustomerElectronicsOrders ON c.customer_id = CustomerElectronicsOrders.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, category_id INTEGER); CREATE TABLE ProductCategories (category_id INTEGER PRIMARY KEY, category_name TEXT);",A derived table is used to identify customers who ordered products from the 'Electronics' category and count the distinct products they ordered. This derived table is then joined with the 'Customers' table to get their names.
Calculate the total sales amount for each month in the year 2023. Display the year-month and total sales.,"WITH MonthlySales AS (SELECT STRFTIME('%Y-%m', order_date) AS sales_month, SUM(total_amount) AS total_monthly_sales FROM Orders WHERE STRFTIME('%Y', order_date) = '2023' GROUP BY sales_month) SELECT sales_month, total_monthly_sales FROM MonthlySales ORDER BY sales_month;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, total_amount REAL);","The 'MonthlySales' CTE extracts the year-month from the order date, filters for 2023, and sums the total amounts for each month. The main query simply selects and orders these results."
"Find all employees who share the same email domain, given that the domain appears more than once.","SELECT e.first_name, e.last_name, e.email FROM Employees e JOIN (SELECT SUBSTR(email, INSTR(email, '@') + 1) AS email_domain FROM Employees GROUP BY email_domain HAVING COUNT(*) > 1) AS DuplicateDomains ON SUBSTR(e.email, INSTR(e.email, '@') + 1) = DuplicateDomains.email_domain;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT);",A derived table 'DuplicateDomains' identifies email domains that appear for more than one employee. The outer query then joins with this derived table to retrieve the names and emails of all employees belonging to these common domains.
"List users who have logged in at least once in the last 90 days, along with their last login date.","WITH ActiveUsers AS (SELECT user_id, MAX(login_date) AS last_login FROM UserLogins GROUP BY user_id HAVING MAX(login_date) >= DATE('now', '-90 days')) SELECT u.username, au.last_login FROM Users u JOIN ActiveUsers au ON u.user_id = au.user_id;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, email TEXT); CREATE TABLE UserLogins (login_id INTEGER PRIMARY KEY, user_id INTEGER, login_date TEXT);",The 'ActiveUsers' CTE finds the latest login date for each user and filters for those who logged in within the last 90 days. The main query then joins this CTE with the 'Users' table to get user names and their last login dates.
Calculate the running total of daily sales for the month of January 2023.,"WITH DailySales AS (SELECT STRFTIME('%Y-%m-%d', order_date) AS sales_day, SUM(total_amount) AS daily_total FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-01' GROUP BY sales_day ORDER BY sales_day) SELECT ds1.sales_day, SUM(ds2.daily_total) AS running_total FROM DailySales ds1 JOIN DailySales ds2 ON ds2.sales_day <= ds1.sales_day GROUP BY ds1.sales_day ORDER BY ds1.sales_day;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, total_amount REAL);",The 'DailySales' CTE first calculates total sales for each day in January 2023. The main query then performs a self-join on this CTE to compute the running total for each day.
Show all scores for a student named 'Alice Smith' from different subjects.,"WITH AliceScores AS (SELECT math_score, science_score, history_score FROM StudentScores WHERE student_id = (SELECT student_id FROM Students WHERE first_name = 'Alice' AND last_name = 'Smith')) SELECT 'Math' AS subject, (SELECT math_score FROM AliceScores) AS score UNION ALL SELECT 'Science' AS subject, (SELECT science_score FROM AliceScores) UNION ALL SELECT 'History' AS subject, (SELECT history_score FROM AliceScores);","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE StudentScores (student_id INTEGER PRIMARY KEY, math_score INTEGER, science_score INTEGER, history_score INTEGER);",The 'AliceScores' CTE retrieves all subject scores for 'Alice Smith'. The query then uses UNION ALL with subqueries against the CTE to unpivot these scores into a subject and score column format.
Find the employee with the second highest salary.,"WITH RankedSalaries AS (SELECT employee_id, salary, NTILE(2) OVER (ORDER BY salary DESC) AS rank_group FROM Employees) SELECT e.first_name, e.last_name, rs.salary FROM Employees e JOIN RankedSalaries rs ON e.employee_id = rs.employee_id WHERE rs.rank_group = 2 ORDER BY rs.salary DESC LIMIT 1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL);",The 'RankedSalaries' CTE assigns a rank group (using NTILE) to employees based on their salary. The query then selects the employee from the second rank group with the highest salary within that group.
"Calculate the average order value per customer, then find the average of these customer average order values.","SELECT AVG(CustomerAvgOrder.avg_order_value) AS overall_average_order_value FROM (SELECT customer_id, AVG(total_amount) AS avg_order_value FROM Orders GROUP BY customer_id) AS CustomerAvgOrder;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL);",A derived table 'CustomerAvgOrder' first calculates the average order value for each customer. The outer query then computes the average of these individual customer averages.
Find dates in January 2023 for which there were no orders.,"WITH AllDates AS (SELECT STRFTIME('%Y-%m-%d', DATE('2023-01-01', '+' || (N-1) || ' day')) AS full_date FROM (WITH RECURSIVE GenerateSeries(N) AS (SELECT 1 UNION ALL SELECT N + 1 FROM GenerateSeries WHERE N < 31) SELECT N FROM GenerateSeries)), ActualOrderDates AS (SELECT DISTINCT STRFTIME('%Y-%m-%d', order_date) AS order_day FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-01') SELECT ad.full_date FROM AllDates ad LEFT JOIN ActualOrderDates aod ON ad.full_date = aod.order_day WHERE aod.order_day IS NULL ORDER BY ad.full_date;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, total_amount REAL);",This query uses a recursive CTE 'GenerateSeries' to create a list of all dates in January 2023. Another CTE 'ActualOrderDates' gets the distinct dates with orders. A LEFT JOIN then identifies the dates from 'AllDates' that do not have a matching 'order_day'.
"For each product, find the product ID, its price, and the price of the product with the next higher ID, if available.","WITH ProductPrices AS (SELECT product_id, price FROM Products) SELECT pp1.product_id, pp1.price, (SELECT pp2.price FROM ProductPrices pp2 WHERE pp2.product_id = pp1.product_id + 1) AS next_product_price FROM ProductPrices pp1;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL);","The 'ProductPrices' CTE simply selects product IDs and prices. The main query then selects each product's details and, using a correlated subquery, retrieves the price of the product whose ID is exactly one greater, effectively showing the 'next' price."
"For each department, list the employee with the lowest salary and the employee with the highest salary.","SELECT d.department_name, MinSalaryEmp.first_name AS min_salary_employee, MinSalaryEmp.salary AS min_salary, MaxSalaryEmp.first_name AS max_salary_employee, MaxSalaryEmp.salary AS max_salary FROM Departments d JOIN (SELECT department_id, MIN(salary) AS min_s FROM Employees GROUP BY department_id) AS MinSalaries ON d.department_id = MinSalaries.department_id JOIN Employees AS MinSalaryEmp ON MinSalaries.min_s = MinSalaryEmp.salary AND MinSalaries.department_id = MinSalaryEmp.department_id JOIN (SELECT department_id, MAX(salary) AS max_s FROM Employees GROUP BY department_id) AS MaxSalaries ON d.department_id = MaxSalaries.department_id JOIN Employees AS MaxSalaryEmp ON MaxSalaries.max_s = MaxSalaryEmp.salary AND MaxSalaries.department_id = MaxSalaryEmp.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","This query uses two derived tables: one to find the minimum salary per department, and another for the maximum. It then joins these derived tables back to the 'Employees' table (twice) and the 'Departments' table to retrieve the names of the employees with the min/max salaries for each department."
"Combine all credit and debit transactions, then find the total balance change for each account.","WITH AllTransactions AS (SELECT account_id, amount AS transaction_amount FROM CreditTransactions UNION ALL SELECT account_id, -amount AS transaction_amount FROM DebitTransactions) SELECT a.account_name, SUM(at.transaction_amount) AS net_balance_change FROM Accounts a JOIN AllTransactions at ON a.account_id = at.account_id GROUP BY a.account_name;","CREATE TABLE Accounts (account_id INTEGER PRIMARY KEY, account_name TEXT); CREATE TABLE CreditTransactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, amount REAL, transaction_date TEXT); CREATE TABLE DebitTransactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, amount REAL, transaction_date TEXT);",The 'AllTransactions' CTE combines credit transactions (positive amounts) and debit transactions (negative amounts) into a single dataset. The main query then joins this CTE with the 'Accounts' table to sum the net balance change for each account.
Find the product category with the highest average sales price per item.,"SELECT pc.category_name FROM ProductCategories pc JOIN (SELECT p.category_id, AVG(oi.unit_price) AS avg_item_price FROM Products p JOIN OrderItems oi ON p.product_id = oi.product_id GROUP BY p.category_id ORDER BY AVG(oi.unit_price) DESC LIMIT 1) AS TopCategory ON pc.category_id = TopCategory.category_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER); CREATE TABLE ProductCategories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, unit_price REAL);","A derived table 'TopCategory' calculates the average unit price for items in each product category, orders them, and selects the top one. The main query then joins this derived table with 'ProductCategories' to get the name of the highest average-priced category."
"For each department, list the top 2 highest paid employees.","WITH RankedEmployees AS (SELECT employee_id, first_name, last_name, department_id, salary, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rn FROM Employees) SELECT re.first_name, re.last_name, re.salary, d.department_name FROM RankedEmployees re JOIN Departments d ON re.department_id = d.department_id WHERE re.rn <= 2 ORDER BY d.department_name, re.salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","The 'RankedEmployees' CTE assigns a row number to employees within each department based on their salary in descending order. The main query then selects employees whose rank is 1 or 2, effectively finding the top 2 highest-paid employees per department."
"List products that currently have zero stock, along with their category.","SELECT p.product_name, pc.category_name FROM ProductCategories pc JOIN Products p ON pc.category_id = p.category_id JOIN (SELECT product_id, stock_quantity FROM Inventory WHERE stock_quantity = 0) AS OutOfStockProducts ON p.product_id = OutOfStockProducts.product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER); CREATE TABLE ProductCategories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Inventory (product_id INTEGER PRIMARY KEY, stock_quantity INTEGER, last_updated TEXT);",A derived table 'OutOfStockProducts' filters the 'Inventory' table for products with zero stock. The main query then joins this with 'Products' and 'ProductCategories' to retrieve the names and categories of these out-of-stock products.
"Find customers who have placed more than 5 orders in total, and their average order amount.","WITH CustomerOrderCounts AS (SELECT customer_id, COUNT(order_id) AS total_orders, AVG(total_amount) AS avg_order_value FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 5) SELECT c.customer_name, coc.total_orders, coc.avg_order_value FROM Customers c JOIN CustomerOrderCounts coc ON c.customer_id = coc.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL);","The 'CustomerOrderCounts' CTE calculates the total number of orders and the average order value for each customer, filtering for customers with more than 5 orders. The main query then joins this CTE with the 'Customers' table to display the customer names and their aggregated order data."
"For each employee, show their name, salary, and the average salary of their department.","SELECT e.first_name, e.last_name, e.salary, DeptAvgSal.avg_dept_salary FROM Employees e JOIN (SELECT department_id, AVG(salary) AS avg_dept_salary FROM Employees GROUP BY department_id) AS DeptAvgSal ON e.department_id = DeptAvgSal.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER);",A derived table 'DeptAvgSal' calculates the average salary for each department. The outer query then joins this derived table with the 'Employees' table to display each employee's details alongside the average salary of their respective department.
List products that were never sold in the year 2022.,"WITH ProductsSoldIn2022 AS (SELECT DISTINCT oi.product_id FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id WHERE STRFTIME('%Y', o.order_date) = '2022') SELECT p.product_name FROM Products p WHERE p.product_id NOT IN (SELECT product_id FROM ProductsSoldIn2022);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER);",The 'ProductsSoldIn2022' CTE identifies all unique products that were sold during 2022. The main query then selects product names from the 'Products' table where their ID is not present in the 'ProductsSoldIn2022' CTE.
"For each sensor, find the most recent reading.","SELECT s.sensor_id, s.sensor_name, LatestReadings.reading_value, LatestReadings.reading_timestamp FROM Sensors s JOIN (SELECT sensor_id, reading_value, reading_timestamp FROM SensorReadings sr1 WHERE reading_timestamp = (SELECT MAX(reading_timestamp) FROM SensorReadings sr2 WHERE sr1.sensor_id = sr2.sensor_id)) AS LatestReadings ON s.sensor_id = LatestReadings.sensor_id;","CREATE TABLE Sensors (sensor_id INTEGER PRIMARY KEY, sensor_name TEXT, location TEXT); CREATE TABLE SensorReadings (reading_id INTEGER PRIMARY KEY, sensor_id INTEGER, reading_value REAL, reading_timestamp TEXT);",A derived table 'LatestReadings' selects the reading (and its timestamp) for each sensor that corresponds to the maximum 'reading_timestamp' for that sensor. This derived table is then joined with the 'Sensors' table to include sensor names.
"Calculate the total sales amount for each sales person in quarter 1 of 2023, but only for those who made at least one sale.","WITH Q1_2023_Sales AS (SELECT sales_person_id, SUM(amount) AS total_sales FROM SalesTransactions WHERE STRFTIME('%Y', transaction_date) = '2023' AND STRFTIME('%Q', transaction_date) = '1' GROUP BY sales_person_id) SELECT sp.sales_person_name, q1s.total_sales FROM SalesPersons sp JOIN Q1_2023_Sales q1s ON sp.sales_person_id = q1s.sales_person_id ORDER BY q1s.total_sales DESC;","CREATE TABLE SalesPersons (sales_person_id INTEGER PRIMARY KEY, sales_person_name TEXT, region TEXT); CREATE TABLE SalesTransactions (transaction_id INTEGER PRIMARY KEY, sales_person_id INTEGER, amount REAL, transaction_date TEXT);","The 'Q1_2023_Sales' CTE sums sales amounts for each sales person during Q1 2023. The main query then joins this CTE with the 'SalesPersons' table to retrieve their names and display the total sales, ordered by sales amount."
Find the names of customers who have not placed any orders.,SELECT c.customer_name FROM Customers c LEFT JOIN (SELECT DISTINCT customer_id FROM Orders) AS CustomersWithOrders ON c.customer_id = CustomersWithOrders.customer_id WHERE CustomersWithOrders.customer_id IS NULL;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","A derived table 'CustomersWithOrders' lists all customer IDs that exist in the 'Orders' table. The main query performs a LEFT JOIN between 'Customers' and this derived table, then filters for NULL matches to identify customers who have no corresponding orders."
"Select every 5th product from the products table, starting from the first.","WITH NumberedProducts AS (SELECT product_id, product_name, ROW_NUMBER() OVER (ORDER BY product_id) AS rn FROM Products) SELECT np.product_name FROM NumberedProducts np WHERE np.rn % 5 = 1;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL);","The 'NumberedProducts' CTE assigns a sequential row number to each product based on its ID. The main query then selects products where their row number, when divided by 5, leaves a remainder of 1, effectively picking every 5th product."
"Categorize products as 'High Stock', 'Medium Stock', or 'Low Stock' based on their quantity in stock. High is >100, Medium is 51-100, Low is <=50.","SELECT ProductID, ProductName, QuantityInStock, CASE WHEN QuantityInStock > 100 THEN 'High Stock' WHEN QuantityInStock BETWEEN 51 AND 100 THEN 'Medium Stock' ELSE 'Low Stock' END AS StockLevel FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, QuantityInStock INTEGER);",This query retrieves product details along with a new column 'StockLevel' that categorizes each product's stock quantity using a CASE expression.
"Show employee names and their performance rating, where a score above 90 is 'Excellent', 70-90 is 'Good', 50-69 is 'Average', and below 50 is 'Poor'.","SELECT EmployeeName, PerformanceScore, CASE WHEN PerformanceScore > 90 THEN 'Excellent' WHEN PerformanceScore >= 70 AND PerformanceScore <= 90 THEN 'Good' WHEN PerformanceScore >= 50 AND PerformanceScore < 70 THEN 'Average' ELSE 'Poor' END AS PerformanceRating FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Department TEXT, PerformanceScore INTEGER);",This query lists employees and assigns a performance rating based on their PerformanceScore using a searched CASE statement.
"For each order, display its ID, total amount, and a 'Status' indicating 'Large Order' if amount > 500, otherwise 'Standard Order'.","SELECT OrderID, TotalAmount, CASE WHEN TotalAmount > 500 THEN 'Large Order' ELSE 'Standard Order' END AS OrderStatus FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query categorizes orders based on their 'TotalAmount', labeling them as 'Large Order' or 'Standard Order' using a simple CASE expression."
"Calculate the total revenue, separating sales from 'Online' and 'In-Store' channels.","SELECT SUM(CASE WHEN SalesChannel = 'Online' THEN Amount ELSE 0 END) AS OnlineRevenue, SUM(CASE WHEN SalesChannel = 'In-Store' THEN Amount ELSE 0 END) AS InStoreRevenue FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, Amount REAL, SaleDate TEXT, SalesChannel TEXT);",This query uses conditional aggregation with CASE to sum sales amounts separately for 'Online' and 'In-Store' channels.
"List all students and their enrollment status. If 'IsActive' is 1, they are 'Active'; otherwise, 'Inactive'. Also, consider NULL 'IsActive' as 'Unknown'.","SELECT StudentName, CASE WHEN IsActive = 1 THEN 'Active' WHEN IsActive = 0 THEN 'Inactive' ELSE 'Unknown' END AS EnrollmentStatus FROM Students;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT, Major TEXT, IsActive INTEGER);","This query displays student names and their enrollment status, handling active, inactive, and unknown (NULL) states for IsActive using a CASE statement."
"Count the number of customers from 'USA', 'Canada', and 'Other' countries.","SELECT COUNT(CASE WHEN Country = 'USA' THEN 1 ELSE NULL END) AS USACustomers, COUNT(CASE WHEN Country = 'Canada' THEN 1 ELSE NULL END) AS CanadaCustomers, COUNT(CASE WHEN Country NOT IN ('USA', 'Canada') THEN 1 ELSE NULL END) AS OtherCustomers FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Country TEXT, City TEXT);","This query counts customers from specific countries and an 'Other' category using CASE expressions within COUNT, which only counts non-NULL values."
"Display product names and adjusted prices. If a product's category is 'Electronics', increase its price by 10%; otherwise, keep the original price.","SELECT ProductName, Category, CASE WHEN Category = 'Electronics' THEN Price * 1.10 ELSE Price END AS AdjustedPrice FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, Category TEXT);","This query shows product names and an 'AdjustedPrice', which is 10% higher for products in the 'Electronics' category, using a CASE statement."
"Sort employees primarily by department, and then by performance score in descending order, but put 'HR' department employees at the very end regardless of score.","SELECT EmployeeName, Department, PerformanceScore FROM Employees ORDER BY CASE WHEN Department = 'HR' THEN 1 ELSE 0 END ASC, Department ASC, PerformanceScore DESC;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Department TEXT, PerformanceScore INTEGER);","This query sorts employees by department and performance, using a CASE expression in the ORDER BY clause to push 'HR' department employees to the end."
"For each project, display its status: 'On Track' if progress is 100, 'Delayed' if end date is before current date and progress is not 100, otherwise 'In Progress'. Assume current date is '2023-10-26'.","SELECT ProjectName, Progress, EndDate, CASE WHEN Progress = 100 THEN 'On Track' WHEN Progress < 100 AND EndDate < '2023-10-26' THEN 'Delayed' ELSE 'In Progress' END AS ProjectStatus FROM Projects;","CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, StartDate TEXT, EndDate TEXT, Progress INTEGER);","This query calculates project status based on progress and end date, using a complex CASE statement with multiple conditions."
"Change payment type 'Credit Card' to 'CC', 'Debit Card' to 'DC', and all others to 'Other' for display purposes.","SELECT TransactionID, Amount, CASE PaymentType WHEN 'Credit Card' THEN 'CC' WHEN 'Debit Card' THEN 'DC' ELSE 'Other' END AS SimplifiedPaymentType FROM Transactions;","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, Amount REAL, PaymentType TEXT, TransactionDate TEXT);","This query transforms payment type descriptions into shorter aliases ('CC', 'DC', 'Other') using a simple CASE statement."
"List all books and their age category. 'New' if published in 2023, 'Recent' if 2022, 'Old' if 2021 or earlier.","SELECT Title, PublicationYear, CASE WHEN PublicationYear = 2023 THEN 'New' WHEN PublicationYear = 2022 THEN 'Recent' ELSE 'Old' END AS AgeCategory FROM Books;","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, Author TEXT, PublicationYear INTEGER);","This query categorizes books into 'New', 'Recent', or 'Old' based on their publication year using a CASE expression."
"Calculate the average order value, but exclude orders with 'Cancelled' status from the average.",SELECT AVG(CASE WHEN OrderStatus = 'Cancelled' THEN NULL ELSE TotalAmount END) AS AvgOrderValueExcludingCancelled FROM Orders;,"CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL, OrderStatus TEXT);","This query calculates the average order value by conditionally setting the 'TotalAmount' to NULL for 'Cancelled' orders, as AVG ignores NULLs."
"For each course, list its name and the number of students enrolled, categorized by their grade: 'A_Students', 'B_Students', 'C_or_Below_Students'.","SELECT CourseName, SUM(CASE WHEN Grade = 'A' THEN 1 ELSE 0 END) AS A_Students, SUM(CASE WHEN Grade = 'B' THEN 1 ELSE 0 END) AS B_Students, SUM(CASE WHEN Grade IN ('C', 'D', 'F') THEN 1 ELSE 0 END) AS C_or_Below_Students FROM Enrollments GROUP BY CourseName;","CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseName TEXT, Grade TEXT);","This query counts students in different grade categories for each course by using CASE expressions within SUM, effectively pivoting the data."
"Display product ID, name, and a 'Discount Category'. If price is > 1000, it's 'High-Value', if 500-1000, 'Mid-Value', otherwise 'Low-Value'.","SELECT ProductID, ProductName, Price, CASE WHEN Price > 1000 THEN 'High-Value' WHEN Price >= 500 AND Price <= 1000 THEN 'Mid-Value' ELSE 'Low-Value' END AS DiscountCategory FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, Category TEXT);",This query assigns a 'Discount Category' to products based on their price using a searched CASE statement.
"Show employee names and their pay status: 'Paid' if their salary is not NULL, 'Unpaid' if salary is NULL.","SELECT EmployeeName, Salary, CASE WHEN Salary IS NOT NULL THEN 'Paid' ELSE 'Unpaid' END AS PayStatus FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL);",This query checks the Salary column for NULL values to determine and display an employee's 'PayStatus'.
"List all tasks. If a task is 'Completed', mark it 'Done'. If 'Pending', mark it 'In Progress'. Otherwise, keep its current status.","SELECT TaskID, TaskName, Status, CASE Status WHEN 'Completed' THEN 'Done' WHEN 'Pending' THEN 'In Progress' ELSE Status END AS DisplayStatus FROM Tasks;","CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, TaskName TEXT, Status TEXT, DueDate TEXT);","This query transforms specific task statuses ('Completed' to 'Done', 'Pending' to 'In Progress') while retaining others using a simple CASE statement."
"For each department, count the number of employees who are 'Full-Time' and 'Part-Time'.","SELECT Department, SUM(CASE WHEN EmploymentType = 'Full-Time' THEN 1 ELSE 0 END) AS FullTimeEmployees, SUM(CASE WHEN EmploymentType = 'Part-Time' THEN 1 ELSE 0 END) AS PartTimeEmployees FROM Employees GROUP BY Department;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Department TEXT, EmploymentType TEXT);",This query aggregates the count of 'Full-Time' and 'Part-Time' employees for each department using conditional sums with CASE.
"Retrieve customer names and their loyalty tier based on total spending. 'Gold' for >1000, 'Silver' for 500-1000, 'Bronze' for <500.","SELECT CustomerName, TotalSpending, CASE WHEN TotalSpending > 1000 THEN 'Gold' WHEN TotalSpending >= 500 THEN 'Silver' ELSE 'Bronze' END AS LoyaltyTier FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, TotalSpending REAL);",This query assigns a 'LoyaltyTier' to customers based on their 'TotalSpending' using a CASE expression.
"Display order ID, total amount, and a shipping cost category: 'Free Shipping' if total amount > 200, otherwise 'Standard Shipping'.","SELECT OrderID, TotalAmount, CASE WHEN TotalAmount > 200 THEN 'Free Shipping' ELSE 'Standard Shipping' END AS ShippingCostCategory FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, TotalAmount REAL);",This query categorizes orders into 'Free Shipping' or 'Standard Shipping' based on the 'TotalAmount' using a CASE expression.
"For each movie, display its title and an 'Audience Rating': 'G-rated' if MPAARating is 'G', 'Family Friendly' if 'PG' or 'PG-13', otherwise 'Adult Audience'.","SELECT Title, MPAARating, CASE WHEN MPAARating = 'G' THEN 'G-rated' WHEN MPAARating IN ('PG', 'PG-13') THEN 'Family Friendly' ELSE 'Adult Audience' END AS AudienceRating FROM Movies;","CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, MPAARating TEXT);",This query assigns an 'Audience Rating' to movies based on their MPAA rating using a CASE expression with multiple WHEN conditions.
Count the number of items sold in each quarter of the year 2023.,"SELECT SUM(CASE WHEN SaleDate BETWEEN '2023-01-01' AND '2023-03-31' THEN Quantity ELSE 0 END) AS Q1_Sales, SUM(CASE WHEN SaleDate BETWEEN '2023-04-01' AND '2023-06-30' THEN Quantity ELSE 0 END) AS Q2_Sales, SUM(CASE WHEN SaleDate BETWEEN '2023-07-01' AND '2023-09-30' THEN Quantity ELSE 0 END) AS Q3_Sales, SUM(CASE WHEN SaleDate BETWEEN '2023-10-01' AND '2023-12-31' THEN Quantity ELSE 0 END) AS Q4_Sales FROM Sales WHERE SaleDate LIKE '2023%';","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, Quantity INTEGER, SaleDate TEXT);",This query uses conditional aggregation with CASE statements to sum quantities sold per quarter for the year 2023.
"List users and their 'Account Status'. If LastLoginDate is within the last 30 days (from '2023-10-26'), mark 'Active'. If LastLoginDate is older than 90 days, mark 'Inactive'. Otherwise, mark 'Dormant'.","SELECT UserID, UserName, LastLoginDate, CASE WHEN julianday('2023-10-26') - julianday(LastLoginDate) <= 30 THEN 'Active' WHEN julianday('2023-10-26') - julianday(LastLoginDate) > 90 THEN 'Inactive' ELSE 'Dormant' END AS AccountStatus FROM Users;","CREATE TABLE Users (UserID INTEGER PRIMARY KEY, UserName TEXT, LastLoginDate TEXT);","This query determines 'Account Status' based on the difference between the current date and 'LastLoginDate', using SQLite's julianday function and a searched CASE."
"For each sensor, display its ID and a 'Health Status': 'Critical' if value is > 90 or < 10, 'Warning' if value is 80-90 or 10-20, otherwise 'Normal'.","SELECT SensorID, SensorValue, CASE WHEN SensorValue > 90 OR SensorValue < 10 THEN 'Critical' WHEN (SensorValue >= 80 AND SensorValue <= 90) OR (SensorValue >= 10 AND SensorValue <= 20) THEN 'Warning' ELSE 'Normal' END AS HealthStatus FROM Sensors;","CREATE TABLE Sensors (SensorID INTEGER PRIMARY KEY, SensorType TEXT, SensorValue INTEGER);","This query assigns a 'Health Status' to sensors based on their 'SensorValue', using a CASE expression with OR conditions."
"Update the 'Region' for customers: 'North' if their city is 'New York' or 'Boston', 'South' if 'Miami' or 'Houston', 'West' if 'Los Angeles' or 'San Francisco', otherwise 'Other'.","SELECT CustomerID, City, CASE WHEN City IN ('New York', 'Boston') THEN 'North' WHEN City IN ('Miami', 'Houston') THEN 'South' WHEN City IN ('Los Angeles', 'San Francisco') THEN 'West' ELSE 'Other' END AS Region FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT);","This query assigns a 'Region' to each customer based on their city, using a CASE statement with IN clauses."
Count the number of female and male employees.,"SELECT SUM(CASE WHEN Gender = 'Female' THEN 1 ELSE 0 END) AS FemaleCount, SUM(CASE WHEN Gender = 'Male' THEN 1 ELSE 0 END) AS MaleCount FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Gender TEXT);",This query counts the number of female and male employees using conditional aggregation with CASE expressions.
"List product IDs and their reorder level advice. If quantity in stock is below 10, advise 'Urgent Reorder'. If between 10 and 20, advise 'Normal Reorder'. Otherwise, 'No Reorder'.","SELECT ProductID, ProductName, QuantityInStock, CASE WHEN QuantityInStock < 10 THEN 'Urgent Reorder' WHEN QuantityInStock >= 10 AND QuantityInStock <= 20 THEN 'Normal Reorder' ELSE 'No Reorder' END AS ReorderAdvice FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, QuantityInStock INTEGER);",This query provides reorder advice for products based on their current stock quantity using a CASE statement.
"For each employee, display their name and a 'Bonus Eligibility' status. 'Eligible' if performance score > 80 AND department is 'Sales' or 'Marketing'. Otherwise 'Not Eligible'.","SELECT EmployeeName, PerformanceScore, Department, CASE WHEN PerformanceScore > 80 AND (Department = 'Sales' OR Department = 'Marketing') THEN 'Eligible' ELSE 'Not Eligible' END AS BonusEligibility FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, PerformanceScore INTEGER, Department TEXT);","This query determines 'Bonus Eligibility' for employees based on a combination of their performance score and department, using a CASE statement with AND/OR logic."
"Calculate the total cost of all orders, but apply a 5% discount if the order total is greater than 1000.",SELECT SUM(CASE WHEN TotalAmount > 1000 THEN TotalAmount * 0.95 ELSE TotalAmount END) AS AdjustedTotalCost FROM Orders;,"CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, TotalAmount REAL);","This query calculates the total cost of all orders, applying a conditional 5% discount to orders over 1000 using a CASE expression within SUM."
"Display server names and their 'Uptime Status'. If 'LastRestartDate' is NULL or more than 365 days ago (from '2023-10-26'), it's 'Requires Attention'. Otherwise, 'Stable'.","SELECT ServerName, LastRestartDate, CASE WHEN LastRestartDate IS NULL OR julianday('2023-10-26') - julianday(LastRestartDate) > 365 THEN 'Requires Attention' ELSE 'Stable' END AS UptimeStatus FROM Servers;","CREATE TABLE Servers (ServerID INTEGER PRIMARY KEY, ServerName TEXT, LastRestartDate TEXT);","This query checks server uptime status, classifying servers as 'Requires Attention' if their last restart date is missing or very old, using a CASE statement with date calculations."
"For each customer, show their name and 'Subscription Type': 'Premium' if 'SubscriptionEndDate' is in 2024, 'Standard' if in 2023, 'Expired' if before 2023, and 'None' if NULL.","SELECT CustomerName, SubscriptionEndDate, CASE WHEN STRFTIME('%Y', SubscriptionEndDate) = '2024' THEN 'Premium' WHEN STRFTIME('%Y', SubscriptionEndDate) = '2023' THEN 'Standard' WHEN STRFTIME('%Y', SubscriptionEndDate) < '2023' THEN 'Expired' WHEN SubscriptionEndDate IS NULL THEN 'None' ELSE 'Unknown' END AS SubscriptionType FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, SubscriptionEndDate TEXT);",This query categorizes customer subscription types based on their 'SubscriptionEndDate' using a CASE statement with STRFTIME for year extraction and NULL handling.
List the names of all customers who have placed an order.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query retrieves the unique first and last names of customers by joining the 'Customers' and 'Orders' tables on their common 'customer_id'.
Find the total number of orders placed by customers from 'USA'.,SELECT COUNT(O.order_id) FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id WHERE C.country = 'USA';,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query counts the total number of orders by joining 'Customers' and 'Orders' tables and then filtering for customers whose country is 'USA'.
Get the names of products that have been ordered at least once and belong to the 'Electronics' category.,SELECT DISTINCT P.product_name FROM Products AS P JOIN OrderItems AS OI ON P.product_id = OI.product_id WHERE P.category = 'Electronics';,"CREATE TABLE Products (product_id INT PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE OrderItems (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INTEGER, price_at_order REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query lists unique product names from the 'Electronics' category that have appeared in 'OrderItems', indicating they have been ordered."
"Calculate the total sales amount for each product, considering all orders.","SELECT P.product_name, SUM(OI.quantity * OI.price_at_order) AS total_sales FROM Products AS P JOIN OrderItems AS OI ON P.product_id = OI.product_id GROUP BY P.product_name ORDER BY total_sales DESC;","CREATE TABLE Products (product_id INT PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE OrderItems (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INTEGER, price_at_order REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query calculates the total sales for each product by joining 'Products' and 'OrderItems', multiplying quantity by price for each item, grouping by product name, and summing the results."
List customers who registered in 2023 and have not placed any orders.,"SELECT C.first_name, C.last_name FROM Customers AS C WHERE strftime('%Y', C.registration_date) = '2023' AND NOT EXISTS (SELECT 1 FROM Orders AS O WHERE O.customer_id = C.customer_id);","CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query finds customers who registered in 2023 and checks if there are no corresponding entries for them in the 'Orders' table, meaning they haven't placed an order."
Find the average order total for orders placed in January 2024.,"SELECT AVG(total_amount) FROM Orders WHERE strftime('%Y-%m', order_date) = '2024-01';","CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query calculates the average of the 'total_amount' for all orders placed within January 2024 using date formatting.
Identify products that have a stock quantity below 10 and have been ordered at least once.,SELECT DISTINCT P.product_name FROM Products AS P JOIN OrderItems AS OI ON P.product_id = OI.product_id WHERE P.stock_quantity < 10;,"CREATE TABLE Products (product_id INT PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE OrderItems (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INTEGER, price_at_order REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query selects the names of products that have a stock quantity less than 10 and have at least one corresponding entry in the 'OrderItems' table, indicating they've been ordered."
Show the names of customers who have ordered 'Laptop' at least twice.,"SELECT C.first_name, C.last_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN OrderItems AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id WHERE P.product_name = 'Laptop' GROUP BY C.customer_id HAVING SUM(OI.quantity) >= 2;","CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Products (product_id INT PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE OrderItems (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INTEGER, price_at_order REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query joins four tables to link customers to products, filters for 'Laptop' product, groups by customer, and then filters for customers who ordered 'Laptop' two or more times."
Which customer made the single largest order (by total amount)?,"SELECT C.first_name, C.last_name, O.total_amount FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id ORDER BY O.total_amount DESC LIMIT 1;","CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query finds the customer associated with the order that has the highest 'total_amount' by joining customers and orders, then sorting and limiting to the top result."
Get the total number of unique products ordered by each customer.,"SELECT C.first_name, C.last_name, COUNT(DISTINCT OI.product_id) AS unique_products_ordered FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN OrderItems AS OI ON O.order_id = OI.order_id GROUP BY C.customer_id ORDER BY unique_products_ordered DESC;","CREATE TABLE Customers (customer_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, registration_date TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE OrderItems (order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INTEGER, price_at_order REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query calculates the number of distinct products each customer has ordered by joining 'Customers', 'Orders', and 'OrderItems', grouping by customer, and counting distinct product IDs."
List the names of all students enrolled in a 'Computer Science' course.,"SELECT DISTINCT S.first_name, S.last_name FROM Students AS S JOIN Enrollments AS E ON S.student_id = E.student_id JOIN Courses AS C ON E.course_id = C.course_id WHERE C.department = 'Computer Science';","CREATE TABLE Students (student_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, enrollment_date TEXT, major TEXT); CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name TEXT, credits INTEGER, department TEXT); CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query joins 'Students', 'Enrollments', and 'Courses' to find students whose enrolled courses belong to the 'Computer Science' department."
Find the average number of credits for courses taught by professors in the 'Mathematics' department.,SELECT AVG(C.credits) FROM Courses AS C JOIN CourseOfferings AS CO ON C.course_id = CO.course_id JOIN Professors AS P ON CO.professor_id = P.professor_id WHERE P.department = 'Mathematics';,"CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name TEXT, credits INTEGER, department TEXT); CREATE TABLE Professors (professor_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT); CREATE TABLE CourseOfferings (offering_id INT PRIMARY KEY, course_id INT, professor_id INT, semester TEXT, year INTEGER, FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (professor_id) REFERENCES Professors(professor_id));","This query calculates the average credits of courses by joining 'Courses', 'CourseOfferings', and 'Professors', and filtering for professors in the 'Mathematics' department."
Get the names of professors who teach 'Database Systems' in the 'Fall 2023' semester.,"SELECT DISTINCT P.first_name, P.last_name FROM Professors AS P JOIN CourseOfferings AS CO ON P.professor_id = CO.professor_id JOIN Courses AS C ON CO.course_id = C.course_id WHERE C.course_name = 'Database Systems' AND CO.semester = 'Fall' AND CO.year = 2023;","CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name TEXT, credits INTEGER, department TEXT); CREATE TABLE Professors (professor_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT); CREATE TABLE CourseOfferings (offering_id INT PRIMARY KEY, course_id INT, professor_id INT, semester TEXT, year INTEGER, FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (professor_id) REFERENCES Professors(professor_id));","This query identifies professors by joining 'Professors', 'CourseOfferings', and 'Courses', filtering by course name, semester, and year."
List courses that have no students currently enrolled.,SELECT C.course_name FROM Courses AS C LEFT JOIN Enrollments AS E ON C.course_id = E.course_id WHERE E.enrollment_id IS NULL;,"CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name TEXT, credits INTEGER, department TEXT); CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query uses a LEFT JOIN to find courses that do not have any matching entries in the 'Enrollments' table, indicating no students are enrolled."
"For each student, list their name and the total number of courses they are enrolled in.","SELECT S.first_name, S.last_name, COUNT(E.course_id) AS num_courses_enrolled FROM Students AS S JOIN Enrollments AS E ON S.student_id = E.student_id GROUP BY S.student_id, S.first_name, S.last_name ORDER BY num_courses_enrolled DESC;","CREATE TABLE Students (student_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, enrollment_date TEXT, major TEXT); CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query joins 'Students' and 'Enrollments', then groups by student to count the number of courses each student is enrolled in."
Find the department with the highest average student enrollment count.,"SELECT C.department, COUNT(E.student_id) AS total_enrollments FROM Courses AS C JOIN Enrollments AS E ON C.course_id = E.course_id GROUP BY C.department ORDER BY total_enrollments DESC LIMIT 1;","CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name TEXT, credits INTEGER, department TEXT); CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));","This query calculates the total enrollments per department by joining 'Courses' and 'Enrollments', grouping by department, and then finding the department with the highest count."
Get the names of students who enrolled after 2022-09-01 and have a grade of 'A' in at least one course.,"SELECT DISTINCT S.first_name, S.last_name FROM Students AS S JOIN Enrollments AS E ON S.student_id = E.student_id WHERE S.enrollment_date > '2022-09-01' AND E.grade = 'A';","CREATE TABLE Students (student_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, enrollment_date TEXT, major TEXT); CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));",This query selects distinct student names by joining 'Students' and 'Enrollments' and filtering for students who enrolled after a specific date and received an 'A' grade.
Which professor teaches the most different courses?,"SELECT P.first_name, P.last_name, COUNT(DISTINCT CO.course_id) AS num_unique_courses FROM Professors AS P JOIN CourseOfferings AS CO ON P.professor_id = CO.professor_id GROUP BY P.professor_id ORDER BY num_unique_courses DESC LIMIT 1;","CREATE TABLE Professors (professor_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT); CREATE TABLE CourseOfferings (offering_id INT PRIMARY KEY, course_id INT, professor_id INT, semester TEXT, year INTEGER, FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (professor_id) REFERENCES Professors(professor_id));","This query counts the number of unique courses taught by each professor by joining 'Professors' and 'CourseOfferings', grouping by professor, and finding the professor with the highest count."
"List all courses offered in 2023, along with the names of the professors teaching them.","SELECT C.course_name, P.first_name, P.last_name FROM Courses AS C JOIN CourseOfferings AS CO ON C.course_id = CO.course_id JOIN Professors AS P ON CO.professor_id = P.professor_id WHERE CO.year = 2023;","CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name TEXT, credits INTEGER, department TEXT); CREATE TABLE Professors (professor_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, department TEXT, hire_date TEXT); CREATE TABLE CourseOfferings (offering_id INT PRIMARY KEY, course_id INT, professor_id INT, semester TEXT, year INTEGER, FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (professor_id) REFERENCES Professors(professor_id));","This query joins 'Courses', 'CourseOfferings', and 'Professors' to list course names and the names of professors who taught them in 2023."
Find students who are enrolled in courses from both 'Computer Science' and 'Mathematics' departments.,"SELECT S.first_name, S.last_name FROM Students AS S JOIN Enrollments AS E ON S.student_id = E.student_id JOIN Courses AS C ON E.course_id = C.course_id WHERE C.department = 'Computer Science' INTERSECT SELECT S.first_name, S.last_name FROM Students AS S JOIN Enrollments AS E ON S.student_id = E.student_id JOIN Courses AS C ON E.course_id = C.course_id WHERE C.department = 'Mathematics';","CREATE TABLE Students (student_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, enrollment_date TEXT, major TEXT); CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name TEXT, credits INTEGER, department TEXT); CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, enrollment_date TEXT, grade TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));",This query uses INTERSECT to find students who appear in the list of students taking 'Computer Science' courses AND the list of students taking 'Mathematics' courses.
Get the names of employees and the departments they belong to.,"SELECT E.first_name, E.last_name, D.department_name FROM Employees AS E JOIN Departments AS D ON E.department_id = D.department_id;","CREATE TABLE Employees (employee_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, department_id INT, hire_date TEXT, salary REAL); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name TEXT, manager_id INT, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));",This query joins 'Employees' and 'Departments' to list each employee's name along with their respective department name.
Find the total budget for all projects currently in 'Active' status.,SELECT SUM(budget) FROM Projects WHERE status = 'Active';,"CREATE TABLE Projects (project_id INT PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, status TEXT);",This query calculates the sum of the 'budget' for all projects where the 'status' is 'Active'.
List employees who are working on the 'Alpha Project'.,"SELECT E.first_name, E.last_name FROM Employees AS E JOIN EmployeeProjects AS EP ON E.employee_id = EP.employee_id JOIN Projects AS P ON EP.project_id = P.project_id WHERE P.project_name = 'Alpha Project';","CREATE TABLE Employees (employee_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, department_id INT, hire_date TEXT, salary REAL); CREATE TABLE Projects (project_id INT PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, status TEXT); CREATE TABLE EmployeeProjects (ep_id INT PRIMARY KEY, employee_id INT, project_id INT, role TEXT, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query joins 'Employees', 'EmployeeProjects', and 'Projects' to find employees assigned to the project named 'Alpha Project'."
Which department has the highest average employee salary?,"SELECT D.department_name, AVG(E.salary) AS avg_salary FROM Departments AS D JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name ORDER BY avg_salary DESC LIMIT 1;","CREATE TABLE Employees (employee_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, department_id INT, hire_date TEXT, salary REAL); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name TEXT, manager_id INT, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This query calculates the average salary for each department by joining 'Departments' and 'Employees', grouping by department name, and then finding the department with the highest average salary."
Find projects that have no employees assigned to them.,SELECT P.project_name FROM Projects AS P LEFT JOIN EmployeeProjects AS EP ON P.project_id = EP.project_id WHERE EP.employee_id IS NULL;,"CREATE TABLE Projects (project_id INT PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, status TEXT); CREATE TABLE EmployeeProjects (ep_id INT PRIMARY KEY, employee_id INT, project_id INT, role TEXT, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query uses a LEFT JOIN to find projects that do not have any corresponding entries in the 'EmployeeProjects' table, meaning no employees are assigned."
Get the names of employees who are managers of a department.,"SELECT E.first_name, E.last_name FROM Employees AS E JOIN Departments AS D ON E.employee_id = D.manager_id;","CREATE TABLE Employees (employee_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, department_id INT, hire_date TEXT, salary REAL); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name TEXT, manager_id INT, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));",This query joins 'Employees' and 'Departments' to find employees whose 'employee_id' matches a 'manager_id' in the 'Departments' table.
Count the number of employees hired in 2022 for each department.,"SELECT D.department_name, COUNT(E.employee_id) AS employees_hired FROM Departments AS D JOIN Employees AS E ON D.department_id = E.department_id WHERE strftime('%Y', E.hire_date) = '2022' GROUP BY D.department_name;","CREATE TABLE Employees (employee_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, department_id INT, hire_date TEXT, salary REAL); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name TEXT, manager_id INT, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This query counts employees hired in 2022 for each department by joining 'Departments' and 'Employees', filtering by hire year, and grouping by department name."
List employees who earn more than the average salary of their respective department.,"SELECT E.first_name, E.last_name, E.salary, D.department_name FROM Employees AS E JOIN Departments AS D ON E.department_id = D.department_id WHERE E.salary > (SELECT AVG(E2.salary) FROM Employees AS E2 WHERE E2.department_id = E.department_id);","CREATE TABLE Employees (employee_id INT PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT UNIQUE, department_id INT, hire_date TEXT, salary REAL); CREATE TABLE Departments (department_id INT PRIMARY KEY, department_name TEXT, manager_id INT, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This query uses a correlated subquery to compare each employee's salary against the average salary of their own department, listing employees who earn more."
Find the project with the longest duration (difference between end_date and start_date).,SELECT project_name FROM Projects ORDER BY julianday(end_date) - julianday(start_date) DESC LIMIT 1;,"CREATE TABLE Projects (project_id INT PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, status TEXT);","This query calculates the duration of each project using `julianday` to find the difference between end and start dates, then orders and limits to find the project with the longest duration."
"For each project, list its name and the number of employees assigned to it.","SELECT P.project_name, COUNT(EP.employee_id) AS num_employees FROM Projects AS P LEFT JOIN EmployeeProjects AS EP ON P.project_id = EP.project_id GROUP BY P.project_id, P.project_name ORDER BY num_employees DESC;","CREATE TABLE Projects (project_id INT PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, status TEXT); CREATE TABLE EmployeeProjects (ep_id INT PRIMARY KEY, employee_id INT, project_id INT, role TEXT, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query joins 'Projects' and 'EmployeeProjects' using a LEFT JOIN to ensure all projects are listed, then groups by project to count the number of assigned employees."
Retrieve all columns for all employees.,SELECT * FROM Employees;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, PhoneNumber TEXT, HireDate TEXT, JobTitle TEXT, Salary REAL, DepartmentID INTEGER);",This query selects all columns and all rows from the 'Employees' table.
Get the product name and price for every product.,"SELECT ProductName, Price FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER, SupplierID INTEGER);",This query retrieves the 'ProductName' and 'Price' columns from the 'Products' table.
List just the titles of all books.,SELECT Title FROM Books;,"CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, Author TEXT, Genre TEXT, PublicationYear INTEGER, Price REAL, StockCount INTEGER);",This query selects only the 'Title' column from the 'Books' table.
"Show employee first names, aliasing the column as 'GivenName'.",SELECT FirstName AS GivenName FROM Employees;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, PhoneNumber TEXT, HireDate TEXT, JobTitle TEXT, Salary REAL, DepartmentID INTEGER);",This query selects the 'FirstName' column from 'Employees' and renames it to 'GivenName' in the output.
Retrieve the movie title as 'FilmTitle' and director as 'FilmDirector'.,"SELECT Title AS FilmTitle, Director AS FilmDirector FROM Movies;","CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, Director TEXT, ReleaseYear INTEGER, Genre TEXT, Rating REAL);",This query selects the 'Title' column as 'FilmTitle' and 'Director' column as 'FilmDirector' from the 'Movies' table.
"Get the full name of each customer by concatenating first and last names, aliased as 'CustomerFullName'.",SELECT FirstName || ' ' || LastName AS CustomerFullName FROM Customers;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, RegistrationDate TEXT);","This query concatenates the 'FirstName' and 'LastName' columns with a space in between, aliasing the combined string as 'CustomerFullName'."
Calculate the total value of stock for each product (Price * StockQuantity) and call it 'InventoryValue'.,"SELECT ProductName, Price * StockQuantity AS InventoryValue FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER, SupplierID INTEGER);","This query calculates the product of 'Price' and 'StockQuantity' for each product, aliasing the result as 'InventoryValue', and also selects 'ProductName'."
"List distinct job titles from the Employees table, aliasing the column as 'UniqueJobTitles'.",SELECT DISTINCT JobTitle AS UniqueJobTitles FROM Employees;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, PhoneNumber TEXT, HireDate TEXT, JobTitle TEXT, Salary REAL, DepartmentID INTEGER);","This query retrieves all unique values from the 'JobTitle' column in 'Employees', aliasing the column as 'UniqueJobTitles'."
"Find the average salary of all employees, aliased as 'AverageEmployeeSalary'.",SELECT AVG(Salary) AS AverageEmployeeSalary FROM Employees;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, PhoneNumber TEXT, HireDate TEXT, JobTitle TEXT, Salary REAL, DepartmentID INTEGER);",This query calculates the average of the 'Salary' column for all employees and aliases the result as 'AverageEmployeeSalary'.
"Show the count of all orders, aliased as 'TotalOrdersPlaced'.",SELECT COUNT(*) AS TotalOrdersPlaced FROM Orders;,"CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query counts the total number of rows (orders) in the 'Orders' table and aliases the count as 'TotalOrdersPlaced'.
"Get the book title and publication year, aliasing the year as 'PubYear', for books published after 2000.","SELECT Title, PublicationYear AS PubYear FROM Books WHERE PublicationYear > 2000;","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, Author TEXT, Genre TEXT, PublicationYear INTEGER, Price REAL, StockCount INTEGER);","This query selects the 'Title' and 'PublicationYear' (aliased as 'PubYear') from 'Books', filtering for those published after 2000."
"List product names and their prices, aliasing price as 'UnitCost', for products costing more than 50, ordered by 'UnitCost' descending.","SELECT ProductName, Price AS UnitCost FROM Products WHERE Price > 50 ORDER BY UnitCost DESC;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER, SupplierID INTEGER);","This query selects 'ProductName' and 'Price' (aliased as 'UnitCost') from 'Products', filters for prices above 50, and orders the results by 'UnitCost' in descending order."
"Retrieve customer IDs and their email addresses, aliasing email as 'ContactEmail', for customers registered in 2022.","SELECT CustomerID, Email AS ContactEmail FROM Customers WHERE STRFTIME('%Y', RegistrationDate) = '2022';","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, RegistrationDate TEXT);","This query selects 'CustomerID' and 'Email' (aliased as 'ContactEmail') from 'Customers', filtering for registration dates within the year 2022 using `STRFTIME`."
"Show employee first name, last name, and their salary, plus a calculated bonus (10% of salary) aliased as 'PotentialBonus'.","SELECT FirstName, LastName, Salary, Salary * 0.10 AS PotentialBonus FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, PhoneNumber TEXT, HireDate TEXT, JobTitle TEXT, Salary REAL, DepartmentID INTEGER);","This query selects employee names, salary, and calculates a 10% bonus, aliasing the calculated column as 'PotentialBonus'."
"Get the movie title, director, and the release year aliased as 'ReleaseYearNum'. Limit to the top 5.","SELECT Title, Director, ReleaseYear AS ReleaseYearNum FROM Movies LIMIT 5;","CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, Director TEXT, ReleaseYear INTEGER, Genre TEXT, Rating REAL);","This query selects 'Title', 'Director', and 'ReleaseYear' (aliased as 'ReleaseYearNum') from 'Movies', limiting the output to the first 5 rows."
"For each order, get the Order ID, Total Amount, and the month of the order aliased as 'OrderMonthNumber'.","SELECT OrderID, TotalAmount, STRFTIME('%m', OrderDate) AS OrderMonthNumber FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query selects 'OrderID', 'TotalAmount', and extracts the month number from 'OrderDate' using `STRFTIME`, aliasing it as 'OrderMonthNumber'."
"Calculate the length of each product name, aliased as 'NameLength'.","SELECT ProductName, LENGTH(ProductName) AS NameLength FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER, SupplierID INTEGER);","This query selects 'ProductName' and calculates the length of each 'ProductName', aliasing the result as 'NameLength'."
"Find the maximum salary from the Employees table, aliased as 'HighestSalary'.",SELECT MAX(Salary) AS HighestSalary FROM Employees;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, PhoneNumber TEXT, HireDate TEXT, JobTitle TEXT, Salary REAL, DepartmentID INTEGER);",This query finds the maximum value in the 'Salary' column across all employees and aliases it as 'HighestSalary'.
"Get the minimum price among all books, aliased as 'LowestBookPrice'.",SELECT MIN(Price) AS LowestBookPrice FROM Books;,"CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, Author TEXT, Genre TEXT, PublicationYear INTEGER, Price REAL, StockCount INTEGER);",This query finds the minimum value in the 'Price' column across all books and aliases it as 'LowestBookPrice'.
"Retrieve the movie title and the first letter of its genre, aliased as 'GenreInitial'.","SELECT Title, SUBSTR(Genre, 1, 1) AS GenreInitial FROM Movies;","CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, Director TEXT, ReleaseYear INTEGER, Genre TEXT, Rating REAL);","This query selects the 'Title' and extracts the first character from the 'Genre' column, aliasing it as 'GenreInitial'."
"List customer IDs and the year they registered, aliasing the year as 'RegistrationYear'.","SELECT CustomerID, STRFTIME('%Y', RegistrationDate) AS RegistrationYear FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, RegistrationDate TEXT);","This query selects 'CustomerID' and extracts the year from 'RegistrationDate' using `STRFTIME`, aliasing it as 'RegistrationYear'."
"Show product ID, product name, and the category aliased as 'ProductGroup'.","SELECT ProductID, ProductName, Category AS ProductGroup FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER, SupplierID INTEGER);","This query selects 'ProductID', 'ProductName', and 'Category' (aliased as 'ProductGroup') from the 'Products' table."
"Get employee first names and the first two digits of their phone numbers, aliased as 'PhonePrefix'.","SELECT FirstName, SUBSTR(PhoneNumber, 1, 2) AS PhonePrefix FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, PhoneNumber TEXT, HireDate TEXT, JobTitle TEXT, Salary REAL, DepartmentID INTEGER);","This query selects 'FirstName' and extracts the first two characters of 'PhoneNumber', aliasing the result as 'PhonePrefix'."
"Select book titles and their authors, aliasing author as 'Writer', for books with price less than 15.","SELECT Title, Author AS Writer FROM Books WHERE Price < 15;","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, Author TEXT, Genre TEXT, PublicationYear INTEGER, Price REAL, StockCount INTEGER);","This query selects 'Title' and 'Author' (aliased as 'Writer') from 'Books', filtering for books with a price less than 15."
"Show order IDs and total amounts, aliasing the amount as 'InvoiceTotal', for orders placed in January.","SELECT OrderID, TotalAmount AS InvoiceTotal FROM Orders WHERE STRFTIME('%m', OrderDate) = '01';","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query selects 'OrderID' and 'TotalAmount' (aliased as 'InvoiceTotal') from 'Orders', filtering for orders placed in January."
"Retrieve movie titles and their genres, aliasing genre as 'FilmCategory', ordered by 'FilmCategory' alphabetically.","SELECT Title, Genre AS FilmCategory FROM Movies ORDER BY FilmCategory ASC;","CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, Director TEXT, ReleaseYear INTEGER, Genre TEXT, Rating REAL);","This query selects 'Title' and 'Genre' (aliased as 'FilmCategory') from 'Movies', and orders the results by the aliased 'FilmCategory' in ascending order."
"List customer first names and the initial of their last name, combined and aliased as 'CustomerInitial'.","SELECT FirstName || ' ' || SUBSTR(LastName, 1, 1) || '.' AS CustomerInitial FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, RegistrationDate TEXT);","This query concatenates the 'FirstName' with the first letter of 'LastName' and a period, aliasing the combined string as 'CustomerInitial'."
"Get employee IDs, first names, and calculate their monthly salary (Salary / 12) aliased as 'MonthlyPay'.","SELECT EmployeeID, FirstName, Salary / 12 AS MonthlyPay FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT, PhoneNumber TEXT, HireDate TEXT, JobTitle TEXT, Salary REAL, DepartmentID INTEGER);","This query selects 'EmployeeID', 'FirstName', and calculates the monthly salary by dividing 'Salary' by 12, aliasing the result as 'MonthlyPay'."
"Show product name, stock quantity, and how many items are needed to reach a stock of 100, aliased as 'NeededForTarget'.","SELECT ProductName, StockQuantity, (100 - StockQuantity) AS NeededForTarget FROM Products WHERE StockQuantity < 100;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL, StockQuantity INTEGER, SupplierID INTEGER);","This query selects 'ProductName', 'StockQuantity', and calculates the difference between 100 and 'StockQuantity', aliasing it as 'NeededForTarget', for products with less than 100 in stock."
"Retrieve book titles and their genres, aliasing genre as 'BookType', for books with a stock count less than 5.","SELECT Title, Genre AS BookType FROM Books WHERE StockCount < 5;","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, Author TEXT, Genre TEXT, PublicationYear INTEGER, Price REAL, StockCount INTEGER);","This query selects 'Title' and 'Genre' (aliased as 'BookType') from 'Books', filtering for books where 'StockCount' is less than 5."
Find all products that are priced at exactly 10.00.,"SELECT product_name, price FROM Products WHERE price = 10.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects the name and price of all products from the 'Products' table where the price is exactly 10.00.
List all customers who are not from the city 'New York'.,"SELECT customer_id, name, city FROM Customers WHERE city != 'New York';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT);","This query retrieves the ID, name, and city for all customers whose city is not 'New York'."
"Show all employees hired after January 1, 2020.","SELECT employee_id, first_name, hire_date FROM Employees WHERE hire_date > '2020-01-01';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT, is_active INTEGER);","This query fetches the ID, first name, and hire date for employees whose hire date is strictly after January 1, 2020."
Get orders with a total amount less than 50.00.,"SELECT order_id, total_amount FROM Orders WHERE total_amount < 50.00;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects the order ID and total amount for all orders where the total amount is less than 50.00.
Find products with stock quantity less than or equal to 10.,"SELECT product_name, stock_quantity FROM Products WHERE stock_quantity <= 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query lists the name and stock quantity of products that have 10 or fewer units in stock.
"Retrieve customers registered on or before December 31, 2021.","SELECT name, registration_date FROM Customers WHERE registration_date <= '2021-12-31';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT);","This query gets the name and registration date for customers who registered on or before December 31, 2021."
List active employees in the 'Sales' department.,"SELECT first_name, last_name FROM Employees WHERE department = 'Sales' AND is_active = 1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT, is_active INTEGER);",This query finds the first and last names of employees who belong to the 'Sales' department AND are marked as active.
Find orders that are either 'pending' or 'shipped'.,"SELECT order_id, status FROM Orders WHERE status = 'pending' OR status = 'shipped';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query retrieves the ID and status for orders that have a status of 'pending' OR 'shipped'.
Show products that are NOT in the 'Electronics' category.,"SELECT product_name, category FROM Products WHERE NOT category = 'Electronics';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query lists the name and category of products that are NOT classified under the 'Electronics' category.
Get customers whose names do not start with 'A'.,SELECT name FROM Customers WHERE NOT name LIKE 'A%';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT);",This query selects the names of customers whose names do not begin with the letter 'A'.
Find products in the 'Books' category with a price greater than 20.00 OR in the 'Movies' category.,"SELECT product_name, category, price FROM Products WHERE (category = 'Books' AND price > 20.00) OR category = 'Movies';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects products that are either 'Books' costing over 20.00 OR any product in the 'Movies' category.
"List employees who are in 'HR' and earn more than 60000, or are in 'IT' and earn more than 70000.","SELECT first_name, department, salary FROM Employees WHERE (department = 'HR' AND salary > 60000) OR (department = 'IT' AND salary > 70000);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT, is_active INTEGER);","This query retrieves employees who meet specific department and salary criteria: either HR with salary > 60000, or IT with salary > 70000."
"Show orders with a total amount between 100.00 and 500.00, inclusive.","SELECT order_id, total_amount FROM Orders WHERE total_amount BETWEEN 100.00 AND 500.00;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query fetches orders whose total amount falls within the range of 100.00 to 500.00, including the boundaries."
Find products whose price is not between 50.00 and 100.00.,"SELECT product_name, price FROM Products WHERE price NOT BETWEEN 50.00 AND 100.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query lists products with prices that are outside the range of 50.00 to 100.00.
"Retrieve customers from 'USA', 'Canada', or 'Mexico'.","SELECT name, country FROM Customers WHERE country IN ('USA', 'Canada', 'Mexico');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT);","This query selects customers whose country is one of 'USA', 'Canada', or 'Mexico'."
List employees whose department is NOT 'Marketing' and NOT 'Finance'.,"SELECT first_name, department FROM Employees WHERE department NOT IN ('Marketing', 'Finance');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT, is_active INTEGER);",This query finds employees who are in departments other than 'Marketing' or 'Finance'.
Find products whose names contain the word 'Smart'.,SELECT product_name FROM Products WHERE product_name LIKE '%Smart%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query selects products whose names include the substring 'Smart' anywhere within them.
Get customer names that start with 'J' and are 5 characters long.,SELECT name FROM Customers WHERE name LIKE 'J____';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT);",This query retrieves customer names that start with 'J' and are exactly five characters in total length.
Show products that do not have a category assigned.,SELECT product_name FROM Products WHERE category IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query lists product names for which the 'category' field is explicitly NULL.
Find employees who have an email address specified.,"SELECT first_name, email FROM Employees WHERE email IS NOT NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT, email TEXT);","This query selects employees along with their email addresses, only for those who have an email recorded (i.e., not NULL)."
"List products in 'Electronics' category, ordered by price descending.","SELECT product_name, price FROM Products WHERE category = 'Electronics' ORDER BY price DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query fetches products categorized as 'Electronics' and sorts them by price from highest to lowest.
Get the top 5 most recent orders with a total amount over 200.,"SELECT order_id, order_date, total_amount FROM Orders WHERE total_amount > 200.00 ORDER BY order_date DESC LIMIT 5;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query retrieves the five most recent orders that have a total amount exceeding 200.00.
Find all orders placed by customers from 'London'.,"SELECT O.order_id, O.order_date, C.name AS customer_name, C.city FROM Orders AS O JOIN Customers AS C ON O.customer_id = C.customer_id WHERE C.city = 'London';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT);",This query joins 'Orders' and 'Customers' tables to find orders placed by customers specifically located in 'London'.
"List active employees in 'Marketing' with salary above 50000, who were hired after 2018.","SELECT first_name, last_name, department, salary, hire_date FROM Employees WHERE is_active = 1 AND department = 'Marketing' AND salary > 50000 AND hire_date > '2018-12-31';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT, is_active INTEGER);","This query filters employees based on four conditions: active status, 'Marketing' department, salary greater than 50000, and hired after 2018."
Show departments where the average salary of active employees is greater than 75000.,"SELECT department, AVG(salary) AS avg_salary FROM Employees WHERE is_active = 1 GROUP BY department HAVING AVG(salary) > 75000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT, is_active INTEGER);","This query first filters for active employees, then groups them by department, and finally selects only those departments where the average salary is above 75000."
Find products whose price is higher than the average price of 'Electronics' products.,"SELECT product_name, price FROM Products WHERE price > (SELECT AVG(price) FROM Products WHERE category = 'Electronics');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);","This query uses a subquery to first calculate the average price of 'Electronics' products, then selects products whose individual price is greater than that average."
Retrieve customers who have placed at least one 'completed' order.,SELECT C.name FROM Customers AS C WHERE C.customer_id IN (SELECT O.customer_id FROM Orders AS O WHERE O.status = 'completed');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT, city TEXT, country TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects customer names if their ID appears in the list of customer IDs who have at least one order with 'completed' status.
List orders placed in the year 2023.,"SELECT order_id, order_date FROM Orders WHERE STRFTIME('%Y', order_date) = '2023';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query retrieves orders where the year extracted from the 'order_date' column is 2023.
Find products with a price between 25 and 75 and stock quantity less than 20.,"SELECT product_name, price, stock_quantity FROM Products WHERE price BETWEEN 25.00 AND 75.00 AND stock_quantity < 20;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL, stock_quantity INTEGER);",This query lists products that have a price within the 25-75 range AND a stock quantity below 20.
Get employees whose first name starts with 'S' and their salary is less than 50000 or greater than 90000.,"SELECT first_name, last_name, salary FROM Employees WHERE first_name LIKE 'S%' AND (salary < 50000 OR salary > 90000);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department TEXT, salary REAL, hire_date TEXT, is_active INTEGER);",This query finds employees whose first name starts with 'S' AND whose salary is either under 50000 OR over 90000.
List the names of all customers and the total amount of their orders.,"SELECT C.Name, O.TotalAmount FROM Customers AS C INNER JOIN Orders AS O ON C.CustomerID = O.CustomerID;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query joins the Customers and Orders tables on their common CustomerID to retrieve the name of each customer along with the total amount of their corresponding orders.
Find all products that belong to the 'Electronics' category.,"SELECT P.ProductName, C.CategoryName FROM Products AS P INNER JOIN Categories AS C ON P.CategoryID = C.CategoryID WHERE C.CategoryName = 'Electronics';","CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL);","This query joins Products with Categories, then filters the results to show only products where the category name is 'Electronics'."
Count how many employees are in each department.,"SELECT D.DepartmentName, COUNT(E.EmployeeID) AS NumberOfEmployees FROM Departments AS D INNER JOIN Employees AS E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentName;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);","This query joins Departments and Employees, then groups the results by department name to count the number of employees in each department."
List all movies along with their director's name and genre name.,"SELECT M.Title, D.DirectorName, G.GenreName FROM Movies AS M INNER JOIN Directors AS D ON M.DirectorID = D.DirectorID INNER JOIN Genres AS G ON M.GenreID = G.GenreID;","CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, DirectorID INTEGER, GenreID INTEGER, ReleaseYear INTEGER); CREATE TABLE Directors (DirectorID INTEGER PRIMARY KEY, DirectorName TEXT); CREATE TABLE Genres (GenreID INTEGER PRIMARY KEY, GenreName TEXT);","This query performs two INNER JOINs: first to connect Movies with Directors, and then to connect the result with Genres, displaying the movie title, director's name, and genre name for each movie."
Find all employees who work in the 'Sales' department and earn more than 50000.,"SELECT E.FirstName, E.LastName, D.DepartmentName FROM Employees AS E INNER JOIN Departments AS D ON E.DepartmentID = D.DepartmentID WHERE D.DepartmentName = 'Sales' AND E.Salary > 50000;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);","This query joins Employees with Departments, then filters to find employees in the 'Sales' department who have a salary greater than 50000."
List all students and the names of the courses they are enrolled in.,"SELECT S.StudentName, C.CourseName FROM Students AS S INNER JOIN Enrollments AS E ON S.StudentID = E.StudentID INNER JOIN Courses AS C ON E.CourseID = C.CourseID;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, EnrollmentDate TEXT);","This query uses two INNER JOINs to connect Students, Enrollments (a junction table), and Courses, retrieving the name of each student and the courses they are enrolled in."
Show all orders placed by the customer with CustomerID 101.,"SELECT O.OrderID, O.OrderDate, O.TotalAmount, C.Name AS CustomerName FROM Orders AS O INNER JOIN Customers AS C ON O.CustomerID = C.CustomerID WHERE C.CustomerID = 101;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query joins Orders with Customers and then filters for orders associated with a specific CustomerID, showing order details and the customer's name."
List all products that have a NULL price but are linked to a category.,"SELECT P.ProductName, C.CategoryName FROM Products AS P INNER JOIN Categories AS C ON P.CategoryID = C.CategoryID WHERE P.Price IS NULL;","CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL);","This query joins Products and Categories, then filters the results to display products that have a price of NULL but still belong to a category."
Calculate the total salary expenditure for each department.,"SELECT D.DepartmentName, SUM(E.Salary) AS TotalSalary FROM Departments AS D INNER JOIN Employees AS E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentName;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);","This query joins Departments with Employees, then groups the results by department name to calculate the sum of salaries for all employees within each department."
Find all authors and the titles of their books published after the year 2000.,"SELECT A.AuthorName, B.Title, B.PublicationYear FROM Authors AS A INNER JOIN Books AS B ON A.AuthorID = B.AuthorID WHERE B.PublicationYear > 2000;","CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT); CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, PublicationYear INTEGER);","This query joins Authors with Books, then filters to show only books published after the year 2000, along with their author's name and publication year."
Get the names of customers who placed at least one order in the year 2023.,"SELECT DISTINCT C.Name FROM Customers AS C INNER JOIN Orders AS O ON C.CustomerID = O.CustomerID WHERE STRFTIME('%Y', O.OrderDate) = '2023';","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query joins Customers with Orders, then uses STRFTIME to extract the year from the OrderDate and filters for orders placed in 2023, showing distinct customer names."
List all project names and the names and roles of employees assigned to them.,"SELECT P.ProjectName, E.EmployeeName, PA.Role FROM Projects AS P INNER JOIN ProjectAssignments AS PA ON P.ProjectID = PA.ProjectID INNER JOIN Employees AS E ON PA.EmployeeID = E.EmployeeID;","CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT); CREATE TABLE ProjectAssignments (ProjectID INTEGER, EmployeeID INTEGER, Role TEXT, PRIMARY KEY (ProjectID, EmployeeID));","This query uses two INNER JOINs to connect Projects, ProjectAssignments, and Employees, retrieving the project name, employee name, and their role for each assignment."
Show the names of suppliers and the products they provide.,"SELECT S.SupplierName, P.ProductName FROM Suppliers AS S INNER JOIN ProductSuppliers AS PS ON S.SupplierID = PS.SupplierID INNER JOIN Products AS P ON PS.ProductID = P.ProductID;","CREATE TABLE Suppliers (SupplierID INTEGER PRIMARY KEY, SupplierName TEXT); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE ProductSuppliers (ProductID INTEGER, SupplierID INTEGER, PRIMARY KEY (ProductID, SupplierID));","This query joins Suppliers, ProductSuppliers (junction table), and Products to list each supplier and the names of the products they supply."
"Get the first name, last name, and department location for all employees.","SELECT E.FirstName, E.LastName, D.Location FROM Employees AS E INNER JOIN Departments AS D ON E.DepartmentID = D.DepartmentID;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);",This query joins the Employees and Departments tables on their common DepartmentID to retrieve employee names and the location of their respective departments.
Display the names of categories that have at least one product with a price greater than 100.,SELECT DISTINCT C.CategoryName FROM Categories AS C INNER JOIN Products AS P ON C.CategoryID = P.CategoryID WHERE P.Price > 100;,"CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL);","This query joins Categories with Products, then filters for products with a price greater than 100, showing only the distinct category names associated with such products."
List the titles of books written by authors whose name starts with 'J'.,"SELECT B.Title, A.AuthorName FROM Books AS B INNER JOIN Authors AS A ON B.AuthorID = A.AuthorID WHERE A.AuthorName LIKE 'J%';","CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT); CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, PublicationYear INTEGER);","This query joins Books with Authors and filters for authors whose names start with 'J', displaying the book title and author name."
Find the names of customers who have placed more than 2 orders.,"SELECT C.Name, COUNT(O.OrderID) AS NumberOfOrders FROM Customers AS C INNER JOIN Orders AS O ON C.CustomerID = O.CustomerID GROUP BY C.Name HAVING COUNT(O.OrderID) > 2;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query joins Customers with Orders, groups by customer name, and then filters the groups to show only customers who have placed more than 2 orders."
Show department names where the sum of employee salaries is over 100000.,"SELECT D.DepartmentName, SUM(E.Salary) AS TotalSalary FROM Departments AS D INNER JOIN Employees AS E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentName HAVING SUM(E.Salary) > 100000;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);","This query joins Departments and Employees, groups by department, and then filters the groups to include only departments where the total sum of employee salaries exceeds 100000."
"For each course, display its name and the count of students currently enrolled.","SELECT C.CourseName, COUNT(E.StudentID) AS EnrolledStudentsCount FROM Courses AS C INNER JOIN Enrollments AS E ON C.CourseID = E.CourseID GROUP BY C.CourseName;","CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, EnrollmentDate TEXT);","This query joins Courses with Enrollments, groups by course name, and counts the number of students enrolled in each course."
List all movies released between 1990 and 1999 (inclusive) along with their director's name.,"SELECT M.Title, M.ReleaseYear, D.DirectorName FROM Movies AS M INNER JOIN Directors AS D ON M.DirectorID = D.DirectorID WHERE M.ReleaseYear BETWEEN 1990 AND 1999;","CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, DirectorID INTEGER, GenreID INTEGER, ReleaseYear INTEGER); CREATE TABLE Directors (DirectorID INTEGER PRIMARY KEY, DirectorName TEXT);","This query joins Movies with Directors, then filters for movies released within the 1990s, displaying the movie title, release year, and director's name."
Get the names of employees who work in any department that has 'Engineer' in its name.,"SELECT E.FirstName, E.LastName, D.DepartmentName FROM Employees AS E INNER JOIN Departments AS D ON E.DepartmentID = D.DepartmentID WHERE D.DepartmentName LIKE '%Engineer%';","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);","This query joins Employees with Departments and filters for departments whose names contain the substring 'Engineer', showing the corresponding employee names."
"For each product, list its name and the names of all suppliers that provide it.","SELECT P.ProductName, GROUP_CONCAT(S.SupplierName, ', ') AS Suppliers FROM Products AS P INNER JOIN ProductSuppliers AS PS ON P.ProductID = PS.ProductID INNER JOIN Suppliers AS S ON PS.SupplierID = S.SupplierID GROUP BY P.ProductName;","CREATE TABLE Suppliers (SupplierID INTEGER PRIMARY KEY, SupplierName TEXT); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE ProductSuppliers (ProductID INTEGER, SupplierID INTEGER, PRIMARY KEY (ProductID, SupplierID));","This query joins Products, ProductSuppliers, and Suppliers, then groups the results by product name and concatenates the names of all suppliers for each product."
Find the names of students who are enrolled in the 'Computer Science' course.,SELECT S.StudentName FROM Students AS S INNER JOIN Enrollments AS E ON S.StudentID = E.StudentID INNER JOIN Courses AS C ON E.CourseID = C.CourseID WHERE C.CourseName = 'Computer Science';,"CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, EnrollmentDate TEXT);","This query joins Students, Enrollments, and Courses, then filters to find students enrolled specifically in the 'Computer Science' course."
Identify departments that have at least 5 employees.,"SELECT D.DepartmentName, COUNT(E.EmployeeID) AS NumberOfEmployees FROM Departments AS D INNER JOIN Employees AS E ON D.DepartmentID = E.DepartmentID GROUP BY D.DepartmentName HAVING COUNT(E.EmployeeID) >= 5;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);","This query joins Departments with Employees, groups by department name, and filters to show only departments that have 5 or more employees."
All orders and customer emails for orders over $500.,"SELECT O.OrderID, O.OrderDate, O.TotalAmount, C.Email FROM Orders AS O INNER JOIN Customers AS C ON O.CustomerID = C.CustomerID WHERE O.TotalAmount > 500;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query joins Orders with Customers to get customer email addresses for orders, then filters for orders where the total amount exceeds 500."
Count the total number of books written by each author.,"SELECT A.AuthorName, COUNT(B.BookID) AS NumberOfBooks FROM Authors AS A INNER JOIN Books AS B ON A.AuthorID = B.AuthorID GROUP BY A.AuthorName;","CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT); CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, PublicationYear INTEGER);","This query joins Authors with Books, then groups by author name to count the total number of books associated with each author."
"List all employees, their department names, and sort them by salary in descending order.","SELECT E.FirstName, E.LastName, D.DepartmentName, E.Salary FROM Employees AS E INNER JOIN Departments AS D ON E.DepartmentID = D.DepartmentID ORDER BY E.Salary DESC;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);",This query joins Employees and Departments to get department names for each employee and then orders the entire result set by employee salary in descending order.
Calculate the average order amount for each customer.,"SELECT C.Name, AVG(O.TotalAmount) AS AverageOrderAmount FROM Customers AS C INNER JOIN Orders AS O ON C.CustomerID = O.CustomerID GROUP BY C.Name;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query joins Customers with Orders, groups by customer name, and calculates the average total amount of orders for each customer."
Find movies that are of the 'Action' genre and directed by 'Christopher Nolan'.,SELECT M.Title FROM Movies AS M INNER JOIN Directors AS D ON M.DirectorID = D.DirectorID INNER JOIN Genres AS G ON M.GenreID = G.GenreID WHERE G.GenreName = 'Action' AND D.DirectorName = 'Christopher Nolan';,"CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, DirectorID INTEGER, GenreID INTEGER, ReleaseYear INTEGER); CREATE TABLE Directors (DirectorID INTEGER PRIMARY KEY, DirectorName TEXT); CREATE TABLE Genres (GenreID INTEGER PRIMARY KEY, GenreName TEXT);","This query uses two INNER JOINs to connect Movies with Directors and Genres, then filters for movies that match both the 'Action' genre and 'Christopher Nolan' as director."
Retrieve the product name and its category name for products that contain 'Pro' in their name and belong to categories containing 'Tech'.,"SELECT P.ProductName, C.CategoryName FROM Products AS P INNER JOIN Categories AS C ON P.CategoryID = C.CategoryID WHERE P.ProductName LIKE '%Pro%' AND C.CategoryName LIKE '%Tech%';","CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL);","This query joins Products and Categories, then filters for products whose names contain 'Pro' AND whose category names contain 'Tech', displaying both names."
"List all customers and their corresponding order IDs, if any.","SELECT c.first_name, c.last_name, o.order_id FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id;","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))","Retrieves the first name, last name of all customers and the order ID for any orders they have placed. Customers without orders will still appear, with NULL in the order_id column."
"Show all products and their associated order items, but only for orders placed after January 1, 2023.","SELECT p.product_name, oi.quantity, o.order_date FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id AND o.order_date > '2023-01-01';","Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))","Retrieves all products and their associated order items and order dates. Only order items linked to orders placed after '2023-01-01' will have their order details shown; otherwise, those columns will be NULL. Products not in any order are also included."
"Count the number of orders for each customer, including customers who have not placed any orders.","SELECT c.first_name, c.last_name, COUNT(o.order_id) AS total_orders FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_orders DESC;","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))","Counts the total number of orders for each customer. Customers who have not placed any orders will appear with a count of 0, because COUNT(o.order_id) only counts non-NULL order IDs."
Find all customers who have not placed any orders.,"SELECT c.first_name, c.last_name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))","Lists the first and last names of customers who do not have any associated orders, identified by the order_id being NULL after the LEFT JOIN."
List all departments and any employees assigned to them. Departments without employees should not be listed.,"SELECT d.department_name, e.first_name, e.last_name FROM Employees e LEFT JOIN Departments d ON e.department_id = d.department_id;","Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT)","Retrieves department names and the names of employees working in those departments. This query effectively acts as a 'RIGHT JOIN' from Departments to Employees, meaning all employees and their respective departments are listed, and departments without employees are excluded."
"List all employees and their department names, and all departments and any employees in them. Include employees not assigned to any department and departments with no employees.","SELECT e.first_name, e.last_name, d.department_name FROM Employees e LEFT JOIN Departments d ON e.department_id = d.department_id UNION ALL SELECT NULL AS first_name, NULL AS last_name, d.department_name FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id WHERE e.employee_id IS NULL;","Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT)","This query emulates a FULL OUTER JOIN between Employees and Departments. The first part lists all employees and their departments (or NULL if no department). The second part adds departments that have no employees, ensuring all departments are represented."
"Display each customer's first name, last name, and their total order amount. If a customer has no orders, show 0 for the total amount.","SELECT c.first_name, c.last_name, COALESCE(SUM(o.total_amount), 0) AS total_spent FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY total_spent DESC;","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))","Shows the total amount spent by each customer. For customers with no orders, SUM(o.total_amount) would be NULL, which COALESCE converts to 0, ensuring all customers are represented with a numeric total."
"Retrieve the product name, the quantity sold, and the customer's email for all order items. Include products that have not been sold.","SELECT p.product_name, oi.quantity, c.email FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id LEFT JOIN Customers c ON o.customer_id = c.customer_id;","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id))","This query joins four tables to link products, order items, orders, and customers. It ensures that all products are listed, and associated order details and customer emails are shown if they exist."
"List all employees and the projects they are assigned to, if any, for projects that started in 2023.","SELECT e.first_name, e.last_name, p.project_name, p.start_date FROM Employees e LEFT JOIN Assignments a ON e.employee_id = a.employee_id LEFT JOIN Projects p ON a.project_id = p.project_id AND STRFTIME('%Y', p.start_date) = '2023';","Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, role TEXT, hours_worked INTEGER, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id)); Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id))","Retrieves all employees and the names of projects they are assigned to, but only if those projects started in 2023. Employees not assigned to any project, or assigned only to projects outside of 2023, will still be listed with NULLs for project details."
"For each department, list all employees, and also show the number of projects managed by that department. Include departments with no employees or no projects.","SELECT d.department_name, e.first_name, e.last_name, COALESCE(proj_counts.num_projects, 0) AS projects_managed FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id LEFT JOIN (SELECT department_id, COUNT(project_id) AS num_projects FROM Projects GROUP BY department_id) AS proj_counts ON d.department_id = proj_counts.department_id ORDER BY d.department_name, e.first_name;","Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id))","This query lists all departments, their employees, and the count of projects managed by each department. It uses a LEFT JOIN with a subquery that calculates project counts per department, ensuring all departments are included, even if they have no employees or no projects."
Identify any order items that do not have a corresponding product entry.,"SELECT oi.order_item_id, oi.product_id FROM Order_Items oi LEFT JOIN Products p ON oi.product_id = p.product_id WHERE p.product_id IS NULL;","Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id))","This query identifies order_item_id's where the product_id in Order_Items does not match any product_id in the Products table, indicating a potential data integrity issue."
"List all employees, their department name, and a status indicating 'Assigned' if they have a department or 'Unassigned' otherwise.","SELECT e.first_name, e.last_name, COALESCE(d.department_name, 'Unassigned') AS department_name_or_status, CASE WHEN d.department_id IS NOT NULL THEN 'Assigned' ELSE 'Unassigned' END AS assignment_status FROM Employees e LEFT JOIN Departments d ON e.department_id = d.department_id;","Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT)","Displays employee names and their department. If an employee is not assigned to a department, department_name will show 'Unassigned', and assignment_status will reflect 'Unassigned'."
"For each customer, find their first order date and the total number of distinct products they have ever ordered. Include customers with no orders.","SELECT c.first_name, c.last_name, MIN(o.order_date) AS first_order_date, COUNT(DISTINCT oi.product_id) AS distinct_products_ordered FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id LEFT JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id, c.first_name, c.last_name;","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id))",This query retrieves the earliest order date and the count of unique products ordered for each customer. Customers who haven't placed any orders will show NULL for first_order_date and 0 for distinct_products_ordered.
Show all customers and their orders if the order status is 'Completed'.,"SELECT c.first_name, c.last_name, o.order_id, o.status FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id AND o.status = 'Completed';","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))","Lists all customers. For each customer, it shows their orders only if the order status is 'Completed'. Customers who have no completed orders, or no orders at all, will still be listed with NULLs for order details."
Calculate the total budget of projects for each department. Include departments with no projects.,"SELECT d.department_name, COALESCE(SUM(p.budget), 0) AS total_project_budget FROM Departments d LEFT JOIN Projects p ON d.department_id = p.department_id GROUP BY d.department_id, d.department_name ORDER BY total_project_budget DESC;","Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id))",Computes the sum of budgets for projects within each department. Departments without any assigned projects will show a total_project_budget of 0.
"List all employees and any assignments they have to projects that are still active (i.e., end_date is NULL or in the future).","SELECT e.first_name, e.last_name, p.project_name, p.end_date FROM Employees e LEFT JOIN Assignments a ON e.employee_id = a.employee_id LEFT JOIN Projects p ON a.project_id = p.project_id AND (p.end_date IS NULL OR p.end_date > DATE('now'));","Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, role TEXT, hours_worked INTEGER, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id)); Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id))","Shows all employees and their project assignments, but only for projects that are currently active or ongoing. Employees not assigned to any project or only to completed projects will still be listed."
"List all product categories and how many products are in each, including categories with no products.","SELECT cat.category_name, COUNT(p.product_id) AS num_products FROM Categories cat LEFT JOIN Products p ON cat.category_id = p.category_id GROUP BY cat.category_id, cat.category_name ORDER BY cat.category_name;","Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id))","Counts the number of products in each product category. It ensures all categories are listed, showing 0 products for categories that currently have no items."
"Find all customers and their most recent order date. If they haven't ordered, show 'No Orders'.","SELECT c.first_name, c.last_name, COALESCE(MAX(o.order_date), 'No Orders') AS latest_order_date FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name, c.last_name ORDER BY latest_order_date DESC;","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))","Retrieves the most recent order date for each customer. If a customer has no orders, it will display 'No Orders' instead of NULL."
List all employees who are not assigned to any department.,"SELECT e.first_name, e.last_name FROM Employees e LEFT JOIN Departments d ON e.department_id = d.department_id WHERE d.department_id IS NULL;","Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT)","Identifies and lists employees who do not have a corresponding department in the Departments table, implying they are unassigned."
"For each department, show the total salary of employees, the average project budget, and the total number of employees, including departments with no employees or no projects.","SELECT d.department_name, COALESCE(SUM(e.salary), 0) AS total_employee_salary, COALESCE(AVG(p.budget), 0) AS average_project_budget, COUNT(e.employee_id) AS num_employees FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id LEFT JOIN Projects p ON d.department_id = p.department_id GROUP BY d.department_id, d.department_name ORDER BY d.department_name;","Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id))","This query provides a summary for each department, including the sum of employee salaries, the average project budget, and the count of employees. It ensures all departments are listed, even if they have no employees or projects, by using LEFT JOIN and COALESCE."
"Show the names of products that have a stock quantity below 10, and their associated order items, if any.","SELECT p_low_stock.product_name, p_low_stock.stock_quantity, oi.quantity AS ordered_quantity FROM (SELECT product_id, product_name, stock_quantity FROM Products WHERE stock_quantity < 10) AS p_low_stock LEFT JOIN Order_Items oi ON p_low_stock.product_id = oi.product_id;","Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id))","Lists products with a stock quantity less than 10, along with any order items for those products. Products with low stock but no associated order items will still be included."
"List all employees and all projects, matching them where an assignment exists. Include employees not on any project and projects with no assigned employees.","SELECT e.first_name, e.last_name, p.project_name FROM Employees e LEFT JOIN Assignments a ON e.employee_id = a.employee_id LEFT JOIN Projects p ON a.project_id = p.project_id UNION ALL SELECT NULL AS first_name, NULL AS last_name, p.project_name FROM Projects p LEFT JOIN Assignments a ON p.project_id = a.project_id WHERE a.assignment_id IS NULL;","Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, role TEXT, hours_worked INTEGER, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id))",This query emulates a FULL OUTER JOIN between employees and projects via their assignments. The first part gets all employees and their assigned projects. The second part adds projects that have no assigned employees.
List all product names that have never been included in an order.,SELECT p.product_name FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE oi.order_item_id IS NULL;,"Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id))","Finds products that do not have any associated entries in the Order_Items table, indicating they have never been ordered."
"List all customers who have 'Pending' orders, but no 'Cancelled' orders.","SELECT c.first_name, c.last_name FROM Customers c LEFT JOIN Orders o_pending ON c.customer_id = o_pending.customer_id AND o_pending.status = 'Pending' LEFT JOIN Orders o_cancelled ON c.customer_id = o_cancelled.customer_id AND o_cancelled.status = 'Cancelled' WHERE o_pending.order_id IS NOT NULL AND o_cancelled.order_id IS NULL GROUP BY c.customer_id;","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))","This query identifies customers who have at least one 'Pending' order but no 'Cancelled' orders. It uses two LEFT JOINs, one for each status, and then filters based on the presence or absence of orders for those statuses."
"For each department, find the latest hire date among its employees. If a department has no employees, still list the department and show NULL for the date.","SELECT d.department_name, MAX(e.hire_date) AS latest_hire_date FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name ORDER BY d.department_name;","Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id))",Calculates the latest hire date for employees within each department. Departments without any employees will still be listed with a NULL latest_hire_date.
List all customers whose email contains 'example.com' and any orders they made.,"SELECT c.first_name, c.last_name, c.email, o.order_id, o.order_date FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE c.email LIKE '%example.com%';","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id))",Retrieves all customers whose email address contains 'example.com' and their associated orders. Customers matching the email pattern but having no orders will still be listed.
Find departments that have no projects with an end date in the future (or NULL).,SELECT d.department_name FROM Departments d LEFT JOIN Projects p ON d.department_id = p.department_id AND (p.end_date IS NULL OR p.end_date > DATE('now')) WHERE p.project_id IS NULL;,"Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id))","Identifies departments that do not have any ongoing or future projects, by checking for the absence of such projects after a LEFT JOIN."
"Calculate the average price of products in orders for each customer. If a customer has no orders, show 0.","SELECT c.first_name, c.last_name, COALESCE(AVG(oi.item_price * oi.quantity), 0) AS average_order_item_value FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id LEFT JOIN Order_Items oi ON o.order_id = oi.order_id GROUP BY c.customer_id, c.first_name, c.last_name;","Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id))","Computes the average total value of order items for each customer. For customers with no orders, the average will be 0."
List all products that are not currently in stock (stock_quantity = 0) but have been ordered at least once.,"SELECT p.product_name, p.stock_quantity FROM Products p LEFT JOIN Order_Items oi ON p.product_id = oi.product_id WHERE p.stock_quantity = 0 AND oi.order_item_id IS NOT NULL GROUP BY p.product_id, p.product_name, p.stock_quantity;","Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, item_price REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id))","Retrieves products that have a stock quantity of 0 but have had at least one order item associated with them, indicating they were once ordered."
"List all employees and their project assignments. If a project has a budget, ensure it is positive.","SELECT e.first_name, e.last_name, p.project_name, p.budget FROM Employees e LEFT JOIN Assignments a ON e.employee_id = a.employee_id LEFT JOIN Projects p ON a.project_id = p.project_id AND p.budget > 0;","Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, department_id INTEGER, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, role TEXT, hours_worked INTEGER, FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id)); Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id))","Lists all employees and their project assignments. Project details (including budget) are only displayed if the project budget is positive; otherwise, those columns will be NULL for the project. Employees without assignments or with assignments to projects with non-positive budgets will still be listed."
Count the number of employees in each department.,"SELECT d.department_name, COUNT(e.employee_id) AS total_employees FROM Departments d JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query joins the Employees and Departments tables, then groups the results by department name to count the total number of employees in each department."
"Find the total salary for each department, but only for departments where the total salary exceeds 500000.","SELECT d.department_name, SUM(e.salary) AS total_department_salary FROM Departments d JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING SUM(e.salary) > 500000;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query calculates the sum of salaries for each department and then filters the results, showing only departments where the total sum of salaries is greater than 500000."
"What is the average salary for employees hired after 2020, grouped by their job title?","SELECT j.job_title, AVG(e.salary) AS average_salary FROM Employees e JOIN Jobs j ON e.job_id = j.job_id WHERE e.hire_date > '2020-12-31' GROUP BY j.job_title;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT NOT NULL UNIQUE, min_salary REAL, max_salary REAL);","This query first filters employees hired after December 31, 2020, then calculates the average salary for these filtered employees, grouped by their job title."
"List department names and the count of employees, but only for departments that have more than 5 employees.","SELECT d.department_name, COUNT(e.employee_id) AS employee_count FROM Departments d JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) > 5;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query counts the number of employees in each department and then filters the results, showing only departments that have more than 5 employees."
"For each year, find the highest and lowest total amount of orders.","SELECT STRFTIME('%Y', order_date) AS order_year, MAX(total_amount) AS max_order_amount, MIN(total_amount) AS min_order_amount FROM Orders GROUP BY order_year;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query extracts the year from the order date, then groups orders by year to find the maximum and minimum total amounts for orders placed within each respective year."
Count the number of products sold in each category for each customer city.,"SELECT c.city, p.category, SUM(oi.quantity) AS total_products_sold FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN Order_Items oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id GROUP BY c.city, p.category;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, city TEXT, state TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query joins customer, order, order item, and product information. It then groups the data by customer city and product category to calculate the total quantity of products sold for each unique combination."
Find product categories where the average price is over 50.00 and the total stock quantity is less than 100.,"SELECT category, AVG(price) AS average_price, SUM(stock_quantity) AS total_stock FROM Products GROUP BY category HAVING AVG(price) > 50.00 AND SUM(stock_quantity) < 100;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL);","This query groups products by category, computes the average price and total stock quantity for each category, and then filters to show only categories where the average price is above 50 and the total stock is less than 100."
"For each department, list the number of unique job titles present.","SELECT d.department_name, COUNT(DISTINCT j.job_title) AS unique_job_titles FROM Departments d JOIN Employees e ON d.department_id = e.department_id JOIN Jobs j ON e.job_id = j.job_id GROUP BY d.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT NOT NULL UNIQUE, min_salary REAL, max_salary REAL);","This query counts the distinct job titles associated with employees in each department by joining the Employees, Departments, and Jobs tables and grouping by department name."
"From customers who placed orders in 2023, find the average order total for each state, but only if that state has an average order total greater than 200.","SELECT c.state, AVG(o.total_amount) AS avg_order_total FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE STRFTIME('%Y', o.order_date) = '2023' GROUP BY c.state HAVING AVG(o.total_amount) > 200;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query first filters orders to include only those placed in 2023. It then calculates the average total amount per customer state for these orders and finally filters out states where this average is not greater than 200.
Identify all customers who have placed more than 3 orders.,"SELECT c.first_name, c.last_name, COUNT(o.order_id) AS number_of_orders FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name, c.last_name HAVING COUNT(o.order_id) > 3;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query counts the number of orders for each customer and then returns only those customers who have placed more than 3 orders.
"For each product category, what is the total number of items sold and the count of unique products sold, but only if the total items sold is less than 50?","SELECT p.category, SUM(oi.quantity) AS total_items_sold, COUNT(DISTINCT oi.product_id) AS unique_products FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.category HAVING SUM(oi.quantity) < 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query groups order items by product category, calculates the total quantity of items sold and the count of unique products within each category. It then filters to show only categories where the total items sold is less than 50."
"From orders placed in the last 6 months, find the customer cities where the minimum order amount is greater than 100.","SELECT c.city, MIN(o.total_amount) AS min_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-6 months') GROUP BY c.city HAVING MIN(o.total_amount) > 100;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query first filters orders to those placed within the last 6 months. It then groups the remaining orders by customer city, calculates the minimum total order amount for each city, and finally filters to show only cities where this minimum amount is greater than 100."
"Categorize employees by salary ranges ('Low', 'Medium', 'High') and count how many employees fall into each, but only include categories with more than 10 employees.","SELECT CASE WHEN salary < 50000 THEN 'Low' WHEN salary >= 50000 AND salary < 100000 THEN 'Medium' ELSE 'High' END AS salary_range, COUNT(employee_id) AS num_employees FROM Employees GROUP BY salary_range HAVING COUNT(employee_id) > 10;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query categorizes employees into salary ranges using a CASE statement. It then groups employees by these ranges, counts the number of employees in each, and filters to show only ranges that contain more than 10 employees."
"Calculate the average quantity of items per order for each product category, but only include categories where the average quantity per order is at least 2.","SELECT p.category, AVG(oi.quantity) AS avg_quantity_per_order FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.category HAVING AVG(oi.quantity) >= 2;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query computes the average quantity of items sold for each product category by joining Products and Order_Items tables. It then filters to display only categories where this average quantity is 2 or more.
Find the department with the highest total salary.,"SELECT d.department_name, SUM(e.salary) AS total_salary FROM Departments d JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY total_salary DESC LIMIT 1;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query calculates the total salary for each department, orders them in descending order of total salary, and then retrieves only the top department, which has the highest total salary."
List departments where the total salary is between 300000 and 600000.,"SELECT d.department_name, SUM(e.salary) AS total_department_salary FROM Departments d JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING SUM(e.salary) BETWEEN 300000 AND 600000;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query calculates the total salary for each department and then filters the results, showing only departments where the total salary falls between 300000 and 600000 (inclusive)."
Find customers who have placed at least 2 orders and their average order amount is over 150.,"SELECT c.first_name, c.last_name, COUNT(o.order_id) AS order_count, AVG(o.total_amount) AS avg_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) >= 2 AND AVG(o.total_amount) > 150;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query groups orders by customer, calculates the total count of orders and their average total amount. It then filters for customers who have placed 2 or more orders AND whose average order amount exceeds 150."
Identify products for which the total quantity ordered across all orders exceeds 100 units.,"SELECT p.product_name, SUM(oi.quantity) AS total_ordered_quantity FROM Products p JOIN Order_Items oi ON p.product_id = oi.product_id GROUP BY p.product_name HAVING SUM(oi.quantity) > 100;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, unit_price REAL NOT NULL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query sums the quantities of each product across all order items. It then filters the results to show only products where this total ordered quantity is greater than 100.
List locations that host more than one department.,"SELECT location, COUNT(department_id) AS number_of_departments FROM Departments GROUP BY location HAVING COUNT(department_id) > 1;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query groups departments by their location, counts the number of departments in each location, and filters to show only locations that host more than one department."
Find job titles where the average salary of employees holding that job is less than the minimum salary defined for that job.,"SELECT j.job_title, AVG(e.salary) AS average_employee_salary, j.min_salary FROM Jobs j JOIN Employees e ON j.job_id = e.job_id GROUP BY j.job_title, j.min_salary HAVING AVG(e.salary) < j.min_salary;","CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT NOT NULL UNIQUE, min_salary REAL, max_salary REAL); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));",This query calculates the average salary for employees in each job title. It then filters to show only job titles where this average salary is less than the minimum salary specified for that particular job.
"Count employees hired in '07' (July) for each job title, only showing job titles where more than 2 employees were hired in July.","SELECT j.job_title, COUNT(e.employee_id) AS employees_hired_in_july FROM Employees e JOIN Jobs j ON e.job_id = j.job_id WHERE STRFTIME('%m', e.hire_date) = '07' GROUP BY j.job_title HAVING COUNT(e.employee_id) > 2;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT NOT NULL UNIQUE, min_salary REAL, max_salary REAL);","This query first filters for employees hired in July. Then, it groups these employees by their job title, counts them, and finally filters to display only job titles where more than 2 employees were hired in July."
Identify customers whose total order amount is over 1000 but have placed 3 or fewer orders.,"SELECT c.first_name, c.last_name, SUM(o.total_amount) AS total_orders_amount, COUNT(o.order_id) AS order_count FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.first_name, c.last_name HAVING SUM(o.total_amount) > 1000 AND COUNT(o.order_id) <= 3;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query groups orders by customer, calculates the sum of their total order amounts and the count of their orders. It then filters for customers who have spent over 1000 AND placed 3 or fewer orders."
List department names that currently have no employees.,SELECT d.department_name FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING COUNT(e.employee_id) = 0;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query performs a LEFT JOIN from Departments to Employees to include all departments, even those without employees. It then groups by department name and counts employee IDs. Departments with no employees will have a count of 0 (since employee_id will be NULL for those departments in the LEFT JOIN), which is used as the filter condition."
Find product categories where the total stock quantity is less than 50 and the average product price in that category is greater than 75.,"SELECT category, SUM(stock_quantity) AS total_stock_qty, AVG(price) AS average_product_price FROM Products GROUP BY category HAVING SUM(stock_quantity) < 50 AND AVG(price) > 75;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL);","This query groups products by category, calculates the total stock quantity and average price for each category, and then filters to show only categories where the total stock is less than 50 AND the average price is greater than 75."
List the names of authors who have written more than 5 books.,"SELECT a.author_name, COUNT(b.book_id) AS book_count FROM Authors a JOIN Books b ON a.author_id = b.author_id GROUP BY a.author_name HAVING COUNT(b.book_id) > 5;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publication_year INTEGER, genre TEXT, price REAL, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query joins the Authors and Books tables, groups the results by author name, counts the number of books written by each author, and then filters to show only authors who have written more than 5 books."
"Find genres where at least one book was published before the year 2000, and the total price of all books in that genre exceeds 100.","SELECT genre, SUM(price) AS total_genre_price FROM Books WHERE publication_year < 2000 GROUP BY genre HAVING SUM(price) > 100;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publication_year INTEGER, genre TEXT, price REAL, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query first filters for books published before the year 2000. It then groups these books by genre, calculates the total price for each genre, and finally filters to show only genres where this total price exceeds 100."
List departments where the average tenure of employees (years since hire date) is greater than 10 years.,"SELECT d.department_name, AVG(JULIANDAY('now') - JULIANDAY(e.hire_date)) / 365.25 AS avg_tenure_years FROM Departments d JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name HAVING AVG(JULIANDAY('now') - JULIANDAY(e.hire_date)) / 365.25 > 10;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));",This query calculates the average tenure (in years) for employees in each department using SQLite's JULIANDAY function to find the difference between 'now' and the hire_date. It then filters for departments where this average tenure is greater than 10 years.
Identify cities where the cumulative total amount of all orders placed by customers in that city is between 500 and 1000.,"SELECT c.city, SUM(o.total_amount) AS total_city_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.city HAVING SUM(o.total_amount) BETWEEN 500 AND 1000;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, city TEXT, state TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query groups orders by the customer's city, calculates the total order amount for each city, and then filters to show only cities where this total amount is between 500 and 1000."
Find product categories where the average stock quantity is less than 20 and the minimum price in that category is over 10.,"SELECT category, AVG(stock_quantity) AS avg_stock, MIN(price) AS min_price FROM Products GROUP BY category HAVING AVG(stock_quantity) < 20 AND MIN(price) > 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL NOT NULL, stock_quantity INTEGER NOT NULL);","This query groups products by category, calculates the average stock quantity and minimum price within each category. It then filters for categories where the average stock is less than 20 AND the minimum price is greater than 10."
List department names that have employees holding at least 3 distinct job titles.,"SELECT d.department_name, COUNT(DISTINCT j.job_title) AS distinct_job_titles_count FROM Departments d JOIN Employees e ON d.department_id = e.department_id JOIN Jobs j ON e.job_id = j.job_id GROUP BY d.department_name HAVING COUNT(DISTINCT j.job_title) >= 3;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs(job_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT NOT NULL UNIQUE, min_salary REAL, max_salary REAL);",This query counts the number of distinct job titles associated with employees in each department. It then filters to show only departments that have employees holding 3 or more distinct job titles.
"List all employees, their departments, and a row number based on their salary in descending order.","SELECT EmployeeID, Name, Department, Salary, ROW_NUMBER() OVER (ORDER BY Salary DESC) AS Rnk FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary INTEGER);","This query assigns a unique row number to each employee based on their salary, from highest to lowest. Employees with higher salaries get lower row numbers."
"Show products, their categories, and their rank within the entire product list based on price, handling ties.","SELECT ProductID, ProductName, Category, Price, RANK() OVER (ORDER BY Price DESC) AS PriceRank FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);","This query ranks products by price in descending order. If multiple products have the same price, they receive the same rank, and the next rank skips numbers."
"Display students, their courses, and their dense rank based on their score in descending order.","SELECT StudentID, Name, Course, Score, DENSE_RANK() OVER (ORDER BY Score DESC) AS ScoreDenseRank FROM Students;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, Name TEXT, Course TEXT, Score INTEGER);","This query ranks students by their score in descending order. Students with the same score get the same rank, and the next rank is consecutive without gaps."
"For each sale, show the Sale ID, Date, Amount, and the amount of the previous sale made by the same customer, if any.","SELECT SaleID, CustomerID, SaleDate, Amount, LAG(Amount, 1, 0) OVER (PARTITION BY CustomerID ORDER BY SaleDate) AS PreviousSaleAmount FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, CustomerID INTEGER, SaleDate TEXT, Amount REAL);","This query retrieves the amount of the previous sale for each customer, ordered by sale date. If there is no previous sale, it defaults to 0."
"For each employee's transaction, show the transaction amount and the amount of their next transaction.","SELECT TransactionID, EmployeeID, TransactionDate, Amount, LEAD(Amount, 1, 0) OVER (PARTITION BY EmployeeID ORDER BY TransactionDate) AS NextTransactionAmount FROM Transactions;","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, EmployeeID INTEGER, TransactionDate TEXT, Amount REAL);","This query shows each transaction amount and the amount of the subsequent transaction for the same employee, ordered by transaction date. If there's no next transaction, it defaults to 0."
"Calculate a running total of order amounts for each customer, ordered by order date.","SELECT OrderID, CustomerID, OrderDate, TotalAmount, SUM(TotalAmount) OVER (PARTITION BY CustomerID ORDER BY OrderDate) AS RunningTotal FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query calculates the cumulative sum of `TotalAmount` for each customer, ordered by their `OrderDate`. It shows how much a customer has spent up to a given order."
"Find the average salary within each department, and also the average salary across all employees, for each employee record.","SELECT EmployeeID, Name, Department, Salary, AVG(Salary) OVER (PARTITION BY Department) AS AvgDeptSalary, AVG(Salary) OVER () AS AvgOverallSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary INTEGER);","This query displays each employee's salary along with the average salary of their department and the overall average salary of all employees, both calculated using window functions."
Assign each product to one of four price quartiles.,"SELECT ProductID, ProductName, Price, NTILE(4) OVER (ORDER BY Price) AS PriceQuartile FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL);","This query divides all products into 4 groups (quartiles) based on their price, assigning a quartile number (1-4) to each product."
Get the earliest sale date for each customer along with all their sales.,"SELECT SaleID, CustomerID, SaleDate, Amount, FIRST_VALUE(SaleDate) OVER (PARTITION BY CustomerID ORDER BY SaleDate) AS FirstSaleDate FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, CustomerID INTEGER, SaleDate TEXT, Amount REAL);",This query retrieves the date of the very first sale for each customer and displays it alongside all of their individual sales records.
Get the latest sale amount for each customer along with all their sales.,"SELECT SaleID, CustomerID, SaleDate, Amount, LAST_VALUE(Amount) OVER (PARTITION BY CustomerID ORDER BY SaleDate ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LastSaleAmount FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, CustomerID INTEGER, SaleDate TEXT, Amount REAL);",This query shows each sale along with the amount of the most recent sale made by that customer. The `ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING` ensures the window covers all rows in the partition.
"For each employee, find their salary and the salary of the highest-paid employee in their department.","SELECT EmployeeID, Name, Department, Salary, MAX(Salary) OVER (PARTITION BY Department) AS MaxDeptSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary INTEGER);","This query lists each employee's salary and, for each employee, also shows the maximum salary found within their respective department."
"For each employee, find their salary and the salary of the lowest-paid employee in their department.","SELECT EmployeeID, Name, Department, Salary, MIN(Salary) OVER (PARTITION BY Department) AS MinDeptSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary INTEGER);","This query lists each employee's salary and, for each employee, also shows the minimum salary found within their respective department."
"Count the number of employees in each department, displayed on each employee's record.","SELECT EmployeeID, Name, Department, COUNT(EmployeeID) OVER (PARTITION BY Department) AS EmployeesInDept FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary INTEGER);",This query adds a column to each employee's record indicating the total number of employees in their department.
Show the top 3 highest-paid employees in each department.,"WITH RankedEmployees AS (SELECT EmployeeID, Name, Department, Salary, RANK() OVER (PARTITION BY Department ORDER BY Salary DESC) AS DeptRank FROM Employees) SELECT EmployeeID, Name, Department, Salary FROM RankedEmployees WHERE DeptRank <= 3;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary INTEGER);",This query first ranks employees within each department by salary in descending order and then filters to show only the top 3 employees for each department.
"For each transaction, find the difference in amount from the previous transaction by the same customer.","SELECT TransactionID, CustomerID, TransactionDate, Amount, Amount - LAG(Amount, 1, Amount) OVER (PARTITION BY CustomerID ORDER BY TransactionDate) AS AmountChange FROM Transactions;","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, CustomerID INTEGER, TransactionDate TEXT, Amount REAL);","This query calculates the change in transaction amount from the immediately preceding transaction for each customer, ordered by transaction date. If it's the first transaction, the change is 0."
Identify sales that are more than 10% higher than the average sale amount for the same customer over all their sales.,"WITH CustomerAvgSales AS (SELECT SaleID, CustomerID, Amount, AVG(Amount) OVER (PARTITION BY CustomerID) AS AvgCustomerSale FROM Sales) SELECT SaleID, CustomerID, Amount FROM CustomerAvgSales WHERE Amount > AvgCustomerSale * 1.1;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, CustomerID INTEGER, SaleDate TEXT, Amount REAL);",This query identifies sales where the individual sale amount is more than 10% greater than the average sale amount for that specific customer.
"List all products and their rank based on price, within their respective categories, for products costing more than 50.","SELECT ProductID, ProductName, Category, Price, RANK() OVER (PARTITION BY Category ORDER BY Price DESC) AS RankInCategory FROM Products WHERE Price > 50;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);","This query ranks products by price in descending order within each category, but only for products that cost more than 50. It shows products' relative standing within their category."
"Show the average temperature for each day along with the actual temperature reading, where temperatures are recorded hourly.","SELECT ReadingID, ReadingDate, HourOfDay, Temperature, AVG(Temperature) OVER (PARTITION BY ReadingDate) AS AvgDailyTemp FROM TemperatureReadings;","CREATE TABLE TemperatureReadings (ReadingID INTEGER PRIMARY KEY, ReadingDate TEXT, HourOfDay INTEGER, Temperature REAL);",This query displays each individual temperature reading alongside the average temperature recorded for that specific day.
"Find students who have scored higher than the student immediately preceding them in their course, ordered by enrollment date.","SELECT StudentID, Name, Course, Score FROM Students WHERE Score > LAG(Score, 1, 0) OVER (PARTITION BY Course ORDER BY EnrollmentDate);","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, Name TEXT, Course TEXT, Score INTEGER, EnrollmentDate TEXT);",This query identifies students whose score is greater than the score of the student who enrolled before them in the same course.
List sales along with the running count of sales for each customer up to that point.,"SELECT SaleID, CustomerID, SaleDate, Amount, COUNT(SaleID) OVER (PARTITION BY CustomerID ORDER BY SaleDate) AS RunningSaleCount FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, CustomerID INTEGER, SaleDate TEXT, Amount REAL);","This query calculates a cumulative count of sales for each customer, ordered by their sale date. It shows which sale number (1st, 2nd, etc.) each transaction represents for a given customer."
"For each employee, find their salary and the salary of the third highest-paid employee overall.","SELECT EmployeeID, Name, Salary, NTH_VALUE(Salary, 3) OVER (ORDER BY Salary DESC) AS ThirdHighestSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Salary INTEGER);",This query retrieves the salary of the third highest-paid employee from the entire employee list and displays it alongside each employee's record.
Retrieve sales that are the highest for their respective customer.,"WITH RankedSales AS (SELECT SaleID, CustomerID, Amount, RANK() OVER (PARTITION BY CustomerID ORDER BY Amount DESC) AS CustomerSaleRank FROM Sales) SELECT SaleID, CustomerID, Amount FROM RankedSales WHERE CustomerSaleRank = 1;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, CustomerID INTEGER, Amount REAL);",This query identifies and returns the highest-amount sale for each individual customer.
"List transaction IDs and amounts, and for each transaction, the sum of amounts of the current and two preceding transactions.","SELECT TransactionID, TransactionDate, Amount, SUM(Amount) OVER (ORDER BY TransactionDate ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS RollingSum3Transactions FROM Transactions;","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, TransactionDate TEXT, Amount REAL);","This query calculates a rolling sum of the current transaction's amount and the amounts of the two previous transactions, ordered by date."
"For each product, show its name, category, and the price of the first product alphabetically in that category.","SELECT ProductID, ProductName, Category, Price, FIRST_VALUE(Price) OVER (PARTITION BY Category ORDER BY ProductName ASC) AS PriceOfFirstProductInCategory FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);","This query displays the price of the product that comes first alphabetically within each product category, alongside each product's details."
Find the average salary for each department and the difference of each employee's salary from that average.,"SELECT EmployeeID, Name, Department, Salary, AVG(Salary) OVER (PARTITION BY Department) AS AvgDeptSalary, Salary - AVG(Salary) OVER (PARTITION BY Department) AS SalaryDifferenceFromAvg FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Department TEXT, Salary INTEGER);","This query calculates the average salary per department and then, for each employee, shows how much their individual salary deviates from their department's average."
Get the order number within the year for each order.,"SELECT OrderID, CustomerID, OrderDate, ROW_NUMBER() OVER (PARTITION BY STRFTIME('%Y', OrderDate) ORDER BY OrderDate) AS OrderNumberInYear FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query assigns a sequential number to each order, restarting the count for each new year based on the order date."
"List employees and their salaries, including the second highest salary among all employees.","SELECT EmployeeID, Name, Salary, NTH_VALUE(Salary, 2) OVER (ORDER BY Salary DESC) AS SecondHighestSalary FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, Salary INTEGER);",This query retrieves the salary of the second highest-paid employee from the entire employee list and displays it alongside each employee's record.
"For each student in a course, find their rank by score and the rank of the next student in the same course, ordered by score.","SELECT StudentID, Name, Course, Score, DENSE_RANK() OVER (PARTITION BY Course ORDER BY Score DESC) AS StudentRank, LEAD(DENSE_RANK() OVER (PARTITION BY Course ORDER BY Score DESC), 1, 0) OVER (PARTITION BY Course ORDER BY Score DESC) AS NextStudentRank FROM Students;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, Name TEXT, Course TEXT, Score INTEGER);","This query shows each student's dense rank within their course by score and also shows the rank of the next student in the same course, ordered by score."
Find all products that are not the highest priced within their category.,"SELECT ProductID, ProductName, Category, Price FROM (SELECT ProductID, ProductName, Category, Price, RANK() OVER (PARTITION BY Category ORDER BY Price DESC) AS PriceRank FROM Products) WHERE PriceRank > 1;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);",This query identifies and lists all products whose price is not the highest within their respective categories.
Calculate the difference in temperature from the first reading of the day for each subsequent reading.,"SELECT ReadingID, ReadingDate, HourOfDay, Temperature, Temperature - FIRST_VALUE(Temperature) OVER (PARTITION BY ReadingDate ORDER BY HourOfDay) AS TempDifferenceFromDailyStart FROM TemperatureReadings;","CREATE TABLE TemperatureReadings (ReadingID INTEGER PRIMARY KEY, ReadingDate TEXT, HourOfDay INTEGER, Temperature REAL);",This query calculates how much each temperature reading deviates from the first recorded temperature of the day.
Assign a quarterly rank to sales based on their amount within each customer.,"SELECT SaleID, CustomerID, SaleDate, Amount, NTILE(4) OVER (PARTITION BY CustomerID ORDER BY Amount DESC) AS CustomerAmountQuartile FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, CustomerID INTEGER, SaleDate TEXT, Amount REAL);","This query divides each customer's sales into four quartiles based on the sale amount, with 1 being the highest quartile."
List the names of all employees who work in departments located in 'New York'.,SELECT Name FROM Employees WHERE DeptID IN (SELECT DeptID FROM Departments WHERE Location = 'New York');,"CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER, Salary REAL, HireDate TEXT); CREATE TABLE Departments (DeptID INTEGER PRIMARY KEY, DeptName TEXT, Location TEXT);","This query first finds the department IDs for all departments located in 'New York' using an uncorrelated subquery, and then uses these IDs to select employees from the Employees table."
Find the names and salaries of employees whose salary is greater than the average salary of all employees.,"SELECT Name, Salary FROM Employees WHERE Salary > (SELECT AVG(Salary) FROM Employees);","CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER, Salary REAL, HireDate TEXT);","This query first calculates the average salary of all employees using an uncorrelated scalar subquery, and then selects employees whose individual salary exceeds this average."
"List the department names along with the number of employees in each department, but only for departments with more than 5 employees.","SELECT D.DeptName, E.EmployeeCount FROM Departments D JOIN (SELECT DeptID, COUNT(EmpID) AS EmployeeCount FROM Employees GROUP BY DeptID HAVING COUNT(EmpID) > 5) E ON D.DeptID = E.DeptID;","CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER, Salary REAL, HireDate TEXT); CREATE TABLE Departments (DeptID INTEGER PRIMARY KEY, DeptName TEXT, Location TEXT);","This query first creates a derived table (E) that counts employees per department, filtering for departments with more than 5 employees. It then joins this derived table with the Departments table to show department names and their respective employee counts."
Find the names of customers who have placed at least one order.,SELECT Name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.CustomerID = C.CustomerID);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query selects customer names if a corresponding entry exists in the Orders table for that customer, making the subquery dependent on the outer query's CustomerID (correlated subquery)."
List customers who have not placed any orders.,SELECT Name FROM Customers C WHERE NOT EXISTS (SELECT 1 FROM Orders O WHERE O.CustomerID = C.CustomerID);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query selects customer names if no corresponding entry exists in the Orders table for that customer, using a correlated subquery."
"For each employee, show their name, salary, and the average salary of their department.","SELECT E.Name, E.Salary, (SELECT AVG(Salary) FROM Employees WHERE DeptID = E.DeptID) AS DepartmentAverageSalary FROM Employees E;","CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER, Salary REAL, HireDate TEXT);",This query calculates the average salary for each employee's specific department using a correlated scalar subquery for each row in the outer query.
Find the names of employees who have the highest salary within their respective departments.,"SELECT Name, DeptID, Salary FROM Employees E WHERE Salary = (SELECT MAX(Salary) FROM Employees WHERE DeptID = E.DeptID);","CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER, Salary REAL, HireDate TEXT);","This query selects employees whose salary matches the maximum salary found within their own department, using a correlated subquery."
Find customers who have never ordered a 'Book'.,SELECT C.Name FROM Customers C WHERE C.CustomerID NOT IN (SELECT O.CustomerID FROM Orders O JOIN OrderItems OI ON O.OrderID = OI.OrderID JOIN Products P ON OI.ProductID = P.ProductID WHERE P.Category = 'Book');,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT);","This query selects customers whose ID is not present in the list of customer IDs who have ordered a 'Book', using an uncorrelated subquery that involves joins."
Display the names of departments that have at least one employee hired after the year 2020.,"SELECT DeptName FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.DeptID = D.DeptID AND STRFTIME('%Y', E.HireDate) > '2020');","CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER, Salary REAL, HireDate TEXT); CREATE TABLE Departments (DeptID INTEGER PRIMARY KEY, DeptName TEXT, Location TEXT);","This query selects department names if there exists at least one employee in that department who was hired after 2020, using a correlated subquery."
Find the names of customers who have purchased every product available in the 'Electronics' category.,SELECT C.Name FROM Customers C WHERE NOT EXISTS (SELECT P.ProductID FROM Products P WHERE P.Category = 'Electronics' AND NOT EXISTS (SELECT 1 FROM Orders O JOIN OrderItems OI ON O.OrderID = OI.OrderID WHERE O.CustomerID = C.CustomerID AND OI.ProductID = P.ProductID));,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT);","This query uses a double NOT EXISTS pattern (a correlated subquery within another correlated subquery) to find customers for whom there is no 'Electronics' product that they haven't purchased, effectively meaning they bought all of them."
Retrieve all details for orders that were placed on the earliest date among all orders.,"SELECT OrderID, CustomerID, OrderDate, TotalAmount FROM Orders WHERE OrderDate = (SELECT MIN(OrderDate) FROM Orders);","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query identifies the minimum order date across all orders using an uncorrelated scalar subquery and then retrieves all orders placed on that specific date.
"For each customer, list their name and the date of their most recent order.","SELECT C.Name, (SELECT MAX(O.OrderDate) FROM Orders O WHERE O.CustomerID = C.CustomerID) AS LastOrderDate FROM Customers C;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);","This query retrieves each customer's name and, for each customer, calculates their latest order date using a correlated scalar subquery."
List the names of employees who are assigned to at least one project that is currently marked as 'Critical'.,SELECT E.Name FROM Employees E WHERE E.EmpID IN (SELECT A.EmpID FROM Assignments A JOIN Projects P ON A.ProjectID = P.ProjectID WHERE P.Status = 'Critical');,"CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER); CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, Status TEXT); CREATE TABLE Assignments (AssignmentID INTEGER PRIMARY KEY, EmpID INTEGER, ProjectID INTEGER, HoursWorked INTEGER);","This query finds the IDs of employees involved in 'Critical' projects using an uncorrelated subquery with a join, then selects the names of those employees."
Update the bonus of employees to 5% of their salary if they are managing at least one project that has a status of 'Completed'.,UPDATE Employees SET Bonus = Salary * 0.05 WHERE EXISTS (SELECT 1 FROM Projects P WHERE P.ManagerID = Employees.EmpID AND P.Status = 'Completed');,"CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, Salary REAL, Bonus REAL DEFAULT 0); CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, ManagerID INTEGER, Status TEXT);","This query updates the 'Bonus' for an employee if a 'Completed' project exists that they manage, demonstrating a correlated subquery in an UPDATE statement."
Remove all products from the inventory that have never been included in any order.,DELETE FROM Products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM OrderItems);,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query deletes products whose ID does not appear in the distinct list of product IDs from the OrderItems table, using an uncorrelated subquery."
Remove any employee records that are not linked to an existing department.,DELETE FROM Employees WHERE NOT EXISTS (SELECT 1 FROM Departments D WHERE D.DeptID = Employees.DeptID);,"CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER); CREATE TABLE Departments (DeptID INTEGER PRIMARY KEY, DeptName TEXT);","This query deletes employee records for which no matching department exists in the Departments table, demonstrating a correlated subquery in a DELETE statement."
List product categories that have more products than the overall average number of products per category.,SELECT Category FROM Products GROUP BY Category HAVING COUNT(ProductID) > (SELECT AVG(ProductCount) FROM (SELECT COUNT(ProductID) AS ProductCount FROM Products GROUP BY Category));,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT);","This query first calculates the number of products per category. Then, an uncorrelated nested subquery computes the average of these counts, and the outer query filters categories having more products than this overall average."
List the titles of movies that share the same director and release year with at least one other movie.,SELECT Title FROM Movies M1 WHERE EXISTS (SELECT 1 FROM Movies M2 WHERE M1.DirectorID = M2.DirectorID AND M1.ReleaseYear = M2.ReleaseYear AND M1.MovieID != M2.MovieID);,"CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, DirectorID INTEGER, ReleaseYear INTEGER);","This query selects movie titles if there exists another movie (M2) by the same director and in the same release year, excluding the current movie (M1) itself, using a correlated subquery."
Display customer names along with the total amount they have spent across all their orders.,"SELECT C.Name, COALESCE(T.TotalSpent, 0) AS TotalSpent FROM Customers C LEFT JOIN (SELECT CustomerID, SUM(TotalAmount) AS TotalSpent FROM Orders GROUP BY CustomerID) T ON C.CustomerID = T.CustomerID;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL);","This query calculates the total amount spent per customer using a derived table (T) in the FROM clause, then joins it with the Customers table to show names and total spending. COALESCE handles customers with no orders."
"For each employee, display their name, salary, and their rank based on salary within their department (1 being highest).","SELECT E.Name, E.Salary, E.DeptID, (SELECT COUNT(DISTINCT Salary) FROM Employees WHERE DeptID = E.DeptID AND Salary >= E.Salary) AS SalaryRankInDept FROM Employees E ORDER BY E.DeptID, SalaryRankInDept;","CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER, Salary REAL);",This query calculates the salary rank for each employee within their specific department using a correlated scalar subquery. It counts how many distinct salaries in the same department are greater than or equal to the current employee's salary.
List the names of products that have been purchased by customers residing in 'California'.,SELECT DISTINCT P.ProductName FROM Products P JOIN OrderItems OI ON P.ProductID = OI.ProductID JOIN Orders O ON OI.OrderID = O.OrderID WHERE O.CustomerID IN (SELECT CustomerID FROM Customers WHERE State = 'California');,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER); CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, State TEXT);","This query first identifies customer IDs from 'California' using an uncorrelated subquery, then joins tables to find and list distinct product names associated with orders from those customers."
Find the names of directors who have directed at least one movie that belongs to both the 'Action' and 'Sci-Fi' genres.,SELECT D.Name FROM Directors D WHERE EXISTS (SELECT 1 FROM Movies M JOIN MovieGenres MG1 ON M.MovieID = MG1.MovieID JOIN MovieGenres MG2 ON M.MovieID = MG2.MovieID JOIN Genres G1 ON MG1.GenreID = G1.GenreID JOIN Genres G2 ON MG2.GenreID = G2.GenreID WHERE M.DirectorID = D.DirectorID AND G1.Name = 'Action' AND G2.Name = 'Sci-Fi');,"CREATE TABLE Directors (DirectorID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, DirectorID INTEGER); CREATE TABLE MovieGenres (MovieID INTEGER, GenreID INTEGER, PRIMARY KEY (MovieID, GenreID)); CREATE TABLE Genres (GenreID INTEGER PRIMARY KEY, Name TEXT);","This query selects director names if there exists a movie by that director that is associated with both the 'Action' and 'Sci-Fi' genres, using a correlated subquery with multiple joins."
Retrieve details of employees who were hired exactly five years after the earliest hire date recorded in the company.,"SELECT EmpID, Name, HireDate FROM Employees WHERE HireDate = DATE((SELECT MIN(HireDate) FROM Employees), '+5 years');","CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, HireDate TEXT);","This query first finds the earliest hire date among all employees using an uncorrelated scalar subquery, then adds five years to that date, and finally selects employees hired on that exact calculated date."
"For each account, show the account ID, its current balance, and the amount of its most recent transaction.","SELECT A.AccountID, A.Balance, (SELECT T.Amount FROM Transactions T WHERE T.AccountID = A.AccountID ORDER BY T.TransactionDate DESC LIMIT 1) AS LatestTransactionAmount FROM Accounts A;","CREATE TABLE Accounts (AccountID INTEGER PRIMARY KEY, AccountName TEXT, Balance REAL); CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, AccountID INTEGER, TransactionDate TEXT, Amount REAL);","This query retrieves the account ID and balance for each account. For each account, it uses a correlated scalar subquery to find the amount of its latest transaction by ordering transactions by date and taking the top one."
"List the customer names and their total order amounts, but only for those whose total order amount is greater than the average total order amount of customers from 'New York'.","SELECT C.Name, SUM(O.TotalAmount) AS TotalOrderValue FROM Customers C JOIN Orders O ON C.CustomerID = O.CustomerID GROUP BY C.Name HAVING SUM(O.TotalAmount) > (SELECT AVG(TotalAmount) FROM Orders WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE City = 'New York'));","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, City TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL);","This query calculates the total order value for each customer. It then filters these results, keeping only customers whose total order value is greater than the average total order value specifically from customers located in 'New York', which is determined by an uncorrelated subquery."
List order IDs where every item in that order has a quantity greater than 5.,SELECT O.OrderID FROM Orders O WHERE NOT EXISTS (SELECT 1 FROM OrderItems OI WHERE OI.OrderID = O.OrderID AND OI.Quantity <= 5);,"CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, OrderDate TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query selects order IDs for which there does NOT exist any order item within that order having a quantity less than or equal to 5, ensuring all items have quantity greater than 5 using a correlated subquery."
Retrieve the names of employees who belong to departments that are located in 'California' and have more than 10 employees.,SELECT Name FROM Employees WHERE DeptID IN (SELECT DeptID FROM Departments WHERE Location = 'California' AND DeptID IN (SELECT DeptID FROM Employees GROUP BY DeptID HAVING COUNT(EmpID) > 10));,"CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER); CREATE TABLE Departments (DeptID INTEGER PRIMARY KEY, DeptName TEXT, Location TEXT);","This query uses nested uncorrelated subqueries. The innermost subquery finds departments with more than 10 employees, the outer subquery filters these departments further by 'California' location, and finally, employee names are selected based on these filtered department IDs."
"For each product, show its price and how much it differs from the average price of products in its own category.","SELECT P.ProductName, P.Price, (P.Price - (SELECT AVG(Price) FROM Products WHERE Category = P.Category)) AS PriceDifferenceFromCategoryAvg FROM Products P;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, Category TEXT);","This query selects each product's name and price, and then calculates the difference between its price and the average price of products within its specific category, using a correlated scalar subquery."
List the names of the top 3 departments based on their total employee salary.,SELECT D.DeptName FROM Departments D WHERE D.DeptID IN (SELECT DeptID FROM Employees GROUP BY DeptID ORDER BY SUM(Salary) DESC LIMIT 3);,"CREATE TABLE Employees (EmpID INTEGER PRIMARY KEY, Name TEXT, DeptID INTEGER, Salary REAL); CREATE TABLE Departments (DeptID INTEGER PRIMARY KEY, DeptName TEXT);","This query finds the department IDs of the top 3 departments by total salary using an uncorrelated subquery that groups employees by department, sums their salaries, orders them, and limits the result. The outer query then retrieves the names of these departments."
Find the names of customers who have placed orders in at least two consecutive years.,"SELECT C.Name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O1 WHERE O1.CustomerID = C.CustomerID AND EXISTS (SELECT 1 FROM Orders O2 WHERE O2.CustomerID = C.CustomerID AND STRFTIME('%Y', O2.OrderDate) = STRFTIME('%Y', O1.OrderDate) + 1));","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);","This query selects customer names if there exists an order (O1) by that customer for which there also exists another order (O2) by the same customer in the following year, using two levels of correlated EXISTS subqueries."
Get a list of all unique first names from both customers and employees.,SELECT first_name FROM Customers UNION SELECT first_name FROM Employees;,"Customers(customer_id, first_name, last_name, email, phone, address); Employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id)",Combines unique first names from the Customers and Employees tables.
"List all product categories and book genres, including duplicates.",SELECT category FROM Products UNION ALL SELECT genre FROM Books;,"Products(product_id, product_name, category, price, stock_quantity); Books(book_id, title, author_id, genre, publication_year)","Combines all categories from Products and all genres from Books, including any duplicates."
Find the email addresses of individuals who are both employees and customers.,SELECT email FROM Employees INTERSECT SELECT email FROM Customers;,"Employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id); Customers(customer_id, first_name, last_name, email, phone, address)",Retrieves email addresses that exist in both the Employees and Customers tables.
List the email addresses of customers who are not employees.,SELECT email FROM Customers EXCEPT SELECT email FROM Employees;,"Customers(customer_id, first_name, last_name, email, phone, address); Employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id)",Returns email addresses present in the Customers table but not in the Employees table.
Get the full names of employees who have a salary over 60000 or were hired in the last year (assuming current year is 2024).,"SELECT first_name || ' ' || last_name AS full_name FROM Employees WHERE salary > 60000 UNION SELECT first_name || ' ' || last_name FROM Employees WHERE hire_date >= DATE('now', '-1 year');","Employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id)",Combines the full names of employees who either earn more than 60000 or were hired within the last year from the current date.
Find product names that are categorized as 'Electronics' and are also currently in stock (stock_quantity > 0).,SELECT product_name FROM Products WHERE category = 'Electronics' INTERSECT SELECT product_name FROM Products WHERE stock_quantity > 0;,"Products(product_id, product_name, category, price, stock_quantity)",Lists product names that belong to the 'Electronics' category and also have a positive stock quantity.
List the names of courses that have no students currently enrolled.,SELECT course_name FROM Courses EXCEPT SELECT T1.course_name FROM Courses AS T1 JOIN Enrollments AS T2 ON T1.course_id = T2.course_id;,"Courses(course_id, course_name, department, credits); Enrollments(enrollment_id, student_id, course_id, enrollment_date, grade)","Returns the names of courses that do not have any corresponding entries in the Enrollments table, indicating no current students."
Show all unique department IDs mentioned in either the Employees table or the Departments table.,SELECT department_id FROM Employees WHERE department_id IS NOT NULL UNION SELECT department_id FROM Departments;,"Employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id); Departments(department_id, department_name, location_id)",Combines all unique department IDs found in the Employees table (excluding NULLs) with all unique department IDs found in the Departments table.
Find the student IDs of students who are enrolled in both 'Mathematics' and 'Physics' courses.,SELECT student_id FROM Enrollments WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Mathematics') INTERSECT SELECT student_id FROM Enrollments WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Physics');,"Students(student_id, first_name, last_name, email, enrollment_date); Courses(course_id, course_name, department, credits); Enrollments(enrollment_id, student_id, course_id, enrollment_date, grade)",Retrieves the IDs of students who have enrollments in both the 'Mathematics' and 'Physics' courses.
List the titles of books that are not written by authors of 'American' nationality.,SELECT T1.title FROM Books AS T1 EXCEPT SELECT T1.title FROM Books AS T1 JOIN Authors AS T2 ON T1.author_id = T2.author_id WHERE T2.nationality = 'American';,"Books(book_id, title, author_id, genre, publication_year); Authors(author_id, author_name, nationality)",Returns the titles of books whose authors are not listed as 'American'.
Get the customer IDs of all customers who placed an order in 2022 or in 2023.,"SELECT customer_id FROM Orders WHERE STRFTIME('%Y', order_date) = '2022' UNION SELECT customer_id FROM Orders WHERE STRFTIME('%Y', order_date) = '2023';","Customers(customer_id, first_name, last_name, email, phone, address); Orders(order_id, customer_id, order_date, total_amount)",Combines the unique customer IDs of orders placed in 2022 with those placed in 2023.
Find cities that serve as both an origin and a destination for flights.,SELECT origin FROM Flights INTERSECT SELECT destination FROM Flights;,"Flights(flight_id, flight_number, origin, destination, departure_time, arrival_time)",Lists cities that appear in both the 'origin' and 'destination' columns of the Flights table.
List the names of passengers who have not made any flight bookings.,SELECT first_name || ' ' || last_name FROM Passengers EXCEPT SELECT T1.first_name || ' ' || T1.last_name FROM Passengers AS T1 JOIN Bookings AS T2 ON T1.passenger_id = T2.passenger_id;,"Flights(flight_id, flight_number, origin, destination, departure_time, arrival_time); Passengers(passenger_id, first_name, last_name, email); Bookings(booking_id, flight_id, passenger_id, booking_date)",Returns the full names of passengers who are present in the Passengers table but have no associated bookings in the Bookings table.
Get the full names of employees working in 'IT' or 'Sales' departments.,SELECT T1.first_name || ' ' || T1.last_name FROM Employees AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'IT' UNION SELECT T1.first_name || ' ' || T1.last_name FROM Employees AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Sales';,"Employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id); Departments(department_id, department_name, location_id)",Retrieves the full names of employees who belong to either the 'IT' department or the 'Sales' department.
Identify product names that have a price greater than 50 and a stock quantity greater than 100.,SELECT product_name FROM Products WHERE price > 50 INTERSECT SELECT product_name FROM Products WHERE stock_quantity > 100;,"Products(product_id, product_name, category, price, stock_quantity)",Lists product names that satisfy both conditions: price greater than 50 and stock quantity greater than 100.
Find the names of customers who have placed orders but never included any 'Electronics' products.,SELECT C.first_name || ' ' || C.last_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id EXCEPT SELECT C.first_name || ' ' || C.last_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id JOIN OrderItems AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id WHERE P.category = 'Electronics';,"Customers(customer_id, first_name, last_name, email, phone, address); Orders(order_id, customer_id, order_date, total_amount); OrderItems(order_item_id, order_id, product_id, quantity, price_per_unit); Products(product_id, product_name, category, price, stock_quantity)",Returns the full names of customers who have made orders but none of their orders included products from the 'Electronics' category.
"List all locations where departments are situated and where events take place, including duplicates.",SELECT location_id FROM Departments UNION ALL SELECT location FROM Events;,"Departments(department_id, department_name, location_id); Events(event_id, event_name, event_date, location)","Combines all location IDs from the Departments table with all locations from the Events table, without removing duplicates."
Find the names of authors who have written books categorized as both 'Fantasy' and 'Science Fiction'.,SELECT T2.author_name FROM Books AS T1 JOIN Authors AS T2 ON T1.author_id = T2.author_id WHERE T1.genre = 'Fantasy' INTERSECT SELECT T2.author_name FROM Books AS T1 JOIN Authors AS T2 ON T1.author_id = T2.author_id WHERE T1.genre = 'Science Fiction';,"Books(book_id, title, author_id, genre, publication_year); Authors(author_id, author_name, nationality)",Returns the names of authors who have at least one book in the 'Fantasy' genre and at least one book in the 'Science Fiction' genre.
"Find the department names that have employees with a salary over 70000, but do not have any employees hired before 2010.","SELECT T2.department_name FROM Employees AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE T1.salary > 70000 EXCEPT SELECT T2.department_name FROM Employees AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id WHERE STRFTIME('%Y', T1.hire_date) < '2010';","Employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id); Departments(department_id, department_name, location_id)","Lists department names where at least one employee earns over 70000, but none of its employees were hired before 2010."
List the unique student IDs of students enrolled in courses that have more than 3 credits or are part of the 'Engineering' department.,SELECT T2.student_id FROM Courses AS T1 JOIN Enrollments AS T2 ON T1.course_id = T2.course_id WHERE T1.credits > 3 UNION SELECT T2.student_id FROM Courses AS T1 JOIN Enrollments AS T2 ON T1.course_id = T2.course_id WHERE T1.department = 'Engineering';,"Students(student_id, first_name, last_name, email, enrollment_date); Courses(course_id, course_name, department, credits); Enrollments(enrollment_id, student_id, course_id, enrollment_date, grade)","Retrieves unique student IDs who are enrolled in courses with more than 3 credits, or in courses belonging to the 'Engineering' department."
Find the event IDs for events that had participants register in both 2023 and 2024.,"SELECT event_id FROM Participants WHERE STRFTIME('%Y', registration_date) = '2023' INTERSECT SELECT event_id FROM Participants WHERE STRFTIME('%Y', registration_date) = '2024';","Events(event_id, event_name, event_date, location); Participants(participant_id, event_id, participant_name, email, registration_date)",Returns event IDs where there was at least one participant registration in 2023 and at least one in 2024.
Find the product names that are currently in stock but have never been part of an order.,SELECT product_name FROM Products WHERE stock_quantity > 0 EXCEPT SELECT P.product_name FROM Products AS P JOIN OrderItems AS OI ON P.product_id = OI.product_id;,"Products(product_id, product_name, category, price, stock_quantity); OrderItems(order_item_id, order_id, product_id, quantity, price_per_unit)",Lists products that are in stock (quantity > 0) but have not been recorded in any order items.
Get the unique customer IDs of customers who ordered products from either the 'Books' or 'Movies' categories.,SELECT O.customer_id FROM Orders AS O JOIN OrderItems AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id WHERE P.category = 'Books' UNION SELECT O.customer_id FROM Orders AS O JOIN OrderItems AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id WHERE P.category = 'Movies';,"Customers(customer_id, first_name, last_name, email, phone, address); Orders(order_id, customer_id, order_date, total_amount); OrderItems(order_item_id, order_id, product_id, quantity, price_per_unit); Products(product_id, product_name, category, price, stock_quantity)",Returns the unique customer IDs who have placed orders that include products categorized as 'Books' or 'Movies'.
"Find the employee IDs of employees whose salary is above the average salary of their own department, and who also have a job_id of 'SALES_REP'.",SELECT employee_id FROM Employees AS E WHERE E.salary > (SELECT AVG(salary) FROM Employees WHERE department_id = E.department_id) INTERSECT SELECT employee_id FROM Employees WHERE job_id = 'SALES_REP';,"Employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id)",Retrieves employee IDs for individuals who earn more than the average salary in their respective departments AND hold the 'SALES_REP' job title.
List the flight numbers for flights that originate from 'LAX' but have never had 'JFK' as their destination.,SELECT flight_number FROM Flights WHERE origin = 'LAX' EXCEPT SELECT flight_number FROM Flights WHERE destination = 'JFK';,"Flights(flight_id, flight_number, origin, destination, departure_time, arrival_time)",Returns flight numbers of flights that depart from 'LAX' but have never arrived at 'JFK'.
"Get all first names of customers and all last names of employees, including duplicates, as a single list.",SELECT first_name FROM Customers UNION ALL SELECT last_name FROM Employees;,"Customers(customer_id, first_name, last_name, email, phone, address); Employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id)","Combines all first names from the Customers table and all last names from the Employees table into a single result set, preserving duplicates."
Find the names of authors who published at least one book before the year 2000 and at least one book after the year 2010.,SELECT T2.author_name FROM Books AS T1 JOIN Authors AS T2 ON T1.author_id = T2.author_id WHERE T1.publication_year < 2000 INTERSECT SELECT T2.author_name FROM Books AS T1 JOIN Authors AS T2 ON T1.author_id = T2.author_id WHERE T1.publication_year > 2010;,"Books(book_id, title, author_id, genre, publication_year); Authors(author_id, author_name, nationality)",Lists authors who have published books with a publication year before 2000 and also books with a publication year after 2010.
"Find student IDs that enrolled in a course with a grade of 'F' or NULL, but are NOT enrolled in any course with a grade of 'A'.",SELECT student_id FROM Enrollments WHERE grade = 'F' OR grade IS NULL EXCEPT SELECT student_id FROM Enrollments WHERE grade = 'A';,"Students(student_id, first_name, last_name, email, enrollment_date); Enrollments(enrollment_id, student_id, course_id, enrollment_date, grade)","Returns student IDs of students who have at least one 'F' grade or NULL grade, but do not have any 'A' grades."
List unique department IDs that have an average employee salary greater than 75000 or have more than 10 employees.,SELECT department_id FROM Employees GROUP BY department_id HAVING AVG(salary) > 75000 UNION SELECT department_id FROM Employees GROUP BY department_id HAVING COUNT(employee_id) > 10;,"Employees(employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, department_id)",Combines department IDs where the average salary of employees exceeds 75000 with department IDs that have more than 10 employees.
Find the names of events that are held in 'New York' and also have more than 50 registered participants.,SELECT event_name FROM Events WHERE location = 'New York' INTERSECT SELECT E.event_name FROM Events AS E JOIN Participants AS P ON E.event_id = P.event_id GROUP BY E.event_id HAVING COUNT(P.participant_id) > 50;,"Events(event_id, event_name, event_date, location); Participants(participant_id, event_id, participant_name, email, registration_date)",Retrieves event names that are located in 'New York' and also have more than 50 participants registered.
What is today's date?,SELECT DATE('now');,No specific table needed.,Retrieves the current date in 'YYYY-MM-DD' format.
Show the current date and time.,SELECT DATETIME('now');,No specific table needed.,Retrieves the current date and time in 'YYYY-MM-DD HH:MM:SS' format.
"Find the order ID, order date, and the date 7 days after the order for all orders.","SELECT order_id, order_date, DATE(order_date, '+7 days') AS delivery_estimate FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Selects the order ID, order date, and calculates a delivery estimate by adding 7 days to the order date."
Calculate the number of days between the order date and the shipped date for each order.,"SELECT order_id, julianday(shipped_date) - julianday(order_date) AS days_to_ship FROM Orders WHERE shipped_date IS NOT NULL;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipped_date TEXT);",Calculates the difference in days between the shipped date and order date for each order where a shipped date is recorded.
List all employees hired in the year 2022.,"SELECT * FROM Employees WHERE STRFTIME('%Y', hire_date) = '2022';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL);",Retrieves all employee records where the hire date falls within the year 2022.
Count the number of orders placed each month.,"SELECT STRFTIME('%Y-%m', order_date) AS order_month, COUNT(order_id) AS num_orders FROM Orders GROUP BY order_month ORDER BY order_month;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Counts the total number of orders for each unique month and year combination, sorted by month."
"For each employee, calculate their current age based on their date of birth.","SELECT employee_id, first_name, STRFTIME('%Y', 'now') - STRFTIME('%Y', date_of_birth) - (STRFTIME('%m-%d', 'now') < STRFTIME('%m-%d', date_of_birth)) AS age FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, date_of_birth TEXT, hire_date TEXT);","Calculates the current age of each employee by subtracting their birth year from the current year, adjusting for birthdays that haven't occurred yet this year."
Find all events scheduled to happen in the next 7 days from now.,"SELECT event_name, event_datetime FROM Events WHERE event_datetime BETWEEN DATETIME('now') AND DATETIME('now', '+7 days');","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_datetime TEXT, location TEXT);","Selects the name and datetime of events scheduled within the next seven days, including today."
Show tasks that are due today.,"SELECT task_name, due_date FROM Tasks WHERE DATE(due_date) = DATE('now');","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, due_date TEXT, status TEXT);",Retrieves the name and due date of tasks that are due on the current day.
"List tasks completed in the last 7 days, including today.","SELECT task_name, completed_date FROM Tasks WHERE DATE(completed_date) BETWEEN DATE('now', '-7 days') AND DATE('now');","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, completed_date TEXT, status TEXT);",Retrieves tasks completed within the last 7 days up to and including the current day.
Find products that will expire in the next 30 days.,"SELECT product_name, expiry_date FROM Products WHERE expiry_date BETWEEN DATE('now') AND DATE('now', '+30 days');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, expiry_date TEXT, price REAL);","Selects product names and their expiry dates for products expiring within the next 30 days, starting from today."
Calculate the average sensor reading for each hour of the day.,"SELECT STRFTIME('%H', reading_timestamp) AS hour_of_day, AVG(value) AS average_value FROM SensorReadings GROUP BY hour_of_day ORDER BY hour_of_day;","CREATE TABLE SensorReadings (reading_id INTEGER PRIMARY KEY, sensor_id INTEGER, reading_timestamp TEXT, value REAL);",Computes the average sensor reading for each distinct hour of the day across all readings.
Count the number of logins for each day of the week.,"SELECT STRFTIME('%w', login_timestamp) AS day_of_week_num, CASE STRFTIME('%w', login_timestamp) WHEN '0' THEN 'Sunday' WHEN '1' THEN 'Monday' WHEN '2' THEN 'Tuesday' WHEN '3' THEN 'Wednesday' WHEN '4' THEN 'Thursday' WHEN '5' THEN 'Friday' WHEN '6' THEN 'Saturday' END AS day_of_week_name, COUNT(login_id) AS num_logins FROM Logins GROUP BY day_of_week_num ORDER BY day_of_week_num;","CREATE TABLE Logins (login_id INTEGER PRIMARY KEY, user_id INTEGER, login_timestamp TEXT, ip_address TEXT);","Counts the total number of logins for each day of the week (0=Sunday, 6=Saturday) and provides the day name, sorted by day number."
List employees hired in the third quarter of any year.,"SELECT first_name, last_name, hire_date FROM Employees WHERE STRFTIME('%m', hire_date) IN ('07', '08', '09');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL);","Retrieves employees whose hire date falls within the months of July, August, or September (third quarter)."
Find orders placed before noon on their respective order dates.,"SELECT order_id, order_date FROM Orders WHERE STRFTIME('%H', order_date) < '12';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Selects orders where the order time is before 12:00 PM (noon).
Identify orders that have not been shipped and are older than 30 days.,"SELECT order_id, order_date FROM Orders WHERE shipped_date IS NULL AND julianday('now') - julianday(order_date) > 30;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipped_date TEXT);",Finds orders that have no recorded shipment date and were placed more than 30 days ago.
Calculate the total amount for all orders placed last year.,"SELECT SUM(total_amount) AS total_last_year_sales FROM Orders WHERE STRFTIME('%Y', order_date) = STRFTIME('%Y', 'now', '-1 year');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Sums the total amount for all orders placed during the previous calendar year.
Find all events scheduled to start in the current Sunday-based week.,"SELECT event_name, event_datetime FROM Events WHERE STRFTIME('%W', event_datetime) = STRFTIME('%W', 'now') AND STRFTIME('%Y', event_datetime) = STRFTIME('%Y', 'now');","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_datetime TEXT, location TEXT);",Retrieves events that are scheduled for the current Sunday-based week of the current year.
List tasks due in November 2023.,"SELECT task_name, due_date FROM Tasks WHERE STRFTIME('%Y-%m', due_date) = '2023-11';","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, due_date TEXT, status TEXT);",Selects tasks whose due date falls within November 2023.
"For each day, find the maximum total amount of an order.","SELECT DATE(order_date) AS order_day, MAX(total_amount) AS max_daily_order_amount FROM Orders GROUP BY order_day ORDER BY order_day;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Determines the highest total amount recorded for orders placed on each distinct day.
Find employees who have a birthday next month.,"SELECT employee_id, first_name, last_name, date_of_birth FROM Employees WHERE STRFTIME('%m', date_of_birth) = STRFTIME('%m', DATE('now', '+1 month'));","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, date_of_birth TEXT);",Retrieves employees whose birth month matches the month following the current month.
Show user IDs and login timestamps for logins that occurred on a weekend (Saturday or Sunday).,"SELECT user_id, login_timestamp FROM Logins WHERE STRFTIME('%w', login_timestamp) IN ('0', '6');","CREATE TABLE Logins (login_id INTEGER PRIMARY KEY, user_id INTEGER, login_timestamp TEXT);",Selects user IDs and timestamps for all logins that happened on a Saturday (6) or Sunday (0).
Find orders that were placed on the last day of their respective months.,"SELECT order_id, order_date FROM Orders WHERE DATE(order_date, '+1 day') = DATE(order_date, 'start of month', '+1 month');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Identifies orders where the order date is the last day of the month by checking if adding one day to the order date results in the first day of the next month.
List products that were manufactured and expired in the same calendar year.,"SELECT product_name, manufacture_date, expiry_date FROM Products WHERE STRFTIME('%Y', manufacture_date) = STRFTIME('%Y', expiry_date);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, manufacture_date TEXT, expiry_date TEXT);",Retrieves products where both their manufacturing and expiry dates fall within the same year.
Retrieve sensor readings between '2023-01-15' and '2023-01-20' that occurred between 10 AM and 2 PM.,"SELECT reading_id, reading_timestamp, value FROM SensorReadings WHERE DATE(reading_timestamp) BETWEEN '2023-01-15' AND '2023-01-20' AND STRFTIME('%H', reading_timestamp) BETWEEN '10' AND '14';","CREATE TABLE SensorReadings (reading_id INTEGER PRIMARY KEY, sensor_id INTEGER, reading_timestamp TEXT, value REAL);",Selects sensor readings within a specified date range and only for readings taken between 10 AM and 2 PM (inclusive of 14:00:00).
Count the number of employees hired in each year.,"SELECT STRFTIME('%Y', hire_date) AS hire_year, COUNT(employee_id) AS num_hires FROM Employees GROUP BY hire_year ORDER BY hire_year;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT);",Counts the number of employees hired for each distinct year and orders the results by year.
"Find events that last longer than 2 hours, given their start and end timestamps.","SELECT event_name, start_datetime, end_datetime FROM Events WHERE julianday(end_datetime) - julianday(start_datetime) > (2.0 / 24.0);","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, start_datetime TEXT, end_datetime TEXT, location TEXT);",Identifies events where the time difference between the end and start timestamps is greater than 2 hours.
List tasks that were completed on the exact same day they were due.,"SELECT task_name, due_date, completed_date FROM Tasks WHERE DATE(due_date) = DATE(completed_date) AND completed_date IS NOT NULL;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, start_date TEXT, due_date TEXT, completed_date TEXT, status TEXT);","Retrieves tasks where the completion date matches the due date, ensuring the task was actually completed."
Find customer IDs who placed more than one order within the same calendar week (Sunday-based).,"SELECT customer_id FROM Orders GROUP BY customer_id, STRFTIME('%Y-%W', order_date) HAVING COUNT(order_id) > 1;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Identifies customers who placed multiple orders within the same specific calendar week.
"Calculate the average number of days it takes to complete a task, only for completed tasks.",SELECT AVG(julianday(completed_date) - julianday(start_date)) AS avg_completion_days FROM Tasks WHERE completed_date IS NOT NULL;,"CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, start_date TEXT, due_date TEXT, completed_date TEXT, status TEXT);",Computes the average duration in days between the start date and completion date for all tasks that have been marked as completed.
List all products by their price in ascending order.,"SELECT product_name, price FROM Products ORDER BY price ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL, stock_quantity INTEGER);","Retrieves the name and price of all products, ordered from the lowest price to the highest."
"Show employee names sorted by their hire date, most recent first.","SELECT first_name, last_name, hire_date FROM Employees ORDER BY hire_date DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, hire_date TEXT, salary REAL);","Selects the first name, last name, and hire date for all employees, sorted in descending order of hire date (newest hires first)."
Get any 5 movie titles.,SELECT title FROM Movies LIMIT 5;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, release_year INTEGER);","Returns the titles of the first 5 movies found in the table, without any specific order."
Find the 3 cheapest products.,"SELECT product_name, price FROM Products ORDER BY price ASC LIMIT 3;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL, stock_quantity INTEGER);",Retrieves the names and prices of the 3 products with the lowest prices.
"List all customers, sorted first by last name (ascending) then by first name (ascending).","SELECT first_name, last_name, email FROM Customers ORDER BY last_name ASC, first_name ASC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE);","Selects customer names and emails, sorted alphabetically by last name, and then by first name for customers with the same last name."
Get the second movie title in no particular order.,SELECT title FROM Movies LIMIT 1 OFFSET 1;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, release_year INTEGER);","Fetches the single movie title that comes after the first movie in the table, effectively getting the second movie."
"Get the third page of products, with 10 products per page, sorted by name.","SELECT product_name, price FROM Products ORDER BY product_name ASC LIMIT 10 OFFSET 20;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL, stock_quantity INTEGER);","Retrieves 10 product names and prices, starting from the 21st product (skipping the first 20), after sorting all products alphabetically by name. This simulates fetching the third page of results."
List all employees in department 'Sales' sorted by salary in descending order.,"SELECT first_name, last_name, salary FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Sales') ORDER BY salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, hire_date TEXT, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","Selects the names and salaries of employees who belong to the 'Sales' department, ordered from highest salary to lowest."
Show the top 5 customers by total order amount.,"SELECT C.first_name, C.last_name, SUM(O.total_amount) AS total_spent FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_id ORDER BY total_spent DESC LIMIT 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL);","Joins customers with their orders, calculates the total amount spent by each customer, and then returns the names of the top 5 customers who have spent the most, sorted in descending order of total spent."
List product names and their total value (price * stock) sorted from highest total value to lowest.,"SELECT product_name, price * stock_quantity AS total_value FROM Products ORDER BY total_value DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL, stock_quantity INTEGER);","Selects product names and calculates a 'total_value' for each (price multiplied by stock quantity), then orders the results by this calculated value in descending order."
Find the 3 oldest employees based on their hire date.,"SELECT first_name, last_name, hire_date FROM Employees ORDER BY hire_date ASC LIMIT 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, hire_date TEXT);",Retrieves the names and hire dates of the 3 employees who were hired earliest.
Get no products at all.,SELECT product_name FROM Products LIMIT 0;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL);","Returns an empty set, as it requests 0 results."
"List movie titles, sorted by their length (shortest first).",SELECT title FROM Movies ORDER BY LENGTH(title) ASC;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL);","Selects all movie titles and orders them by the number of characters in each title, from shortest to longest."
"List employee last names alphabetically, ignoring case.",SELECT last_name FROM Employees ORDER BY last_name COLLATE NOCASE ASC;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, last_name TEXT NOT NULL);","Selects all employee last names and orders them alphabetically, treating upper and lower case letters as the same for sorting purposes."
What is the 5th highest product price?,SELECT price FROM Products ORDER BY price DESC LIMIT 1 OFFSET 4;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, price REAL);","Orders all product prices from highest to lowest, then skips the first 4 prices and returns the 5th price in that sorted list."
"List orders, prioritizing 'Pending' first, then 'Processing', then 'Completed', and finally 'Cancelled', for orders made in the last year.","SELECT order_id, status, order_date FROM Orders WHERE order_date >= date('now', '-1 year') ORDER BY CASE status WHEN 'Pending' THEN 1 WHEN 'Processing' THEN 2 WHEN 'Completed' THEN 3 WHEN 'Cancelled' THEN 4 ELSE 5 END, order_date DESC;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","Selects order details for orders placed in the last year, sorting them by a custom order of statuses ('Pending' first, then 'Processing', etc.), and then by most recent order date for orders with the same status."
"List the product categories along with their average price, ordered by the average price descending.","SELECT P.category_id, AVG(P.price) AS average_price FROM Products AS P GROUP BY P.category_id ORDER BY average_price DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL, category_id INTEGER);",Calculates the average price for products within each category and then orders these categories from the highest average price to the lowest.
"List books by publication year, with books having no year listed coming last.","SELECT title, publication_year FROM Books ORDER BY CASE WHEN publication_year IS NULL THEN 1 ELSE 0 END, publication_year ASC;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, publication_year INTEGER);","Selects book titles and their publication years. It sorts them so that books with no publication year (NULL) appear at the end, followed by books sorted by year in ascending order."
Get the 10 most recently placed orders.,"SELECT order_id, order_date, total_amount FROM Orders ORDER BY order_date DESC LIMIT 10;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Retrieves the 10 orders with the latest order dates, along with their ID and total amount."
List the top 5 highest-rated movies.,"SELECT title, rating FROM Movies ORDER BY rating DESC LIMIT 5;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL, director TEXT, release_year INTEGER, rating REAL);",Selects the titles and ratings of the 5 movies with the highest ratings.
"Get the next 5 most expensive products after skipping the first 10, considering only products with stock greater than 0.","SELECT product_name, price FROM Products WHERE stock_quantity > 0 ORDER BY price DESC LIMIT 5 OFFSET 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL, stock_quantity INTEGER);","Filters products to only include those with stock, then orders them by price from highest to lowest. From this sorted list, it skips the first 10 products and returns the next 5."
"List all order items, showing product name and quantity, sorted by product name.","SELECT OI.quantity, P.product_name FROM Order_Items AS OI JOIN Products AS P ON OI.product_id = P.product_id ORDER BY P.product_name ASC;","CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL);","Joins order items with product information to display the quantity and name of each product in an order, sorted alphabetically by product name."
What is the second lowest employee salary?,SELECT DISTINCT salary FROM Employees ORDER BY salary ASC LIMIT 1 OFFSET 1;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, salary REAL);","Retrieves all unique salaries, orders them from lowest to highest, skips the first (lowest) one, and returns the next (second lowest) salary."
"List orders sorted by the day of the month they were placed, then by total amount.","SELECT order_id, order_date, total_amount FROM Orders ORDER BY STRFTIME('%d', order_date) ASC, total_amount DESC;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, total_amount REAL);","Selects order ID, date, and total amount, sorting them first by the day of the month (e.g., 01, 02, etc.) in ascending order, and then by total amount in descending order for orders on the same day."
Find the customer who placed the most orders.,"SELECT C.first_name, C.last_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id GROUP BY C.customer_id ORDER BY COUNT(O.order_id) DESC LIMIT 1;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER);","Counts the number of orders for each customer, then orders customers by their order count in descending order, and finally returns the name of the customer with the highest order count."
"List product names and their codes (e.g., 'A1', 'A10', 'A2') sorted as text.","SELECT product_name, product_code FROM Products ORDER BY product_code ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, product_code TEXT);","Selects product names and codes, sorting the codes alphabetically (e.g., 'A1', 'A10', 'A2' would result in 'A1', 'A10', 'A2' and not 'A1', 'A2', 'A10' if sorted numerically)."
"List product names and their codes (e.g., 'A1', 'A10', 'A2') sorted numerically by the number part.","SELECT product_name, product_code FROM Products ORDER BY CAST(SUBSTR(product_code, 2) AS INTEGER) ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, product_code TEXT);","Selects product names and codes. It extracts the numeric part of the product code (assuming a format like 'A1', 'B10'), converts it to an integer, and then sorts products based on this numeric value in ascending order."
"Show the 3rd to 5th most active customers by number of orders, considering only those who registered after 2020.","SELECT C.first_name, C.last_name, COUNT(O.order_id) AS order_count FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id WHERE C.registration_date >= '2021-01-01' GROUP BY C.customer_id ORDER BY order_count DESC LIMIT 3 OFFSET 2;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER);","Filters customers registered after 2020, counts their orders, orders customers by their order count (most active first), then skips the top 2 and returns the next 3 (i.e., the 3rd, 4th, and 5th most active customers)."
Find the 2 employees with the lowest salaries in the 'IT' department.,"SELECT first_name, last_name, salary FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'IT') ORDER BY salary ASC LIMIT 2;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","Selects the names and salaries of employees belonging to the 'IT' department, orders them by salary from lowest to highest, and then returns the top 2."
Pick 5 random movie titles.,SELECT title FROM Movies ORDER BY RANDOM() LIMIT 5;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT NOT NULL);",Selects 5 movie titles from the table in a random order.
"Get the names and emails of customers whose IDs are 1, 5, or 10.","SELECT customer_name, email FROM Customers WHERE customer_id IN (1, 5, 10);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, phone TEXT, address TEXT);",Selects customer names and emails for specific customer IDs using the IN operator.
Find all products that have been ordered by customers from the 'USA'.,SELECT product_name FROM Products WHERE product_id IN (SELECT product_id FROM OrderItems JOIN Orders ON OrderItems.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.country = 'USA');,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, country TEXT);","Retrieves product names for products included in orders placed by customers located in the 'USA', using a subquery with IN."
List all employees who are not in the 'Sales' or 'Marketing' departments.,"SELECT employee_name, department FROM Employees WHERE department NOT IN ('Sales', 'Marketing');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, salary REAL, hire_date TEXT);",Filters employees to show only those whose department is neither 'Sales' nor 'Marketing'.
Show products that have never been ordered.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT DISTINCT product_id FROM OrderItems);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","Finds products that do not appear in the OrderItems table, indicating they have never been ordered."
List departments that have at least one employee earning more than 60000.,SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary > 60000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);","Selects department names where a corresponding employee in that department has a salary greater than 60000, using a correlated subquery with EXISTS."
Find customers who have not placed any orders.,"SELECT customer_name, email FROM Customers C WHERE NOT EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, phone TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Retrieves customer names and emails for customers who do not have any associated orders, using NOT EXISTS."
"Get the product names and prices for products priced between 50 and 100, inclusive.","SELECT product_name, price FROM Products WHERE price BETWEEN 50.00 AND 100.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","Selects product names and prices for products whose price falls within the specified range (50 to 100), including the boundaries."
List all orders placed in the year 2023.,"SELECT order_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Retrieves orders that were placed within the calendar year 2023, using the BETWEEN operator for date strings."
"Calculate the total salary of employees hired between January 1, 2020, and December 31, 2022.",SELECT SUM(salary) FROM Employees WHERE hire_date BETWEEN '2020-01-01' AND '2022-12-31';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, salary REAL, hire_date TEXT);",Calculates the sum of salaries for employees whose hire date falls within the specified date range.
Find books that do not have a page count between 200 and 400.,"SELECT title, page_count FROM Books WHERE page_count NOT BETWEEN 200 AND 400;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, page_count INTEGER, publication_year INTEGER);",Selects book titles and page counts for books that do not have between 200 and 400 pages (inclusive).
Get the names of customers whose names start with 'A'.,SELECT customer_name FROM Customers WHERE customer_name LIKE 'A%';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT);",Retrieves customer names that begin with the letter 'A' using the LIKE operator and '%' wildcard.
Find all products whose category contains the word 'electronics'.,"SELECT product_name, category FROM Products WHERE category LIKE '%electronics%';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);",Selects product names and categories where the category string includes the substring 'electronics' anywhere within it.
List employees whose email addresses end with '.org'.,"SELECT employee_name, email FROM Employees WHERE email LIKE '%.org';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, email TEXT);",Filters employees to show those whose email addresses end with '.org'.
Find product codes that are 4 characters long and have 'P' as the second character.,SELECT product_code FROM Products WHERE product_code LIKE '_P__';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_code TEXT, product_name TEXT);","Selects product codes that match a pattern: any single character, followed by 'P', followed by two more single characters."
Get all customer names who do not have 'Jr.' in their name.,SELECT customer_name FROM Customers WHERE customer_name NOT LIKE '%Jr.%';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT);",Filters customer names to exclude those that contain the substring 'Jr.'.
List all employees from 'HR' or 'Finance' departments whose names start with 'S'.,"SELECT employee_name, department FROM Employees WHERE department IN ('HR', 'Finance') AND employee_name LIKE 'S%';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT);",Retrieves employees who belong to either HR or Finance departments AND whose names start with 'S'.
Find departments that have at least one employee hired between 2018 and 2020.,SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.hire_date BETWEEN '2018-01-01' AND '2020-12-31');,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, hire_date TEXT);",Selects department names if there's an employee in that department whose hire date falls within the 2018-2020 range.
Show products in categories 'Electronics' or 'Appliances' with prices between 200 and 500.,"SELECT product_name, category, price FROM Products WHERE category IN ('Electronics', 'Appliances') AND price BETWEEN 200 AND 500;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",Filters products by category being either 'Electronics' or 'Appliances' AND by price being between 200 and 500.
Get the names of customers who have ordered products from the 'Books' category.,SELECT DISTINCT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN OrderItems OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.category IN ('Books');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);",Retrieves unique names of customers who have placed orders for products categorized as 'Books' by joining multiple tables and using IN.
List departments where the average salary of employees is greater than 70000.,SELECT D.department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id GROUP BY E.department_id HAVING AVG(E.salary) > 70000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);",Selects department names only if there exists a group of employees within that department whose average salary exceeds 70000.
Find orders placed within the current year.,"SELECT order_id, order_date FROM Orders WHERE order_date BETWEEN DATE('now', 'start of year') AND DATE('now', 'start of year', '+1 year', '-1 day');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",Retrieves orders placed from the beginning of the current year up to the end of the current year using SQLite's date functions and BETWEEN.
Get the names and emails of employees with a '.com' email address.,"SELECT employee_name, email FROM Employees WHERE email LIKE '%@%.com';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, email TEXT);",Selects employees whose email addresses end with '.com' and contain an '@' symbol before it.
"Find employees in department 10 or 20, or those whose job title is 'Manager' or 'Director'.","SELECT employee_name, department_id, job_title FROM Employees WHERE department_id IN (10, 20) OR job_title IN ('Manager', 'Director');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, job_title TEXT);","Retrieves employees who either belong to department 10 or 20, OR have a job title of 'Manager' or 'Director'."
List products that have received at least one customer review.,SELECT product_name FROM Products P WHERE EXISTS (SELECT 1 FROM Reviews R WHERE R.product_id = P.product_id);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Reviews (review_id INTEGER PRIMARY KEY, product_id INTEGER, customer_id INTEGER, rating INTEGER, review_text TEXT, review_date TEXT);","Selects product names for products that have at least one entry in the Reviews table, indicating they have been reviewed."
Find departments where no employee has taken more than 5 projects.,SELECT D.department_name FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E JOIN EmployeeProjects EP ON E.employee_id = EP.employee_id WHERE E.department_id = D.department_id GROUP BY E.employee_id HAVING COUNT(EP.project_id) > 5);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, PRIMARY KEY (employee_id, project_id));",Selects department names if there is no employee in that department who has been assigned to more than 5 projects.
"Find customer names that contain a number, for example 'John123Doe'.",SELECT customer_name FROM Customers WHERE customer_name LIKE '%0%' OR customer_name LIKE '%1%' OR customer_name LIKE '%2%' OR customer_name LIKE '%3%' OR customer_name LIKE '%4%' OR customer_name LIKE '%5%' OR customer_name LIKE '%6%' OR customer_name LIKE '%7%' OR customer_name LIKE '%8%' OR customer_name LIKE '%9%';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT);",Selects customer names that contain any digit from 0 to 9.
List employees whose names start with letters from 'A' to 'C'.,SELECT employee_name FROM Employees WHERE employee_name BETWEEN 'A' AND 'D';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT);","Selects employee names that alphabetically fall between 'A' and 'D' (exclusive of 'D', effectively 'A' through 'Czzzz...')."
Get the names of the top 3 most expensive products that have been ordered.,SELECT product_name FROM Products WHERE product_id IN (SELECT product_id FROM OrderItems ORDER BY price_per_unit DESC LIMIT 3);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL);","Retrieves the names of products corresponding to the top 3 most expensive items ever ordered, using a subquery with ORDER BY and LIMIT."
"Find orders placed in 2023 for products in 'Electronics' or 'Software' categories, where the customer's email contains 'gmail.com'.","SELECT O.order_id, O.order_date, C.customer_name, C.email, P.product_name FROM Orders O JOIN Customers C ON O.customer_id = C.customer_id JOIN OrderItems OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE O.order_date BETWEEN '2023-01-01' AND '2023-12-31' AND P.category IN ('Electronics', 'Software') AND C.email LIKE '%@gmail.com%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);","Retrieves order details for specific criteria: orders placed in 2023, containing products from 'Electronics' or 'Software' categories, and associated with customers using a 'gmail.com' email."
List products in the 'Discontinued' category that have never been ordered.,SELECT P.product_name FROM Products P WHERE P.category = 'Discontinued' AND NOT EXISTS (SELECT 1 FROM OrderItems OI WHERE OI.product_id = P.product_id);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","Selects names of products that are in the 'Discontinued' category and have no associated entries in the OrderItems table, meaning they've never been ordered."
Find the names of products that have a price higher than the average price of all products.,SELECT ProductName FROM Products WHERE Price > (SELECT AVG(Price) FROM Products);,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER);",Retrieves product names from the Products table where the price of each product is greater than the overall average price of all products.
List the names of customers who have placed an order.,SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","Selects the names of customers who have at least one entry in the Orders table, indicating they have placed an order."
Get the department names that have at least one employee.,SELECT DepartmentName FROM Departments d WHERE EXISTS (SELECT 1 FROM Employees e WHERE e.DepartmentID = d.DepartmentID);,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);",Fetches the names of departments only if there is at least one employee associated with that department.
Show the average order amount for customers who registered after 2022.,"SELECT AVG(Sub.TotalAmount) FROM (SELECT CustomerID, TotalAmount FROM Orders WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE strftime('%Y', RegistrationDate) > '2022')) AS Sub;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, RegistrationDate TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL);",Calculates the average total amount of orders placed by customers who registered after the year 2022.
"For each employee, list their name and the name of their department.","SELECT FirstName, LastName, (SELECT DepartmentName FROM Departments d WHERE d.DepartmentID = e.DepartmentID) AS DepartmentName FROM Employees e;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT);","Retrieves the first name, last name, and corresponding department name for each employee by performing a correlated subquery to look up the department name."
List all products along with the total number of products available in stock across all products.,"SELECT ProductName, StockQuantity, (SELECT SUM(StockQuantity) FROM Products) AS TotalGlobalStock FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER);","Displays the name and stock quantity for each product, and also shows the total stock quantity of all products as a constant value for every row."
Find the employee(s) with the highest salary.,"SELECT FirstName, LastName FROM Employees WHERE Salary = (SELECT MAX(Salary) FROM Employees);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Salary REAL);",Identifies and lists the first and last names of all employees who have the maximum salary.
List customers who have not placed any orders.,SELECT CustomerName FROM Customers WHERE CustomerID NOT IN (SELECT CustomerID FROM Orders);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER);",Retrieves the names of customers for whom no matching order exists in the Orders table.
Get the department names that do not have any employees.,SELECT DepartmentName FROM Departments d WHERE NOT EXISTS (SELECT 1 FROM Employees e WHERE e.DepartmentID = d.DepartmentID);,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER);",Finds the names of departments that currently have no employees assigned to them.
Calculate the average salary of employees in departments that have more than 5 employees.,SELECT AVG(e.Salary) FROM Employees e JOIN (SELECT DepartmentID FROM Employees GROUP BY DepartmentID HAVING COUNT(EmployeeID) > 5) AS BigDepartments ON e.DepartmentID = BigDepartments.DepartmentID;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);","Computes the average salary of employees, but only for those employees who belong to departments that have a total count of more than 5 employees."
Find orders that have the same customer and order date as any order with a total amount greater than 1000.,"SELECT o1.OrderID, o1.CustomerID, o1.OrderDate FROM Orders o1 WHERE EXISTS (SELECT 1 FROM Orders o2 WHERE o2.CustomerID = o1.CustomerID AND o2.OrderDate = o1.OrderDate AND o2.TotalAmount > 1000);","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","Selects orders where there exists at least one order (potentially the same one) with the same customer and order date, and that order has a total amount exceeding 1000."
List products that have a stock quantity lower than the minimum stock quantity found in products costing more than $50.,"SELECT ProductName, StockQuantity FROM Products WHERE StockQuantity < (SELECT MIN(StockQuantity) FROM Products WHERE Price > 50);","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER);",Filters products to show only those whose current stock quantity is less than the minimum stock quantity among products that are priced above $50.
"Get the names of employees and their department locations, but only for departments established after 2010.","SELECT e.FirstName, e.LastName, d.Location FROM Employees e JOIN (SELECT DepartmentID, DepartmentName, Location FROM Departments WHERE strftime('%Y', EstablishedDate) > '2010') AS RecentDepartments d ON e.DepartmentID = d.DepartmentID;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT, EstablishedDate TEXT);","Joins employees with a subquery that selects only departments established after 2010, effectively listing employees and their locations from relatively newer departments."
"For each department, show its name and the number of employees it has.","SELECT DepartmentName, (SELECT COUNT(EmployeeID) FROM Employees e WHERE e.DepartmentID = d.DepartmentID) AS NumberOfEmployees FROM Departments d;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER);","Lists each department's name along with a count of how many employees are assigned to that specific department, using a correlated subquery for the count."
Find all orders placed on the same date as the earliest order ever placed.,"SELECT OrderID, OrderDate, TotalAmount FROM Orders WHERE OrderDate = (SELECT MIN(OrderDate) FROM Orders);","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",Retrieves all orders that were placed on the very first date an order was ever recorded in the system.
"Find customers who have placed more than 3 orders, and show their total spending.","SELECT c.CustomerName, o.TotalSpending FROM Customers c JOIN (SELECT CustomerID, SUM(TotalAmount) AS TotalSpending FROM Orders GROUP BY CustomerID HAVING COUNT(OrderID) > 3) AS o ON c.CustomerID = o.CustomerID;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL);","Joins the Customers table with a subquery that identifies customers who have placed more than 3 orders and calculates their total spending, effectively showing the names and total spending of such customers."
Find customers who have placed an order with a total amount greater than the average of all orders placed by customers from 'New York'.,SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE TotalAmount > (SELECT AVG(TotalAmount) FROM Orders o JOIN Customers c ON o.CustomerID = c.CustomerID WHERE c.City = 'New York'));,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL);",Identifies customers who have placed at least one order where the order's total amount exceeds the average total amount of orders placed specifically by customers residing in 'New York'.
"For each employee, show their name, salary, and the average salary in their department, and also the overall average salary in the company.","SELECT e.FirstName, e.LastName, e.Salary, (SELECT AVG(Salary) FROM Employees WHERE DepartmentID = e.DepartmentID) AS DepartmentAverageSalary, (SELECT AVG(Salary) FROM Employees) AS CompanyAverageSalary FROM Employees e;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);","Displays each employee's name, individual salary, the average salary within their respective department, and the overall average salary across all employees in the company."
"Get the names of departments that have employees with salaries above 70000, along with the count of such employees in each of those departments.","SELECT d.DepartmentName, HighEarners.CountHighEarners FROM Departments d JOIN (SELECT DepartmentID, COUNT(EmployeeID) AS CountHighEarners FROM Employees WHERE Salary > 70000 GROUP BY DepartmentID) AS HighEarners ON d.DepartmentID = HighEarners.DepartmentID;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);",Lists department names along with the number of employees in each department who earn a salary greater than 70000.
Find employees whose salary is greater than the average salary of employees in their own department.,"SELECT FirstName, LastName, Salary, DepartmentID FROM Employees e WHERE Salary > (SELECT AVG(Salary) FROM Employees WHERE DepartmentID = e.DepartmentID);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);",Selects employees whose individual salary is higher than the average salary of all employees within their specific department.
List the names of customers who have ordered products that are in the 'Books' category.,SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders WHERE ProductID IN (SELECT ProductID FROM Products WHERE Category = 'Books'));,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, ProductID INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT);","Retrieves the names of customers who have placed orders for products categorized as 'Books' by using nested subqueries to first find product IDs, then customer IDs."
Find the average age of employees in departments that have more than 10 employees.,"SELECT AVG(Sub.Age) FROM (SELECT CAST(strftime('%Y', 'now') - strftime('%Y', DateOfBirth) AS INTEGER) - (CAST(strftime('%m-%d', 'now') < strftime('%m-%d', DateOfBirth) AS INTEGER)) AS Age, DepartmentID FROM Employees) AS Sub WHERE Sub.DepartmentID IN (SELECT DepartmentID FROM Employees GROUP BY DepartmentID HAVING COUNT(EmployeeID) > 10);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DateOfBirth TEXT, DepartmentID INTEGER);","Calculates the average age of employees, but only for those employees who belong to departments that have more than 10 employees, using a subquery to derive age and another subquery to identify large departments."
"For each order, display its ID, total amount, and a status indicating 'High Value' if it's above the overall average order amount, otherwise 'Normal Value'.","SELECT OrderID, TotalAmount, CASE WHEN TotalAmount > (SELECT AVG(TotalAmount) FROM Orders) THEN 'High Value' ELSE 'Normal Value' END AS OrderStatus FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","Lists each order's ID, total amount, and assigns a status based on whether its total amount is greater than the average total amount of all orders."
Find customers whose email domain is the same as the most common email domain among customers.,"SELECT CustomerName, Email FROM Customers WHERE SUBSTR(Email, INSTR(Email, '@') + 1) = (SELECT SUBSTR(Email, INSTR(Email, '@') + 1) FROM Customers GROUP BY SUBSTR(Email, INSTR(Email, '@') + 1) ORDER BY COUNT(*) DESC LIMIT 1);","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT);",Selects customer names and emails where their email domain matches the domain that appears most frequently among all customer emails.
"Get the average quantity of products sold per order, considering only orders placed by customers who have spent more than 1000 in total.","SELECT AVG(ProductsPerOrder.TotalProducts) FROM (SELECT OrderID, SUM(Quantity) AS TotalProducts FROM OrderItems GROUP BY OrderID) AS ProductsPerOrder JOIN (SELECT OrderID FROM Orders WHERE CustomerID IN (SELECT CustomerID FROM Orders GROUP BY CustomerID HAVING SUM(TotalAmount) > 1000)) AS HighValueOrders ON ProductsPerOrder.OrderID = HighValueOrders.OrderID;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","Calculates the average number of products contained within each order, but only for orders placed by customers whose cumulative total spending across all their orders exceeds 1000."
Find employees who have completed at least one project in the last year (from today).,"SELECT FirstName, LastName FROM Employees e WHERE EXISTS (SELECT 1 FROM Projects p WHERE p.EmployeeID = e.EmployeeID AND p.CompletionDate BETWEEN date('now', '-1 year') AND date('now'));","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT); CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, EmployeeID INTEGER, CompletionDate TEXT);",Lists employees who have a record of completing at least one project within the last 12 months from the current date.
"List all departments, and for each, show the count of employees, and how many of them have a 'Manager' title.","SELECT d.DepartmentName, (SELECT COUNT(e.EmployeeID) FROM Employees e WHERE e.DepartmentID = d.DepartmentID) AS TotalEmployees, (SELECT COUNT(e2.EmployeeID) FROM Employees e2 WHERE e2.DepartmentID = d.DepartmentID AND e2.Title = 'Manager') AS ManagersCount FROM Departments d;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Title TEXT);","For each department, it displays the total number of employees and a separate count specifically for employees holding the 'Manager' title within that department."
Find products whose price is greater than the average price and whose stock quantity is less than the average stock quantity.,SELECT ProductName FROM Products WHERE Price > (SELECT AVG(Price) FROM Products) AND StockQuantity < (SELECT AVG(StockQuantity) FROM Products);,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER);",Identifies products that are simultaneously more expensive than the average product price and have a stock quantity lower than the average stock quantity.
"List pairs of employees who share the same salary, along with that salary, by using a subquery to find common salaries.","SELECT e1.FirstName, e1.LastName, e2.FirstName, e2.LastName, e1.Salary FROM Employees e1 JOIN Employees e2 ON e1.Salary = e2.Salary WHERE e1.EmployeeID < e2.EmployeeID AND e1.Salary IN (SELECT Salary FROM Employees GROUP BY Salary HAVING COUNT(EmployeeID) > 1);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Salary REAL);","Finds and lists pairs of distinct employees (e.g., A and B, not B and A) who have the exact same salary, but only for salaries that are shared by more than one employee."
"Find customers who have placed orders for products from the 'Electronics' category, and those orders were placed after 2023-01-01.",SELECT CustomerName FROM Customers c WHERE EXISTS (SELECT 1 FROM Orders o WHERE o.CustomerID = c.CustomerID AND o.OrderDate > '2023-01-01' AND o.ProductID IN (SELECT ProductID FROM Products WHERE Category = 'Electronics'));,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, ProductID INTEGER, OrderDate TEXT); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT);","Retrieves the names of customers who have placed at least one order for a product from the 'Electronics' category, provided that order was placed after January 1st, 2023."
List all employees who do not have a recorded phone number.,"SELECT employee_id, first_name, last_name FROM Employees WHERE phone_number IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, phone_number TEXT, hire_date TEXT);","This query selects employees by checking if their 'phone_number' column contains a NULL value, indicating no phone number is recorded."
Find all products that have a description available.,"SELECT product_id, product_name FROM Products WHERE description IS NOT NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, description TEXT, price REAL NOT NULL, stock_quantity INTEGER);","This query retrieves products where the 'description' column is explicitly not NULL, meaning a description exists."
"Display a list of customers, showing their email. If an email is not available, display 'No Email Provided'.","SELECT customer_id, first_name, last_name, COALESCE(email, 'No Email Provided') AS contact_email FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT, phone_number TEXT, address TEXT);","The COALESCE function returns the first non-NULL expression. Here, it shows the 'email' if present, otherwise 'No Email Provided'."
"For each order, show the shipping date. If the shipping date is not set, use the order date instead.","SELECT order_id, order_date, COALESCE(ship_date, order_date) AS final_ship_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, ship_date TEXT, total_amount REAL);","This query uses COALESCE to display the 'ship_date' if available, otherwise it falls back to the 'order_date' for the 'final_ship_date'."
"List all tasks, showing their completion date. If a task hasn't been completed, display 'In Progress'.","SELECT task_id, task_name, IFNULL(completion_date, 'In Progress') AS effective_completion_date FROM Tasks;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT NOT NULL, assigned_to TEXT, due_date TEXT, completion_date TEXT, status TEXT);","IFNULL, specific to SQLite, works similarly to COALESCE for two arguments. It displays 'completion_date' or 'In Progress' if NULL."
"Calculate the total commission paid, treating any missing commission percentages as zero.","SELECT SUM(salary * COALESCE(commission_pct, 0)) AS total_commission FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, salary REAL, commission_pct REAL);","COALESCE replaces NULL 'commission_pct' values with 0 before performing the sum, ensuring all employees contribute to the total."
Count how many employees have a manager assigned.,SELECT COUNT(manager_id) AS employees_with_manager FROM Employees;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, manager_id INTEGER);","COUNT(column_name) in SQL counts only non-NULL values in that column, effectively counting employees with a 'manager_id'."
"Count the total number of employees, including those without a manager.",SELECT COUNT(*) AS total_employees FROM Employees;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, manager_id INTEGER);","COUNT(*) counts all rows in the table, regardless of NULL values in any column, giving the total employee count."
"Show product details, including a 'notes' field. If 'notes' is NULL, use 'No specific notes' from the category table if available, otherwise 'No product notes'.","SELECT p.product_name, COALESCE(p.notes, c.default_notes, 'No product notes') AS final_notes FROM Products p LEFT JOIN Categories c ON p.category_id = c.category_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, notes TEXT); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT, default_notes TEXT);","This query uses COALESCE with multiple arguments. It tries 'p.notes' first, then 'c.default_notes', and finally 'No product notes' if both are NULL."
"List all customers and their primary contact method. Prefer email, then phone, otherwise indicate 'No Contact Info'.","SELECT customer_id, first_name, COALESCE(email, phone_number, 'No Contact Info') AS primary_contact FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, email TEXT, phone_number TEXT);","COALESCE returns the first non-NULL value among 'email', 'phone_number', and 'No Contact Info', providing the best available contact."
Find all projects that have not yet been assigned a project manager.,"SELECT project_id, project_name FROM Projects WHERE manager_id IS NULL;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, manager_id INTEGER, start_date TEXT, end_date TEXT);","This query filters projects where the 'manager_id' column is NULL, identifying projects without an assigned manager."
"Retrieve sales records, showing the actual quantity sold. If a quantity is missing, default it to 1.","SELECT sale_id, product_id, IFNULL(quantity_sold, 1) AS actual_quantity FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, quantity_sold INTEGER, sale_date TEXT);","IFNULL replaces any NULL 'quantity_sold' with 1, providing a default value for calculations or display."
"Display student names and their graduation year. If a student has not graduated, show 'Not Graduated'.","SELECT student_id, student_name, IFNULL(graduation_year, 'Not Graduated') AS graduation_status FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, enrollment_date TEXT, graduation_year TEXT);",IFNULL is used to provide a descriptive string 'Not Graduated' when the 'graduation_year' is NULL.
"List all inventory items, showing the last restock date. If it's never been restocked, display 'Never'.","SELECT item_id, item_name, COALESCE(last_restock_date, 'Never') AS effective_restock_date FROM Inventory;","CREATE TABLE Inventory (item_id INTEGER PRIMARY KEY, item_name TEXT NOT NULL, quantity INTEGER, last_restock_date TEXT);","COALESCE replaces NULL values in 'last_restock_date' with the string 'Never', making the data more understandable."
"Calculate the average rating for movies, treating any missing ratings as 3 (average).","SELECT AVG(COALESCE(rating, 3)) AS average_rating FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, rating REAL);","COALESCE ensures that NULL 'rating' values are treated as 3 when calculating the average, preventing them from being ignored by AVG."
Find all customer accounts that do not have a registered address.,"SELECT account_id, customer_name FROM CustomerAccounts WHERE street_address IS NULL;","CREATE TABLE CustomerAccounts (account_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, street_address TEXT, city TEXT, postal_code TEXT);",This query identifies customer accounts by selecting those where the 'street_address' column is NULL.
List employees who have not yet provided their emergency contact details.,"SELECT employee_id, name FROM Staff WHERE emergency_contact_name IS NULL OR emergency_contact_phone IS NULL;","CREATE TABLE Staff (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, department TEXT, emergency_contact_name TEXT, emergency_contact_phone TEXT);","This query finds employees where either the 'emergency_contact_name' or 'emergency_contact_phone' is NULL, indicating incomplete contact info."
"For each book, display its ISBN. If the primary ISBN is missing, use the secondary ISBN.","SELECT book_id, title, COALESCE(primary_isbn, secondary_isbn) AS effective_isbn FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT, primary_isbn TEXT, secondary_isbn TEXT);","COALESCE prioritizes 'primary_isbn'. If it's NULL, it falls back to 'secondary_isbn' to provide an effective ISBN."
"Show order details, including any special notes. If notes are missing, display 'No special instructions'.","SELECT order_id, customer_id, IFNULL(special_notes, 'No special instructions') AS order_notes FROM CustomerOrders;","CREATE TABLE CustomerOrders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, special_notes TEXT);",IFNULL provides a default string 'No special instructions' when the 'special_notes' column is NULL.
Find all blog posts that do not have a specified author.,"SELECT post_id, title FROM BlogPosts WHERE author_id IS NULL;","CREATE TABLE BlogPosts (post_id INTEGER PRIMARY KEY, title TEXT NOT NULL, content TEXT, author_id INTEGER, publish_date TEXT);","This query selects blog posts by checking if their 'author_id' column is NULL, identifying posts without an assigned author."
"Retrieve all customer IDs and their last login date. If the last login is NULL, treat it as the registration date.","SELECT customer_id, COALESCE(last_login_date, registration_date) AS effective_last_login FROM Users;","CREATE TABLE Users (customer_id INTEGER PRIMARY KEY, username TEXT NOT NULL, registration_date TEXT NOT NULL, last_login_date TEXT);","COALESCE is used here to ensure an 'effective_last_login' date is always present, either the actual last login or the registration date if login is NULL."
Count the number of unique non-NULL email addresses in the customers table.,SELECT COUNT(DISTINCT email) AS unique_emails_count FROM Customers;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT);",COUNT(DISTINCT column_name) only counts unique and non-NULL values in the specified column.
"List all departments, indicating if they have a budget assigned. Show 'No Budget' if not.","SELECT department_name, IF(budget IS NULL, 'No Budget', 'Budget Assigned') AS budget_status FROM Departments;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, budget REAL);","This query uses a conditional IF statement. It returns 'No Budget' if 'budget' is NULL, otherwise 'Budget Assigned'."
"Display employee names and their manager's ID. If an employee has no manager, show 'No Manager'.","SELECT employee_id, name, COALESCE(CAST(manager_id AS TEXT), 'No Manager') AS manager_info FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT NOT NULL, manager_id INTEGER);",COALESCE displays the 'manager_id' (converted to text) or 'No Manager' if 'manager_id' is NULL. CAST is used to ensure type consistency for COALESCE.
"For each software license, show the expiration date. If it's an perpetual license (expiration_date is NULL), display 'Perpetual'.","SELECT license_id, product_name, COALESCE(expiration_date, 'Perpetual') AS final_expiration_date FROM SoftwareLicenses;","CREATE TABLE SoftwareLicenses (license_id INTEGER PRIMARY KEY, product_name TEXT, issued_date TEXT, expiration_date TEXT);","COALESCE is used to replace NULL 'expiration_date' values with the string 'Perpetual', clearly indicating a non-expiring license."
Find all articles that have an editor assigned.,"SELECT article_id, title FROM Articles WHERE editor_id IS NOT NULL;","CREATE TABLE Articles (article_id INTEGER PRIMARY KEY, title TEXT NOT NULL, content TEXT, author_id INTEGER, editor_id INTEGER);","This query selects articles where the 'editor_id' column is explicitly not NULL, indicating an editor has been assigned."
"List all flights, showing their actual arrival time. If an arrival time is not yet recorded, use the scheduled arrival time.","SELECT flight_id, origin, destination, COALESCE(actual_arrival_time, scheduled_arrival_time) AS display_arrival_time FROM Flights;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, origin TEXT, destination TEXT, scheduled_departure_time TEXT, actual_departure_time TEXT, scheduled_arrival_time TEXT, actual_arrival_time TEXT);","COALESCE prioritizes 'actual_arrival_time'. If it's NULL, it uses 'scheduled_arrival_time' to always show an arrival time."
"Calculate the average age of users, assuming any user with a NULL birth_date is 30 years old.","SELECT AVG(JULIANDAY('now') - JULIANDAY(COALESCE(birth_date, DATE('now', '-30 years')))) / 365.25 AS average_age_years FROM Users;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, birth_date TEXT);",COALESCE replaces NULL 'birth_date' values with a date 30 years ago from today. JULIANDAY is then used to calculate age in years from the current date.
Find products whose stock quantity is NULL (unknown).,SELECT product_name FROM Products WHERE stock_quantity IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL, stock_quantity INTEGER);","This query identifies products where the 'stock_quantity' column has a NULL value, indicating an unknown stock level."
"List all reviews, displaying the review text. If the review text is NULL, show 'No review text provided'.","SELECT review_id, product_id, COALESCE(review_text, 'No review text provided') AS review_content FROM ProductReviews;","CREATE TABLE ProductReviews (review_id INTEGER PRIMARY KEY, product_id INTEGER, customer_id INTEGER, review_text TEXT, rating INTEGER);","COALESCE replaces any NULL 'review_text' with 'No review text provided', ensuring a descriptive output for all reviews."
Count how many invoices have a payment date recorded.,SELECT COUNT(payment_date) AS paid_invoices_count FROM Invoices;,"CREATE TABLE Invoices (invoice_id INTEGER PRIMARY KEY, customer_id INTEGER, invoice_date TEXT, total_amount REAL, payment_date TEXT);","COUNT(column_name) counts only non-NULL values in the 'payment_date' column, giving the count of invoices with a recorded payment."
"Find the average salary for each department, but only for departments where the average salary is greater than $60,000.","WITH DepartmentAvgSalary AS (SELECT department_id, AVG(salary) AS avg_salary FROM Employees GROUP BY department_id) SELECT D.department_name, DAS.avg_salary FROM Departments AS D JOIN DepartmentAvgSalary AS DAS ON D.department_id = DAS.department_id WHERE DAS.avg_salary > 60000.0;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","This query uses a CTE (Common Table Expression) named `DepartmentAvgSalary` to first calculate the average salary for each department. Then, it joins this CTE with the `Departments` table to get the department names and filters the results to include only those departments where the average salary exceeds $60,000."
"List the top 5 customers by total order amount in 2023, along with their total spending.","WITH CustomerTotalOrders AS (SELECT customer_id, SUM(total_amount) AS total_spending FROM Orders WHERE STRFTIME('%Y', order_date) = '2023' GROUP BY customer_id) SELECT C.first_name, C.last_name, CTO.total_spending FROM Customers AS C JOIN CustomerTotalOrders AS CTO ON C.customer_id = CTO.customer_id ORDER BY CTO.total_spending DESC LIMIT 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","A CTE `CustomerTotalOrders` is used to calculate the total spending for each customer in 2023. This CTE is then joined with the `Customers` table to retrieve customer names, and the results are ordered by total spending in descending order, showing only the top 5."
Retrieve all employees who earn more than the average salary of their respective department.,"WITH DepartmentAvgSalary AS (SELECT department_id, AVG(salary) AS avg_salary FROM Employees GROUP BY department_id) SELECT E.first_name, E.last_name, E.salary, D.department_name FROM Employees AS E JOIN DepartmentAvgSalary AS DAS ON E.department_id = DAS.department_id JOIN Departments AS D ON E.department_id = D.department_id WHERE E.salary > DAS.avg_salary;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",This query first calculates the average salary per department using a CTE `DepartmentAvgSalary`. It then joins the `Employees` table with this CTE (and the `Departments` table for names) to filter for employees whose individual salary is greater than their department's average salary.
Find products that have never been sold.,SELECT P.product_name FROM Products AS P WHERE P.product_id NOT IN (SELECT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL);CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","This query uses a derived table (subquery in the WHERE clause) to get all `product_id`s that exist in the `Order_Items` table. It then selects `product_name` from `Products` where the `product_id` is NOT IN this list, effectively finding products that have never been sold."
"Get the names of employees and their managers, including employees who do not have a manager.","WITH EmployeeManagers AS (SELECT E1.employee_id, E1.first_name AS employee_first_name, E1.last_name AS employee_last_name, E1.manager_id, E2.first_name AS manager_first_name, E2.last_name AS manager_last_name FROM Employees AS E1 LEFT JOIN Employees AS E2 ON E1.manager_id = E2.employee_id) SELECT employee_first_name, employee_last_name, manager_first_name, manager_last_name FROM EmployeeManagers;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, manager_id INTEGER);","A CTE named `EmployeeManagers` is used to perform a self-LEFT JOIN on the `Employees` table. This allows matching each employee with their manager. The CTE is then simply selected from to display the employee and manager names, including employees with no manager (where manager fields will be NULL)."
Calculate the total revenue for each product category for orders placed in the last 30 days.,"WITH RecentOrders AS (SELECT order_id, order_date FROM Orders WHERE order_date >= DATE('now', '-30 days')), RecentOrderItems AS (SELECT OI.product_id, OI.quantity * OI.price_at_time_of_order AS item_revenue FROM Order_Items AS OI JOIN RecentOrders AS RO ON OI.order_id = RO.order_id) SELECT P.category, SUM(ROI.item_revenue) AS total_category_revenue FROM Products AS P JOIN RecentOrderItems AS ROI ON P.product_id = ROI.product_id GROUP BY P.category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL);","This query uses two CTEs. `RecentOrders` identifies orders placed in the last 30 days. `RecentOrderItems` then calculates the revenue for each item in these recent orders. Finally, it joins `Products` with `RecentOrderItems` to sum up the revenue by product category."
Find departments with no employees.,SELECT D.department_name FROM Departments AS D LEFT JOIN (SELECT DISTINCT department_id FROM Employees) AS EmpDepts ON D.department_id = EmpDepts.department_id WHERE EmpDepts.department_id IS NULL;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER);","This query uses a derived table (subquery in the FROM clause) to get a distinct list of `department_id`s that have employees. It then performs a LEFT JOIN from `Departments` to this derived table. Departments that have no employees will have a NULL match in the derived table, which are then filtered for."
"For each customer, list their total orders and the average order amount, only considering customers who have placed more than 5 orders.","WITH CustomerOrderStats AS (SELECT customer_id, COUNT(order_id) AS total_orders, AVG(total_amount) AS avg_order_amount FROM Orders GROUP BY customer_id HAVING COUNT(order_id) > 5) SELECT C.first_name, C.last_name, COS.total_orders, COS.avg_order_amount FROM Customers AS C JOIN CustomerOrderStats AS COS ON C.customer_id = COS.customer_id ORDER BY COS.total_orders DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL);","The `CustomerOrderStats` CTE first calculates the count of orders and average order amount for each customer, filtering out customers with 5 or fewer orders using `HAVING`. The main query then joins this CTE with the `Customers` table to display the customer names along with their calculated statistics."
"List all employees along with their level in the organizational hierarchy (e.g., CEO is level 0, their direct reports are level 1, etc.). Assume `manager_id` points to the `employee_id` of their manager.","WITH RECURSIVE OrgHierarchy AS (SELECT employee_id, first_name, last_name, manager_id, 0 AS level FROM Employees WHERE manager_id IS NULL UNION ALL SELECT E.employee_id, E.first_name, E.last_name, E.manager_id, OH.level + 1 FROM Employees AS E JOIN OrgHierarchy AS OH ON E.manager_id = OH.employee_id) SELECT employee_id, first_name, last_name, level FROM OrgHierarchy ORDER BY level, employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, manager_id INTEGER);","This query uses a recursive CTE `OrgHierarchy` to traverse the employee-manager hierarchy. The anchor member finds employees with no manager (CEO/top level, level 0). The recursive member then joins `Employees` with the CTE to find direct reports and increments their level. The final select displays all employees and their calculated organizational level."
"Calculate the cumulative sum of sales revenue over time for a specific product category, 'Electronics'.","WITH CategorySales AS (SELECT sale_date, SUM(revenue) AS daily_revenue FROM Sales AS S JOIN Products AS P ON S.product_id = P.product_id WHERE P.category = 'Electronics' GROUP BY sale_date ORDER BY sale_date) SELECT sale_date, daily_revenue, SUM(daily_revenue) OVER (ORDER BY sale_date) AS cumulative_revenue FROM CategorySales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity_sold INTEGER, revenue REAL);CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);","The `CategorySales` CTE first calculates the daily revenue for products in the 'Electronics' category. The main query then applies a window function `SUM(...) OVER (ORDER BY sale_date)` to this CTE result to compute the cumulative sum of daily revenue, showing how total revenue for that category accumulates over time."
Find the product that generated the highest total revenue in each category.,"WITH ProductRevenue AS (SELECT product_id, SUM(revenue) AS total_product_revenue FROM Sales GROUP BY product_id), RankedProductRevenue AS (SELECT P.category, P.product_name, PR.total_product_revenue, ROW_NUMBER() OVER (PARTITION BY P.category ORDER BY PR.total_product_revenue DESC) AS rn FROM Products AS P JOIN ProductRevenue AS PR ON P.product_id = PR.product_id) SELECT category, product_name, total_product_revenue FROM RankedProductRevenue WHERE rn = 1;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, revenue REAL);",This query uses two CTEs. `ProductRevenue` calculates the total revenue for each product. `RankedProductRevenue` then joins this with `Products` and uses `ROW_NUMBER()` to rank products by revenue within each category. The final select retrieves only the top-ranked product (rank 1) for each category.
List all customers who have placed orders on consecutive days.,"WITH CustomerOrderDates AS (SELECT customer_id, order_date FROM Orders GROUP BY customer_id, order_date), LaggedOrderDates AS (SELECT customer_id, order_date, LAG(order_date, 1, '1900-01-01') OVER (PARTITION BY customer_id ORDER BY order_date) AS prev_order_date FROM CustomerOrderDates) SELECT DISTINCT C.first_name, C.last_name FROM Customers AS C JOIN LaggedOrderDates AS LOD ON C.customer_id = LOD.customer_id WHERE JULIANDAY(LOD.order_date) - JULIANDAY(LOD.prev_order_date) = 1;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","The `CustomerOrderDates` CTE gets unique order dates for each customer. `LaggedOrderDates` then uses `LAG()` to find the previous order date for each customer. The final query joins with `Customers` and filters for records where the current order date is exactly one day after the previous order date, indicating consecutive orders."
"Find the average quantity sold for products in each category, but only for products with a stock quantity greater than 100.","SELECT P.category, AVG(OI.quantity) AS average_quantity_sold FROM Products AS P JOIN (SELECT product_id, quantity FROM Order_Items) AS OI ON P.product_id = OI.product_id WHERE P.stock_quantity > 100 GROUP BY P.category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, stock_quantity INTEGER);CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER);","This query uses a derived table to select `product_id` and `quantity` from `Order_Items`. It then joins this derived table with the `Products` table, filters products with `stock_quantity` greater than 100, and calculates the average quantity sold per category."
Get the top 3 best-selling products (by total quantity sold) for each store.,"WITH StoreProductSales AS (SELECT S.store_id, P.product_name, SUM(OI.quantity) AS total_quantity_sold FROM Stores AS S JOIN Orders AS O ON S.store_id = O.store_id JOIN Order_Items AS OI ON O.order_id = OI.order_id JOIN Products AS P ON OI.product_id = P.product_id GROUP BY S.store_id, P.product_name), RankedStoreProductSales AS (SELECT store_id, product_name, total_quantity_sold, RANK() OVER (PARTITION BY store_id ORDER BY total_quantity_sold DESC) AS rank_num FROM StoreProductSales) SELECT S.store_name, RSP.product_name, RSP.total_quantity_sold FROM Stores AS S JOIN RankedStoreProductSales AS RSP ON S.store_id = RSP.store_id WHERE RSP.rank_num <= 3 ORDER BY S.store_name, RSP.rank_num;","CREATE TABLE Stores (store_id INTEGER PRIMARY KEY, store_name TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, store_id INTEGER);CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT);","The `StoreProductSales` CTE calculates the total quantity sold for each product per store. The `RankedStoreProductSales` CTE then ranks these products within each store using `RANK()`. Finally, the query retrieves the top 3 products for each store by joining with `Stores` and filtering on the rank."
List customers who registered in 2022 and made at least one order in 2023.,"WITH Customers2022Reg AS (SELECT customer_id FROM Customers WHERE STRFTIME('%Y', registration_date) = '2022'), Customers2023Orders AS (SELECT DISTINCT customer_id FROM Orders WHERE STRFTIME('%Y', order_date) = '2023') SELECT C.first_name, C.last_name FROM Customers AS C JOIN Customers2022Reg AS C22 ON C.customer_id = C22.customer_id JOIN Customers2023Orders AS C23 ON C.customer_id = C23.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, registration_date TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","Two CTEs are used: `Customers2022Reg` identifies customers who registered in 2022, and `Customers2023Orders` finds distinct customers who placed orders in 2023. The final query performs an INNER JOIN on these two CTEs (and `Customers` for names) to find customers present in both lists."
"For each employee, show their salary and the average salary of their department, but only for employees hired after 2020.","SELECT E.first_name, E.last_name, E.salary, DAS.avg_salary FROM Employees AS E JOIN (SELECT department_id, AVG(salary) AS avg_salary FROM Employees GROUP BY department_id) AS DAS ON E.department_id = DAS.department_id WHERE E.hire_date >= '2021-01-01';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","This query uses a derived table to compute the average salary per department. It then joins the `Employees` table with this derived table, allowing access to both the employee's individual salary and their department's average salary. Results are filtered for employees hired after 2020."
Identify products that have a stock quantity below their 3-month average sales quantity.,"WITH ProductMonthlySales AS (SELECT product_id, STRFTIME('%Y-%m', sale_date) AS sale_month, SUM(quantity_sold) AS monthly_quantity FROM Sales WHERE sale_date >= DATE('now', '-3 months') GROUP BY product_id, sale_month), ProductAvg3MonthSales AS (SELECT product_id, AVG(monthly_quantity) AS avg_3month_sales FROM ProductMonthlySales GROUP BY product_id) SELECT P.product_name, P.stock_quantity, PAS.avg_3month_sales FROM Products AS P JOIN ProductAvg3MonthSales AS PAS ON P.product_id = PAS.product_id WHERE P.stock_quantity < PAS.avg_3month_sales;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, stock_quantity INTEGER);CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, quantity_sold INTEGER);",The `ProductMonthlySales` CTE calculates monthly sales for each product over the last 3 months. `ProductAvg3MonthSales` then averages these monthly sales to get the 3-month average. The final query joins `Products` with `ProductAvg3MonthSales` to find products where current stock is less than this average.
"Find the total number of orders and total amount for each status, but only include statuses with more than 100 orders.","SELECT status_summary.status, status_summary.total_orders, status_summary.total_amount FROM (SELECT status, COUNT(order_id) AS total_orders, SUM(total_amount) AS total_amount FROM Orders GROUP BY status HAVING COUNT(order_id) > 100) AS status_summary;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query uses a derived table (subquery in the FROM clause) to first group orders by their `status`, count the orders, and sum their total amounts, filtering for statuses with more than 100 orders. The outer query then simply selects these pre-aggregated results."
List products whose price is above the average price of products in their own category.,"WITH CategoryAvgPrice AS (SELECT category, AVG(price) AS avg_category_price FROM Products GROUP BY category) SELECT P.product_name, P.category, P.price, CAP.avg_category_price FROM Products AS P JOIN CategoryAvgPrice AS CAP ON P.category = CAP.category WHERE P.price > CAP.avg_category_price;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",The `CategoryAvgPrice` CTE calculates the average price for each product category. The main query then joins `Products` with this CTE and filters for products whose individual price is higher than the average price of their respective category.
"For each employee, show their current salary and how much it differs from the average salary of their department.","WITH DeptAvg AS (SELECT department_id, AVG(salary) AS avg_salary FROM Employees GROUP BY department_id) SELECT E.first_name, E.last_name, E.salary, DA.avg_salary, (E.salary - DA.avg_salary) AS salary_difference FROM Employees AS E JOIN DeptAvg AS DA ON E.department_id = DA.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);","This query uses a CTE `DeptAvg` to calculate the average salary for each department. It then joins the `Employees` table with this CTE to display each employee's salary, their department's average salary, and the difference between the two."
Find all products that have been ordered by customers from 'New York' city.,SELECT DISTINCT P.product_name FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id JOIN Orders AS O ON OI.order_id = O.order_id JOIN (SELECT customer_id FROM Customers WHERE city = 'New York') AS NY_Customers ON O.customer_id = NY_Customers.customer_id;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT);CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER);CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, city TEXT);",This query uses a derived table `NY_Customers` to identify `customer_id`s from 'New York'. It then joins `Products` through `Order_Items` and `Orders` to this derived table to find all distinct product names ordered by these specific customers.
"List all departments and the number of employees in each, including departments with zero employees.","WITH EmployeeCounts AS (SELECT department_id, COUNT(employee_id) AS num_employees FROM Employees GROUP BY department_id) SELECT D.department_name, COALESCE(EC.num_employees, 0) AS employee_count FROM Departments AS D LEFT JOIN EmployeeCounts AS EC ON D.department_id = EC.department_id ORDER BY D.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, department_id INTEGER);","The `EmployeeCounts` CTE calculates the number of employees per department. A LEFT JOIN is then performed from `Departments` to this CTE to include all departments, even those with no employees (where `num_employees` would be NULL). `COALESCE` is used to display 0 instead of NULL for these departments."
Get the total revenue and total quantity sold for each month in 2023.,"WITH MonthlySales AS (SELECT STRFTIME('%Y-%m', sale_date) AS sales_month, SUM(revenue) AS monthly_revenue, SUM(quantity_sold) AS monthly_quantity_sold FROM Sales WHERE STRFTIME('%Y', sale_date) = '2023' GROUP BY sales_month ORDER BY sales_month) SELECT sales_month, monthly_revenue, monthly_quantity_sold FROM MonthlySales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, sale_date TEXT, quantity_sold INTEGER, revenue REAL);",A CTE named `MonthlySales` is used to group sales data by month for the year 2023. It calculates the sum of revenue and quantity sold for each month. The outer query then simply retrieves these aggregated monthly statistics.
Find customers who placed orders on more than 3 distinct days.,"SELECT C.first_name, C.last_name FROM Customers AS C JOIN (SELECT customer_id, COUNT(DISTINCT order_date) AS distinct_order_days FROM Orders GROUP BY customer_id HAVING distinct_order_days > 3) AS FrequentCustomers ON C.customer_id = FrequentCustomers.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","This query uses a derived table `FrequentCustomers` to count the number of distinct order days for each customer, filtering for those with more than 3. It then joins this derived table with the `Customers` table to retrieve the names of these frequent customers."
"List all products and their total sales amount, showing 'No Sales' if a product has not been sold.","WITH ProductTotalSales AS (SELECT product_id, SUM(quantity * price_at_time_of_order) AS total_sales_amount FROM Order_Items GROUP BY product_id) SELECT P.product_name, COALESCE(PTS.total_sales_amount, 0) AS total_sales FROM Products AS P LEFT JOIN ProductTotalSales AS PTS ON P.product_id = PTS.product_id ORDER BY P.product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL);CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL);","The `ProductTotalSales` CTE calculates the total sales amount for each product. A LEFT JOIN is then performed from `Products` to this CTE to ensure all products are listed. `COALESCE` is used to display 0 for products that have no sales, otherwise their calculated total sales amount."
"Show the average total amount of orders per customer, for customers registered before 2023.","SELECT AVG(customer_order_summary.total_customer_amount) AS average_total_order_per_customer FROM (SELECT O.customer_id, SUM(O.total_amount) AS total_customer_amount FROM Orders AS O JOIN Customers AS C ON O.customer_id = C.customer_id WHERE STRFTIME('%Y', C.registration_date) < '2023' GROUP BY O.customer_id) AS customer_order_summary;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, registration_date TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL);",This query uses a derived table `customer_order_summary` to first calculate the total order amount for each customer who registered before 2023. The outer query then calculates the average of these total customer amounts.
Find regions where the average annual sales of their stores exceed the overall average annual sales across all stores.,"WITH RegionAvgSales AS (SELECT R.region_name, AVG(S.annual_sales) AS avg_region_sales FROM Regions AS R JOIN Stores AS S ON R.region_id = S.region_id GROUP BY R.region_name), OverallAvgSales AS (SELECT AVG(annual_sales) AS overall_avg FROM Stores) SELECT RAS.region_name, RAS.avg_region_sales FROM RegionAvgSales AS RAS, OverallAvgSales AS OAS WHERE RAS.avg_region_sales > OAS.overall_avg;","CREATE TABLE Regions (region_id INTEGER PRIMARY KEY, region_name TEXT);CREATE TABLE Stores (store_id INTEGER PRIMARY KEY, region_id INTEGER, annual_sales REAL);","Two CTEs are used: `RegionAvgSales` calculates the average annual sales per region. `OverallAvgSales` calculates the average annual sales across all stores. The final query then joins these two CTEs (implicitly, via comma separation, as `OverallAvgSales` is a single row) and filters for regions whose average sales are higher than the overall average."
Determine the percentage of total sales revenue each product contributes.,"WITH ProductRevenue AS (SELECT product_id, SUM(revenue) AS product_total_revenue FROM Sales GROUP BY product_id), TotalRevenue AS (SELECT SUM(revenue) AS overall_total_revenue FROM Sales) SELECT P.product_name, PR.product_total_revenue, (PR.product_total_revenue * 100.0 / TR.overall_total_revenue) AS percentage_of_total_sales FROM Products AS P JOIN ProductRevenue AS PR ON P.product_id = PR.product_id, TotalRevenue AS TR ORDER BY percentage_of_total_sales DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT);CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, revenue REAL);","This query uses two CTEs: `ProductRevenue` calculates the total revenue for each product, and `TotalRevenue` calculates the grand total revenue across all sales. The main query joins `Products` with `ProductRevenue` and implicitly joins `TotalRevenue` to calculate each product's percentage contribution to the overall sales."
Find customers who have placed orders on more than 5 separate months.,"WITH CustomerMonthlyOrders AS (SELECT customer_id, STRFTIME('%Y-%m', order_date) AS order_month FROM Orders GROUP BY customer_id, order_month) SELECT C.first_name, C.last_name FROM Customers AS C JOIN (SELECT customer_id, COUNT(order_month) AS distinct_months FROM CustomerMonthlyOrders GROUP BY customer_id HAVING distinct_months > 5) AS FrequentCustomers ON C.customer_id = FrequentCustomers.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","The `CustomerMonthlyOrders` CTE identifies unique customer-month pairs for orders. A derived table then counts the distinct months for each customer from this CTE, filtering for those with more than 5 months. The final query joins `Customers` with this derived table to get the names of the frequent customers."
List the last order date for each customer.,"SELECT C.first_name, C.last_name, MAX_ORDER.last_order_date FROM Customers AS C JOIN (SELECT customer_id, MAX(order_date) AS last_order_date FROM Orders GROUP BY customer_id) AS MAX_ORDER ON C.customer_id = MAX_ORDER.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT);CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",This query uses a derived table `MAX_ORDER` to find the latest `order_date` for each `customer_id`. It then joins `Customers` with this derived table to display the customer's name alongside their most recent order date.
"List all products, categorizing their stock levels as 'High Stock', 'Medium Stock', or 'Low Stock'.","SELECT product_name, stock_quantity, CASE WHEN stock_quantity > 100 THEN 'High Stock' WHEN stock_quantity BETWEEN 50 AND 100 THEN 'Medium Stock' ELSE 'Low Stock' END AS stock_level FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL, stock_quantity INTEGER, category TEXT);","This query retrieves product names and their stock quantities, then uses a CASE expression to classify each product's stock level into 'High Stock', 'Medium Stock', or 'Low Stock' based on predefined quantity ranges."
Count the number of active and inactive customers.,"SELECT COUNT(CASE WHEN account_status = 'Active' THEN 1 END) AS active_customers, COUNT(CASE WHEN account_status = 'Inactive' THEN 1 END) AS inactive_customers FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, account_status TEXT);","This query uses two separate COUNT with CASE expressions to conditionally count customers: one for 'Active' status and another for 'Inactive' status, providing a separate total for each."
"List orders, prioritizing 'Pending' orders first, then 'Processing', and finally 'Completed', ordered by order date within each status group.","SELECT order_id, order_status, order_date FROM Orders ORDER BY CASE WHEN order_status = 'Pending' THEN 1 WHEN order_status = 'Processing' THEN 2 WHEN order_status = 'Completed' THEN 3 ELSE 4 END, order_date;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, order_status TEXT, shipping_address TEXT);","This query retrieves order details and sorts them using a CASE expression in the ORDER BY clause. It assigns a numerical priority to each order status ('Pending' gets 1, 'Processing' 2, 'Completed' 3), ensuring they appear in the specified order, with ties broken by order date."
"Calculate the average rating for each product, ensuring no division by zero if there are no ratings.","SELECT product_id, AVG(total_rating * 1.0 / NULLIF(number_of_ratings, 0)) AS average_rating FROM ProductRatings GROUP BY product_id;","CREATE TABLE ProductRatings (rating_id INTEGER PRIMARY KEY, product_id INTEGER, total_rating INTEGER, number_of_ratings INTEGER);","This query calculates the average rating for each product. It uses NULLIF to replace a '0' in 'number_of_ratings' with NULL, preventing a division-by-zero error. AVG then correctly handles the NULL values."
"List employees, showing 'N/A' for their email if it's not provided.","SELECT employee_id, first_name, last_name, COALESCE(email, 'N/A') AS contact_email FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, salary REAL, hire_date TEXT);","This query retrieves employee details and uses COALESCE to display the employee's email if available. If the email is NULL, it defaults to 'N/A'."
"Retrieve tasks, categorizing their urgency based on due date and status. Mark as 'Urgent' if due in 7 days or less and not completed, 'Upcoming' if due in 30 days and not completed, and 'On Track' otherwise.","SELECT task_name, due_date, status, CASE WHEN julianday(due_date) - julianday('now') <= 7 AND status != 'Completed' THEN 'Urgent' WHEN julianday(due_date) - julianday('now') <= 30 AND status != 'Completed' THEN 'Upcoming' ELSE 'On Track' END AS urgency_level FROM Tasks;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, project_id INTEGER, task_name TEXT, due_date TEXT, completed_date TEXT, status TEXT);",This query categorizes task urgency using a CASE expression that evaluates multiple conditions: the remaining days until the due date (calculated using julianday) and the task's completion status.
"Update the status of orders. If total_amount is over 1000, set status to 'VIP Processed'; if over 500, set to 'Priority'; otherwise, 'Standard'.",UPDATE Orders SET order_status = CASE WHEN total_amount > 1000 THEN 'VIP Processed' WHEN total_amount > 500 THEN 'Priority' ELSE 'Standard' END;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, order_status TEXT);","This query updates the 'order_status' for all records in the 'Orders' table. The new status is determined by a CASE expression that checks the 'total_amount' and assigns a corresponding status ('VIP Processed', 'Priority', or 'Standard')."
Count the number of unique departments that have at least one employee earning more than 60000.,SELECT COUNT(DISTINCT CASE WHEN salary > 60000 THEN department_id ELSE NULL END) AS high_earner_departments FROM Employees;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);","This query counts the distinct department IDs where at least one employee earns more than 60000. The CASE expression ensures that only 'department_id' for high earners are considered, while others are NULL and ignored by COUNT(DISTINCT)."
"Display product name and its category, showing 'Uncategorized' if the category is not specified.","SELECT product_name, IFNULL(category, 'Uncategorized') AS product_category FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, price REAL, stock_quantity INTEGER, category TEXT);",This query retrieves product names and their categories. It uses IFNULL (a SQLite-specific function similar to COALESCE for two arguments) to replace any NULL category values with 'Uncategorized'.
"Classify employees based on salary and performance rating. If salary is above 70000, mark as 'High Performer' if rating > 4, else 'Good Salary'. If salary is between 40000 and 70000, mark as 'Average Performer' if rating > 3, else 'Needs Improvement'. Otherwise, 'Entry Level'.","SELECT employee_id, salary, performance_rating, CASE WHEN salary > 70000 THEN CASE WHEN performance_rating > 4 THEN 'High Performer' ELSE 'Good Salary' END WHEN salary BETWEEN 40000 AND 70000 THEN CASE WHEN performance_rating > 3 THEN 'Average Performer' ELSE 'Needs Improvement' END ELSE 'Entry Level' END AS employee_tier FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, performance_rating INTEGER);","This query uses nested CASE expressions to create a sophisticated 'employee_tier' based on both salary and performance rating, applying different sub-classifications depending on the salary range."
Calculate the total sales for 'Online' and 'In-store' channels separately.,"SELECT SUM(CASE WHEN sales_channel = 'Online' THEN amount ELSE 0 END) AS online_sales, SUM(CASE WHEN sales_channel = 'In-store' THEN amount ELSE 0 END) AS in_store_sales FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, amount REAL, sale_date TEXT, sales_channel TEXT);","This query calculates the total sales amount for 'Online' and 'In-store' channels as separate columns. It uses SUM with CASE expressions to conditionally include amounts for each specific channel, effectively pivoting the data."
List all products and indicate if they have ever been part of an order with total amount greater than 500.,"SELECT p.product_name, CASE WHEN EXISTS (SELECT 1 FROM OrderItems oi JOIN Orders o ON oi.order_id = o.order_id WHERE oi.product_id = p.product_id AND o.total_amount > 500) THEN 'High Value Order Item' ELSE 'Standard Order Item' END AS order_type FROM Products p;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL);","This query lists products and uses a CASE expression with an EXISTS subquery. The subquery checks if a product has any associated order with a 'total_amount' greater than 500, classifying the product accordingly."
"List all projects, classifying their status as 'Active' if the end_date is in the future or null, 'Completed' if end_date is in the past, and 'Due Today' if end_date is today.","SELECT project_name, start_date, end_date, CASE WHEN end_date IS NULL OR julianday(end_date) > julianday('now') THEN 'Active' WHEN julianday(end_date) = julianday('now') THEN 'Due Today' WHEN julianday(end_date) < julianday('now') THEN 'Completed' ELSE 'Unknown' END AS project_status FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT);","This query categorizes projects into different statuses ('Active', 'Due Today', 'Completed', 'Unknown') based on their 'end_date' relative to the current date. It uses julianday() for precise date comparisons and handles NULL end dates."
"Display employee names and their manager's name. If no manager is assigned, show 'No Manager'.","SELECT E.first_name || ' ' || E.last_name AS employee_name, CASE WHEN M.first_name IS NULL THEN 'No Manager' ELSE M.first_name || ' ' || M.last_name END AS manager_name FROM Employees E LEFT JOIN Employees M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, manager_id INTEGER);","This query joins the 'Employees' table to itself (self-join) to find managers. It then uses a CASE expression to display 'No Manager' if an employee's 'manager_id' is NULL, otherwise it shows the manager's full name."
"For each order, display the order ID and either the customer ID (as text) if known, or 'Guest' if not.","SELECT order_id, CASE WHEN customer_id IS NOT NULL THEN CAST(customer_id AS TEXT) ELSE 'Guest' END AS customer_identifier FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","This query retrieves order IDs and uses a CASE expression to conditionally display either the customer ID (converted to text) or the string 'Guest' if the customer ID is NULL, ensuring a consistent data type for the output column."
"Group products into 'Expensive', 'Moderate', and 'Cheap' categories based on price, then count how many products are in each category.","SELECT CASE WHEN price >= 500 THEN 'Expensive' WHEN price >= 100 THEN 'Moderate' ELSE 'Cheap' END AS price_category, COUNT(product_id) AS number_of_products FROM Products GROUP BY price_category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL);","This query categorizes products based on their price using a CASE expression and then groups the results by these categories. It counts the number of products falling into each price category ('Expensive', 'Moderate', 'Cheap')."
"List employees, marking them as 'HR/Finance' if they belong to department 101 or 102, 'IT' if department 103, and 'Other' otherwise.","SELECT employee_id, first_name, department_id, CASE WHEN department_id IN (101, 102) THEN 'HR/Finance' WHEN department_id = 103 THEN 'IT' ELSE 'Other' END AS department_group FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER);","This query retrieves employee information and uses a CASE expression with an IN clause to assign employees to logical department groups ('HR/Finance', 'IT', or 'Other') based on their 'department_id'."
"Calculate the average score for students, where scores for 'Midterm' are weighted 40% and 'Final' are 60%. Assume other scores are not included.","SELECT student_id, SUM(CASE WHEN exam_type = 'Midterm' THEN score * 0.4 WHEN exam_type = 'Final' THEN score * 0.6 ELSE 0 END) AS weighted_average_score FROM StudentExams GROUP BY student_id;","CREATE TABLE StudentExams (exam_id INTEGER PRIMARY KEY, student_id INTEGER, exam_type TEXT, score REAL);","This query calculates a weighted average score for each student. It uses SUM with a CASE expression to apply different weights (0.4 for Midterm, 0.6 for Final) to the scores based on their 'exam_type'."
List all products with a flag indicating if they are 'On Sale' (price less than 20) or not.,"SELECT product_name, price, CASE WHEN price < 20 THEN 1 ELSE 0 END AS is_on_sale_flag FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL);","This query retrieves product names and prices, adding a binary flag (1 for 'On Sale', 0 for 'Not On Sale') based on whether the product's price is less than 20, using a simple CASE expression."
Get the average transaction amount for 'Deposit' transactions only.,SELECT AVG(CASE WHEN transaction_type = 'Deposit' THEN amount ELSE NULL END) AS avg_deposit_amount FROM Transactions;,"CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, amount REAL, transaction_type TEXT);","This query calculates the average of 'amount' specifically for transactions where the 'transaction_type' is 'Deposit'. The CASE expression ensures that only 'Deposit' amounts are considered, as AVG ignores NULL values."
"For each customer, display their primary contact information, preferring email, then phone, then physical address. If none are available, display 'No Contact Info'.","SELECT customer_id, COALESCE(email, phone_number, physical_address, 'No Contact Info') AS primary_contact FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, physical_address TEXT);","This query uses COALESCE to find the first non-NULL contact method (email, then phone, then physical address) for each customer. If all are NULL, it defaults to 'No Contact Info'."
"For each transaction, show the amount. If it's a 'Withdrawal', display it as a negative value.","SELECT transaction_id, CASE WHEN transaction_type = 'Withdrawal' THEN -amount ELSE amount END AS adjusted_amount FROM Transactions;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, amount REAL, transaction_type TEXT);","This query retrieves transaction IDs and adjusts the 'amount'. If the 'transaction_type' is 'Withdrawal', the amount is displayed as a negative value, otherwise it's displayed as is, using a CASE expression."
"List customers, categorizing them into age bands: 'Under 18', '18-30', '31-50', 'Over 50'.","SELECT customer_id, first_name, date_of_birth, CASE WHEN julianday('now') - julianday(date_of_birth) < 18 * 365.25 THEN 'Under 18' WHEN julianday('now') - julianday(date_of_birth) BETWEEN 18 * 365.25 AND 30 * 365.25 THEN '18-30' WHEN julianday('now') - julianday(date_of_birth) BETWEEN 31 * 365.25 AND 50 * 365.25 THEN '31-50' ELSE 'Over 50' END AS age_band FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, date_of_birth TEXT);","This query categorizes customers into age bands. It calculates the age in years using `julianday()` and then applies a CASE expression to assign a specific age band ('Under 18', '18-30', '31-50', 'Over 50')."
"Show the count of employees for each department, separated by their 'Full-time' or 'Part-time' status.","SELECT D.department_name, SUM(CASE WHEN E.employment_type = 'Full-time' THEN 1 ELSE 0 END) AS full_time_employees, SUM(CASE WHEN E.employment_type = 'Part-time' THEN 1 ELSE 0 END) AS part_time_employees FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, department_id INTEGER, employment_type TEXT);",This query pivots employee counts by department and employment type. It joins 'Departments' and 'Employees' and then uses SUM with CASE expressions to count full-time and part-time employees as separate columns for each department.
"List orders, showing the actual delivery date only if it differs from the promised delivery date. Otherwise, show NULL.","SELECT order_id, promised_delivery_date, actual_delivery_date, NULLIF(actual_delivery_date, promised_delivery_date) AS actual_delivery_if_different FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, promised_delivery_date TEXT, actual_delivery_date TEXT);","This query uses NULLIF to compare 'actual_delivery_date' and 'promised_delivery_date'. If they are the same, NULLIF returns NULL; otherwise, it returns the 'actual_delivery_date', highlighting delivery discrepancies."
Find departments where the majority of employees earn above 50000 or have a performance rating of 5.,SELECT D.department_name FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name HAVING SUM(CASE WHEN E.salary > 50000 OR E.performance_rating = 5 THEN 1 ELSE 0 END) * 1.0 / COUNT(E.employee_id) > 0.5;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, department_id INTEGER, salary REAL, performance_rating INTEGER);",This query identifies departments where more than 50% of employees meet specific criteria (salary > 50000 or performance_rating = 5). It uses SUM with CASE within the HAVING clause to calculate the proportion of qualifying employees per department.
"For each customer, assign them a 'Discount Tier' based on their loyalty_points: 'Gold' for > 1000 points, 'Silver' for 500-1000, 'Bronze' for 100-499, 'None' otherwise.","SELECT customer_id, loyalty_points, CASE WHEN loyalty_points > 1000 THEN 'Gold' WHEN loyalty_points BETWEEN 500 AND 1000 THEN 'Silver' WHEN loyalty_points BETWEEN 100 AND 499 THEN 'Bronze' ELSE 'None' END AS discount_tier FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, loyalty_points INTEGER);","This query categorizes customers into different 'Discount Tiers' ('Gold', 'Silver', 'Bronze', 'None') based on their 'loyalty_points' using a multi-conditional CASE expression."
"For each customer, show their total spending, broken down into 'Product' and 'Service' categories.","SELECT C.customer_id, C.first_name, SUM(CASE WHEN T.transaction_type = 'Product Purchase' THEN T.amount ELSE 0 END) AS total_product_spend, SUM(CASE WHEN T.transaction_type = 'Service Fee' THEN T.amount ELSE 0 END) AS total_service_spend FROM Customers C LEFT JOIN Transactions T ON C.customer_id = T.customer_id GROUP BY C.customer_id, C.first_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, customer_id INTEGER, amount REAL, transaction_type TEXT);","This query calculates the total spending for each customer, separating the amounts into 'Product Purchase' and 'Service Fee' categories. It uses a LEFT JOIN and SUM with CASE expressions to pivot the transaction types into distinct columns."
"Display all employees, showing their annual bonus tier: 'Tier A' for salaries over 80000, 'Tier B' for 50000-80000, and 'Tier C' for salaries below 50000.","SELECT employee_id, first_name, salary, CASE WHEN salary > 80000 THEN 'Tier A' WHEN salary >= 50000 AND salary <= 80000 THEN 'Tier B' ELSE 'Tier C' END AS bonus_tier FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, hire_date TEXT);","This query retrieves employee details and assigns a 'bonus_tier' (Tier A, B, or C) based on their salary range, using a multi-conditional CASE expression."
Find the average order value for orders placed on weekends (Saturday or Sunday) versus weekdays.,"SELECT CASE WHEN strftime('%w', order_date) IN ('0', '6') THEN 'Weekend' ELSE 'Weekday' END AS day_type, AVG(total_amount) AS average_order_value FROM Orders GROUP BY day_type;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, order_status TEXT);","This query calculates the average order value, grouping orders by whether they were placed on a 'Weekend' or 'Weekday'. It uses `strftime('%w', ...)` to get the day of the week (0 for Sunday, 6 for Saturday) and a CASE expression for categorization."
"List all items, showing their 'Expiry Status': 'Expired' if `expiration_date` is in the past, 'Expires Soon' if within next 30 days, 'Valid' otherwise. Handle NULL expiration dates as 'N/A'.","SELECT item_name, expiration_date, CASE WHEN expiration_date IS NULL THEN 'N/A' WHEN julianday(expiration_date) < julianday('now') THEN 'Expired' WHEN julianday(expiration_date) BETWEEN julianday('now') AND julianday('now', '+30 days') THEN 'Expires Soon' ELSE 'Valid' END AS expiry_status FROM Inventory;","CREATE TABLE Inventory (item_id INTEGER PRIMARY KEY, item_name TEXT, stock_quantity INTEGER, expiration_date TEXT);","This query determines the 'Expiry Status' of inventory items. It uses a CASE expression to check if an item's 'expiration_date' is NULL, in the past, within the next 30 days, or further in the future, categorizing it accordingly."
Find the email addresses of customers who have placed an order.,SELECT DISTINCT C.email FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query joins the Customers and Orders tables on customer_id to find customers who have an associated order and then selects their unique email addresses.
List the names of products that belong to the 'Electronics' category.,SELECT P.product_name FROM Products P JOIN Categories C ON P.category_id = C.category_id WHERE C.category_name = 'Electronics';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);",This query joins Products with Categories to filter for products where the category name is 'Electronics' and returns their names.
"Retrieve a list of all customers and their corresponding order IDs, including customers who haven't placed any orders.","SELECT C.first_name, C.last_name, O.order_id FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query uses a LEFT JOIN to include all customers from the Customers table and matches them with their orders from the Orders table. Customers without orders will show NULL for order_id.
Calculate the total revenue generated from each customer.,"SELECT C.first_name, C.last_name, SUM(O.total_amount) AS total_revenue FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_id, C.first_name, C.last_name ORDER BY total_revenue DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins Customers and Orders, then groups the results by customer to sum the total_amount for each, providing the total revenue per customer."
Find the names of products ordered by customers from 'New York'.,SELECT DISTINCT P.product_name FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.city = 'New York';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL);","This query connects four tables: Products, Order_Items, Orders, and Customers. It filters for customers in 'New York' and then retrieves the distinct product names from their orders."
List all products that have been included in any order.,SELECT product_name FROM Products WHERE product_id IN (SELECT DISTINCT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query uses a subquery to first find all distinct product_ids present in the Order_Items table, and then selects product names from the Products table that match these IDs."
Identify customers who have not placed any orders.,"SELECT first_name, last_name FROM Customers C WHERE NOT EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query selects customers where there is no corresponding entry in the Orders table for their customer_id, effectively listing customers who have not placed any orders."
Find categories that have more than 50 products in stock in total.,SELECT C.category_name FROM Categories C JOIN Products P ON C.category_id = P.category_id GROUP BY C.category_name HAVING SUM(P.stock_quantity) > 50;,"CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id));","This query joins Categories and Products, groups them by category name, and then filters these groups to show only categories where the sum of stock_quantity for their products exceeds 50."
Count the number of orders placed in 2023 for each customer.,"SELECT C.first_name, C.last_name, COUNT(O.order_id) AS orders_2023 FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y', O.order_date) = '2023' GROUP BY C.customer_id, C.first_name, C.last_name HAVING COUNT(O.order_id) > 0;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins Customers and Orders, filters orders placed in 2023 using STRFTIME, and then counts the number of such orders for each customer."
"For each product, show its name and the average price of products in its category.","SELECT P.product_name, P.unit_price, (SELECT AVG(unit_price) FROM Products WHERE category_id = P.category_id) AS avg_category_price FROM Products P;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL);","This query uses a scalar subquery to calculate the average unit price for all products within the same category as the current product in the outer query, displaying it alongside each product's name and price."
List all suppliers for the product 'Laptop Pro X'.,SELECT S.supplier_name FROM Suppliers S JOIN Product_Suppliers PS ON S.supplier_id = PS.supplier_id JOIN Products P ON PS.product_id = P.product_id WHERE P.product_name = 'Laptop Pro X';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, contact_email TEXT, country TEXT); CREATE TABLE Product_Suppliers (product_id INTEGER, supplier_id INTEGER, PRIMARY KEY (product_id, supplier_id), FOREIGN KEY (product_id) REFERENCES Products(product_id), FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id));","This query joins Products, Product_Suppliers (the linking table), and Suppliers to find the names of suppliers associated with 'Laptop Pro X'."
"For each employee, show their name and the name of their manager.","SELECT E.first_name || ' ' || E.last_name AS EmployeeName, M.first_name || ' ' || M.last_name AS ManagerName FROM Employees E LEFT JOIN Employees M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, position TEXT, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));",This query uses a self-join on the Employees table to link employees to their managers based on the manager_id column. A LEFT JOIN is used to include employees who do not have a manager.
Find the top 3 categories by total revenue generated.,"SELECT C.category_name, SUM(OI.quantity * OI.price_per_unit) AS total_category_revenue FROM Categories C JOIN Products P ON C.category_id = P.category_id JOIN Order_Items OI ON P.product_id = OI.product_id GROUP BY C.category_name ORDER BY total_category_revenue DESC LIMIT 3;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query joins Categories, Products, and Order_Items to calculate the total revenue for each category by summing up the (quantity * price_per_unit) of all ordered items, then orders and limits the results to the top 3."
List each customer and the total number of orders they have placed.,"SELECT C.first_name, C.last_name, (SELECT COUNT(O.order_id) FROM Orders O WHERE O.customer_id = C.customer_id) AS number_of_orders FROM Customers C;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a correlated subquery to count the number of orders for each customer directly within the SELECT statement, showing each customer's name alongside their total order count."
Find customers who registered in 2022 and placed an order in 2023.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y', C.registration_date) = '2022' AND STRFTIME('%Y', O.order_date) = '2023';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins Customers and Orders, then filters for customers whose registration_date is in 2022 and who also have an order_date in 2023."
Delete all orders that were placed by customers from 'Chicago'.,DELETE FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE city = 'Chicago');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query deletes orders from the Orders table where the customer_id corresponds to a customer located in 'Chicago', identified by a subquery."
Update the status of orders placed by customers named 'John Doe' to 'Completed'.,UPDATE Orders SET status = 'Completed' WHERE customer_id = (SELECT customer_id FROM Customers WHERE first_name = 'John' AND last_name = 'Doe');,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query updates the 'status' of orders to 'Completed' for a specific customer named 'John Doe' by using a subquery to find their customer_id.
Find all products that are not currently in any order item.,SELECT P.product_name FROM Products P LEFT JOIN Order_Items OI ON P.product_id = OI.product_id WHERE OI.item_id IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query uses a LEFT JOIN to include all products and their associated order items. By filtering for where the order_item_id is NULL, it identifies products that have not been included in any order."
Count how many unique products each supplier provides.,"SELECT S.supplier_name, COUNT(DISTINCT PS.product_id) AS unique_products_supplied FROM Suppliers S JOIN Product_Suppliers PS ON S.supplier_id = PS.supplier_id GROUP BY S.supplier_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, contact_email TEXT, country TEXT); CREATE TABLE Product_Suppliers (product_id INTEGER, supplier_id INTEGER, PRIMARY KEY (product_id, supplier_id), FOREIGN KEY (product_id) REFERENCES Products(product_id), FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id));","This query joins Suppliers with the Product_Suppliers linking table, then groups by supplier name and counts the distinct product IDs to determine how many unique products each supplier offers."
Which customer placed the single largest order (by total amount)?,"SELECT C.first_name, C.last_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id ORDER BY O.total_amount DESC LIMIT 1;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins Customers and Orders, orders the results by the total amount of orders in descending order, and then limits the result to the top one to find the customer who placed the largest single order."
Calculate the total sales value for each product category for orders placed in the last 6 months.,"SELECT C.category_name, SUM(OI.quantity * OI.price_per_unit) AS total_category_sales FROM Categories C JOIN Products P ON C.category_id = P.category_id JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id WHERE O.order_date >= STRFTIME('%Y-%m-%d %H:%M:%S', DATE('now', '-6 months')) GROUP BY C.category_name;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id), FOREIGN KEY (order_id) REFERENCES Orders(order_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query joins Categories, Products, Order_Items, and Orders to calculate total sales for each product category. It filters orders to only include those placed in the last 6 months using SQLite's date functions."
Find products whose unit price is higher than the average unit price of products in their respective category.,"SELECT P1.product_name, P1.unit_price FROM Products P1 WHERE P1.unit_price > (SELECT AVG(P2.unit_price) FROM Products P2 WHERE P2.category_id = P1.category_id);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL);","This query uses a correlated subquery to compare each product's unit price against the average unit price of all products within its own category, listing products that are more expensive than their category average."
List the names of customers who have ordered at least one 'Smartphone'.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.product_name = 'Smartphone';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL);","This query joins Customers, Orders, Order_Items, and Products to find customers who have purchased a product specifically named 'Smartphone'."
Show departments that currently have no employees assigned to them.,SELECT D.department_name FROM Departments D LEFT JOIN Employees E ON D.department_id = E.department_id WHERE E.employee_id IS NULL;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, position TEXT, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query performs a LEFT JOIN from Departments to Employees. If a department has no matching employees, the employee columns will be NULL, allowing filtering to find empty departments."
List employees who are managers and oversee more than 2 employees.,"SELECT M.first_name, M.last_name FROM Employees E JOIN Employees M ON E.manager_id = M.employee_id GROUP BY M.employee_id, M.first_name, M.last_name HAVING COUNT(E.employee_id) > 2;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, position TEXT, department_id INTEGER, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This query uses a self-join to link employees to their managers. It then groups by manager and counts the number of employees reporting to each manager, filtering for managers with more than 2 direct reports."
"List products and their total quantity sold in November 2023, ordered by total quantity sold descending.","SELECT P.product_name, SUM(OI.quantity) AS total_quantity_sold FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id WHERE STRFTIME('%Y-%m', O.order_date) = '2023-11' GROUP BY P.product_name ORDER BY total_quantity_sold DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id), FOREIGN KEY (order_id) REFERENCES Orders(order_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query joins Products, Order_Items, and Orders to calculate the total quantity sold for each product. It filters orders to November 2023 and orders the results by the total quantity sold."
Find customers who have placed orders for products from every single product category.,"SELECT C.first_name, C.last_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY C.customer_id, C.first_name, C.last_name HAVING COUNT(DISTINCT P.category_id) = (SELECT COUNT(DISTINCT category_id) FROM Categories);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);","This query joins customers with their ordered products and categories. It then groups by customer and counts the distinct categories they've ordered from, comparing this count to the total number of distinct categories in the database to find customers who've ordered from every category."
Calculate the average total order amount for customers residing in 'London'.,SELECT AVG(O.total_amount) AS average_london_order FROM Orders O JOIN Customers C ON O.customer_id = C.customer_id WHERE C.city = 'London';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins Orders and Customers, filters for customers in 'London', and then calculates the average of their total_amount from the orders."
Find products that do not have any supplier associated with them.,SELECT P.product_name FROM Products P LEFT JOIN Product_Suppliers PS ON P.product_id = PS.product_id WHERE PS.supplier_id IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL); CREATE TABLE Product_Suppliers (product_id INTEGER, supplier_id INTEGER, PRIMARY KEY (product_id, supplier_id), FOREIGN KEY (product_id) REFERENCES Products(product_id), FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, contact_email TEXT, country TEXT);","This query uses a LEFT JOIN to combine Products with Product_Suppliers. Products without a supplier will have NULL values in the Product_Suppliers columns, which is used to filter them out."
Calculate the total monetary value of stock for each product category.,"SELECT C.category_name, SUM(P.stock_quantity * P.unit_price) AS total_stock_value FROM Categories C JOIN Products P ON C.category_id = P.category_id GROUP BY C.category_name ORDER BY total_stock_value DESC;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, stock_quantity INTEGER, unit_price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id));","This query joins Categories and Products, then groups by category name and calculates the sum of (stock_quantity * unit_price) for all products within each category to find the total stock value."
Retrieve all information about products.,SELECT * FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects all columns from the 'Products' table, effectively retrieving every piece of information available for each product."
List the names and prices of all products.,"SELECT product_name, price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query retrieves specific columns: 'product_name' and 'price' from the 'Products' table, showing only these two details for each product."
Show the employee's full name and their salary.,"SELECT first_name || ' ' || last_name AS full_name, salary FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, salary REAL, hire_date TEXT);","This query concatenates the 'first_name' and 'last_name' columns to create a 'full_name' alias, alongside the 'salary', for each employee."
Get the unique categories of products available.,SELECT DISTINCT category FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects only the unique values from the 'category' column in the 'Products' table, avoiding duplicate category entries."
"Find the product name and its price, labeling the price column as 'Item_Cost'.","SELECT product_name, price AS Item_Cost FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects the 'product_name' and 'price' from the 'Products' table, renaming the 'price' column to 'Item_Cost' in the output."
"Display order IDs and the total amount, where total amount is calculated as quantity multiplied by unit price, aliased as 'Order_Total'.","SELECT order_id, quantity * unit_price AS Order_Total FROM OrderItems;","CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","This query retrieves the 'order_id' and calculates a new column, 'Order_Total', by multiplying 'quantity' and 'unit_price' for each item in 'OrderItems'."
"List customer IDs and their names, aliasing customer_id as 'Client_Identifier' and customer_name as 'Client_Name'.","SELECT customer_id AS Client_Identifier, customer_name AS Client_Name FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, phone_number TEXT);","This query selects 'customer_id' and 'customer_name' from the 'Customers' table, assigning new aliases 'Client_Identifier' and 'Client_Name' to them respectively."
Show the title and release year of all movies.,"SELECT title, release_year FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT);",This query fetches the 'title' and 'release_year' columns for all entries in the 'Movies' table.
"For each employee, show their full name, and also their email address, aliased as 'Contact_Email'.","SELECT first_name || ' ' || last_name AS full_name, email AS Contact_Email FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, salary REAL, hire_date TEXT);","This query combines first and last names into a 'full_name' alias and renames 'email' to 'Contact_Email' for clarity, retrieving these details for all employees."
"Get the product ID, product name, and the price increased by 10%, aliasing the new price as 'New_Price'.","SELECT product_id, product_name, price * 1.10 AS New_Price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query retrieves the 'product_id', 'product_name', and a calculated 'New_Price' (10% higher than original price) for all products."
List all departments and their locations.,"SELECT department_name, location FROM Departments;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",This query selects the 'department_name' and 'location' columns from the 'Departments' table.
"Display the product name and its stock quantity, aliasing 'stock_quantity' as 'In_Stock'.","SELECT product_name, stock_quantity AS In_Stock FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query fetches the 'product_name' and renames 'stock_quantity' to 'In_Stock' for all products.
"Retrieve the order ID and the date the order was placed, aliasing the date column as 'Order_Date'.","SELECT order_id, order_date AS Order_Date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query selects 'order_id' and renames 'order_date' to 'Order_Date' from the 'Orders' table, showing when each order was made."
Show all columns from the 'Students' table.,SELECT * FROM Students;,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, enrollment_date TEXT, major TEXT);",This query retrieves all data for every student recorded in the 'Students' table.
"Get the product name and price, but only for products in the 'Electronics' category.","SELECT product_name, price FROM Products WHERE category = 'Electronics';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects 'product_name' and 'price' only for products whose 'category' is 'Electronics'.
List the customer name and their email address.,"SELECT customer_name, email FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, phone_number TEXT);",This query fetches the 'customer_name' and 'email' for all entries in the 'Customers' table.
"Show product names and their category, ordered by category alphabetically.","SELECT product_name, category FROM Products ORDER BY category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query retrieves 'product_name' and 'category' from 'Products', then sorts the results by the 'category' column in ascending order."
Display the first 5 employees' names and salaries.,"SELECT first_name, last_name, salary FROM Employees LIMIT 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, salary REAL, hire_date TEXT);","This query selects the 'first_name', 'last_name', and 'salary' for the first 5 records encountered in the 'Employees' table."
"Get the book title and author, aliasing 'title' as 'Book_Title' and 'author' as 'Book_Author'.","SELECT title AS Book_Title, author AS Book_Author FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_year INTEGER, genre TEXT);","This query selects the 'title' and 'author' from the 'Books' table, giving them more descriptive aliases 'Book_Title' and 'Book_Author'."
"Retrieve the product ID and the amount of stock, aliased as 'Current_Stock_Level'.","SELECT product_id, stock_quantity AS Current_Stock_Level FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects 'product_id' and 'stock_quantity' from 'Products', renaming 'stock_quantity' to 'Current_Stock_Level' for clarity."
"Show customer name and the length of their email address, aliased as 'Email_Length'.","SELECT customer_name, LENGTH(email) AS Email_Length FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, phone_number TEXT);","This query retrieves the 'customer_name' and calculates the length of their 'email' address, aliasing it as 'Email_Length'."
"List all order IDs and the date of the order, formatted as 'YYYY-MM-DD'.","SELECT order_id, SUBSTR(order_date, 1, 10) AS Formatted_Order_Date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query selects 'order_id' and extracts the first 10 characters (assuming 'YYYY-MM-DD HH:MM:SS' format) from 'order_date', aliasing it as 'Formatted_Order_Date'."
"For each employee, list their full name, and how many years they have worked, aliased as 'Years_Employed'.","SELECT first_name || ' ' || last_name AS full_name, CAST(JULIANDAY('now') - JULIANDAY(hire_date) AS REAL) / 365.25 AS Years_Employed FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, salary REAL, hire_date TEXT);","This query calculates the number of years an employee has worked by finding the difference in Julian days between 'now' and 'hire_date', then dividing by the average number of days in a year, aliasing the result as 'Years_Employed'."
Get the distinct genres of movies.,SELECT DISTINCT genre FROM Movies;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT);",This query retrieves all unique values from the 'genre' column in the 'Movies' table.
"Show the product ID, product name, and the absolute value of the price (if prices could be negative for some reason), aliased as 'Absolute_Price'.","SELECT product_id, product_name, ABS(price) AS Absolute_Price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects 'product_id', 'product_name', and the absolute value of 'price', aliasing it as 'Absolute_Price', from the 'Products' table."
"Retrieve the order ID and the total amount rounded to two decimal places, aliased as 'Rounded_Total'.","SELECT order_id, ROUND(total_amount, 2) AS Rounded_Total FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query selects 'order_id' and the 'total_amount' rounded to two decimal places, aliasing the result as 'Rounded_Total', from the 'Orders' table."
"List all courses, displaying their title and the department they belong to, aliasing 'course_title' as 'Course_Name'.","SELECT course_title AS Course_Name, department FROM Courses;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_title TEXT, department TEXT, credits INTEGER);",This query selects 'course_title' (aliased as 'Course_Name') and 'department' from the 'Courses' table.
"Show employee ID and the number of characters in their first name, aliased as 'FirstName_Length'.","SELECT employee_id, LENGTH(first_name) AS FirstName_Length FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, salary REAL, hire_date TEXT);","This query retrieves the 'employee_id' and calculates the length of the 'first_name', aliasing it as 'FirstName_Length'."
Get product names and their category for all items with a stock quantity greater than 0.,"SELECT product_name, category FROM Products WHERE stock_quantity > 0;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects 'product_name' and 'category' for products that have a 'stock_quantity' greater than 0, meaning they are currently in stock."
"Display order IDs and the year the order was placed, aliased as 'Order_Year'.","SELECT order_id, STRFTIME('%Y', order_date) AS Order_Year FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query selects 'order_id' and extracts the year from the 'order_date' column using STRFTIME, aliasing it as 'Order_Year'."
Find all employees who work in department 101.,SELECT * FROM Employees WHERE department_id = 101;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, is_active BOOLEAN);",This query selects all columns from the 'Employees' table for rows where the 'department_id' is exactly 101.
List products that cost more than 50 dollars.,"SELECT product_name, price FROM Products WHERE price > 50.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT);",This query retrieves the name and price of products from the 'Products' table where the 'price' is greater than 50.00.
"Show all orders placed before January 1, 2023.","SELECT order_id, order_date, total_amount FROM Orders WHERE order_date < '2023-01-01';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects the order ID, order date, and total amount for orders from the 'Orders' table that were placed before January 1, 2023."
Get the names of employees whose salary is less than or equal to 60000.,"SELECT first_name, last_name, salary FROM Employees WHERE salary <= 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, is_active BOOLEAN);","This query returns the first name, last name, and salary for employees from the 'Employees' table whose salary is 60000 or less."
Find movies released in or after the year 2020.,"SELECT title, release_year FROM Movies WHERE release_year >= 2020;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL, duration_minutes INTEGER);",This query retrieves the title and release year of movies from the 'Movies' table that were released in 2020 or later.
List employees who are 'Manager' AND earn more than 75000.,"SELECT employee_id, first_name, job_title, salary FROM Employees WHERE job_title = 'Manager' AND salary > 75000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, is_active BOOLEAN);","This query selects the ID, first name, job title, and salary for employees who are 'Manager' and have a salary greater than 75000."
Show products that are in the 'Electronics' category OR have a stock quantity less than 10.,"SELECT product_name, category, stock_quantity FROM Products WHERE category = 'Electronics' OR stock_quantity < 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT);",This query retrieves products that are either in the 'Electronics' category or have less than 10 units in stock.
Find customers who are NOT from 'USA'.,"SELECT customer_name, country FROM Customers WHERE NOT country = 'USA';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, country TEXT);",This query selects the name and country of customers who are not located in 'USA'.
Get orders placed between '2023-01-01' and '2023-03-31' (inclusive).,"SELECT order_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-03-31';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects orders with an 'order_date' that falls within the specified date range, inclusive of the start and end dates."
List employees whose job title is 'Developer' or 'Analyst' and have a salary above 80000.,"SELECT first_name, last_name, job_title, salary FROM Employees WHERE (job_title = 'Developer' OR job_title = 'Analyst') AND salary > 80000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, is_active BOOLEAN);",This query retrieves employees who are either 'Developer' or 'Analyst' and simultaneously have a salary greater than 80000.
Show products whose category is 'Books' and price is NOT between 10 and 30.,"SELECT product_name, category, price FROM Products WHERE category = 'Books' AND price NOT BETWEEN 10.00 AND 30.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT);",This query selects products from the 'Books' category whose price is outside the range of 10 to 30.
"Find customers from 'London', 'Paris', or 'Berlin'.","SELECT customer_name, city FROM Customers WHERE city IN ('London', 'Paris', 'Berlin');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, country TEXT);","This query returns customers whose city is one of 'London', 'Paris', or 'Berlin'."
Get employees whose first name starts with 'J'.,"SELECT first_name, last_name FROM Employees WHERE first_name LIKE 'J%';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, is_active BOOLEAN);",This query selects employees whose first name begins with the letter 'J'.
List products that do NOT contain 'Pro' in their name.,SELECT product_name FROM Products WHERE product_name NOT LIKE '%Pro%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT);",This query finds products whose names do not include the substring 'Pro'.
Show orders that have a NULL status.,"SELECT order_id, customer_id FROM Orders WHERE status IS NULL;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query retrieves orders where the 'status' column has a NULL value.
Find employees who are active (is_active is TRUE) and were hired after '2022-06-01'.,"SELECT employee_id, first_name, hire_date FROM Employees WHERE is_active = TRUE AND hire_date > '2022-06-01';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, is_active BOOLEAN);","This query selects active employees who were hired after June 1, 2022."
Get the titles of movies with a rating greater than 8.0 AND duration between 90 and 120 minutes.,SELECT title FROM Movies WHERE rating > 8.0 AND duration_minutes BETWEEN 90 AND 120;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL, duration_minutes INTEGER);",This query retrieves movie titles for movies with a rating above 8.0 and a duration between 90 and 120 minutes.
List products that have been restocked in the last 30 days.,"SELECT product_name, last_restock_date FROM Products WHERE last_restock_date >= DATE('now', '-30 days');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT);",This query selects products that were restocked within the last 30 days from the current date.
"Show all students whose GPA is between 3.5 and 4.0, inclusive.","SELECT first_name, last_name, gpa FROM Students WHERE gpa BETWEEN 3.5 AND 4.0;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT, gpa REAL, enrollment_date TEXT, is_full_time BOOLEAN);",This query retrieves the names and GPA of students whose GPA falls within the range of 3.5 to 4.0.
Find customers whose email does NOT contain '@example.com' or whose city is 'New York'.,"SELECT customer_name, email, city FROM Customers WHERE email NOT LIKE '%@example.com%' OR city = 'New York';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, country TEXT);",This query selects customers whose email address does not contain '@example.com' or whose city is 'New York'.
Get employees who are NOT 'HR Specialist' and are NOT in department 103.,"SELECT employee_id, first_name, job_title, department_id FROM Employees WHERE NOT (job_title = 'HR Specialist' OR department_id = 103);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, is_active BOOLEAN);",This query selects employees who are neither 'HR Specialist' nor belong to department 103.
"List products with a price less than 20 OR a stock quantity less than 5, but NOT in the 'Food' category.","SELECT product_name, price, stock_quantity, category FROM Products WHERE (price < 20.00 OR stock_quantity < 5) AND category != 'Food';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT);","This query finds products that are either inexpensive (price < 20) or low in stock (quantity < 5), but explicitly excludes any products categorized as 'Food'."
Show details of orders with a total amount greater than the average total amount of all orders.,"SELECT order_id, total_amount FROM Orders WHERE total_amount > (SELECT AVG(total_amount) FROM Orders);","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects orders whose total amount is greater than the calculated average total amount of all orders in the 'Orders' table.
Find departments that have employees with a salary over 100000.,SELECT DISTINCT D.department_name FROM Departments D JOIN Employees E ON D.department_id = E.department_id WHERE E.salary > 100000;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, is_active BOOLEAN);
CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",This query joins 'Departments' and 'Employees' tables to find the names of departments that have at least one employee earning more than 100000.
"List students who are full-time AND have a GPA higher than 3.0, but were enrolled after '2023-01-01'.","SELECT first_name, last_name, gpa, enrollment_date FROM Students WHERE is_full_time = TRUE AND gpa > 3.0 AND enrollment_date > '2023-01-01';","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, major TEXT, gpa REAL, enrollment_date TEXT, is_full_time BOOLEAN);","This query selects full-time students with a GPA over 3.0 who enrolled after January 1, 2023."
"Show products that are not 'Electronics' and are not 'Books', and have a price between 25 and 75.","SELECT product_name, category, price FROM Products WHERE category NOT IN ('Electronics', 'Books') AND price BETWEEN 25.00 AND 75.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT);",This query selects products that are not categorized as 'Electronics' or 'Books' and have a price between 25 and 75.
Find orders that are 'Pending' or 'Processing' AND placed by customers living in 'France'.,"SELECT O.order_id, O.status, C.customer_name, C.country FROM Orders O JOIN Customers C ON O.customer_id = C.customer_id WHERE (O.status = 'Pending' OR O.status = 'Processing') AND C.country = 'France';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);
CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT, country TEXT);",This query joins 'Orders' and 'Customers' tables to find orders that are 'Pending' or 'Processing' and were placed by customers residing in 'France'.
Get movies with a title containing 'The' and a genre of 'Action' or 'Comedy'.,"SELECT title, genre FROM Movies WHERE title LIKE '%The%' AND (genre = 'Action' OR genre = 'Comedy');","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT, rating REAL, duration_minutes INTEGER);",This query selects movies whose title includes 'The' and whose genre is either 'Action' or 'Comedy'.
List employees who were hired after '2020-01-01' but whose salary is NOT greater than 90000.,"SELECT first_name, last_name, hire_date, salary FROM Employees WHERE hire_date > '2020-01-01' AND NOT salary > 90000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, job_title TEXT, is_active BOOLEAN);","This query retrieves employees hired after January 1, 2020, whose salary is 90000 or less."
Show products that have a stock quantity between 20 and 50 and whose name starts with 'A' or 'B'.,"SELECT product_name, stock_quantity FROM Products WHERE stock_quantity BETWEEN 20 AND 50 AND (product_name LIKE 'A%' OR product_name LIKE 'B%');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT);","This query selects products with a stock quantity between 20 and 50, and whose name begins with either 'A' or 'B'."
"List the names of all customers who have placed an order, along with their order IDs.","SELECT C.customer_name, O.order_id FROM Customers AS C INNER JOIN Orders AS O ON C.customer_id = O.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",This query joins the Customers table with the Orders table on the customer_id to retrieve the name of each customer and the ID of the orders they have placed.
Find the names of products in the 'Electronics' category.,SELECT P.product_name FROM Products AS P INNER JOIN Categories AS C ON P.category_id = C.category_id WHERE C.category_name = 'Electronics';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);",This query joins Products with Categories to filter for products belonging to the 'Electronics' category and returns their names.
Count the number of employees in each department.,"SELECT D.department_name, COUNT(E.employee_id) AS num_employees FROM Departments AS D INNER JOIN Employees AS E ON D.department_id = E.department_id GROUP BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","This query joins Employees and Departments, then groups the results by department name to count the number of employees in each department."
"Get a list of all books, their authors, and their publishers.","SELECT B.title, A.author_name, P.publisher_name FROM Books AS B INNER JOIN Authors AS A ON B.author_id = A.author_id INNER JOIN Publishers AS P ON B.publisher_id = P.publisher_id;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT);","This query joins Books with Authors on author_id and then with Publishers on publisher_id to retrieve the title, author's name, and publisher's name for each book."
Calculate the total quantity ordered for each product.,"SELECT P.product_name, SUM(OI.quantity) AS total_quantity_ordered FROM Products AS P INNER JOIN Order_Items AS OI ON P.product_id = OI.product_id GROUP BY P.product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_order REAL);",This query joins Products with Order_Items on product_id to sum the quantity of each product ordered across all orders.
List the names of all students enrolled in the 'Mathematics' course.,SELECT S.student_name FROM Students AS S INNER JOIN Enrollments AS E ON S.student_id = E.student_id INNER JOIN Courses AS C ON E.course_id = C.course_id WHERE C.course_name = 'Mathematics';,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT);","This query joins Students, Enrollments, and Courses to find the names of students who are specifically enrolled in the 'Mathematics' course."
Show the names of all employees who are assigned to at least one project.,"SELECT DISTINCT E.first_name, E.last_name FROM Employees AS E INNER JOIN Project_Assignments AS PA ON E.employee_id = PA.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE Project_Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, start_date TEXT);","This query joins Employees with Project_Assignments to find all employees who have an assignment, using DISTINCT to avoid duplicate names for employees assigned to multiple projects."
Find suppliers who supply products with a price greater than 50.,SELECT DISTINCT S.supplier_name FROM Suppliers AS S INNER JOIN Products AS P ON S.supplier_id = P.supplier_id WHERE P.price > 50.0;,"CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, contact_person TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, supplier_id INTEGER, price REAL);","This query joins Suppliers with Products and then filters for products with a price greater than 50, returning the unique names of the suppliers for those products."
List all events scheduled in 'New York' after '2023-01-01'.,"SELECT E.event_name, V.venue_name FROM Events AS E INNER JOIN Venues AS V ON E.venue_id = V.venue_id WHERE V.city = 'New York' AND E.event_date > '2023-01-01';","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, venue_id INTEGER); CREATE TABLE Venues (venue_id INTEGER PRIMARY KEY, venue_name TEXT, city TEXT, capacity INTEGER);","This query joins Events and Venues to find events that are located in 'New York' and are scheduled after January 1, 2023."
"List all appointments, showing the patient name, doctor name, and appointment date, ordered by appointment date.","SELECT P.patient_name, D.doctor_name, A.appointment_date FROM Patients AS P INNER JOIN Appointments AS A ON P.patient_id = A.patient_id INNER JOIN Doctors AS D ON A.doctor_id = D.doctor_id ORDER BY A.appointment_date;","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT, dob TEXT); CREATE TABLE Doctors (doctor_id INTEGER PRIMARY KEY, doctor_name TEXT, specialty TEXT); CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, appointment_date TEXT, appointment_time TEXT);","This query joins Patients, Appointments, and Doctors to get a comprehensive list of appointments, ordered by their date."
"For each genre, list the number of movies available.","SELECT G.genre_name, COUNT(MG.movie_id) AS number_of_movies FROM Genres AS G INNER JOIN Movie_Genres AS MG ON G.genre_id = MG.genre_id GROUP BY G.genre_name;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, release_year INTEGER); CREATE TABLE Genres (genre_id INTEGER PRIMARY KEY, genre_name TEXT); CREATE TABLE Movie_Genres (movie_genre_id INTEGER PRIMARY KEY, movie_id INTEGER, genre_id INTEGER);",This query joins Genres with Movie_Genres to count the total number of movies associated with each genre.
"List all flights, including their airline name, origin airport name, and destination airport name.","SELECT F.flight_number, A.airline_name, OA.airport_name AS origin_airport, DA.airport_name AS destination_airport FROM Flights AS F INNER JOIN Airlines AS A ON F.airline_id = A.airline_id INNER JOIN Airports AS OA ON F.origin_airport_id = OA.airport_id INNER JOIN Airports AS DA ON F.destination_airport_id = DA.airport_id;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT, airline_id INTEGER, origin_airport_id INTEGER, destination_airport_id INTEGER, departure_time TEXT); CREATE TABLE Airlines (airline_id INTEGER PRIMARY KEY, airline_name TEXT); CREATE TABLE Airports (airport_id INTEGER PRIMARY KEY, airport_name TEXT, city TEXT, iata_code TEXT);","This query joins Flights with Airlines to get the airline name, and then joins twice with the Airports table (once for origin, once for destination) to get the names of both airports for each flight."
"Find all books published by 'Penguin Random House' after the year 2000, along with their authors.","SELECT B.title, A.author_name FROM Books AS B INNER JOIN Publishers AS P ON B.publisher_id = P.publisher_id INNER JOIN Authors AS A ON B.author_id = A.author_id WHERE P.publisher_name = 'Penguin Random House' AND B.publication_year > 2000;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT);","This query joins Books, Publishers, and Authors, filtering for books published by 'Penguin Random House' after 2000, then returning the book title and author name."
"For each user, count the number of comments they have made on posts, but only for posts created in 2023.","SELECT U.username, COUNT(C.comment_id) AS num_comments FROM Users AS U INNER JOIN Comments AS C ON U.user_id = C.user_id INNER JOIN Posts AS P ON C.post_id = P.post_id WHERE STRFTIME('%Y', P.created_at) = '2023' GROUP BY U.username;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, email TEXT); CREATE TABLE Posts (post_id INTEGER PRIMARY KEY, user_id INTEGER, title TEXT, content TEXT, created_at TEXT); CREATE TABLE Comments (comment_id INTEGER PRIMARY KEY, post_id INTEGER, user_id INTEGER, comment_text TEXT, created_at TEXT);","This query joins Users with Comments to identify who made which comment, then joins with Posts to filter for comments made on posts created in 2023, finally counting these comments per user."
List each employee along with their manager's name and their respective department names.,"SELECT E.first_name || ' ' || E.last_name AS employee_name, M.first_name || ' ' || M.last_name AS manager_name, D_E.department_name AS employee_department, D_M.department_name AS manager_department FROM Employees AS E INNER JOIN Employees AS M ON E.manager_id = M.employee_id INNER JOIN Departments AS D_E ON E.department_id = D_E.department_id INNER JOIN Departments AS D_M ON M.department_id = D_M.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","This query uses a self-join on the Employees table to link employees to their managers, and then joins twice with the Departments table to get the department names for both the employee and their manager."
Calculate the average salary of instructors for each department that offers courses.,"SELECT D.department_name, AVG(I.salary) AS average_instructor_salary FROM Departments AS D INNER JOIN Courses AS C ON D.department_id = C.department_id INNER JOIN Instructors AS I ON C.instructor_id = I.instructor_id GROUP BY D.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, instructor_id INTEGER); CREATE TABLE Instructors (instructor_id INTEGER PRIMARY KEY, instructor_name TEXT, salary REAL, department_id INTEGER);","This query joins Departments, Courses, and Instructors to calculate the average salary of instructors, grouped by their respective departments that offer courses."
Find all shipments that were handled by 'FedEx' and destined for a customer named 'Alice Wonderland'.,"SELECT S.tracking_number, S.shipment_date FROM Shipments AS S INNER JOIN Carriers AS CR ON S.carrier_id = CR.carrier_id INNER JOIN Customers AS CU ON S.customer_id = CU.customer_id WHERE CR.carrier_name = 'FedEx' AND CU.customer_name = 'Alice Wonderland';","CREATE TABLE Shipments (shipment_id INTEGER PRIMARY KEY, tracking_number TEXT, carrier_id INTEGER, customer_id INTEGER, shipment_date TEXT); CREATE TABLE Carriers (carrier_id INTEGER PRIMARY KEY, carrier_name TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, address TEXT);",This query joins Shipments with Carriers and Customers to find shipments that meet the specified criteria (FedEx carrier and 'Alice Wonderland' customer).
List all products in 'Warehouse A' that have less than 100 units in stock.,"SELECT P.product_name, I.stock_quantity FROM Products AS P INNER JOIN Inventory AS I ON P.product_id = I.product_id INNER JOIN Warehouses AS W ON I.warehouse_id = W.warehouse_id WHERE W.warehouse_name = 'Warehouse A' AND I.stock_quantity < 100;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT); CREATE TABLE Inventory (inventory_id INTEGER PRIMARY KEY, product_id INTEGER, warehouse_id INTEGER, stock_quantity INTEGER); CREATE TABLE Warehouses (warehouse_id INTEGER PRIMARY KEY, warehouse_name TEXT, location TEXT);","This query joins Products, Inventory, and Warehouses to identify products with less than 100 units in 'Warehouse A'."
Get all orders placed by customers from 'California' and processed by an employee from the 'Sales' department.,"SELECT O.order_id, C.customer_name, E.first_name || ' ' || E.last_name AS employee_name FROM Orders AS O INNER JOIN Customers AS C ON O.customer_id = C.customer_id INNER JOIN Employees AS E ON O.employee_id = E.employee_id INNER JOIN Departments AS D ON E.department_id = D.department_id WHERE C.state = 'California' AND D.department_name = 'Sales';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, employee_id INTEGER, order_date TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, state TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","This query links Orders to Customers and Employees (who processed the order), then to Departments to filter orders based on customer state and employee department."
List all unique categories that have at least one article written by an author named 'Jane Doe'.,SELECT DISTINCT CAT.category_name FROM Categories AS CAT INNER JOIN Articles AS ART ON CAT.category_id = ART.category_id INNER JOIN Authors AS AUTH ON ART.author_id = AUTH.author_id WHERE AUTH.author_name = 'Jane Doe';,"CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT); CREATE TABLE Articles (article_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, category_id INTEGER, publish_date TEXT); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);","This query joins Categories, Articles, and Authors to find distinct category names for articles written by 'Jane Doe'."
"Find the latest medical record date for each patient, along with the doctor's name who made that record.","SELECT P.patient_name, MR.record_date, D.doctor_name FROM Patients AS P INNER JOIN Medical_Records AS MR ON P.patient_id = MR.patient_id INNER JOIN Doctors AS D ON MR.doctor_id = D.doctor_id WHERE MR.record_date IN (SELECT MAX(record_date) FROM Medical_Records WHERE patient_id = P.patient_id);","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT, dob TEXT); CREATE TABLE Doctors (doctor_id INTEGER PRIMARY KEY, doctor_name TEXT, specialty TEXT); CREATE TABLE Medical_Records (record_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, record_date TEXT, diagnosis TEXT);","This query joins Patients, Medical_Records, and Doctors. It uses a subquery to find the maximum record date for each patient, ensuring that only the latest record and its corresponding doctor are displayed."
List all players in 'Team A' who play as 'Forward'.,SELECT PL.player_name FROM Players AS PL INNER JOIN Teams AS T ON PL.team_id = T.team_id INNER JOIN Positions AS PO ON PL.position_id = PO.position_id WHERE T.team_name = 'Team A' AND PO.position_name = 'Forward';,"CREATE TABLE Teams (team_id INTEGER PRIMARY KEY, team_name TEXT, city TEXT); CREATE TABLE Players (player_id INTEGER PRIMARY KEY, player_name TEXT, team_id INTEGER, position_id INTEGER); CREATE TABLE Positions (position_id INTEGER PRIMARY KEY, position_name TEXT);","This query joins Players, Teams, and Positions to find players who belong to 'Team A' and play the 'Forward' position."
Find all parts ordered that are supplied by 'Global Supplies Corp'.,SELECT DISTINCT P.part_name FROM Parts AS P INNER JOIN Suppliers AS S ON P.supplier_id = S.supplier_id INNER JOIN Order_Items AS OI ON P.part_id = OI.part_id WHERE S.supplier_name = 'Global Supplies Corp';,"CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT); CREATE TABLE Parts (part_id INTEGER PRIMARY KEY, part_name TEXT, supplier_id INTEGER, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, part_id INTEGER, quantity INTEGER);","This query joins Parts, Suppliers, and Order_Items to list unique names of parts that are supplied by 'Global Supplies Corp' and have been included in an order."
List all departments and their employees who earn more than 60000.,"SELECT D.department_name, E.first_name, E.last_name FROM Departments AS D INNER JOIN Employees AS E ON D.department_id = E.department_id WHERE E.salary > 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",This query joins Departments and Employees to list employees earning more than 60000 along with their department names.
What is the total revenue generated from 'Laptop Pro' sales to 'Tech Innovations Inc.'?,SELECT SUM(S.quantity * S.price) AS total_revenue FROM Sales AS S INNER JOIN Products AS P ON S.product_id = P.product_id INNER JOIN Customers AS C ON S.customer_id = C.customer_id WHERE P.product_name = 'Laptop Pro' AND C.customer_name = 'Tech Innovations Inc.';,"CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, customer_id INTEGER, quantity INTEGER, price REAL, sale_date TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT);","This query joins Sales, Products, and Customers to calculate the total revenue for 'Laptop Pro' sold to 'Tech Innovations Inc.'."
Find all rock concerts scheduled at 'The Grand Arena'.,"SELECT C.concert_name, B.band_name FROM Concerts AS C INNER JOIN Bands AS B ON C.band_id = B.band_id INNER JOIN Venues AS V ON C.venue_id = V.venue_id WHERE B.genre = 'Rock' AND V.venue_name = 'The Grand Arena';","CREATE TABLE Concerts (concert_id INTEGER PRIMARY KEY, concert_name TEXT, band_id INTEGER, venue_id INTEGER, concert_date TEXT); CREATE TABLE Bands (band_id INTEGER PRIMARY KEY, band_name TEXT, genre TEXT); CREATE TABLE Venues (venue_id INTEGER PRIMARY KEY, venue_name TEXT, city TEXT);","This query joins Concerts, Bands, and Venues to find concerts by 'Rock' bands specifically at 'The Grand Arena'."
List films directed by 'Quentin Tarantino' that also star 'Samuel L. Jackson'.,SELECT DISTINCT F.title FROM Films AS F INNER JOIN Directors AS D ON F.director_id = D.director_id INNER JOIN Film_Actors AS FA ON F.film_id = FA.film_id INNER JOIN Actors AS A ON FA.actor_id = A.actor_id WHERE D.director_name = 'Quentin Tarantino' AND A.actor_name = 'Samuel L. Jackson';,"CREATE TABLE Films (film_id INTEGER PRIMARY KEY, title TEXT, director_id INTEGER, release_year INTEGER); CREATE TABLE Directors (director_id INTEGER PRIMARY KEY, director_name TEXT); CREATE TABLE Actors (actor_id INTEGER PRIMARY KEY, actor_name TEXT); CREATE TABLE Film_Actors (film_actor_id INTEGER PRIMARY KEY, film_id INTEGER, actor_id INTEGER);","This query joins Films, Directors, Film_Actors, and Actors to find films that are directed by 'Quentin Tarantino' and feature 'Samuel L. Jackson'."
"For each employee, list the projects they are assigned to and their specific role on that project.","SELECT E.first_name, E.last_name, P.project_name, PA.role FROM Employees AS E INNER JOIN Project_Assignments AS PA ON E.employee_id = PA.employee_id INNER JOIN Projects AS P ON PA.project_id = P.project_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, budget REAL); CREATE TABLE Project_Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, role TEXT, start_date TEXT);","This query joins Employees, Project_Assignments, and Projects to list each employee, the projects they are assigned to, and their role in each project."
Calculate the average rating for 'Italian' cuisine restaurants.,SELECT AVG(R.rating) AS average_italian_rating FROM Restaurants AS R INNER JOIN Cuisines AS C ON R.cuisine_id = C.cuisine_id INNER JOIN Reviews AS REV ON R.restaurant_id = REV.restaurant_id WHERE C.cuisine_name = 'Italian';,"CREATE TABLE Restaurants (restaurant_id INTEGER PRIMARY KEY, restaurant_name TEXT, cuisine_id INTEGER, address TEXT); CREATE TABLE Cuisines (cuisine_id INTEGER PRIMARY KEY, cuisine_name TEXT); CREATE TABLE Reviews (review_id INTEGER PRIMARY KEY, restaurant_id INTEGER, user_id INTEGER, rating INTEGER, review_text TEXT);","This query joins Restaurants, Cuisines, and Reviews to calculate the average rating for restaurants specifically serving 'Italian' cuisine."
Show the stock quantity of all products supplied by 'Acme Corp' located in 'Warehouse B'.,"SELECT P.product_name, I.stock_quantity FROM Products AS P INNER JOIN Inventory AS I ON P.product_id = I.product_id INNER JOIN Warehouses AS W ON I.warehouse_id = W.warehouse_id INNER JOIN Suppliers AS S ON P.supplier_id = S.supplier_id WHERE S.supplier_name = 'Acme Corp' AND W.warehouse_name = 'Warehouse B';","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, supplier_id INTEGER); CREATE TABLE Inventory (inventory_id INTEGER PRIMARY KEY, product_id INTEGER, warehouse_id INTEGER, stock_quantity INTEGER); CREATE TABLE Warehouses (warehouse_id INTEGER PRIMARY KEY, warehouse_name TEXT, location TEXT); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, city TEXT);","This query joins Products, Inventory, Warehouses, and Suppliers to find the stock quantity of products supplied by 'Acme Corp' and stored in 'Warehouse B'."
"List all customers and their order IDs if they have placed any orders. If a customer has no orders, still list them.","SELECT c.customer_id, c.name, o.order_id, o.order_date FROM Customers AS c LEFT JOIN Orders AS o ON c.customer_id = o.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id));","This query retrieves all customers from the 'Customers' table and, for each customer, attempts to find matching orders from the 'Orders' table. If a customer has no orders, their order-related columns will appear as NULL, ensuring all customers are listed."
Find all customers who have not placed any orders yet.,"SELECT c.customer_id, c.name FROM Customers AS c LEFT JOIN Orders AS o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id));","This query uses a LEFT JOIN to combine customers with their orders. By adding WHERE o.order_id IS NULL, it filters the results to only include customers for whom no matching order was found, effectively listing customers who have not placed any orders."
"For each customer, list their name and the total number of orders they have placed. Include customers who have not placed any orders, showing 0 for them.","SELECT c.name, COUNT(o.order_id) AS total_orders FROM Customers AS c LEFT JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name ORDER BY c.name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id));","This query uses a LEFT JOIN to include all customers. COUNT(o.order_id) counts only non-NULL order IDs, so customers without orders will correctly show a count of 0 after grouping."
List all product categories and the names of products belonging to them. Include categories that have no products.,"SELECT pc.category_name, p.product_name, p.price FROM ProductCategories AS pc LEFT JOIN Products AS p ON pc.category_id = p.category_id ORDER BY pc.category_name, p.product_name;","CREATE TABLE ProductCategories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL UNIQUE); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL, FOREIGN KEY (category_id) REFERENCES ProductCategories (category_id));","This query lists every product category. If a category has products, their names and prices are displayed. If a category has no products, the product-related columns will be NULL, ensuring all categories are listed."
"List all employees and their department names, but only show departments that are in 'New York'. Employees not in 'New York' departments should still be listed with NULL department info.","SELECT e.first_name, e.last_name, d.department_name FROM Employees AS e LEFT JOIN Departments AS d ON e.department_id = d.department_id AND d.location = 'New York';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments (department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query performs a LEFT JOIN. The ON clause includes an additional condition (d.location = 'New York'). This means only departments in 'New York' are joined. Employees whose department is not in 'New York' will still appear, but their department details will be NULL."
"List all users and their last login date. If a user has never logged in, show 'Never Logged In'.","SELECT u.user_name, COALESCE(MAX(l.login_date), 'Never Logged In') AS last_login FROM Users AS u LEFT JOIN Logins AS l ON u.user_id = l.user_id GROUP BY u.user_id, u.user_name ORDER BY u.user_name;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, user_name TEXT NOT NULL UNIQUE, email TEXT); CREATE TABLE Logins (login_id INTEGER PRIMARY KEY, user_id INTEGER NOT NULL, login_date TEXT NOT NULL, FOREIGN KEY (user_id) REFERENCES Users (user_id));",This query uses a LEFT JOIN to combine users with their login records. MAX(l.login_date) finds the latest login date. COALESCE is used to replace NULL (for users with no logins) with the string 'Never Logged In'.
"List all employees and all departments. Show which employee belongs to which department, and also departments without employees, and employees without departments.","SELECT e.employee_id, e.first_name, e.last_name, d.department_name FROM Employees AS e LEFT JOIN Departments AS d ON e.department_id = d.department_id UNION ALL SELECT NULL AS employee_id, NULL AS first_name, NULL AS last_name, d.department_name FROM Departments AS d LEFT JOIN Employees AS e ON d.department_id = e.department_id WHERE e.employee_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments (department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query emulates a FULL OUTER JOIN. The first LEFT JOIN gets all employees and their matching department. The UNION ALL adds results from the second LEFT JOIN, which gets all departments and their matching employees, but filtered to include only departments without employees (WHERE e.employee_id IS NULL)."
List all customers and their order IDs if they ordered at least one 'Electronics' product. Still show all customers even if they didn't order such a product.,"SELECT c.customer_id, c.name, o.order_id FROM Customers AS c LEFT JOIN Orders AS o ON c.customer_id = o.customer_id WHERE o.order_id IN (SELECT oi.order_id FROM Order_Items AS oi JOIN Products AS p ON oi.product_id = p.product_id WHERE p.category = 'Electronics') OR o.order_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders (order_id), FOREIGN KEY (product_id) REFERENCES Products (product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL);","This query uses a LEFT JOIN to get all customers and their orders. The WHERE clause filters orders to only those containing 'Electronics' products, but explicitly includes NULL order IDs, ensuring customers with no orders (or no orders matching the 'Electronics' criteria) are still listed."
"Show each customer's name and the count of unique products they have ordered. Include customers who haven't ordered anything, showing 0.","SELECT c.name, COUNT(DISTINCT oi.product_id) AS unique_products_ordered FROM Customers AS c LEFT JOIN Orders AS o ON c.customer_id = o.customer_id LEFT JOIN Order_Items AS oi ON o.order_id = oi.order_id GROUP BY c.customer_id, c.name ORDER BY c.name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders (order_id), FOREIGN KEY (product_id) REFERENCES Products (product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL);","This query performs two LEFT JOIN operations to link customers, orders, and order items. COUNT(DISTINCT oi.product_id) counts unique products. Since LEFT JOIN is used, customers with no orders or no order items will still be included, and COUNT will correctly return 0 for them."
List all artists and their albums released after 2010. Include artists who have no albums or no albums after 2010.,"SELECT a.artist_name, alb.album_title, alb.release_year FROM Artists AS a LEFT JOIN Albums AS alb ON a.artist_id = alb.artist_id AND alb.release_year > 2010 ORDER BY a.artist_name, alb.release_year;","CREATE TABLE Artists (artist_id INTEGER PRIMARY KEY, artist_name TEXT NOT NULL UNIQUE, genre TEXT); CREATE TABLE Albums (album_id INTEGER PRIMARY KEY, album_title TEXT NOT NULL, artist_id INTEGER NOT NULL, release_year INTEGER, FOREIGN KEY (artist_id) REFERENCES Artists (artist_id));","The LEFT JOIN includes a condition (alb.release_year > 2010) directly in the ON clause. This means that only albums matching this year criterion will be joined. Artists will still be listed even if they have no albums, or if all their albums were released in or before 2010."
"Display all students and all courses. Show student enrollment details where available. Also include students not enrolled in any course, and courses with no students enrolled.","SELECT s.student_id, s.first_name AS student_first_name, s.last_name AS student_last_name, c.course_id, c.course_name, e.enrollment_date, e.grade FROM Students AS s LEFT JOIN Enrollments AS e ON s.student_id = e.student_id LEFT JOIN Courses AS c ON e.course_id = c.course_id UNION ALL SELECT s.student_id, s.first_name, s.last_name, c.course_id, c.course_name, e.enrollment_date, e.grade FROM Courses AS c LEFT JOIN Enrollments AS e ON c.course_id = e.course_id LEFT JOIN Students AS s ON e.student_id = s.student_id WHERE s.student_id IS NULL AND e.enrollment_id IS NULL;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, date_of_birth TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL UNIQUE, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT, grade REAL, FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id));","This query performs a simulated FULL OUTER JOIN for Students and Courses through Enrollments. The first part gets all students and their enrollment details. The UNION ALL part adds courses that have no associated enrollments or students, ensuring all entities are covered."
"For each author, list their name and a comma-separated string of all book titles they have written. Include authors who haven't written any books.","SELECT a.first_name, a.last_name, GROUP_CONCAT(b.title, ', ') AS books_written FROM Authors AS a LEFT JOIN Books AS b ON a.author_id = b.author_id GROUP BY a.author_id, a.first_name, a.last_name ORDER BY a.last_name, a.first_name;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, nationality TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publication_year INTEGER, FOREIGN KEY (author_id) REFERENCES Authors (author_id));","This query uses a LEFT JOIN to ensure all authors are included. GROUP_CONCAT(b.title, ', ') combines all titles written by an author into a single string. For authors with no books, GROUP_CONCAT will return NULL, which appears as an empty string."
List all customers and the total quantity of 'Electronics' products they have ordered. Show 0 for customers who ordered none.,"SELECT c.customer_id, c.name, COALESCE(SUM(oi.quantity), 0) AS total_electronics_quantity FROM Customers AS c LEFT JOIN Orders AS o ON c.customer_id = o.customer_id LEFT JOIN Order_Items AS oi ON o.order_id = oi.order_id LEFT JOIN Products AS p ON oi.product_id = p.product_id WHERE p.category = 'Electronics' OR p.product_id IS NULL GROUP BY c.customer_id, c.name ORDER BY c.name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders (order_id), FOREIGN KEY (product_id) REFERENCES Products (product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL);","This query joins customers with their orders, order items, and products. The WHERE clause ensures that customers who do not have electronics orders are still included. COALESCE(SUM(oi.quantity), 0) correctly displays 0 for such customers."
List all departments and any projects associated with them. A project is considered associated if its name contains the department name. Include departments with no such projects.,"SELECT d.department_name, p.project_name FROM Departments AS d LEFT JOIN Projects AS p ON p.project_name LIKE '%' || d.department_name || '%' ORDER BY d.department_name, p.project_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL UNIQUE, location TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT);","This query performs a LEFT JOIN where the ON clause uses the LIKE operator to find projects whose names contain the department name. All departments are listed, with matching projects or NULL if no such project exists."
"Display all employees, their name, and their current job title. If an employee has no assigned job, indicate 'No Job Assigned'.","SELECT e.first_name, e.last_name, COALESCE(j.job_title, 'No Job Assigned') AS current_job_title FROM Employees AS e LEFT JOIN Jobs AS j ON e.job_id = j.job_id ORDER BY e.last_name, e.first_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, job_id INTEGER, FOREIGN KEY (job_id) REFERENCES Jobs (job_id)); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT NOT NULL UNIQUE, min_salary REAL, max_salary REAL);",This query uses a LEFT JOIN to combine employee information with their job details. COALESCE is used to replace NULL values in the job_title column (for employees without an assigned job) with the string 'No Job Assigned'.
"List all departments and count their employees. Include departments with no employees, and filter the result to show only departments with fewer than 3 employees.","SELECT d.department_name, COUNT(e.employee_id) AS num_employees FROM Departments AS d LEFT JOIN Employees AS e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name HAVING COUNT(e.employee_id) < 3 ORDER BY num_employees DESC, d.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments (department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query LEFT JOINs Departments with Employees to count employees per department, ensuring even empty departments are included. The HAVING clause then filters these grouped results to only show departments with less than 3 employees."
"List all employees, their name, and the name of their manager. If an employee does not have a manager, show NULL for the manager's name.","SELECT e.first_name || ' ' || e.last_name AS employee_name, m.first_name || ' ' || m.last_name AS manager_name FROM Employees AS e LEFT JOIN Employees AS m ON e.manager_id = m.employee_id ORDER BY employee_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees (employee_id));","This query uses a LEFT JOIN on the Employees table with itself (a self-join). It links employees to their managers via the manager_id column. Employees who do not have a manager_id will still be listed, with NULL in the manager_name column."
"Show each author's name and the average price of their books. Include authors who have no books, showing NULL for the average price.","SELECT a.first_name, a.last_name, AVG(b.price) AS average_book_price FROM Authors AS a LEFT JOIN Books AS b ON a.author_id = b.author_id GROUP BY a.author_id, a.first_name, a.last_name ORDER BY a.last_name, a.first_name;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, nationality TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publication_year INTEGER, FOREIGN KEY (author_id) REFERENCES Authors (author_id));","This query LEFT JOINs Authors with Books. AVG(b.price) calculates the average price. Because of the LEFT JOIN, authors without any books will still be included, and their average_book_price will be NULL."
"List all customers. Indicate if they have placed any order with a total amount greater than 500. If they only have orders below 500 or no orders, they should be marked as 'No High Value Order'.","SELECT c.customer_id, c.name, CASE WHEN MAX(o.total_amount) > 500 THEN 'Yes' ELSE 'No' END AS has_high_value_order FROM Customers AS c LEFT JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name ORDER BY c.name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id));","This query LEFT JOINs Customers with Orders and groups by customer. MAX(o.total_amount) finds the highest order amount. If a customer has no orders or only orders below 500, MAX will be NULL or <= 500, resulting in 'No'. Otherwise, 'Yes'."
"List all employees hired after January 1, 2020, and the number of projects they are assigned to. Include employees who have no projects assigned.","SELECT e.first_name, e.last_name, COUNT(p.project_id) AS assigned_projects_count FROM Employees AS e LEFT JOIN Projects AS p ON e.employee_id = p.employee_id WHERE e.hire_date > '2020-01-01' GROUP BY e.employee_id, e.first_name, e.last_name ORDER BY e.last_name, e.first_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, hire_date TEXT NOT NULL); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, employee_id INTEGER, FOREIGN KEY (employee_id) REFERENCES Employees (employee_id));",This query filters employees hired after '2020-01-01' and then uses a LEFT JOIN to link them to Projects. COUNT(p.project_id) counts assigned projects. Employees with no assigned projects will have a count of 0.
Find active customers who have not placed an order in the last 90 days.,"SELECT c.customer_id, c.name FROM Customers AS c LEFT JOIN Orders AS o ON c.customer_id = o.customer_id AND o.order_date >= DATE('now', '-90 days') WHERE o.order_id IS NULL AND c.status = 'Active';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE, status TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id));","This query LEFT JOINs Customers with Orders, but the join condition only matches orders from the last 90 days. The WHERE o.order_id IS NULL then filters for customers who had no such recent orders. An additional c.status = 'Active' condition ensures only active customers are considered."
List all products that have never appeared in any order item.,"SELECT p.product_id, p.product_name FROM Products AS p LEFT JOIN Order_Items AS oi ON p.product_id = oi.product_id WHERE oi.order_item_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders (order_id), FOREIGN KEY (product_id) REFERENCES Products (product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT, price REAL);","This query uses a LEFT JOIN to connect Products with Order_Items. By filtering WHERE oi.order_item_id IS NULL, it identifies products that have no matching entries in Order_Items, meaning they have never been sold."
"All departments and their managers, including departments without managers and managers without departments.","SELECT d.department_name, e.first_name || ' ' || e.last_name AS manager_name FROM Departments AS d LEFT JOIN Employees AS e ON d.manager_id = e.employee_id UNION ALL SELECT d.department_name, e.first_name || ' ' || e.last_name AS manager_name FROM Employees AS e LEFT JOIN Departments AS d ON d.manager_id = e.employee_id WHERE d.department_id IS NULL AND e.is_manager = 1;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL UNIQUE, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees (employee_id)); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, is_manager INTEGER DEFAULT 0);",This query performs an emulated FULL OUTER JOIN. The first LEFT JOIN shows all departments and their assigned managers. The UNION ALL part adds managers who are not assigned to any department (WHERE d.department_id IS NULL) and are explicitly marked as managers (e.is_manager = 1).
"For each customer, display their name and their most recent order date. If they have no orders, display 'No Orders Yet'.","SELECT c.name, COALESCE(MAX(o.order_date), 'No Orders Yet') AS most_recent_order_date FROM Customers AS c LEFT JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name ORDER BY c.name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id));",This query LEFT JOINs Customers with Orders to ensure all customers are included. MAX(o.order_date) finds the latest order date. COALESCE replaces NULL (for customers with no orders) with the string 'No Orders Yet'.
"For each publisher, count how many books they published after the year 2000. Include publishers who published no books after 2000, or no books at all.","SELECT p.publisher_name, COUNT(b.book_id) AS books_after_2000 FROM Publishers AS p LEFT JOIN Books AS b ON p.publisher_id = b.publisher_id AND b.publication_year > 2000 GROUP BY p.publisher_id, p.publisher_name ORDER BY p.publisher_name;","CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT NOT NULL UNIQUE, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, publisher_id INTEGER, publication_year INTEGER, FOREIGN KEY (publisher_id) REFERENCES Publishers (publisher_id));","This query LEFT JOINs Publishers with Books. The ON clause includes a condition b.publication_year > 2000, so only books published after 2000 are considered in the join. Publishers with no books or no books after 2000 will correctly show a count of 0."
List all students who are either not enrolled in any course or are only enrolled in courses whose names start with 'Intro'.,"SELECT s.student_id, s.first_name, s.last_name FROM Students AS s LEFT JOIN Enrollments AS e ON s.student_id = e.student_id LEFT JOIN Courses AS c ON e.course_id = c.course_id GROUP BY s.student_id, s.first_name, s.last_name HAVING COUNT(e.enrollment_id) = 0 OR MAX(CASE WHEN c.course_name NOT LIKE 'Intro%' THEN 1 ELSE 0 END) = 0;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, date_of_birth TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL UNIQUE, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT, grade REAL, FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id));",This query uses two LEFT JOINs. The HAVING clause checks two conditions: students with no enrollments (COUNT = 0) or students whose all enrolled courses are 'Intro' courses (MAX of indicator for non-'Intro' courses is 0).
"List all artists and the title and release year of their most recently released album. If an artist has no albums, list them and show NULL.","SELECT a.artist_name, t2.album_title, t2.release_year FROM Artists AS a LEFT JOIN (SELECT album_id, album_title, artist_id, release_year, ROW_NUMBER() OVER (PARTITION BY artist_id ORDER BY release_year DESC, album_id DESC) AS rn FROM Albums) AS t2 ON a.artist_id = t2.artist_id AND t2.rn = 1 ORDER BY a.artist_name;","CREATE TABLE Artists (artist_id INTEGER PRIMARY KEY, artist_name TEXT NOT NULL UNIQUE, genre TEXT); CREATE TABLE Albums (album_id INTEGER PRIMARY KEY, album_title TEXT NOT NULL, artist_id INTEGER NOT NULL, release_year INTEGER, FOREIGN KEY (artist_id) REFERENCES Artists (artist_id));","This query uses a LEFT JOIN to combine Artists with a subquery that identifies the most recent album for each artist using ROW_NUMBER(). By joining ON t2.rn = 1, only the most recent album is selected. Artists without albums are still included due to the LEFT JOIN."
"List all products, showing their name and category. If a product has no assigned category, display 'Uncategorized'.","SELECT p.product_name, COALESCE(pc.category_name, 'Uncategorized') AS category FROM Products AS p LEFT JOIN ProductCategories AS pc ON p.category_id = pc.category_id ORDER BY p.product_name;","CREATE TABLE ProductCategories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL UNIQUE); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL, FOREIGN KEY (category_id) REFERENCES ProductCategories (category_id));","This query LEFT JOINs Products with ProductCategories. COALESCE(pc.category_name, 'Uncategorized') ensures that if a product's category_id is NULL or does not match any category, 'Uncategorized' is displayed instead of NULL."
"Show a comprehensive list of all authors and all publishers. If an author has published a book with a publisher, link them. Otherwise, list the author or publisher independently.","SELECT a.first_name || ' ' || a.last_name AS author_name, pub.publisher_name FROM Authors AS a LEFT JOIN Books AS b ON a.author_id = b.author_id LEFT JOIN Publishers AS pub ON b.publisher_id = pub.publisher_id GROUP BY a.author_id, a.first_name, a.last_name, pub.publisher_name UNION ALL SELECT NULL AS author_name, pub.publisher_name FROM Publishers AS pub LEFT JOIN Books AS b ON pub.publisher_id = b.publisher_id LEFT JOIN Authors AS a ON b.author_id = a.author_id WHERE b.book_id IS NULL;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT NOT NULL UNIQUE); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publisher_id INTEGER, FOREIGN KEY (author_id) REFERENCES Authors (author_id), FOREIGN KEY (publisher_id) REFERENCES Publishers (publisher_id));","This query emulates a FULL OUTER JOIN between authors and publishers by leveraging the Books table. The first LEFT JOIN sequence lists all authors and their associated publishers. The UNION ALL part then adds publishers who have no books (and thus no associated authors), ensuring all publishers are covered."
List all employees and any skills they have been endorsed for. Include employees with no endorsements.,"SELECT e.first_name, e.last_name, s.skill_name, se.endorsement_count FROM Employees AS e LEFT JOIN SkillEndorsements AS se ON e.employee_id = se.endorsed_employee_id LEFT JOIN Skills AS s ON se.skill_id = s.skill_id ORDER BY e.last_name, e.first_name, s.skill_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL); CREATE TABLE Skills (skill_id INTEGER PRIMARY KEY, skill_name TEXT NOT NULL UNIQUE); CREATE TABLE SkillEndorsements (endorsement_id INTEGER PRIMARY KEY, endorsed_employee_id INTEGER NOT NULL, skill_id INTEGER NOT NULL, endorsement_count INTEGER DEFAULT 1, FOREIGN KEY (endorsed_employee_id) REFERENCES Employees (employee_id), FOREIGN KEY (skill_id) REFERENCES Skills (skill_id));","This query uses two LEFT JOINs to connect Employees to SkillEndorsements and then to Skills. This ensures that all employees are listed, and for each employee, their endorsed skills (if any) and endorsement counts are displayed. Employees without any endorsements will show NULL for skill-related columns."
List all courses and the number of students enrolled in each. Include courses with no enrollments.,"SELECT c.course_name, COUNT(e.student_id) AS enrolled_students FROM Courses AS c LEFT JOIN Enrollments AS e ON c.course_id = e.course_id GROUP BY c.course_id, c.course_name ORDER BY c.course_name;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, date_of_birth TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL UNIQUE, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT, grade REAL, FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id));","This query uses a LEFT JOIN to include all courses. COUNT(e.student_id) counts the students enrolled in each course. For courses with no enrollments, the count will be 0 due to the nature of COUNT over LEFT JOINed NULLs."
Find all products that belong to a category named 'Electronics' but have not been sold in the last year.,"SELECT p.product_id, p.product_name FROM Products AS p JOIN ProductCategories AS pc ON p.category_id = pc.category_id AND pc.category_name = 'Electronics' LEFT JOIN Order_Items AS oi ON p.product_id = oi.product_id LEFT JOIN Orders AS o ON oi.order_id = o.order_id AND o.order_date >= DATE('now', '-1 year') WHERE oi.order_item_id IS NULL;","CREATE TABLE ProductCategories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL UNIQUE); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL, FOREIGN KEY (category_id) REFERENCES ProductCategories (category_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER, price_per_unit REAL, FOREIGN KEY (order_id) REFERENCES Orders (order_id), FOREIGN KEY (product_id) REFERENCES Products (product_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id));","This query first joins products with categories to filter for 'Electronics'. Then, it uses two LEFT JOINs to check for recent sales (last year). By filtering WHERE oi.order_item_id IS NULL, it identifies products that were not sold in the last year."
"List all departments and the total salary of their employees. Include departments with no employees, showing a total salary of 0 for them.","SELECT d.department_name, COALESCE(SUM(e.salary), 0) AS total_salary FROM Departments AS d LEFT JOIN Employees AS e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name ORDER BY d.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, salary REAL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments (department_id));","This query uses a LEFT JOIN to include all departments. SUM(e.salary) calculates the total salary, and COALESCE(..., 0) ensures that departments with no employees correctly display a total salary of 0 instead of NULL."
"List all employees hired in 2023. For each of them, show their department name if they are assigned to one. Employees not assigned to a department should still be listed.","SELECT e.first_name, e.last_name, d.department_name FROM Employees AS e LEFT JOIN Departments AS d ON e.department_id = d.department_id WHERE e.hire_date BETWEEN '2023-01-01' AND '2023-12-31' ORDER BY e.last_name, e.first_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, hire_date TEXT NOT NULL, department_id INTEGER, FOREIGN KEY (department_id) REFERENCES Departments (department_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL, location TEXT);","This query filters employees hired in 2023 using a WHERE clause. A LEFT JOIN then connects these employees to their respective departments. Employees hired in 2023 but not assigned to a department will still appear, with NULL in the department_name column."
"Show all books and their author's nationality. If an author's nationality is missing or if the book has no author, show 'Unknown' for nationality.","SELECT b.title, COALESCE(a.nationality, 'Unknown') AS author_nationality FROM Books AS b LEFT JOIN Authors AS a ON b.author_id = a.author_id ORDER BY b.title;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, nationality TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, publication_year INTEGER, FOREIGN KEY (author_id) REFERENCES Authors (author_id));","This query uses a LEFT JOIN to combine Books with Authors. COALESCE(a.nationality, 'Unknown') ensures that if an author's nationality is NULL or if a book has no associated author (resulting in NULL for author details), 'Unknown' is displayed instead of NULL."
"For each student, list their name and the total credits of all courses they are enrolled in. Include students not enrolled in any courses, showing 0 credits.","SELECT s.first_name, s.last_name, COALESCE(SUM(c.credits), 0) AS total_credits_enrolled FROM Students AS s LEFT JOIN Enrollments AS e ON s.student_id = e.student_id LEFT JOIN Courses AS c ON e.course_id = c.course_id GROUP BY s.student_id, s.first_name, s.last_name ORDER BY s.last_name, s.first_name;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, date_of_birth TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL UNIQUE, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER NOT NULL, course_id INTEGER NOT NULL, enrollment_date TEXT, grade REAL, FOREIGN KEY (student_id) REFERENCES Students (student_id), FOREIGN KEY (course_id) REFERENCES Courses (course_id));","This query uses two LEFT JOINs to connect students to courses via their enrollments. COALESCE(SUM(c.credits), 0) correctly calculates the total credits. Students with no enrollments will have NULL for credits, which COALESCE converts to 0."
Show all customers and the count of their unique orders placed in the year 2022. Include customers who placed no orders in 2022.,"SELECT c.name, COUNT(o.order_id) AS orders_in_2022 FROM Customers AS c LEFT JOIN Orders AS o ON c.customer_id = o.customer_id AND STRFTIME('%Y', o.order_date) = '2022' GROUP BY c.customer_id, c.name ORDER BY c.name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT NOT NULL, email TEXT UNIQUE); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers (customer_id));","This query LEFT JOINs customers with their orders, but the join condition filters orders to only those placed in 2022 using STRFTIME. COUNT(o.order_id) then counts these specific orders. Customers with no orders in 2022 will correctly show a count of 0."
List the departments that have more than 5 employees.,"SELECT T1.department_name, COUNT(T2.employee_id) FROM Departments AS T1 JOIN Employees AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name HAVING COUNT(T2.employee_id) > 5;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);","This query retrieves the names of departments that have more than 5 employees. It joins `Departments` and `Employees` tables, groups the results by department name, and then filters these groups to include only those with an employee count greater than 5."
Find product categories where the total sales amount exceeds 10000.,"SELECT T1.category, SUM(T1.price * T2.quantity) AS total_sales FROM Products AS T1 JOIN Sales AS T2 ON T1.product_id = T2.product_id GROUP BY T1.category HAVING SUM(T1.price * T2.quantity) > 10000;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, sale_date TEXT);","This query identifies product categories where the sum of sales for all products within that category is greater than 10000. It joins `Products` and `Sales` to calculate total sales per product, then groups by category and applies the HAVING clause."
Show cities where the average customer age is greater than 30.,"SELECT city, AVG(age) FROM Customers GROUP BY city HAVING AVG(age) > 30;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, age INTEGER);",This query returns cities where the average age of customers residing in that city is greater than 30. It groups customers by city and then filters those groups based on the average age.
Which customer-product combinations had more than 3 distinct orders?,"SELECT T1.customer_name, T2.product_name, COUNT(T3.order_id) FROM Customers AS T1 JOIN Products AS T2 JOIN Orders AS T3 ON T1.customer_id = T3.customer_id AND T2.product_id = T3.product_id GROUP BY T1.customer_name, T2.product_name HAVING COUNT(DISTINCT T3.order_id) > 3;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, product_id INTEGER, order_date TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT);","This query finds unique combinations of customer and product that appear in more than 3 distinct orders. It joins `Customers`, `Products`, and `Orders`, groups by customer and product, and uses HAVING to count distinct orders."
List departments where the minimum employee salary is above 50000 and the maximum salary is below 100000.,"SELECT T1.department_name, MIN(T2.salary), MAX(T2.salary) FROM Departments AS T1 JOIN Employees AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name HAVING MIN(T2.salary) > 50000 AND MAX(T2.salary) < 100000;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);",This query identifies departments where the lowest employee salary is greater than 50000 and the highest employee salary is less than 100000. It groups employees by department and filters based on min/max salary conditions.
"From sales made in 2023, identify products with a total quantity sold exceeding 500.","SELECT T1.product_name, SUM(T2.quantity) FROM Products AS T1 JOIN Sales AS T2 ON T1.product_id = T2.product_id WHERE STRFTIME('%Y', T2.sale_date) = '2023' GROUP BY T1.product_name HAVING SUM(T2.quantity) > 500;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, sale_date TEXT);","This query finds products whose total quantity sold in the year 2023 exceeds 500. It first filters sales for the year 2023, then groups by product name, and finally applies the HAVING clause on the sum of quantities."
Which authors have written more than 2 books published after 2000?,SELECT T1.author_name FROM Authors AS T1 JOIN Books AS T2 ON T1.author_id = T2.author_id WHERE T2.publication_year > 2000 GROUP BY T1.author_name HAVING COUNT(T2.book_id) > 2;,"CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER);","This query lists authors who have published more than 2 books after the year 2000. It joins authors with books, filters for books published after 2000, groups by author name, and counts the books per author."
Find projects where at least 3 distinct employees are assigned.,SELECT T1.project_name FROM Projects AS T1 JOIN EmployeeProjects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_name HAVING COUNT(DISTINCT T2.employee_id) >= 3;,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE EmployeeProjects (ep_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER);","This query returns the names of projects that have at least 3 unique employees assigned to them. It joins `Projects` and `EmployeeProjects`, groups by project name, and uses `COUNT(DISTINCT employee_id)` in the HAVING clause."
"For each year, list years where the average number of orders per day was more than 10.","SELECT STRFTIME('%Y', order_date) AS order_year, COUNT(order_id) * 1.0 / COUNT(DISTINCT order_date) AS avg_orders_per_day FROM Orders GROUP BY order_year HAVING avg_orders_per_day > 10;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT);",This query calculates the average number of orders per day for each year and returns only those years where this average exceeds 10. It groups by the year extracted from `order_date` and uses a float division for the average.
Show regions that have at least 10 active stores.,SELECT T1.region_name FROM Regions AS T1 JOIN Stores AS T2 ON T1.region_id = T2.region_id WHERE T2.is_active = TRUE GROUP BY T1.region_name HAVING COUNT(T2.store_id) >= 10;,"CREATE TABLE Regions (region_id INTEGER PRIMARY KEY, region_name TEXT); CREATE TABLE Stores (store_id INTEGER PRIMARY KEY, store_name TEXT, region_id INTEGER, is_active BOOLEAN);","This query identifies regions that have 10 or more stores marked as 'active'. It joins regions with stores, filters for active stores, groups by region name, and counts the stores in each region."
Identify cities where the total sales of 'Electronics' products exceed 50000 AND the average sale price for any product type is at least 500.,"SELECT T1.city, SUM(CASE WHEN T2.category = 'Electronics' THEN T2.price * T1.quantity ELSE 0 END) AS total_electronics_sales, AVG(T2.price) AS average_product_price FROM Sales AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T1.city HAVING SUM(CASE WHEN T2.category = 'Electronics' THEN T2.price * T1.quantity ELSE 0 END) > 50000 AND AVG(T2.price) >= 500;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, city TEXT, product_id INTEGER, quantity INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",This query finds cities where the total sales of 'Electronics' products exceed 50000 AND the average price of all products sold in that city is at least 500. It groups by city and uses a complex HAVING clause with multiple aggregate conditions.
List employees whose average project duration is longer than the company's overall average project duration.,"SELECT T1.employee_name, AVG(JULIANDAY(T3.end_date) - JULIANDAY(T3.start_date)) AS avg_project_duration FROM Employees AS T1 JOIN EmployeeProjects AS T2 ON T1.employee_id = T2.employee_id JOIN Projects AS T3 ON T2.project_id = T3.project_id GROUP BY T1.employee_name HAVING AVG(JULIANDAY(T3.end_date) - JULIANDAY(T3.start_date)) > (SELECT AVG(JULIANDAY(end_date) - JULIANDAY(start_date)) FROM Projects);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT); CREATE TABLE EmployeeProjects (ep_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER);",This query identifies employees whose personal average project duration (calculated using `JULIANDAY` for date difference) is greater than the average project duration across all projects in the company. It uses a subquery in the HAVING clause for comparison.
"For each month of 2022, identify months where the total number of unique customers making orders was less than 50.","SELECT STRFTIME('%Y-%m', order_date) AS order_month FROM Orders WHERE STRFTIME('%Y', order_date) = '2022' GROUP BY order_month HAVING COUNT(DISTINCT customer_id) < 50;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","This query lists months in 2022 where fewer than 50 unique customers placed orders. It filters orders for 2022, groups by month and year, and then counts distinct customers in each group."
"Find product types where the minimum quantity sold in any single transaction is at least 10, and the maximum is at most 100.",SELECT T1.product_type FROM Products AS T1 JOIN Sales AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_type HAVING MIN(T2.quantity) >= 10 AND MAX(T2.quantity) <= 100;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_type TEXT); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER);",This query returns product types where all sales transactions for that type have a quantity between 10 and 100 (inclusive). It groups products by their type and checks the min and max quantities in the HAVING clause.
List departments where the average salary is higher than the average salary of all employees in departments with more than 10 employees.,"SELECT T1.department_name, AVG(T2.salary) FROM Departments AS T1 JOIN Employees AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name HAVING AVG(T2.salary) > (SELECT AVG(E.salary) FROM Employees AS E JOIN (SELECT department_id FROM Employees GROUP BY department_id HAVING COUNT(employee_id) > 10) AS D ON E.department_id = D.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",This query identifies departments whose average employee salary is greater than the overall average salary of employees who belong to departments with more than 10 employees. It uses a subquery to calculate the comparison average.
Identify categories that have at least one product with a price over 500.,SELECT category FROM Products GROUP BY category HAVING MAX(price) > 500;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",This query lists product categories that contain at least one product priced above 500. It groups products by category and checks if the maximum price within each category exceeds 500.
Show users who made orders only in 2023 and had a total order value greater than 1000.,"SELECT T1.username, SUM(T2.total_value) FROM Users AS T1 JOIN Orders AS T2 ON T1.user_id = T2.user_id GROUP BY T1.username HAVING MAX(STRFTIME('%Y', T2.order_date)) = '2023' AND MIN(STRFTIME('%Y', T2.order_date)) = '2023' AND SUM(T2.total_value) > 1000;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, user_id INTEGER, order_date TEXT, total_value REAL);","This query finds users who exclusively placed orders in 2023 (meaning their earliest and latest order years are both 2023) AND their total order value for 2023 exceeds 1000. It groups by username and applies conditions using MIN, MAX, and SUM of aggregates."
List vendors who supply at least 3 distinct product types.,SELECT T1.vendor_name FROM Vendors AS T1 JOIN Products AS T2 ON T1.vendor_id = T2.vendor_id GROUP BY T1.vendor_name HAVING COUNT(DISTINCT T2.product_type) >= 3;,"CREATE TABLE Vendors (vendor_id INTEGER PRIMARY KEY, vendor_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, product_type TEXT, vendor_id INTEGER);","This query returns the names of vendors who supply a minimum of 3 different product types. It joins `Vendors` and `Products`, groups by vendor name, and counts the distinct product types for each vendor."
"For active vs inactive projects, determine which group has an average budget exceeding 100000.","SELECT is_active, AVG(budget) FROM Projects GROUP BY is_active HAVING AVG(budget) > 100000;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, is_active BOOLEAN, budget REAL);",This query calculates the average budget for active and inactive projects separately and then returns the group (active or inactive) whose average budget is greater than 100000. It groups by the `is_active` boolean column.
Find departments where every employee earns exactly 75000.,SELECT T1.department_name FROM Departments AS T1 JOIN Employees AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name HAVING MIN(T2.salary) = 75000 AND MAX(T2.salary) = 75000;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);",This query identifies departments where all employees have a salary of exactly 75000. It groups by department and checks if both the minimum and maximum salaries within the group are equal to 75000.
Show the year and month combinations where the total number of sales items exceeded 1000.,"SELECT STRFTIME('%Y-%m', sale_date) AS sales_ym, SUM(quantity) FROM Sales GROUP BY sales_ym HAVING SUM(quantity) > 1000;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, sale_date TEXT, quantity INTEGER);",This query returns year-month combinations where the total quantity of items sold exceeded 1000. It groups sales by month and year (extracted using `STRFTIME`) and filters based on the sum of quantities.
List cities where the average length of customer names is more than 8 characters.,SELECT city FROM Customers GROUP BY city HAVING AVG(LENGTH(customer_name)) > 8;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT);",This query finds cities where the average length of customer names in that city is greater than 8 characters. It groups customers by city and applies the `LENGTH` function within the `AVG` aggregate in the HAVING clause.
Find product categories where both the sum of quantities sold is greater than 500 AND the average price is less than 100.,SELECT T1.category FROM Products AS T1 JOIN OrderItems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.category HAVING SUM(T2.quantity) > 500 AND AVG(T1.price) < 100;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER);","This query identifies product categories where the total quantity of items sold is over 500 AND the average price of products in that category is less than 100. It joins products with order items, groups by category, and applies two conditions in HAVING."
"For each year quarter, show quarters where the total revenue was at least 500000.","SELECT STRFTIME('%Y', transaction_date) || '-Q' || ((CAST(STRFTIME('%m', transaction_date) AS INTEGER) - 1) / 3 + 1) AS year_quarter, SUM(amount) FROM Transactions GROUP BY year_quarter HAVING SUM(amount) >= 500000;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, transaction_date TEXT, amount REAL);",This query calculates the total revenue for each quarter of each year and returns those quarters where the revenue is 500000 or more. It groups by a calculated year-quarter string and filters using the sum of amounts.
Identify projects that have exactly 5 tasks associated with them.,SELECT T1.project_name FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_name HAVING COUNT(T2.task_id) = 5;,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, project_id INTEGER);","This query returns the names of projects that are linked to exactly 5 tasks. It joins projects with tasks, groups by project name, and uses `COUNT()` in the HAVING clause to check for exactly 5 tasks."
"List sales regions where the average sale amount for transactions recorded after January 1, 2023, exceeds 500.","SELECT T1.region_name, AVG(T2.amount) FROM Regions AS T1 JOIN Sales AS T2 ON T1.region_id = T2.region_id WHERE T2.sale_date > '2023-01-01' GROUP BY T1.region_name HAVING AVG(T2.amount) > 500;","CREATE TABLE Regions (region_id INTEGER PRIMARY KEY, region_name TEXT); CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, region_id INTEGER, amount REAL, sale_date TEXT);","This query retrieves sales regions where the average sale amount for transactions occurring after January 1, 2023, is greater than 500. It first filters sales by date, then groups by region, and applies the average condition in HAVING."
Find departments where at least 2 employees have a manager assigned (manager_id is not NULL).,SELECT T1.department_name FROM Departments AS T1 JOIN Employees AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_name HAVING COUNT(T2.manager_id) >= 2;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, manager_id INTEGER);","This query lists departments where at least two employees have a manager assigned (i.e., their `manager_id` is not NULL). `COUNT(column_name)` counts non-NULL values, so it's directly used in the HAVING clause."
Show customer IDs who made their first order before 2020 and their last order after 2022.,"SELECT T1.customer_id FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING MIN(STRFTIME('%Y', T2.order_date)) < '2020' AND MAX(STRFTIME('%Y', T2.order_date)) > '2022';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",This query identifies customer IDs whose earliest order date's year is before 2020 AND whose latest order date's year is after 2022. It groups by customer and uses MIN and MAX on the extracted year for filtering.
List courses that have more than 3 students enrolled and an average grade of at least 85.,"SELECT T1.course_name, COUNT(T2.student_id), AVG(T2.grade) FROM Courses AS T1 JOIN Enrollments AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(T2.student_id) > 3 AND AVG(T2.grade) >= 85;","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade REAL);",This query returns course names that have more than 3 students enrolled AND the average grade for those students is 85 or higher. It groups by course name and applies two aggregate conditions in the HAVING clause.
"Find product types (case-insensitive) that have an average price greater than 50, considering only products with 'Luxury' in their name.","SELECT UPPER(product_type), AVG(price) FROM Products WHERE product_name LIKE '%Luxury%' GROUP BY UPPER(product_type) HAVING AVG(price) > 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, product_type TEXT, price REAL);","This query finds product types (treated case-insensitively) that have an average price greater than 50, but only considers products whose names contain 'Luxury'. It filters by product name, groups by the uppercase product type, and applies the average price condition."
List all employees with their rank within each department based on salary in descending order.,"SELECT emp_id, emp_name, department, salary, ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank FROM Employees;","CREATE TABLE Employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query assigns a unique sequential rank to each employee within their respective department, ordered by salary from highest to lowest. Employees in different departments start their ranking from 1."
"Find the top 3 highest-paid employees in each department, allowing for ties.","SELECT emp_id, emp_name, department, salary FROM (SELECT emp_id, emp_name, department, salary, RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS rnk FROM Employees) WHERE rnk <= 3;","CREATE TABLE Employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query first ranks employees within each department by salary in descending order, allowing for ties (meaning if two employees have the same salary, they get the same rank, and the next rank will skip values). It then filters to show only those employees whose rank is 3 or less."
"Show the rank of products within each category based on price, ensuring no gaps in ranks for products with the same price.","SELECT prod_id, prod_name, category, price, DENSE_RANK() OVER (PARTITION BY category ORDER BY price DESC) AS price_dense_rank FROM Products;","CREATE TABLE Products (prod_id INTEGER PRIMARY KEY, prod_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query assigns a dense rank to products within each category based on their price in descending order. Unlike RANK(), DENSE_RANK() does not leave gaps in the ranking sequence when there are ties."
Divide all products into 4 price groups (quartiles) based on their price.,"SELECT prod_id, prod_name, category, price, NTILE(4) OVER (ORDER BY price) AS price_quartile FROM Products;","CREATE TABLE Products (prod_id INTEGER PRIMARY KEY, prod_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query divides all products into 4 groups (quartiles) based on their price. Products are ordered by price, and then assigned a group number from 1 to 4."
"For each order, show the order amount and the amount of the previous order placed by the same customer, ordered by date.","SELECT order_id, customer_id, order_date, total_amount, LAG(total_amount, 1, 0) OVER (PARTITION BY customer_id ORDER BY order_date) AS previous_order_amount FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query retrieves the 'total_amount' of the previous order for each customer, based on the 'order_date'. If there is no previous order (e.g., for the first order), it defaults to 0."
"For each flight, list the departure time and the departure time of the next flight from the same origin.","SELECT flight_id, origin, destination, departure_time, LEAD(departure_time, 1) OVER (PARTITION BY origin ORDER BY departure_time) AS next_departure_time FROM Flights;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, airline TEXT, origin TEXT, destination TEXT, departure_time TEXT, arrival_time TEXT, duration_minutes INTEGER);","This query retrieves the 'departure_time' of the subsequent flight for each flight, partitioned by 'origin' and ordered by 'departure_time'. This helps identify the next flight from the same city."
"For each sale, find the product_id of the first sale in its region, ordered by sale date.","SELECT sale_id, region, sale_date, product_id, FIRST_VALUE(product_id) OVER (PARTITION BY region ORDER BY sale_date) AS first_product_in_region FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, amount REAL, region TEXT);","This query identifies the 'product_id' of the earliest sale within each sales region, based on the 'sale_date'. The result is shown for every sale record."
"For each transaction, find the amount of the last transaction for the same account, considering all previous transactions up to the current one.","SELECT transaction_id, account_id, transaction_date, amount, LAST_VALUE(amount) OVER (PARTITION BY account_id ORDER BY transaction_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS last_transaction_amount FROM Transactions;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, type TEXT);","This query calculates the amount of the last transaction for each account, considering only transactions that have occurred up to and including the current transaction's date. The 'ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW' frame ensures it looks at all prior and the current row."
"For each course, find the score of the second highest scoring student.","SELECT DISTINCT course_id, NTH_VALUE(score, 2) OVER (PARTITION BY course_id ORDER BY score DESC) AS second_highest_score FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, course_id INTEGER, score REAL);",This query finds the second highest score for each 'course_id'. It orders students by score in descending order within each course and then picks the value at the second position.
"Calculate the running total of sales amount for each product, ordered by sale date.","SELECT sale_id, product_id, sale_date, amount, SUM(amount) OVER (PARTITION BY product_id ORDER BY sale_date) AS running_total_amount FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, amount REAL, region TEXT);","This query calculates a running sum of the 'amount' for each 'product_id', ordered by 'sale_date'. For each row, it sums the 'amount' of the current sale and all preceding sales for that specific product."
Calculate the 3-day moving average of total_amount for orders placed by each customer.,"SELECT order_id, customer_id, order_date, total_amount, AVG(total_amount) OVER (PARTITION BY customer_id ORDER BY order_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS three_day_moving_avg FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query calculates a 3-day moving average of 'total_amount' for each customer. For each order, it averages the 'total_amount' of the current order and the two immediately preceding orders by date for that customer."
"For each department, count the cumulative number of employees hired up to a certain hire date.","SELECT emp_id, emp_name, department, hire_date, COUNT(emp_id) OVER (PARTITION BY department ORDER BY hire_date) AS cumulative_hires FROM Employees;","CREATE TABLE Employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query counts the cumulative number of employees hired within each department as of a specific 'hire_date'. For each employee, it counts all employees hired in their department on or before their own hire date."
"For each employee, find the maximum salary observed in their department up to their hire date.","SELECT emp_id, emp_name, department, salary, hire_date, MAX(salary) OVER (PARTITION BY department ORDER BY hire_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS max_salary_to_date FROM Employees;","CREATE TABLE Employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query finds the maximum salary among all employees in the same department who were hired on or before the current employee's hire date.
"For each product, find the minimum price among all products in its category from the current product onwards (ordered by price).","SELECT prod_id, prod_name, category, price, MIN(price) OVER (PARTITION BY category ORDER BY price ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS min_price_from_here FROM Products;","CREATE TABLE Products (prod_id INTEGER PRIMARY KEY, prod_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query calculates the minimum price for products within the same category, looking at the current product and all subsequent products in that category when ordered by price."
"For each employee, show their salary, their rank within the department by salary, and the salary of the employee who ranked just before them in the same department.","SELECT emp_id, emp_name, department, salary, RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank, LAG(salary) OVER (PARTITION BY department ORDER BY salary DESC) AS previous_rank_salary FROM Employees;","CREATE TABLE Employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query combines two window functions: RANK() to show an employee's salary rank within their department, and LAG() to show the salary of the employee who is ranked immediately higher (has a higher salary) in the same department."
"List the top 5 customers by their total spending, along with their rank among all customers.","SELECT customer_id, total_spent, customer_rank FROM (SELECT customer_id, SUM(total_amount) AS total_spent, RANK() OVER (ORDER BY SUM(total_amount) DESC) AS customer_rank FROM Orders GROUP BY customer_id) WHERE customer_rank <= 5;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query first calculates the total spending for each customer, then ranks them based on this total spending in descending order. Finally, it filters to show only the top 5 customers by their spending rank."
"For all sales in the 'East' region, calculate the running total of sales amount, ordered by sale date.","SELECT sale_id, product_id, sale_date, amount, SUM(amount) OVER (ORDER BY sale_date) AS running_total_east FROM Sales WHERE region = 'East';","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, amount REAL, region TEXT);","This query filters sales records to only include those from the 'East' region and then calculates a running total of the 'amount' for these sales, ordered by 'sale_date'."
"For each order, display the order details, and the total quantity of all items in that specific order.","SELECT od.detail_id, od.order_id, od.prod_id, od.quantity, od.unit_price, SUM(od.quantity) OVER (PARTITION BY od.order_id) AS total_order_quantity FROM OrderDetails od JOIN Orders o ON od.order_id = o.order_id;","CREATE TABLE OrderDetails (detail_id INTEGER PRIMARY KEY, order_id INTEGER, prod_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query joins 'OrderDetails' with 'Orders' and then uses a window function to calculate the total quantity of items for each distinct 'order_id'. This sum is repeated for every detail line of that order.
"For each employee, calculate the number of days between their hire date and the hire date of the employee hired just before them in the same department.","SELECT emp_id, emp_name, department, hire_date, JULIANDAY(hire_date) - JULIANDAY(LAG(hire_date) OVER (PARTITION BY department ORDER BY hire_date)) AS days_since_previous_hire FROM Employees;","CREATE TABLE Employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query calculates the difference in days between an employee's hire date and the hire date of the employee hired immediately before them within the same department. JULIANDAY() converts dates to a numeric representation for calculation.
"For each department, list all employees and the total number of employees in that department.","SELECT emp_id, emp_name, department, COUNT(emp_id) OVER (PARTITION BY department) AS total_employees_in_dept FROM Employees;","CREATE TABLE Employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query counts the total number of employees within each department. The count is displayed for every employee record in their respective department.
"For each student, calculate their percentile rank based on their score within their course.","SELECT student_id, student_name, course_id, score, PERCENT_RANK() OVER (PARTITION BY course_id ORDER BY score) AS score_percent_rank FROM Students;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, course_id INTEGER, score REAL);",This query calculates the percentile rank of each student's score within their respective course. A percentile rank indicates the percentage of values in a dataset that are less than or equal to a given value.
"For each product, find its cumulative distribution based on its price within its category.","SELECT prod_id, prod_name, category, price, CUME_DIST() OVER (PARTITION BY category ORDER BY price) AS price_cumulative_distribution FROM Products;","CREATE TABLE Products (prod_id INTEGER PRIMARY KEY, prod_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query calculates the cumulative distribution of each product's price within its category. CUME_DIST() indicates the relative position of a value within its partition, representing the proportion of rows with a value less than or equal to the current row's value."
"For each employee, show their salary, their rank within the department, and the average salary of their department.","SELECT emp_id, emp_name, department, salary, RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS dept_salary_rank, AVG(salary) OVER (PARTITION BY department) AS avg_dept_salary FROM Employees;","CREATE TABLE Employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, department TEXT, salary REAL, hire_date TEXT);","This query displays each employee's salary, their rank within their department by salary, and the overall average salary for their entire department, all in a single result set."
"For each transaction, calculate the sum of amounts of all transactions for the same account up to the current transaction date, plus any transactions on the same date.","SELECT transaction_id, account_id, transaction_date, amount, SUM(amount) OVER (PARTITION BY account_id ORDER BY transaction_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_amount FROM Transactions;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_date TEXT, amount REAL, type TEXT);","This query calculates a running total of transaction amounts for each account, summing all transactions from the beginning up to and including the current transaction's date."
"For each sale, calculate the sum of amounts for sales that occurred in the 7 days prior to and including the current sale date, within the same region.","SELECT sale_id, region, sale_date, amount, SUM(amount) OVER (PARTITION BY region ORDER BY sale_date ROWS BETWEEN 7 PRECEDING AND CURRENT ROW) AS seven_day_sum FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, amount REAL, region TEXT);","This query calculates a 7-day rolling sum of sales amounts for each region. For each sale, it sums the amount of sales that occurred within the past 7 days, including the current sale's date, within that specific region."
"From the Sales table, for each product, retrieve only the record of its latest sale.","SELECT sale_id, product_id, sale_date, amount FROM (SELECT sale_id, product_id, sale_date, amount, ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY sale_date DESC) AS rn FROM Sales) WHERE rn = 1;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, amount REAL, region TEXT);",This query identifies the latest sale for each product. It ranks sales by date in descending order for each product and then selects only the record with rank 1 (the most recent sale).
"For each employee, calculate the difference in salary between them and the employee just below them in salary within the same department.","SELECT emp_id, emp_name, department, salary, salary - LAG(salary, 1, 0) OVER (PARTITION BY department ORDER BY salary) AS salary_difference_from_lower_rank FROM Employees;","CREATE TABLE Employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query calculates the difference between an employee's salary and the salary of the employee with the next lower salary within the same department. A value of 0 is used if no lower-ranked employee exists.
"For each employee, calculate the number of days until the next person is hired in the same department.","SELECT emp_id, emp_name, department, hire_date, JULIANDAY(LEAD(hire_date, 1) OVER (PARTITION BY department ORDER BY hire_date)) - JULIANDAY(hire_date) AS days_until_next_hire FROM Employees;","CREATE TABLE Employees (emp_id INTEGER PRIMARY KEY, emp_name TEXT, department TEXT, salary REAL, hire_date TEXT);",This query calculates the number of days between an employee's hire date and the hire date of the next employee hired in the same department. JULIANDAY() is used for date arithmetic.
"For each product, calculate the average price of products in the same category, ordered by product ID.","SELECT prod_id, prod_name, category, price, AVG(price) OVER (PARTITION BY category ORDER BY prod_id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_avg_category_price FROM Products;","CREATE TABLE Products (prod_id INTEGER PRIMARY KEY, prod_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query calculates a cumulative average price for products within each category. For each product, it averages the prices of all products in its category that have an equal or smaller 'prod_id' (implying an order)."
"For each sales record, calculate the percentage of that sale's amount relative to the total sales amount for that region in that month.","SELECT sale_id, sale_date, region, amount, (amount * 100.0) / SUM(amount) OVER (PARTITION BY region, STRFTIME('%Y-%m', sale_date)) AS percentage_of_monthly_regional_sales FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, sale_date TEXT, amount REAL, region TEXT);","This query calculates each individual sale's contribution as a percentage of the total sales for its specific region within the same month. STRFTIME('%Y-%m', sale_date) extracts the year and month for partitioning."
Find the names of employees who earn more than the average salary of all employees.,SELECT name FROM Employees WHERE salary > (SELECT AVG(salary) FROM Employees);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);","This query uses an uncorrelated subquery to first calculate the average salary of all employees, and then the outer query selects the names of employees whose individual salary is greater than that calculated average."
List all departments that have at least one employee hired after 2020-01-01.,SELECT department_name FROM Departments WHERE department_id IN (SELECT DISTINCT department_id FROM Employees WHERE hire_date > '2020-01-01');,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT);",The uncorrelated subquery finds all unique department IDs that have employees hired after a specific date. The outer query then retrieves the names of these departments.
Show products whose price is higher than the average price of products in their respective category.,"SELECT product_name, category, price FROM Products P1 WHERE price > (SELECT AVG(price) FROM Products P2 WHERE P1.category = P2.category);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This is a correlated subquery. For each product (P1) in the outer query, the inner subquery calculates the average price for products within P1's category. The outer query then filters products where P1's price is greater than that category average."
Retrieve the names of customers who have placed an order with a total amount greater than $1000.,SELECT customer_name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O WHERE C.customer_id = O.customer_id AND O.total_amount > 1000);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query uses a correlated subquery with `EXISTS`. For each customer, the subquery checks if there's any order associated with them that has a total amount over $1000. If such an order exists, the customer's name is returned."
Find the names of employees who do not manage anyone.,SELECT name FROM Employees E WHERE NOT EXISTS (SELECT 1 FROM Employees M WHERE M.manager_id = E.employee_id);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL, hire_date TEXT, manager_id INTEGER);","This uses a correlated `NOT EXISTS` subquery. For each employee (E), it checks if there is any other employee (M) for whom E is listed as their manager. If no such employee (M) exists, then E is not managing anyone, and their name is returned."
List projects that have a budget higher than the average budget of all projects.,"SELECT project_name, budget FROM Projects WHERE budget > (SELECT AVG(budget) FROM Projects);","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, department_id INTEGER, start_date TEXT, end_date TEXT, budget REAL);",An uncorrelated subquery calculates the overall average project budget. The outer query then selects projects whose individual budget exceeds this average.
Get the names of employees who have worked on 'Database Migration' project.,SELECT E.name FROM Employees E WHERE E.employee_id IN (SELECT PA.employee_id FROM Project_Assignments PA JOIN Projects P ON PA.project_id = P.project_id WHERE P.project_name = 'Database Migration');,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE Project_Assignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER);",The uncorrelated subquery first identifies the `employee_id`s involved in the 'Database Migration' project. The outer query then retrieves the names of these employees.
"Retrieve the department name and the number of employees in that department, but only for departments with more than 5 employees.","SELECT D.department_name, (SELECT COUNT(E.employee_id) FROM Employees E WHERE E.department_id = D.department_id) AS num_employees FROM Departments D WHERE (SELECT COUNT(E.employee_id) FROM Employees E WHERE E.department_id = D.department_id) > 5;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, department_id INTEGER);","This query uses a correlated scalar subquery twice: once in the `SELECT` clause to count employees per department, and again in the `WHERE` clause to filter departments with more than 5 employees. It demonstrates how a correlated subquery can be used in both clauses."
Find customers who have not placed any orders yet.,SELECT customer_name FROM Customers C WHERE NOT EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","This uses a correlated `NOT EXISTS` subquery. For each customer, it checks if there are no orders linked to them. If no such order exists, the customer's name is returned."
List products that have never been part of an order.,SELECT product_name FROM Products P WHERE P.product_id NOT IN (SELECT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);",The uncorrelated subquery selects all product IDs that have appeared in any order item. The outer query then finds products whose IDs are not in this list.
Select employees whose salary is in the top 10% of their department's salaries.,"SELECT name, salary, department_id FROM Employees E1 WHERE salary >= (SELECT MIN(salary) FROM (SELECT salary FROM Employees E2 WHERE E1.department_id = E2.department_id ORDER BY salary DESC LIMIT (SELECT CEIL(COUNT(*) * 0.1) FROM Employees E3 WHERE E3.department_id = E1.department_id)));","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);","This complex query uses nested correlated subqueries. For each employee (E1), it first determines the count of employees in their department. Then, it calculates the top 10% limit. Finally, it finds the minimum salary among those top 10% salaries within that department, and returns employees whose salary is greater than or equal to this threshold."
"For each department, find the employee with the highest salary.","SELECT D.department_name, E.name AS highest_paid_employee, E.salary FROM Departments D JOIN Employees E ON D.department_id = E.department_id WHERE E.salary = (SELECT MAX(salary) FROM Employees WHERE department_id = D.department_id);","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);",This query uses a correlated subquery to find the maximum salary within each department. The outer query then joins Departments and Employees and filters to show only the employee(s) who match that maximum salary for their respective department.
Get the names of products whose stock quantity is below the average stock quantity of all products.,SELECT product_name FROM Products WHERE stock_quantity < (SELECT AVG(stock_quantity) FROM Products);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",An uncorrelated subquery calculates the average stock quantity across all products. The outer query then retrieves product names for items whose stock quantity is less than this overall average.
List all orders that contain more than 5 distinct products.,"SELECT O.order_id, O.order_date FROM Orders O WHERE 5 < (SELECT COUNT(DISTINCT product_id) FROM Order_Items OI WHERE OI.order_id = O.order_id);","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, total_amount REAL); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","This uses a correlated scalar subquery. For each order (O), the inner query counts the distinct products associated with it. The outer query then filters for orders where this count is greater than 5."
Find employees whose hire date is earlier than the earliest hire date in the 'Marketing' department.,"SELECT name, hire_date FROM Employees WHERE hire_date < (SELECT MIN(E.hire_date) FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.department_name = 'Marketing');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",The uncorrelated subquery first identifies the earliest hire date within the 'Marketing' department. The outer query then selects employees whose hire date is earlier than this specific date.
"Show customer names and their total order count, but only for customers who have placed more than 3 orders.","SELECT C.customer_name, (SELECT COUNT(O.order_id) FROM Orders O WHERE O.customer_id = C.customer_id) AS total_orders FROM Customers C WHERE (SELECT COUNT(O.order_id) FROM Orders O WHERE O.customer_id = C.customer_id) > 3;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER);",This uses a correlated scalar subquery in both the `SELECT` list and the `WHERE` clause. It calculates the total orders for each customer and then filters for those with more than 3 orders.
Get the names of employees who have worked on all projects assigned to their department.,SELECT E.name FROM Employees E WHERE NOT EXISTS (SELECT P.project_id FROM Projects P WHERE P.department_id = E.department_id EXCEPT SELECT PA.project_id FROM Project_Assignments PA WHERE PA.employee_id = E.employee_id);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, department_id INTEGER); CREATE TABLE Project_Assignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER);","This complex query uses correlated subqueries and `EXCEPT` to achieve 'division' logic. For each employee, it checks if there is any project associated with their department that they have *not* been assigned to. If no such project exists (meaning they've been assigned to all), their name is returned."
Find the average salary of employees in departments located in 'New York'.,SELECT AVG(salary) FROM Employees WHERE department_id IN (SELECT department_id FROM Departments WHERE location = 'New York');,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",The uncorrelated subquery first finds the `department_id`s of departments located in 'New York'. The outer query then calculates the average salary for employees belonging to these specific departments.
List department names that have no employees.,SELECT department_name FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, department_id INTEGER, name TEXT);","This uses a correlated `NOT EXISTS` subquery. For each department, it checks if there are any employees associated with that department. If no employees are found, the department's name is returned."
Retrieve the names of employees who have a salary greater than the maximum salary in the 'IT' department.,SELECT name FROM Employees WHERE salary > (SELECT MAX(E.salary) FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.department_name = 'IT');,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",The uncorrelated subquery first determines the maximum salary within the 'IT' department. The outer query then selects employees whose salary exceeds this maximum value.
Show orders where the total amount is less than the average total amount of all orders placed in the same year.,"SELECT order_id, total_amount, order_date FROM Orders O1 WHERE total_amount < (SELECT AVG(total_amount) FROM Orders O2 WHERE STRFTIME('%Y', O1.order_date) = STRFTIME('%Y', O2.order_date));","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This uses a correlated subquery. For each order (O1), the inner subquery calculates the average total amount of all orders placed in the same year as O1. The outer query then filters for orders where O1's total amount is less than that yearly average."
Find customers whose city is the same as any employee's city.,"SELECT DISTINCT C.customer_name, C.city FROM Customers C WHERE C.city IN (SELECT DISTINCT E.city FROM Employees E);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, city TEXT);",The uncorrelated subquery generates a list of unique cities where employees reside. The outer query then selects customer names and their cities if their city is present in this list.
"List all departments that have at least one employee with a salary over $70,000.",SELECT D.department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary > 70000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, department_id INTEGER, salary REAL);","This query uses a correlated `EXISTS` subquery. For each department, it checks if there is any employee within that department whose salary exceeds $70,000. If such an employee exists, the department's name is returned."
"Retrieve the project name and the count of employees assigned to it, but only for projects with less than 3 assignments.","SELECT P.project_name, (SELECT COUNT(PA.assignment_id) FROM Project_Assignments PA WHERE PA.project_id = P.project_id) AS num_assignments FROM Projects P WHERE (SELECT COUNT(PA.assignment_id) FROM Project_Assignments PA WHERE PA.project_id = P.project_id) < 3;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE Project_Assignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER);",This query uses a correlated scalar subquery in both the `SELECT` and `WHERE` clauses to count assignments per project and filter projects with fewer than 3 assignments.
Find employees who earn the same salary as their manager.,"SELECT E.name AS employee_name, M.name AS manager_name, E.salary FROM Employees E JOIN Employees M ON E.manager_id = M.employee_id WHERE E.salary = M.salary;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, salary REAL, manager_id INTEGER);","This query uses a self-join to compare an employee's salary with their manager's salary. It's a join example, not a subquery example. It's an anti-pattern for this exercise."
Find products that have never been ordered by a customer from 'London'.,SELECT product_name FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE OI.product_id = P.product_id AND C.city = 'London');,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT); CREATE TABLE Order_Items (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, city TEXT);","This query uses a correlated `NOT EXISTS` subquery. For each product (P), it checks if there's any order item for that product that was placed by a customer from 'London'. If no such order exists, the product's name is returned."
Get the maximum budget among projects that started in 2023.,"SELECT MAX(budget) FROM Projects WHERE STRFTIME('%Y', start_date) = '2023';","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, budget REAL);","This is a simple aggregate query, not involving subqueries. It's an anti-pattern for this exercise."
List employees who were hired after their department's earliest hire date.,"SELECT name, hire_date, department_id FROM Employees E1 WHERE hire_date > (SELECT MIN(hire_date) FROM Employees E2 WHERE E1.department_id = E2.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, hire_date TEXT);","This uses a correlated subquery. For each employee (E1), the inner subquery finds the earliest hire date within E1's department. The outer query then filters employees whose own hire date is later than this departmental earliest date."
"Find departments where all employees earn more than $50,000.",SELECT department_name FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary <= 50000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, department_id INTEGER, salary REAL);","This query uses a correlated `NOT EXISTS` subquery to find departments where there are no employees earning $50,000 or less. This implicitly means all employees in those departments earn more than $50,000."
Select customers who have placed an order every month in 2023.,"SELECT C.customer_name FROM Customers C WHERE 12 = (SELECT COUNT(DISTINCT STRFTIME('%m', O.order_date)) FROM Orders O WHERE O.customer_id = C.customer_id AND STRFTIME('%Y', O.order_date) = '2023');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","This uses a correlated scalar subquery. For each customer, it counts the distinct months in 2023 during which they placed an order. The outer query filters for customers where this count is exactly 12, indicating an order in every month of 2023."
List all unique cities where customers or suppliers are located.,SELECT city FROM Customers UNION SELECT city FROM Suppliers;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, contact_person TEXT, city TEXT, country TEXT);",Retrieves a distinct list of all cities mentioned in either the Customers table or the Suppliers table.
"Get a combined list of all customer names and employee names, including any duplicates.",SELECT name FROM Customers UNION ALL SELECT name FROM Employees;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department TEXT, hire_date TEXT, salary REAL);","Combines all names from the Customers table and the Employees table, preserving any duplicate names that might exist across both lists."
Find the names of products that have been sold and are also currently in inventory.,SELECT P.product_name FROM Products P JOIN OrderDetails OD ON P.product_id = OD.product_id INTERSECT SELECT P.product_name FROM Products P JOIN Inventory I ON P.product_id = I.product_id;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, category TEXT); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL); CREATE TABLE Inventory (inventory_id INTEGER PRIMARY KEY, product_id INTEGER, quantity_on_hand INTEGER, last_updated TEXT);",Returns the names of products that appear in both the OrderDetails (meaning they have been sold) and Inventory tables (meaning they are currently in stock).
List all employees who have never been assigned to a project.,SELECT E.employee_name FROM Employees E EXCEPT SELECT E.employee_name FROM Employees E JOIN ProjectAssignments PA ON E.employee_id = PA.employee_id;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, hire_date TEXT, salary REAL); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER, role TEXT);","Identifies employees whose names are present in the Employees table but are not found in the ProjectAssignments table, indicating they have no project assignments."
Show all product categories that are either electronics or books.,SELECT category FROM Products WHERE category = 'Electronics' UNION SELECT category FROM Products WHERE category = 'Books';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, category TEXT);",Combines the distinct product categories that are specifically 'Electronics' or 'Books'.
Find the names of customers who have placed orders in 2023 and also in 2024.,"SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y', O.order_date) = '2023' INTERSECT SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y', O.order_date) = '2024';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Returns the names of customers who have made at least one order in 2023 AND at least one order in 2024.
List departments that have employees earning over 60000 but are not located in 'New York'.,SELECT DISTINCT department FROM Employees WHERE salary > 60000 EXCEPT SELECT DISTINCT D.department_name FROM Departments D JOIN Employees E ON D.department_name = E.department WHERE D.location = 'New York';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, salary REAL); CREATE TABLE Departments (department_name TEXT PRIMARY KEY, location TEXT);","Finds departments that contain an employee with a salary greater than 60000, excluding any department that is located in 'New York'."
Show all unique product names that are either 'Laptop' or 'Smartphone'.,SELECT product_name FROM Products WHERE product_name = 'Laptop' UNION SELECT product_name FROM Products WHERE product_name = 'Smartphone';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, category TEXT);",Retrieves the distinct names of products that are specifically 'Laptop' or 'Smartphone'.
Find employees who are both managers and active project leads.,"SELECT employee_id, employee_name FROM Employees WHERE role = 'Manager' INTERSECT SELECT E.employee_id, E.employee_name FROM Employees E JOIN ProjectAssignments PA ON E.employee_id = PA.employee_id WHERE PA.role = 'Project Lead';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, role TEXT, department TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER, role TEXT);",Returns the employee IDs and names of individuals who are designated as 'Manager' in the Employees table and also as 'Project Lead' in the ProjectAssignments table.
List all customers who have placed an order but have not left a review.,SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id EXCEPT SELECT C.customer_name FROM Customers C JOIN Reviews R ON C.customer_id = R.customer_id;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Reviews (review_id INTEGER PRIMARY KEY, customer_id INTEGER, product_id INTEGER, rating INTEGER);",Identifies customers who have associated orders but no associated reviews.
Get a combined list of all emails from both customers and employees.,SELECT email FROM Customers UNION ALL SELECT email FROM Employees;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, email TEXT);","Combines all email addresses from the Customers and Employees tables, including any duplicate emails."
Find the product IDs that are in inventory but have never been sold.,SELECT product_id FROM Inventory EXCEPT SELECT product_id FROM OrderDetails;,"CREATE TABLE Inventory (inventory_id INTEGER PRIMARY KEY, product_id INTEGER, quantity_on_hand INTEGER); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);",Returns product IDs that exist in the Inventory table but do not have any corresponding entries in the OrderDetails table.
Show all product names that are in the 'Electronics' category or have a price greater than 500.,SELECT product_name FROM Products WHERE category = 'Electronics' UNION SELECT product_name FROM Products WHERE price > 500;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, category TEXT);",Combines distinct product names that are either categorized as 'Electronics' or have a price exceeding 500.
List employee IDs that are currently assigned to a project and also had a performance review in the last year.,"SELECT employee_id FROM ProjectAssignments INTERSECT SELECT employee_id FROM PerformanceReviews WHERE review_date BETWEEN DATE('now', '-1 year') AND DATE('now');","CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER, role TEXT); CREATE TABLE PerformanceReviews (review_id INTEGER PRIMARY KEY, employee_id INTEGER, review_date TEXT, rating INTEGER);",Returns the employee IDs of individuals who are currently assigned to any project AND have received a performance review within the last 12 months.
Find customer IDs that have placed orders but are not subscribed to the newsletter.,SELECT customer_id FROM Orders EXCEPT SELECT customer_id FROM NewsletterSubscriptions;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE NewsletterSubscriptions (subscription_id INTEGER PRIMARY KEY, customer_id INTEGER, subscribe_date TEXT);",Identifies customer IDs that have placed an order but do not have an entry in the NewsletterSubscriptions table.
Get a list of all unique categories from products and services.,SELECT category FROM Products UNION SELECT category FROM Services;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT); CREATE TABLE Services (service_id INTEGER PRIMARY KEY, service_name TEXT, category TEXT);",Combines all unique categories found in both the Products table and the Services table.
Show the names of products that have 'Software' in their category and also have more than 100 units in stock.,SELECT P.product_name FROM Products P WHERE P.category LIKE '%Software%' INTERSECT SELECT P.product_name FROM Products P JOIN Inventory I ON P.product_id = I.product_id WHERE I.quantity_on_hand > 100;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT); CREATE TABLE Inventory (product_id INTEGER PRIMARY KEY, quantity_on_hand INTEGER);",Returns product names that belong to a category containing 'Software' AND have a quantity on hand greater than 100.
List customer emails who made an order in January 2023 but did not make any order in February 2023.,"SELECT C.email FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y-%m', O.order_date) = '2023-01' EXCEPT SELECT C.email FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y-%m', O.order_date) = '2023-02';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Finds the email addresses of customers who placed orders in January 2023 but did not place any orders in February 2023.
Get all unique names of employees hired after 2020 or having a salary greater than 75000.,"SELECT employee_name FROM Employees WHERE STRFTIME('%Y', hire_date) > '2020' UNION SELECT employee_name FROM Employees WHERE salary > 75000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, hire_date TEXT, salary REAL);",Retrieves the distinct names of employees who were hired after the year 2020 or whose salary is greater than 75000.
Find projects that have employees from both the 'Engineering' and 'Marketing' departments assigned to them.,SELECT P.project_name FROM Projects P JOIN ProjectAssignments PA ON P.project_id = PA.project_id JOIN Employees E ON PA.employee_id = E.employee_id WHERE E.department = 'Engineering' INTERSECT SELECT P.project_name FROM Projects P JOIN ProjectAssignments PA ON P.project_id = PA.project_id JOIN Employees E ON PA.employee_id = E.employee_id WHERE E.department = 'Marketing';,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT);",Returns the names of projects that have at least one employee from the 'Engineering' department AND at least one employee from the 'Marketing' department assigned to them.
"List cities where there are customers, but no suppliers.",SELECT city FROM Customers EXCEPT SELECT city FROM Suppliers;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, city TEXT); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, city TEXT);","Identifies cities where customers are located, but there are no suppliers registered in that same city."
Show all names of people (customers or employees) who reside in 'London'.,SELECT name FROM Customers WHERE city = 'London' UNION ALL SELECT name FROM Employees WHERE city = 'London';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, city TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, city TEXT);","Combines all names of individuals from both Customers and Employees tables who are located in 'London', allowing for duplicates."
Find products that are in the 'Electronics' category and are also priced above 1000.,SELECT product_name FROM Products WHERE category = 'Electronics' INTERSECT SELECT product_name FROM Products WHERE price > 1000;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, category TEXT);",Returns product names that are in the 'Electronics' category AND have a price greater than 1000.
List employees who were hired in 2022 but did not receive a salary increase in 2023.,"SELECT E.employee_name FROM Employees E WHERE STRFTIME('%Y', E.hire_date) = '2022' EXCEPT SELECT E.employee_name FROM Employees E JOIN SalaryHistory SH ON E.employee_id = SH.employee_id WHERE STRFTIME('%Y', SH.change_date) = '2023';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, hire_date TEXT, salary REAL); CREATE TABLE SalaryHistory (history_id INTEGER PRIMARY KEY, employee_id INTEGER, old_salary REAL, new_salary REAL, change_date TEXT);",Finds the names of employees who were hired in 2022 but do not have any salary change records for the year 2023.
Get a unique list of all categories that are either related to 'Office' or 'Home'.,SELECT DISTINCT category FROM Products WHERE category LIKE '%Office%' UNION SELECT DISTINCT category FROM Products WHERE category LIKE '%Home%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, category TEXT);",Retrieves distinct product categories that contain the word 'Office' or the word 'Home'.
Find customers who have ordered 'Laptop' and 'Mouse' in different orders.,SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN OrderDetails OD ON O.order_id = OD.order_id JOIN Products P ON OD.product_id = P.product_id WHERE P.product_name = 'Laptop' INTERSECT SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN OrderDetails OD ON O.order_id = OD.order_id JOIN Products P ON OD.product_id = P.product_id WHERE P.product_name = 'Mouse';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT);",Returns the names of customers who have purchased both a 'Laptop' and a 'Mouse' through their orders.
"List all departments that have employees, but no managers.",SELECT DISTINCT department FROM Employees EXCEPT SELECT DISTINCT department FROM Employees WHERE role = 'Manager';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, role TEXT);","Identifies departments that have employees, but none of those employees have the 'Manager' role."
Show the full details of employees who have worked on 'Project Alpha' or 'Project Beta'.,SELECT E.* FROM Employees E JOIN ProjectAssignments PA ON E.employee_id = PA.employee_id JOIN Projects P ON PA.project_id = P.project_id WHERE P.project_name = 'Project Alpha' UNION SELECT E.* FROM Employees E JOIN ProjectAssignments PA ON E.employee_id = PA.employee_id JOIN Projects P ON PA.project_id = P.project_id WHERE P.project_name = 'Project Beta';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, hire_date TEXT, salary REAL); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER);",Retrieves all details for employees who have been assigned to either 'Project Alpha' or 'Project Beta'.
Find customers who ordered at least one item from the 'Books' category AND at least one item from the 'Movies' category.,SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN OrderDetails OD ON O.order_id = OD.order_id JOIN Products P ON OD.product_id = P.product_id WHERE P.category = 'Books' INTERSECT SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN OrderDetails OD ON O.order_id = OD.order_id JOIN Products P ON OD.product_id = P.product_id WHERE P.category = 'Movies';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);",Returns the names of customers who have purchased items from both the 'Books' category and the 'Movies' category.
List all product IDs that are in inventory but have not been updated since the beginning of 2023.,SELECT product_id FROM Inventory EXCEPT SELECT product_id FROM Inventory WHERE last_updated >= '2023-01-01';,"CREATE TABLE Inventory (inventory_id INTEGER PRIMARY KEY, product_id INTEGER, quantity_on_hand INTEGER, last_updated TEXT);","Identifies product IDs in inventory that have not had their 'last_updated' timestamp changed on or after January 1, 2023."
Get a list of all unique countries where either a customer or an employee resides.,SELECT country FROM Customers UNION SELECT country FROM Employees;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, country TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, country TEXT);",Combines all unique country names from both the Customers and Employees tables.
Find customer IDs who have placed orders for products in the 'Electronics' category and also for products with a price greater than 1000.,SELECT C.customer_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN OrderDetails OD ON O.order_id = OD.order_id JOIN Products P ON OD.product_id = P.product_id WHERE P.category = 'Electronics' INTERSECT SELECT C.customer_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN OrderDetails OD ON O.order_id = OD.order_id JOIN Products P ON OD.product_id = P.product_id WHERE P.price > 1000;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER); CREATE TABLE OrderDetails (order_detail_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",Returns customer IDs of individuals who have ordered products from the 'Electronics' category AND products with a price greater than 1000.
List employees who have a salary greater than 80000 but are not in the 'Sales' department.,SELECT employee_name FROM Employees WHERE salary > 80000 EXCEPT SELECT employee_name FROM Employees WHERE department = 'Sales';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, salary REAL);","Finds employees whose salary is greater than 80000, excluding those who belong to the 'Sales' department."
Show all unique product names that are either discounted (has a discount percentage) or in the 'Clearance' category.,SELECT P.product_name FROM Products P JOIN Discounts D ON P.product_id = D.product_id WHERE D.discount_percentage > 0 UNION SELECT product_name FROM Products WHERE category = 'Clearance';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT); CREATE TABLE Discounts (discount_id INTEGER PRIMARY KEY, product_id INTEGER, discount_percentage REAL, start_date TEXT, end_date TEXT);",Combines the distinct names of products that have an active discount (discount_percentage > 0) or are in the 'Clearance' category.
Find the IDs of projects that have employees from 'HR' department and also started before 2023.,"SELECT P.project_id FROM Projects P JOIN ProjectAssignments PA ON P.project_id = PA.project_id JOIN Employees E ON PA.employee_id = E.employee_id WHERE E.department = 'HR' INTERSECT SELECT project_id FROM Projects WHERE STRFTIME('%Y', start_date) < '2023';","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT); CREATE TABLE ProjectAssignments (assignment_id INTEGER PRIMARY KEY, project_id INTEGER, employee_id INTEGER); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT);",Returns project IDs that involve employees from the 'HR' department AND started before the year 2023.
List all customer IDs who have placed orders but have never been assigned a sales representative.,SELECT O.customer_id FROM Orders O EXCEPT SELECT C.customer_id FROM Customers C JOIN SalesRepresentatives SR ON C.sales_rep_id = SR.sales_rep_id;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, sales_rep_id INTEGER); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE SalesRepresentatives (sales_rep_id INTEGER PRIMARY KEY, rep_name TEXT);",Identifies customer IDs that have associated orders but are not linked to any sales representative.
Get a combined list of all unique product names and service names.,SELECT product_name FROM Products UNION SELECT service_name FROM Services;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT); CREATE TABLE Services (service_id INTEGER PRIMARY KEY, service_name TEXT, type TEXT);",Retrieves a distinct list of all product names from the Products table and all service names from the Services table.
Show employee names who have a 'Senior' role and also work in the 'IT' department.,SELECT employee_name FROM Employees WHERE role LIKE '%Senior%' INTERSECT SELECT employee_name FROM Employees WHERE department = 'IT';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT, role TEXT);",Returns employee names who have 'Senior' in their role title AND belong to the 'IT' department.
List product IDs that are in the 'Electronics' category but are not marked as 'clearance' items.,SELECT product_id FROM Products WHERE category = 'Electronics' EXCEPT SELECT product_id FROM Products WHERE status = 'Clearance';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, status TEXT);",Finds product IDs that are in the 'Electronics' category but do not have a status of 'Clearance'.
Find all unique names of employees who are either in 'Marketing' or 'Sales' department.,SELECT employee_name FROM Employees WHERE department = 'Marketing' UNION SELECT employee_name FROM Employees WHERE department = 'Sales';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department TEXT);",Retrieves the distinct names of employees who work in either the 'Marketing' department or the 'Sales' department.
Retrieve the current date.,SELECT DATE('now');,This query does not require a specific table schema as it retrieves the current date directly.,Gets the current date in 'YYYY-MM-DD' format based on the system's local time.
Show the current date and time.,SELECT DATETIME('now');,This query does not require a specific table schema as it retrieves the current date and time directly.,Retrieves the current date and time in 'YYYY-MM-DD HH:MM:SS' format.
What is the current time?,SELECT TIME('now');,This query does not require a specific table schema as it retrieves the current time directly.,Fetches the current time in 'HH:MM:SS' format.
List all orders placed today.,SELECT * FROM Orders WHERE DATE(order_date) = DATE('now');,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);",Selects all orders where the date part of the 'order_date' column matches the current date.
"Find all orders placed within the last 7 days, including today.","SELECT * FROM Orders WHERE order_date >= DATE('now', '-7 days');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);",Retrieves orders with an 'order_date' on or after 7 days ago from the current date.
Show orders scheduled for delivery next month.,"SELECT * FROM Orders WHERE STRFTIME('%Y-%m', delivery_date) = STRFTIME('%Y-%m', DATE('now', '+1 month'));","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);",Selects orders where the year and month of the 'delivery_date' match the year and month of the date one month from now.
List all employees hired in the year 2023.,"SELECT * FROM Employees WHERE STRFTIME('%Y', hire_date) = '2023';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT, salary REAL, department TEXT);",Filters employees to show only those whose 'hire_date' falls within the year 2023.
"For each employee, calculate their age in years based on their date of birth.","SELECT first_name, last_name, CAST((julianday('now') - julianday(date_of_birth)) / 365.25 AS INTEGER) AS age_in_years FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT, salary REAL, department TEXT);","Calculates the approximate age of each employee in years by finding the difference in Julian days between today and their birth date, then dividing by 365.25."
"Find all events scheduled for October, regardless of the year.","SELECT * FROM Events WHERE STRFTIME('%m', event_datetime) = '10';","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_datetime TEXT, duration_minutes INTEGER, location TEXT);",Retrieves all events where the month part of the 'event_datetime' is '10' (October).
Count the number of orders for each month and year.,"SELECT STRFTIME('%Y-%m', order_date) AS order_month, COUNT(order_id) AS total_orders FROM Orders GROUP BY order_month ORDER BY order_month;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);",Groups orders by their year and month of placement and counts how many orders were made in each period.
Show all payments that were made on a Saturday or Sunday.,"SELECT * FROM Payments WHERE STRFTIME('%w', payment_date) IN ('0', '6');","CREATE TABLE Payments (payment_id INTEGER PRIMARY KEY, order_id INTEGER, payment_date TEXT, amount REAL, payment_method TEXT);",Selects payments where the weekday of the 'payment_date' is '0' (Sunday) or '6' (Saturday).
List employees whose birthdays are within the next 30 days.,"SELECT first_name, last_name, date_of_birth FROM Employees WHERE STRFTIME('%m-%d', date_of_birth) BETWEEN STRFTIME('%m-%d', DATE('now')) AND STRFTIME('%m-%d', DATE('now', '+30 days')) ORDER BY STRFTIME('%m-%d', date_of_birth);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT, salary REAL, department TEXT);","Finds employees whose month and day of birth fall within the current date and 30 days from now, ordering by their upcoming birthday."
Retrieve articles that were published and last modified on the exact same day.,SELECT * FROM Articles WHERE DATE(publish_date) = DATE(last_modified_date);,"CREATE TABLE Articles (article_id INTEGER PRIMARY KEY, title TEXT, publish_date TEXT, last_modified_date TEXT, author_id INTEGER);",Selects articles where the date part of their 'publish_date' and 'last_modified_date' are identical.
Calculate the time difference in days between order date and delivery date for each order.,"SELECT order_id, order_date, delivery_date, JULIANDAY(delivery_date) - JULIANDAY(order_date) AS days_to_deliver FROM Orders WHERE delivery_date IS NOT NULL;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);","Computes the number of days between the 'order_date' and 'delivery_date' for each order using `JULIANDAY` function, excluding orders with null delivery dates."
Average total amount for orders placed in each year.,"SELECT STRFTIME('%Y', order_date) AS order_year, AVG(total_amount) AS avg_order_amount FROM Orders GROUP BY order_year ORDER BY order_year;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);",Groups orders by the year they were placed and calculates the average 'total_amount' for each year.
"Find all orders placed before January 1st, 2023.",SELECT * FROM Orders WHERE order_date < '2023-01-01';,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);",Selects orders with an 'order_date' that is earlier than '2023-01-01'.
Identify employees with a hire date set in the future relative to the current date.,SELECT * FROM Employees WHERE hire_date > DATE('now');,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT, salary REAL, department TEXT);","Finds employees whose 'hire_date' is a date after the current date, potentially indicating a data entry error."
List events that start and end on the same calendar day.,"SELECT * FROM Events WHERE DATE(event_datetime) = DATE(DATETIME(event_datetime, '+' || duration_minutes || ' minutes'));","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_datetime TEXT, duration_minutes INTEGER, location TEXT);",Identifies events where the start date ('event_datetime') is the same as the calculated end date (start date plus 'duration_minutes').
Find last payment date for each order.,"SELECT order_id, MAX(payment_date) AS last_payment_date FROM Payments GROUP BY order_id;","CREATE TABLE Payments (payment_id INTEGER PRIMARY KEY, order_id INTEGER, payment_date TEXT, amount REAL, payment_method TEXT);",Groups payments by 'order_id' and finds the latest 'payment_date' for each order using the MAX aggregate function.
Retrieve all orders that were placed on the first day of any month.,"SELECT * FROM Orders WHERE STRFTIME('%d', order_date) = '01';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);",Selects orders where the day of the month ('%d') of the 'order_date' is '01'.
List employees who have been with the company for over 5 years.,"SELECT * FROM Employees WHERE hire_date <= DATE('now', '-5 years');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT, salary REAL, department TEXT);",Filters employees whose 'hire_date' is 5 years or more prior to the current date.
"Find articles published between January 1st, 2022, and December 31st, 2022.",SELECT * FROM Articles WHERE publish_date BETWEEN '2022-01-01' AND '2022-12-31';,"CREATE TABLE Articles (article_id INTEGER PRIMARY KEY, title TEXT, publish_date TEXT, last_modified_date TEXT, author_id INTEGER);","Selects articles where 'publish_date' falls within the specified date range, inclusive of the start and end dates."
Count the number of employees born in each year.,"SELECT STRFTIME('%Y', date_of_birth) AS birth_year, COUNT(employee_id) AS number_of_employees FROM Employees GROUP BY birth_year ORDER BY birth_year;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT, salary REAL, department TEXT);",Groups employees by their birth year and counts how many employees were born in each respective year.
Identify orders that were delivered more than 7 days after they were placed.,"SELECT * FROM Orders WHERE JULIANDAY(delivery_date) > JULIANDAY(order_date, '+7 days');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);","Retrieves orders where the 'delivery_date' is more than 7 days after the 'order_date', comparing Julian day values."
Display order ID and its order date formatted as MM/DD/YYYY.,"SELECT order_id, STRFTIME('%m/%d/%Y', order_date) AS formatted_order_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);",Formats the 'order_date' of each order into a 'MM/DD/YYYY' string format using STRFTIME.
List all events that took place in the current calendar year.,"SELECT * FROM Events WHERE STRFTIME('%Y', event_datetime) = STRFTIME('%Y', 'now');","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_datetime TEXT, duration_minutes INTEGER, location TEXT);",Selects events where the year part of their 'event_datetime' matches the current year.
Calculate the average payment amount for each month in the year 2023.,"SELECT STRFTIME('%Y-%m', payment_date) AS payment_month, AVG(amount) AS avg_payment FROM Payments WHERE STRFTIME('%Y', payment_date) = '2023' GROUP BY payment_month ORDER BY payment_month;","CREATE TABLE Payments (payment_id INTEGER PRIMARY KEY, order_id INTEGER, payment_date TEXT, amount REAL, payment_method TEXT);",Groups payments from the year 2023 by month and calculates the average 'amount' for each month.
Find all employees who have their birthday today.,"SELECT first_name, last_name FROM Employees WHERE STRFTIME('%m-%d', date_of_birth) = STRFTIME('%m-%d', DATE('now'));","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT, salary REAL, department TEXT);","Retrieves employees whose month and day of birth match the current month and day, effectively finding today's birthdays."
Orders with delivery scheduled within 3 days of order date.,"SELECT * FROM Orders WHERE JULIANDAY(delivery_date) <= JULIANDAY(order_date, '+3 days');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, delivery_date TEXT, status TEXT);",Selects orders where the 'delivery_date' is on or before 3 days after the 'order_date'.
Count how many events occur on each day of the week.,"SELECT CASE STRFTIME('%w', event_datetime) WHEN '0' THEN 'Sunday' WHEN '1' THEN 'Monday' WHEN '2' THEN 'Tuesday' WHEN '3' THEN 'Wednesday' WHEN '4' THEN 'Thursday' WHEN '5' THEN 'Friday' ELSE 'Saturday' END AS day_of_week, COUNT(event_id) AS number_of_events FROM Events GROUP BY day_of_week ORDER BY STRFTIME('%w', event_datetime);","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_datetime TEXT, duration_minutes INTEGER, location TEXT);","Counts the number of events for each day of the week, mapping the numerical weekday (0-6) returned by STRFTIME('%w') to its name, and orders them from Sunday to Saturday."
List all employees ordered by their salary from highest to lowest.,"SELECT employee_id, first_name, last_name, salary FROM Employees ORDER BY salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER);",Retrieves all employee details and sorts them by salary in descending order.
Show products sorted by their price from lowest to highest.,"SELECT product_name, price FROM Products ORDER BY price ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","Fetches product names and prices, ordered by price in ascending order."
"Get all employees, first by department ID in ascending order, then by last name in descending order within each department.","SELECT employee_id, first_name, last_name, department_id FROM Employees ORDER BY department_id ASC, last_name DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER);","Lists employees, sorting first by department ID ascending, then by last name descending for employees within the same department."
Find the 5 most expensive products in the 'Electronics' category.,"SELECT product_name, price FROM Products WHERE category = 'Electronics' ORDER BY price DESC LIMIT 5;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","Selects the names and prices of products categorized as 'Electronics', orders them by price in descending order, and returns only the top 5."
Retrieve the 3rd to 5th oldest orders.,"SELECT order_id, order_date, total_amount FROM Orders ORDER BY order_date ASC LIMIT 3 OFFSET 2;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipping_status TEXT);","Selects order IDs, dates, and total amounts, orders them by date ascending, then retrieves 3 orders starting from the 3rd one (skipping the first 2)."
"List departments and the average salary of their employees, sorted by average salary from highest to lowest.","SELECT d.department_name, AVG(e.salary) AS average_salary FROM Departments d JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_name ORDER BY average_salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Calculates the average salary for each department, then sorts the departments by their average salary in descending order."
"Show products and their total inventory value (price * stock) for items with stock greater than 10, ordered by total value descending.","SELECT product_name, (price * stock_quantity) AS total_value FROM Products WHERE stock_quantity > 10 ORDER BY total_value DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","Computes the total value (price * stock) for products with stock over 10, and then orders these products by this calculated total value in descending order."
"List all employees, ordered by their department ID, with those without a department appearing last.","SELECT employee_id, first_name, last_name, department_id FROM Employees ORDER BY department_id ASC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER);","Retrieves employee details and orders them by department ID ascending. In SQLite, NULL values will appear last for ASC sorting."
Find the most recently updated product.,"SELECT product_name, last_updated FROM Products ORDER BY last_updated DESC LIMIT 1;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","Selects the product name and its last updated timestamp, orders by timestamp descending, and returns only the first (most recent) one."
List the 3 highest rated movies.,"SELECT title, rating, release_year FROM Movies ORDER BY rating DESC, release_year DESC LIMIT 3;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, rating REAL, genre TEXT, duration_minutes INTEGER);","Fetches the title, rating, and release year of movies, ordered first by rating descending and then by release year descending, returning the top 3."
"Get the second page of 10 customers, sorted by registration date, assuming each page has 10 customers.","SELECT customer_id, first_name, email FROM Customers ORDER BY registration_date ASC LIMIT 10 OFFSET 10;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","Retrieves customer IDs, first names, and emails, sorted by their registration date, then skips the first 10 records and returns the next 10."
"List all orders along with the name of the customer who placed them, sorted by customer's last name.","SELECT o.order_id, o.order_date, c.first_name, c.last_name FROM Orders o JOIN Customers c ON o.customer_id = c.customer_id ORDER BY c.last_name ASC, c.first_name ASC;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipping_status TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","Joins orders with customer details and lists order IDs, dates, and customer names, sorted by the customer's last name then first name."
"Retrieve zero products, but prepare for a list sorted by price.","SELECT product_name, price FROM Products ORDER BY price ASC LIMIT 0;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","Selects no products, effectively returning an empty result set, but demonstrates a valid query structure for sorting by price."
"Show the genres and the number of movies in each, ordered by the count of movies descending.","SELECT genre, COUNT(movie_id) AS movie_count FROM Movies GROUP BY genre ORDER BY movie_count DESC;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, rating REAL, genre TEXT, duration_minutes INTEGER);",Counts the number of movies for each genre and then orders the results by this count in descending order.
"Get any 5 customers after the first 10, if no specific order is important.","SELECT customer_id, first_name FROM Customers LIMIT 5 OFFSET 10;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","Retrieves 5 customer IDs and first names, skipping the first 10 records. The order of results is not guaranteed without an ORDER BY clause."
List the 4 longest movies released after 2000.,"SELECT title, duration_minutes FROM Movies WHERE release_year > 2000 ORDER BY duration_minutes DESC LIMIT 4;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, rating REAL, genre TEXT, duration_minutes INTEGER);","Finds movies released after 2000, orders them by duration in descending order, and returns the top 4 longest ones."
"List books sorted alphabetically by author, ignoring case.","SELECT title, author FROM Books ORDER BY author COLLATE NOCASE ASC;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, genre TEXT, publication_year INTEGER, price REAL, stock_count INTEGER);","Retrieves book titles and authors, sorted alphabetically by author name, treating uppercase and lowercase letters as the same for sorting purposes."
"From a list of employees sorted by salary, get the 5 employees starting from the 46th position.","SELECT employee_id, first_name, salary FROM Employees ORDER BY salary ASC LIMIT 5 OFFSET 45;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER);","Selects 5 employee records, ordered by salary ascending, starting from the 46th record (skipping the first 45)."
Show the 10 most recent orders.,"SELECT order_id, order_date, total_amount FROM Orders ORDER BY order_date DESC LIMIT 10;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipping_status TEXT);","Retrieves the 10 most recent orders based on their order date, sorted in descending order."
"List the names of all products, ordered by their stock quantity from lowest to highest.",SELECT product_name FROM Products ORDER BY stock_quantity ASC;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);",Selects only the product names but orders the results based on their stock quantity in ascending order.
"For each customer, show their total spending and list the top 5 customers by total spending.","SELECT c.first_name, c.last_name, SUM(o.total_amount) AS total_spent FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY total_spent DESC LIMIT 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipping_status TEXT);","Calculates the total amount spent by each customer, then lists the top 5 customers with the highest total spending."
"List students, first by GPA in descending order, then by last name in ascending order for students with the same GPA.","SELECT student_id, first_name, last_name, gpa FROM Students ORDER BY gpa DESC, last_name ASC;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, enrollment_date TEXT, gpa REAL, major TEXT);","Retrieves student details, sorting first by GPA in descending order, and then by last name in ascending order for ties in GPA."
List the order IDs and total amounts of the 3 most expensive orders.,"SELECT order_id, total_amount FROM Orders ORDER BY total_amount DESC LIMIT 3;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipping_status TEXT);",Retrieves the order IDs and total amounts for the 3 orders with the highest total amounts.
List the oldest 5 employees based on their hire date.,"SELECT first_name, last_name, hire_date FROM Employees ORDER BY hire_date ASC LIMIT 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER);","Selects the first and last names and hire dates of employees, orders them by hire date in ascending order, and returns the top 5 oldest."
"List product names, ordered by the length of their name from shortest to longest.",SELECT product_name FROM Products ORDER BY LENGTH(product_name) ASC;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);",Retrieves product names and sorts them by the length of the name string in ascending order.
"Show all students except the first 20, ordered by their enrollment date.","SELECT student_id, first_name, enrollment_date FROM Students ORDER BY enrollment_date ASC OFFSET 20;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, enrollment_date TEXT, gpa REAL, major TEXT);","Selects all student details, ordered by enrollment date ascending, skipping the first 20 students."
"List all unique genres of movies, alphabetically.",SELECT DISTINCT genre FROM Movies ORDER BY genre ASC;,"CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, rating REAL, genre TEXT, duration_minutes INTEGER);",Retrieves all unique movie genres and lists them in alphabetical order.
"List products, prioritizing those in stock (stock_quantity > 0) first, then by product name.","SELECT product_name, stock_quantity FROM Products ORDER BY CASE WHEN stock_quantity > 0 THEN 0 ELSE 1 END ASC, product_name ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","Orders products so that those with stock greater than 0 appear first, followed by out-of-stock items, then by product name alphabetically for ties."
"Find the 5 most recently ordered items for products in the 'Books' category, showing item ID and order date.","SELECT oi.order_item_id, o.order_date FROM Order_Items oi JOIN Orders o ON oi.order_id = o.order_id JOIN Products p ON oi.product_id = p.product_id WHERE p.category = 'Books' ORDER BY o.order_date DESC LIMIT 5;","CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipping_status TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER, last_updated TEXT);","Joins order items, orders, and products to find items belonging to the 'Books' category, then orders these by their order date in descending order and returns the top 5."
"List all orders, prioritizing 'Pending' status, then 'Processing', then 'Shipped', and finally 'Delivered'.","SELECT order_id, shipping_status, order_date FROM Orders ORDER BY CASE shipping_status WHEN 'Pending' THEN 1 WHEN 'Processing' THEN 2 WHEN 'Shipped' THEN 3 WHEN 'Delivered' THEN 4 ELSE 5 END, order_date ASC;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipping_status TEXT);","Orders the orders based on a custom priority for their shipping status ('Pending' first, then 'Processing', etc.), and then by order date ascending for orders with the same status."
"Find all products whose price is between 10.00 and 50.00, inclusive.","SELECT product_id, product_name, price FROM Products WHERE price BETWEEN 10.00 AND 50.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query retrieves the product ID, name, and price for all products where the price falls within the specified range of 10.00 to 50.00, including the boundary values."
List all customers whose names start with 'A' or 'J'.,"SELECT customer_id, first_name, last_name FROM Customers WHERE first_name LIKE 'A%' OR first_name LIKE 'J%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, city TEXT);","This query selects customer IDs, first names, and last names for customers whose first name begins with either the letter 'A' or the letter 'J'."
"Show orders placed by customers located in 'New York', 'Los Angeles', or 'Chicago'.","SELECT order_id, customer_id, order_date, total_amount FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE city IN ('New York', 'Los Angeles', 'Chicago'));","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, city TEXT);","This query retrieves order details for all orders placed by customers residing in New York, Los Angeles, or Chicago, using a subquery to filter customer IDs."
Find departments that have at least one employee earning more than 70000.,SELECT department_name FROM Departments WHERE EXISTS (SELECT 1 FROM Employees WHERE Employees.department_id = Departments.department_id AND salary > 70000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);","This query lists the names of departments that contain at least one employee with a salary exceeding 70000, using the EXISTS operator for efficient checking."
"Get products with 'Smart' in their name, regardless of case, and stock quantity not between 50 and 100.","SELECT product_id, product_name, stock_quantity FROM Products WHERE product_name LIKE '%Smart%' COLLATE NOCASE AND stock_quantity NOT BETWEEN 50 AND 100;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query fetches products that have 'Smart' in their name (case-insensitive) and whose stock quantity is not within the range of 50 to 100, exclusive of 50 and 100."
Select employees whose email address contains '.org' or '.edu'.,"SELECT employee_id, first_name, last_name, email FROM Employees WHERE email LIKE '%.org' OR email LIKE '%.edu';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT);",This query retrieves employee information for those whose email addresses end with either '.org' or '.edu'.
Show all books published between 2000 and 2010.,"SELECT book_id, title, author, publication_year FROM Books WHERE publication_year BETWEEN 2000 AND 2010;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_year INTEGER, genre TEXT, price REAL);","This query lists books published in any year from 2000 to 2010, inclusive."
Find customers who have not placed any orders.,"SELECT customer_id, first_name, last_name FROM Customers WHERE NOT EXISTS (SELECT 1 FROM Orders WHERE Orders.customer_id = Customers.customer_id);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","This query selects customers who do not have any corresponding entries in the Orders table, meaning they have not placed any orders."
Get employees whose job title is not 'Manager' and salary is between 60000 and 90000.,"SELECT employee_id, first_name, job_title, salary FROM Employees WHERE job_title NOT LIKE '%Manager%' AND salary BETWEEN 60000 AND 90000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, job_title TEXT, salary REAL);","This query finds employees whose job title does not contain the word 'Manager' and whose salary falls within the range of 60000 to 90000, inclusive."
List movies released in the 1990s.,"SELECT movie_id, title, release_year FROM Movies WHERE release_year BETWEEN 1990 AND 1999;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT);",This query retrieves movies that were released in any year from 1990 up to and including 1999.
Find products whose category is 'Electronics' or 'Apparel' and price is above 100.,"SELECT product_name, price, category FROM Products WHERE category IN ('Electronics', 'Apparel') AND price > 100;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",This query selects products that belong to either the 'Electronics' or 'Apparel' category and have a price greater than 100.
Show all orders placed on or after '2023-01-15' and on or before '2023-03-31'.,"SELECT order_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2023-01-15' AND '2023-03-31';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query fetches all orders that were placed between January 15, 2023, and March 31, 2023, inclusive of the start and end dates."
"Get employees whose first name contains 'an' and are not in department IDs 1, 3, or 5.","SELECT employee_id, first_name, last_name, department_id FROM Employees WHERE first_name LIKE '%an%' AND department_id NOT IN (1, 3, 5);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, salary REAL);","This query lists employees whose first name includes the substring 'an' and who do not belong to department IDs 1, 3, or 5."
Retrieve suppliers that supply products in the 'Food' category.,SELECT DISTINCT supplier_name FROM Suppliers WHERE EXISTS (SELECT 1 FROM Products WHERE Products.supplier_id = Suppliers.supplier_id AND Products.category = 'Food');,"CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, supplier_id INTEGER);",This query returns the names of suppliers who provide at least one product categorized as 'Food'.
Find events scheduled for 'Concert' or 'Festival' and occurring within the next 30 days.,"SELECT event_name, event_date, event_type FROM Events WHERE event_type IN ('Concert', 'Festival') AND event_date BETWEEN DATE('now') AND DATE('now', '+30 days');","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, event_type TEXT);","This query selects events that are either 'Concert' or 'Festival' type and are scheduled to occur within the next 30 days, starting from today."
List all products that have 'Pro' in their name and have a price not between 500 and 1000.,"SELECT product_id, product_name, price FROM Products WHERE product_name LIKE '%Pro%' AND price NOT BETWEEN 500 AND 1000;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);","This query retrieves products whose name contains 'Pro' and whose price is not within the range of 500 to 1000, exclusive of 500 and 1000."
Show customers whose email address does not contain 'gmail.com'.,"SELECT customer_id, first_name, email FROM Customers WHERE email NOT LIKE '%gmail.com%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT);",This query selects customers whose email addresses do not contain the substring 'gmail.com'.
Get the names of employees who were hired in 2022 or 2023.,"SELECT employee_id, first_name, last_name, hire_date FROM Employees WHERE strftime('%Y', hire_date) IN ('2022', '2023');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT);",This query fetches employees who were hired in either the year 2022 or 2023 by extracting the year from their hire date.
Find orders that have at least one item with a quantity greater than 5.,SELECT DISTINCT order_id FROM OrderItems WHERE EXISTS (SELECT 1 FROM Products WHERE OrderItems.product_id = Products.product_id AND OrderItems.quantity > 5);,"CREATE TABLE OrderItems (order_id INTEGER, product_id INTEGER, quantity INTEGER, PRIMARY KEY (order_id, product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT);",This query returns the unique IDs of orders that include at least one product with a quantity greater than 5.
List books whose genre is 'Fantasy' or 'Science Fiction' and price is between 15.00 and 30.00.,"SELECT title, author, genre, price FROM Books WHERE genre IN ('Fantasy', 'Science Fiction') AND price BETWEEN 15.00 AND 30.00;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author TEXT, publication_year INTEGER, genre TEXT, price REAL);","This query retrieves books that are categorized as 'Fantasy' or 'Science Fiction' and have a price within the range of 15.00 to 30.00, inclusive."
Show all customers whose phone number contains '555' or '123' at any position.,"SELECT customer_id, first_name, last_name, phone_number FROM Customers WHERE phone_number LIKE '%555%' OR phone_number LIKE '%123%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT);",This query selects customers whose phone number contains either '555' or '123' as a substring.
Retrieve sales records with a quantity between 1 and 10 and a price per unit between 20.00 and 50.00.,"SELECT sale_id, product_id, quantity, price_per_unit FROM Sales WHERE quantity BETWEEN 1 AND 10 AND price_per_unit BETWEEN 20.00 AND 50.00;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, price_per_unit REAL, sale_date TEXT);","This query fetches sales records where the quantity sold is between 1 and 10, and the price per unit is between 20.00 and 50.00, inclusive for both ranges."
Find courses that have no enrolled students.,"SELECT course_id, course_name FROM Courses WHERE NOT EXISTS (SELECT 1 FROM Enrollments WHERE Enrollments.course_id = Courses.course_id);","CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, grade TEXT);","This query lists courses that do not have any corresponding entries in the Enrollments table, indicating no students are currently enrolled in them."
List employees whose last name does not start with 'S' and their salary is not between 40000 and 60000.,"SELECT employee_id, first_name, last_name, salary FROM Employees WHERE last_name NOT LIKE 'S%' AND salary NOT BETWEEN 40000 AND 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER);",This query retrieves employees whose last name does not start with 'S' and whose salary is not within the range of 40000 to 60000 (excluding boundaries).
Show orders with a total amount over 1000 and placed in the first quarter of 2023.,"SELECT order_id, total_amount, order_date FROM Orders WHERE total_amount > 1000 AND order_date BETWEEN '2023-01-01' AND '2023-03-31';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query finds orders with a total amount exceeding 1000 that were placed between January 1st and March 31st, 2023."
Get movies where the genre is 'Action' or 'Thriller' and the director's name contains 'Nolan'.,"SELECT movie_id, title, director, genre FROM Movies WHERE genre IN ('Action', 'Thriller') AND director LIKE '%Nolan%';","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, director TEXT, release_year INTEGER, genre TEXT);",This query selects movies that are either 'Action' or 'Thriller' genre and have 'Nolan' in their director's name.
Find employees who are managers (their job title contains 'Manager') and are earning between 80000 and 120000.,"SELECT employee_id, first_name, job_title, salary FROM Employees WHERE job_title LIKE '%Manager%' AND salary BETWEEN 80000 AND 120000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, job_title TEXT, salary REAL);","This query retrieves employees whose job title includes 'Manager' and whose salary is within the range of 80000 to 120000, inclusive."
List all products that have been purchased at least once.,"SELECT product_id, product_name FROM Products WHERE EXISTS (SELECT 1 FROM OrderItems WHERE OrderItems.product_id = Products.product_id);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","This query returns products that have at least one corresponding entry in the OrderItems table, indicating they have been purchased."
"Show customers whose city is 'London', 'Paris', or 'Berlin' and their last name does not end with 'son'.","SELECT customer_id, first_name, last_name, city FROM Customers WHERE city IN ('London', 'Paris', 'Berlin') AND last_name NOT LIKE '%son';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, city TEXT);","This query selects customers from London, Paris, or Berlin whose last name does not end with 'son'."
Get tasks that are in 'Pending' or 'In Progress' status and are due in the next 7 days.,"SELECT task_id, task_name, status, due_date FROM Tasks WHERE status IN ('Pending', 'In Progress') AND due_date BETWEEN DATE('now') AND DATE('now', '+7 days');","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, status TEXT, due_date TEXT);","This query retrieves tasks that are either 'Pending' or 'In Progress' and are due within the next seven days, including today."
Find the names of employees who work in departments located in 'New York'.,SELECT EmployeeName FROM Employees WHERE DepartmentID IN (SELECT DepartmentID FROM Departments WHERE Location = 'New York');,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query retrieves the names of employees whose DepartmentID matches any DepartmentID found in the subquery, which selects DepartmentIDs from departments located in 'New York'."
List all products whose price is greater than the average price of all products.,"SELECT ProductName, Price FROM Products WHERE Price > (SELECT AVG(Price) FROM Products);","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, Category TEXT);","This query selects product names and their prices where the price is greater than the calculated average price of all products in the Products table, determined by a scalar subquery."
Show each department's name along with the total number of employees in that department.,"SELECT D.DepartmentName, (SELECT COUNT(*) FROM Employees E WHERE E.DepartmentID = D.DepartmentID) AS EmployeeCount FROM Departments D;","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER);","For each department, this query retrieves its name and, using a correlated subquery in the SELECT clause, counts the number of employees belonging to that specific department."
Find the total sales for each product category for sales made in the last 30 days.,"SELECT T1.Category, SUM(T1.TotalSales) AS TotalCategorySales FROM (SELECT P.Category, OI.Quantity * OI.UnitPrice AS TotalSales FROM Order_Items OI JOIN Products P ON OI.ProductID = P.ProductID JOIN Orders O ON OI.OrderID = O.OrderID WHERE O.OrderDate >= DATE('now', '-30 days')) AS T1 GROUP BY T1.Category;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, OrderDate TEXT, CustomerID INTEGER); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, UnitPrice REAL); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT);","This query uses a derived table (subquery in FROM) to first calculate the total sales for each order item made in the last 30 days, along with its product category. Then, it groups these results by category and sums the total sales."
List customers who have placed at least one order.,SELECT CustomerName FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.CustomerID = C.CustomerID);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);","This query selects customer names if there exists at least one order associated with that customer's ID, efficiently checking for the presence of related records using an EXISTS subquery."
Get the names of courses that have more enrolled students than the average enrollment across all courses.,SELECT CourseName FROM Courses WHERE CourseID IN (SELECT CourseID FROM Enrollments GROUP BY CourseID HAVING COUNT(StudentID) > (SELECT AVG(EnrollmentCount) FROM (SELECT COUNT(StudentID) AS EnrollmentCount FROM Enrollments GROUP BY CourseID)));,"CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, InstructorID INTEGER); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, EnrollmentDate TEXT);","This query identifies courses with enrollments exceeding the overall average. It uses a nested subquery in the WHERE clause: the innermost subquery calculates individual course enrollment counts, the middle subquery computes their average, and the outermost subquery filters courses based on this average."
Retrieve the names of employees who earn more than the maximum salary in the 'Marketing' department.,SELECT EmployeeName FROM Employees WHERE Salary > (SELECT MAX(E.Salary) FROM Employees E JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE D.DepartmentName = 'Marketing');,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL, DepartmentID INTEGER); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT);","This query selects employee names whose salary is higher than the maximum salary found within the 'Marketing' department, which is determined by a scalar subquery involving a join."
"For each order, list the order ID and the total value of all items in that order.","SELECT O.OrderID, (SELECT SUM(OI.Quantity * OI.UnitPrice) FROM Order_Items OI WHERE OI.OrderID = O.OrderID) AS TotalOrderValue FROM Orders O;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, OrderDate TEXT); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, UnitPrice REAL);","This query retrieves each OrderID and, for each order, calculates its total value by summing the (quantity * unit price) of its associated order items using a correlated subquery in the SELECT clause."
Find the names of authors who have published books in every category that 'Science Fiction' books are published in.,SELECT A.AuthorName FROM Authors A WHERE NOT EXISTS (SELECT DISTINCT P2.Category FROM Books P2 WHERE P2.Category = 'Science Fiction' EXCEPT SELECT B.Category FROM Books B WHERE B.AuthorID = A.AuthorID);,"CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT); CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, Category TEXT);","This query uses a NOT EXISTS clause with a set operation (EXCEPT) to find authors. It checks if there is any category associated with 'Science Fiction' books that a given author has NOT published in. If no such category exists (i.e., the EXCEPT subquery returns an empty set), the author is selected."
Retrieve employees who have the highest salary in their respective departments.,"SELECT E1.EmployeeName, E1.Salary, D.DepartmentName FROM Employees E1 JOIN Departments D ON E1.DepartmentID = D.DepartmentID WHERE E1.Salary = (SELECT MAX(E2.Salary) FROM Employees E2 WHERE E2.DepartmentID = E1.DepartmentID);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL, DepartmentID INTEGER); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT);",This query selects employees whose salary matches the maximum salary found within their own department. The correlated subquery efficiently determines the maximum salary for each employee's department.
List all products that have never been ordered.,SELECT ProductName FROM Products WHERE ProductID NOT IN (SELECT DISTINCT ProductID FROM Order_Items);,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query selects products whose ProductID is not present in the distinct list of ProductIDs found in the Order_Items table, effectively identifying products that have not been ordered."
"Show regions where the total sales from 'Electronics' products exceed $10,000.",SELECT RegionName FROM Regions R WHERE (SELECT SUM(S.Amount) FROM Sales S JOIN Products P ON S.ProductID = P.ProductID WHERE S.RegionID = R.RegionID AND P.Category = 'Electronics') > 10000;,"CREATE TABLE Regions (RegionID INTEGER PRIMARY KEY, RegionName TEXT); CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, RegionID INTEGER, Amount REAL); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT);","This query selects region names where the sum of sales for 'Electronics' products within that specific region (calculated by a correlated subquery) exceeds $10,000."
Get the names of students who are enrolled in more than 3 courses.,SELECT StudentName FROM Students WHERE StudentID IN (SELECT StudentID FROM Enrollments GROUP BY StudentID HAVING COUNT(CourseID) > 3);,"CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER);","This query selects student names whose StudentID is found in the subquery, which identifies students by grouping enrollments and filtering those who have enrolled in more than 3 courses."
Find the average salary of employees in departments that have more than 5 employees.,SELECT AVG(Salary) FROM Employees WHERE DepartmentID IN (SELECT DepartmentID FROM Employees GROUP BY DepartmentID HAVING COUNT(EmployeeID) > 5);,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL, DepartmentID INTEGER);",This query calculates the average salary only for employees belonging to departments that have more than 5 employees. The subquery first identifies these departments.
List all orders along with the name of the customer who placed each order.,"SELECT O.OrderID, O.OrderDate, (SELECT C.CustomerName FROM Customers C WHERE C.CustomerID = O.CustomerID) AS CustomerName FROM Orders O;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT); CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT);",This query retrieves order details and uses a correlated scalar subquery in the SELECT clause to fetch the corresponding customer's name for each order.
Show products that have been ordered by customers from 'California'.,SELECT DISTINCT P.ProductName FROM Products P WHERE P.ProductID IN (SELECT OI.ProductID FROM Order_Items OI JOIN Orders O ON OI.OrderID = O.OrderID JOIN Customers C ON O.CustomerID = C.CustomerID WHERE C.State = 'California');,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER); CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, State TEXT);",This query selects distinct product names where the ProductID exists in a list generated by a subquery. The subquery identifies ProductIDs from order items linked to orders placed by customers from 'California'.
Get the name of the department with the highest average employee salary.,SELECT DepartmentName FROM Departments D WHERE D.DepartmentID = (SELECT DepartmentID FROM Employees GROUP BY DepartmentID ORDER BY AVG(Salary) DESC LIMIT 1);,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Salary REAL, DepartmentID INTEGER);","This query finds the department name whose ID matches the DepartmentID returned by the subquery. The subquery calculates the average salary for each department, orders them in descending order, and selects the DepartmentID of the department with the highest average salary."
List customers who have placed orders that include both 'Laptop' and 'Mouse' products.,SELECT C.CustomerName FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O JOIN Order_Items OI JOIN Products P ON OI.OrderID = O.OrderID AND OI.ProductID = P.ProductID WHERE O.CustomerID = C.CustomerID AND P.ProductName = 'Laptop') AND EXISTS (SELECT 1 FROM Orders O JOIN Order_Items OI JOIN Products P ON OI.OrderID = O.OrderID AND OI.ProductID = P.ProductID WHERE O.CustomerID = C.CustomerID AND P.ProductName = 'Mouse');,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT);",This query selects customer names if they have placed an order that contains a 'Laptop' (first EXISTS subquery) AND also an order that contains a 'Mouse' (second EXISTS subquery). Both subqueries are correlated to the outer query's customer.
"For each employee, show their name and the name of their manager (if they have one).","SELECT E.EmployeeName, (SELECT M.EmployeeName FROM Employees M WHERE M.EmployeeID = E.ManagerID) AS ManagerName FROM Employees E;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, ManagerID INTEGER);",This query retrieves each employee's name and uses a correlated scalar subquery to find the name of their manager by matching the EmployeeID from the manager's row with the current employee's ManagerID.
Find the product category that has the highest total quantity sold.,SELECT Category FROM Products P WHERE (SELECT SUM(OI.Quantity) FROM Order_Items OI WHERE OI.ProductID = P.ProductID) = (SELECT MAX(TotalQtySold) FROM (SELECT SUM(OI2.Quantity) AS TotalQtySold FROM Order_Items OI2 JOIN Products P2 ON OI2.ProductID = P2.ProductID GROUP BY P2.Category));,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, ProductID INTEGER, Quantity INTEGER);","This query identifies the product category with the highest total quantity sold. The outer WHERE clause compares the total quantity sold for each product's category to the overall maximum total quantity sold across all categories, which is computed by a nested subquery using a derived table."
List employees whose hiring date is earlier than the average hiring date of all employees in their department.,SELECT E1.EmployeeName FROM Employees E1 WHERE E1.HireDate < (SELECT AVG(JULIANDAY(E2.HireDate)) FROM Employees E2 WHERE E2.DepartmentID = E1.DepartmentID);,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, HireDate TEXT, DepartmentID INTEGER);","This query selects employee names whose hiring date (converted to Julian days for comparison) is earlier than the average hiring date of all employees within their specific department, as calculated by a correlated subquery."
Retrieve sales records where the amount is greater than the average sale amount for that specific product.,"SELECT SaleID, ProductID, Amount FROM Sales S1 WHERE S1.Amount > (SELECT AVG(S2.Amount) FROM Sales S2 WHERE S2.ProductID = S1.ProductID);","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, Amount REAL);","This query selects sales records where the individual sale amount exceeds the average sale amount for that particular product, using a correlated subquery to determine the product-specific average."
Show publishers who have published at least one book in 'Fantasy' category and at least one book in 'Horror' category.,SELECT P.PublisherName FROM Publishers P WHERE EXISTS (SELECT 1 FROM Books B WHERE B.PublisherID = P.PublisherID AND B.Category = 'Fantasy') AND EXISTS (SELECT 1 FROM Books B WHERE B.PublisherID = P.PublisherID AND B.Category = 'Horror');,"CREATE TABLE Publishers (PublisherID INTEGER PRIMARY KEY, PublisherName TEXT); CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, PublisherID INTEGER, Category TEXT);","This query selects publisher names if they have published a 'Fantasy' book (first EXISTS clause) AND a 'Horror' book (second EXISTS clause), both conditions being checked by correlated subqueries."
Find the product name and its category for products that have a price higher than any product in the 'Electronics' category.,"SELECT ProductName, Category FROM Products WHERE Price > (SELECT MAX(Price) FROM Products WHERE Category = 'Electronics');","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, Category TEXT);","This query selects products whose price is strictly greater than the maximum price of any product categorized as 'Electronics', using a scalar subquery to find this maximum."
"List departments that have a total employee salary greater than $100,000.",SELECT DepartmentName FROM Departments D WHERE (SELECT SUM(E.Salary) FROM Employees E WHERE E.DepartmentID = D.DepartmentID) > 100000;,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Salary REAL, DepartmentID INTEGER);","This query selects department names where the sum of salaries of all employees within that specific department (calculated by a correlated subquery) exceeds $100,000."
Retrieve employees whose salary is lower than the lowest salary in the 'IT' department.,"SELECT EmployeeName, Salary FROM Employees WHERE Salary < (SELECT MIN(Salary) FROM Employees E JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE D.DepartmentName = 'IT');","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL, DepartmentID INTEGER); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT);","This query selects employees whose salary is less than the minimum salary found among employees in the 'IT' department, which is determined by a scalar subquery with a join."
Get the names of courses that have no students enrolled.,SELECT CourseName FROM Courses C WHERE NOT EXISTS (SELECT 1 FROM Enrollments E WHERE E.CourseID = C.CourseID);,"CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER);","This query selects course names where there is no existing enrollment record linked to that course, indicating no students are enrolled, using a NOT EXISTS subquery."
Find the top 3 customers by total order value.,"SELECT C.CustomerName, (SELECT SUM(OI.Quantity * OI.UnitPrice) FROM Orders O JOIN Order_Items OI ON O.OrderID = OI.OrderID WHERE O.CustomerID = C.CustomerID) AS TotalValue FROM Customers C ORDER BY TotalValue DESC LIMIT 3;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER, UnitPrice REAL);","This query selects customer names and their total order value (calculated by a correlated subquery) and then orders the results by total value in descending order, limiting to the top 3 customers."
Identify products whose sales in the last year are below the average annual sales for that product category.,"SELECT P.ProductName FROM Products P WHERE (SELECT SUM(OI.Quantity * OI.UnitPrice) FROM Order_Items OI JOIN Orders O ON OI.OrderID = O.OrderID WHERE OI.ProductID = P.ProductID AND O.OrderDate >= DATE('now', '-1 year')) < (SELECT AVG(AnnualSales) FROM (SELECT SUM(OI2.Quantity * OI2.UnitPrice) AS AnnualSales FROM Order_Items OI2 JOIN Orders O2 ON OI2.OrderID = O2.OrderID JOIN Products P2 ON OI2.ProductID = P2.ProductID WHERE O2.OrderDate >= DATE('now', '-1 year') AND P2.Category = P.Category GROUP BY P2.ProductID));","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, ProductID INTEGER, Quantity INTEGER, UnitPrice REAL); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, OrderDate TEXT);",This complex query selects product names where their total sales in the last year (left-hand side correlated subquery) are less than the average annual sales for products within their own category (right-hand side nested correlated subquery using a derived table).
Show employees who have the same salary as 'John Doe'.,SELECT EmployeeName FROM Employees WHERE Salary = (SELECT Salary FROM Employees WHERE EmployeeName = 'John Doe') AND EmployeeName != 'John Doe';,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL);","This query selects employee names whose salary matches the salary of 'John Doe', obtained through a scalar subquery, excluding 'John Doe' himself from the result."
"For each flight, display the flight ID and the name of its origin airport.","SELECT F.FlightID, (SELECT A.AirportName FROM Airports A WHERE A.AirportID = F.OriginAirportID) AS OriginAirportName FROM Flights F;","CREATE TABLE Flights (FlightID INTEGER PRIMARY KEY, FlightNumber TEXT, OriginAirportID INTEGER, DestinationAirportID INTEGER); CREATE TABLE Airports (AirportID INTEGER PRIMARY KEY, AirportName TEXT, City TEXT);",This query retrieves each flight's ID and uses a correlated scalar subquery in the SELECT clause to fetch the name of the origin airport by matching its ID.
List products whose unit price is higher than the unit price of 'Product X'.,"SELECT ProductName, UnitPrice FROM Products WHERE UnitPrice > (SELECT UnitPrice FROM Products WHERE ProductName = 'Product X');","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, UnitPrice REAL);","This query selects products whose unit price is greater than the unit price of a specific product named 'Product X', as determined by a scalar subquery."
Find students who are enrolled in the 'Mathematics' course.,SELECT S.StudentName FROM Students S WHERE S.StudentID IN (SELECT E.StudentID FROM Enrollments E JOIN Courses C ON E.CourseID = C.CourseID WHERE C.CourseName = 'Mathematics');,"CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER);","This query selects the names of students whose StudentID is found in the subquery, which identifies StudentIDs linked to the 'Mathematics' course through enrollments."
Get the names of employees who manage other employees.,SELECT DISTINCT E.EmployeeName FROM Employees E WHERE EXISTS (SELECT 1 FROM Employees M WHERE M.ManagerID = E.EmployeeID);,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, ManagerID INTEGER);","This query selects distinct employee names if there exists at least one other employee whose ManagerID points to the current employee's EmployeeID, effectively identifying managers."
Show departments that have no employees.,SELECT DepartmentName FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.DepartmentID = D.DepartmentID);,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, DepartmentID INTEGER);","This query selects department names where there is no existing employee record linked to that department's ID, indicating the department has no employees, using a NOT EXISTS subquery."
List customers who have placed at least two orders.,SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Orders GROUP BY CustomerID HAVING COUNT(OrderID) >= 2);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER);","This query selects customer names whose CustomerID is found in the subquery, which identifies customers by grouping orders and filtering those who have placed two or more orders."
"Find the total number of books for each author, along with the author's name.","SELECT A.AuthorName, (SELECT COUNT(B.BookID) FROM Books B WHERE B.AuthorID = A.AuthorID) AS NumberOfBooks FROM Authors A;","CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT); CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER);","This query retrieves each author's name and, using a correlated subquery in the SELECT clause, counts the total number of books written by that specific author."
Retrieve employees whose salary is in the top 10% of their department's salaries.,"SELECT E1.EmployeeName, E1.Salary FROM Employees E1 WHERE E1.Salary >= (SELECT E2.Salary FROM Employees E2 WHERE E2.DepartmentID = E1.DepartmentID ORDER BY E2.Salary DESC LIMIT 1 OFFSET (SELECT COUNT(*) FROM Employees E3 WHERE E3.DepartmentID = E1.DepartmentID) * 0.1 - 1);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL, DepartmentID INTEGER);",This query selects employees whose salary is greater than or equal to the salary at the 90th percentile (top 10%) within their own department. This is achieved by calculating the offset for the 10th percentile rank using a nested subquery and then fetching the salary at that position.
Show sales transactions that occurred on the same date as the earliest sale in the 'North' region.,"SELECT SaleID, SaleDate, Amount FROM Sales S WHERE S.SaleDate = (SELECT MIN(S2.SaleDate) FROM Sales S2 JOIN Regions R ON S2.RegionID = R.RegionID WHERE R.RegionName = 'North');","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, SaleDate TEXT, Amount REAL, RegionID INTEGER); CREATE TABLE Regions (RegionID INTEGER PRIMARY KEY, RegionName TEXT);","This query selects sales transactions where the sale date matches the earliest sale date recorded for the 'North' region, as determined by a scalar subquery involving a join."
List all customers who have ordered products from at least two different categories.,SELECT C.CustomerName FROM Customers C WHERE C.CustomerID IN (SELECT O.CustomerID FROM Orders O JOIN Order_Items OI ON O.OrderID = OI.OrderID JOIN Products P ON OI.ProductID = P.ProductID GROUP BY O.CustomerID HAVING COUNT(DISTINCT P.Category) >= 2);,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER); CREATE TABLE Order_Items (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, Category TEXT);","This query selects customer names whose CustomerID is present in the subquery. The subquery identifies customers who, by grouping their orders and associated products, have ordered from at least two distinct product categories."
List all employees who do not have an email address recorded in the system.,"SELECT employee_id, first_name, last_name FROM Employees WHERE email IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL, manager_id INTEGER, department_id INTEGER);","This query selects the employee ID, first name, and last name for all employees where the 'email' column explicitly contains a NULL value, indicating no email address is provided."
Count the total number of products that currently have no description available.,SELECT COUNT(*) FROM Products WHERE description IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, description TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT, supplier_id INTEGER);","This query counts all rows in the 'Products' table where the 'description' column is NULL, effectively giving the number of products without a description."
Find all orders for which the delivery date has not yet been set or recorded.,"SELECT order_id, customer_id, order_date FROM Orders WHERE delivery_date IS NULL;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, shipping_address TEXT, delivery_date TEXT);","This query retrieves the order ID, customer ID, and order date for all orders where the 'delivery_date' column is NULL, indicating that the delivery date is unknown or pending."
Show all projects that are currently unassigned to any employee.,"SELECT project_id, project_name FROM Projects WHERE assigned_employee_id IS NULL;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT NOT NULL, end_date TEXT, budget REAL, status TEXT, assigned_employee_id INTEGER);","This query fetches the ID and name of projects where the 'assigned_employee_id' column is NULL, meaning no employee has been assigned to them."
List all employees who have a direct manager assigned to them.,"SELECT employee_id, first_name, last_name FROM Employees WHERE manager_id IS NOT NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL, manager_id INTEGER, department_id INTEGER);","This query selects employee details for all employees whose 'manager_id' column is not NULL, indicating that they report to a manager."
Retrieve tasks that have a specific due date but have not yet been marked as completed.,"SELECT task_id, task_name, due_date FROM Tasks WHERE due_date IS NOT NULL AND completion_date IS NULL;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT NOT NULL, project_id INTEGER, assigned_to INTEGER, due_date TEXT, completion_date TEXT, priority TEXT, status TEXT);","This query finds tasks that have a value in their 'due_date' column but have a NULL value in their 'completion_date' column, signifying tasks that are due but not finished."
Find all customers who have not made any purchases yet.,"SELECT customer_id, first_name, last_name FROM Customers WHERE last_purchase_date IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, registration_date TEXT NOT NULL, last_purchase_date TEXT);","This query selects customers whose 'last_purchase_date' is NULL, indicating they have not made any purchases since their registration."
"Display the product name along with its description, or 'No description provided' if the description is missing.","SELECT product_name, COALESCE(description, 'No description provided') AS product_description FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, description TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT, supplier_id INTEGER);","This query retrieves the product name and uses COALESCE to display the actual 'description' if it exists, otherwise it substitutes 'No description provided' for NULL values."
"Show employee contact information, preferring their phone number, then their email, and finally 'No contact info' if both are missing.","SELECT employee_id, first_name, last_name, COALESCE(phone_number, email, 'No contact info') AS preferred_contact FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL, manager_id INTEGER, department_id INTEGER);","This query selects employee details and uses COALESCE to return the first non-NULL value among 'phone_number', 'email', or the literal string 'No contact info' in that order of preference."
"Calculate the total budget across all projects, treating any unbudgeted projects (NULL budget) as having a zero budget.","SELECT SUM(COALESCE(budget, 0)) AS total_project_budget FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT NOT NULL, end_date TEXT, budget REAL, status TEXT, assigned_employee_id INTEGER);","This query calculates the sum of all project budgets. COALESCE ensures that any NULL values in the 'budget' column are treated as 0 for the summation, preventing them from being ignored."
"List products and order them by their last restock date, placing products with no restock date first (as if they were restocked earliest).","SELECT product_name, last_restock_date FROM Products ORDER BY COALESCE(last_restock_date, '1900-01-01');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, description TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT, supplier_id INTEGER);","This query orders products by their 'last_restock_date'. COALESCE replaces NULL 'last_restock_date' values with a very old date ('1900-01-01'), ensuring these products appear first in an ascending sort."
"Retrieve order IDs and their delivery dates. If a delivery date is not specified, show 'Pending Delivery'.","SELECT order_id, COALESCE(delivery_date, 'Pending Delivery') AS actual_delivery_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_amount REAL NOT NULL, shipping_address TEXT, delivery_date TEXT);","This query selects order IDs and displays the 'delivery_date'. If 'delivery_date' is NULL, COALESCE substitutes it with the string 'Pending Delivery'."
"Display employee full names, using 'Unknown' for either first or last name if they are NULL.","SELECT COALESCE(first_name, 'Unknown') || ' ' || COALESCE(last_name, 'Unknown') AS full_employee_name FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL, manager_id INTEGER, department_id INTEGER);","This query concatenates the first and last names. COALESCE ensures that if either 'first_name' or 'last_name' is NULL, 'Unknown' is used instead, preventing the entire name from becoming NULL."
"Sum the salaries of all employees, treating any unrecorded (NULL) salaries as zero.","SELECT SUM(COALESCE(salary, 0)) AS total_salaries FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL, manager_id INTEGER, department_id INTEGER);","This query calculates the total sum of salaries. COALESCE replaces any NULL 'salary' values with 0 before summation, ensuring all employees are included in the sum, even if their salary is unknown."
"Show task IDs and their completion dates. If a task has not been completed, display 'Not Completed'.","SELECT task_id, COALESCE(completion_date, 'Not Completed') AS completion_status FROM Tasks;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT NOT NULL, project_id INTEGER, assigned_to INTEGER, due_date TEXT, completion_date TEXT, priority TEXT, status TEXT);","This query selects task IDs and their 'completion_date'. If 'completion_date' is NULL, COALESCE replaces it with the string 'Not Completed' to indicate the task's status."
"List product IDs and their prices, substituting 0.00 for any products with an unspecified (NULL) price.","SELECT product_id, IFNULL(price, 0.00) AS display_price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, description TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT, supplier_id INTEGER);","This query selects product IDs and uses IFNULL (SQLite's equivalent to COALESCE for two arguments) to display the 'price'. If 'price' is NULL, it's replaced by 0.00."
"Retrieve employee IDs and their manager IDs. If an employee does not have a manager (NULL manager_id), show 0 instead.","SELECT employee_id, IFNULL(manager_id, 0) AS actual_manager_id FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL, manager_id INTEGER, department_id INTEGER);","This query selects employee IDs and uses IFNULL to display the 'manager_id'. If 'manager_id' is NULL, it's replaced by 0, indicating no direct manager."
"Calculate the average budget of all projects, considering unbudgeted projects (NULL budget) as having a 0 budget.","SELECT AVG(IFNULL(budget, 0)) AS average_project_budget FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT NOT NULL, end_date TEXT, budget REAL, status TEXT, assigned_employee_id INTEGER);","This query calculates the average of project budgets. IFNULL ensures that any NULL 'budget' values are treated as 0 for the average calculation, affecting the overall average."
"Show tasks and their assigned employee. If a task is not assigned, display 'Unassigned'.","SELECT task_id, task_name, IFNULL(assigned_to, 'Unassigned') AS assignee FROM Tasks;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT NOT NULL, project_id INTEGER, assigned_to INTEGER, due_date TEXT, completion_date TEXT, priority TEXT, status TEXT);","This query selects task details and uses IFNULL to display the 'assigned_to' employee. If 'assigned_to' is NULL, it's replaced by the string 'Unassigned'."
"Get customer IDs and their last purchase date. If a customer has never purchased, display 'Never Purchased'.","SELECT customer_id, IFNULL(last_purchase_date, 'Never Purchased') AS last_purchase_status FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, registration_date TEXT NOT NULL, last_purchase_date TEXT);",This query retrieves customer IDs and their 'last_purchase_date'. IFNULL substitutes 'Never Purchased' for any NULL values in 'last_purchase_date'.
"Show employees and their phone numbers. If a phone number is missing, use 'N/A'. Also, list all employees who do not have a phone number.","SELECT employee_id, first_name, IFNULL(phone_number, 'N/A') AS contact_phone, (CASE WHEN phone_number IS NULL THEN 'No Phone' ELSE 'Has Phone' END) AS phone_status FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL, manager_id INTEGER, department_id INTEGER);",This query uses IFNULL to display a phone number or 'N/A'. It also uses a CASE statement to explicitly label employees based on whether their 'phone_number' is NULL or not.
"For each project, display its name and end date. If the end date is NULL, show 'Ongoing'. Additionally, count how many projects are still ongoing.","SELECT project_name, COALESCE(end_date, 'Ongoing') AS actual_end_date FROM Projects; SELECT COUNT(*) AS ongoing_projects_count FROM Projects WHERE end_date IS NULL;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT NOT NULL, end_date TEXT, budget REAL, status TEXT, assigned_employee_id INTEGER);","This combines two queries. The first displays project names and their end dates, using COALESCE to show 'Ongoing' if the end date is NULL. The second query counts projects where the 'end_date' is NULL, indicating they are still ongoing."
"List all products and their stock status: 'In Stock' if quantity is greater than 0 and not null, 'Out of Stock' if quantity is 0, and 'Discontinued' if quantity is NULL.","SELECT product_name, CASE WHEN stock_quantity IS NOT NULL AND stock_quantity > 0 THEN 'In Stock' WHEN stock_quantity = 0 THEN 'Out of Stock' ELSE 'Discontinued' END AS stock_status FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, description TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT, supplier_id INTEGER);","This query uses a CASE statement to determine the stock status. It checks for positive stock, zero stock, and finally, if 'stock_quantity' is NULL, assigns 'Discontinued'."
"For each employee, display their employee ID, first name, and their manager ID. If the manager ID is NULL, represent it as 0. Also, find all employees who have a manager assigned (not 0) and whose phone number is NULL.","SELECT employee_id, first_name, IFNULL(manager_id, 0) AS manager_id_display FROM Employees WHERE manager_id IS NOT NULL AND phone_number IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL, manager_id INTEGER, department_id INTEGER);","This query first displays employee IDs, names, and their manager IDs (using IFNULL to show 0 for NULL managers). The WHERE clause then filters for employees who explicitly have a manager (manager_id IS NOT NULL) AND whose phone number is NULL."
"For each customer, show their email. If email is missing, use their phone number. If both are missing, indicate 'No Contact Info'.","SELECT customer_id, COALESCE(email, phone_number, 'No Contact Info') AS preferred_contact_method FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, registration_date TEXT NOT NULL, last_purchase_date TEXT);","This query uses nested COALESCE to prioritize contact methods: 'email' first, then 'phone_number', and finally 'No Contact Info' if both prior fields are NULL."
Count the number of employees who have an email address and the number of employees who do not.,"SELECT SUM(CASE WHEN email IS NOT NULL THEN 1 ELSE 0 END) AS employees_with_email, SUM(CASE WHEN email IS NULL THEN 1 ELSE 0 END) AS employees_without_email FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL, manager_id INTEGER, department_id INTEGER);","This query uses conditional aggregation with CASE statements to count employees based on whether their 'email' column is NOT NULL or IS NULL, providing counts for both groups in a single result row."
"List all tasks, showing their due date. If the due date is NULL, display 'Flexible'. Also, for tasks that are not yet completed (completion_date IS NULL), show their assigned employee ID or 'Unassigned' if also NULL.","SELECT task_id, COALESCE(due_date, 'Flexible') AS due_date_status, CASE WHEN completion_date IS NULL THEN IFNULL(assigned_to, 'Unassigned') ELSE 'Completed' END AS current_assignee_or_status FROM Tasks;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT NOT NULL, project_id INTEGER, assigned_to INTEGER, due_date TEXT, completion_date TEXT, priority TEXT, status TEXT);","This query uses COALESCE for the 'due_date' to show 'Flexible' if NULL. It also uses a nested CASE and IFNULL. If 'completion_date' is NULL, it displays the 'assigned_to' ID or 'Unassigned'; otherwise, it shows 'Completed'."
Identify products where the price is not set (NULL) or where the stock quantity is unknown (NULL). Display product name and fill 'N/A' for unknown price or stock.,"SELECT product_name, IFNULL(price, 'N/A') AS display_price, IFNULL(stock_quantity, 'N/A') AS display_stock FROM Products WHERE price IS NULL OR stock_quantity IS NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, description TEXT, price REAL, stock_quantity INTEGER, last_restock_date TEXT, supplier_id INTEGER);","This query selects product names, displaying 'N/A' for NULL prices or stock quantities using IFNULL. It then filters to show only products where either 'price' or 'stock_quantity' is NULL."
"Find projects where the end date is NULL and the budget is also NULL. For these projects, display their name and state 'No End Date & No Budget'.","SELECT project_name, 'No End Date & No Budget' AS project_status FROM Projects WHERE end_date IS NULL AND budget IS NULL;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, start_date TEXT NOT NULL, end_date TEXT, budget REAL, status TEXT, assigned_employee_id INTEGER);","This query selects project names and a fixed status string for projects where both 'end_date' and 'budget' columns are NULL, identifying fully undefined projects."
"List customer first and last names. If a customer's last purchase date is NULL, order them by their registration date. Otherwise, order by their last purchase date.","SELECT customer_id, first_name, last_name, last_purchase_date FROM Customers ORDER BY COALESCE(last_purchase_date, registration_date) ASC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, registration_date TEXT NOT NULL, last_purchase_date TEXT);","This query orders customers. COALESCE prioritizes 'last_purchase_date' for sorting; if it's NULL, it falls back to 'registration_date', ensuring all customers are ordered by the most relevant date."
"For employees with a NULL phone number, update their phone number to 'Not Provided'.",UPDATE Employees SET phone_number = 'Not Provided' WHERE phone_number IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT NOT NULL, last_name TEXT NOT NULL, email TEXT UNIQUE, phone_number TEXT, hire_date TEXT NOT NULL, salary REAL, manager_id INTEGER, department_id INTEGER);",This query updates the 'phone_number' column to 'Not Provided' for all rows in the 'Employees' table where the existing 'phone_number' value is NULL.
"List the names of customers who have placed orders totaling more than 1000 in value, along with their total order value.","WITH CustomerOrderTotals AS (SELECT customer_id, SUM(order_total) AS total_value FROM Orders GROUP BY customer_id) SELECT c.customer_name, cot.total_value FROM Customers c JOIN CustomerOrderTotals cot ON c.customer_id = cot.customer_id WHERE cot.total_value > 1000;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_total REAL);","Calculates the total order value for each customer using a CTE, then joins with the Customers table to show names for customers whose total order value exceeds 1000."
Find the names of employees who work in departments located in 'New York'.,SELECT e.employee_name FROM Employees e JOIN (SELECT department_id FROM Departments WHERE location = 'New York') AS NYDepartments ON e.department_id = NYDepartments.department_id;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","Uses a derived table to first identify department_ids for departments located in 'New York', then joins with the Employees table to retrieve employee names in those departments."
"For each product category, find the most expensive product. List the category name, product name, and price.","WITH RankedProducts AS (SELECT product_id, product_name, category_id, price, ROW_NUMBER() OVER (PARTITION BY category_id ORDER BY price DESC) as rn FROM Products) SELECT c.category_name, rp.product_name, rp.price FROM RankedProducts rp JOIN Categories c ON rp.category_id = c.category_id WHERE rp.rn = 1;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);",A CTE 'RankedProducts' is used to rank products within each category by price. The outer query then selects the product with rank 1 (most expensive) for each category and joins with the Categories table.
List all product names that have sales higher than the overall average sales across all products.,"SELECT p.product_name FROM Products p JOIN (SELECT product_id, SUM(quantity * price) AS product_total_sales FROM OrderItems GROUP BY product_id) AS ProductSales ON p.product_id = ProductSales.product_id WHERE ProductSales.product_total_sales > (SELECT AVG(total_sales) FROM (SELECT SUM(quantity * price) AS total_sales FROM OrderItems GROUP BY product_id));","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, price REAL);",Calculates the total sales for each product using a derived table. It then compares each product's total sales against the overall average sales (calculated in a nested subquery) to find products with above-average sales.
Find customers who have placed orders in both 'Electronics' and 'Books' categories. List their name and their total order count across both categories.,"WITH CustomerElectronics AS (SELECT DISTINCT customer_id FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN Categories cat ON p.category_id = cat.category_id WHERE cat.category_name = 'Electronics'), CustomerBooks AS (SELECT DISTINCT customer_id FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN Categories cat ON p.category_id = cat.category_id WHERE cat.category_name = 'Books') SELECT c.customer_name, COUNT(DISTINCT o.order_id) AS total_orders_in_both_categories FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id JOIN Categories cat ON p.category_id = cat.category_id WHERE c.customer_id IN (SELECT customer_id FROM CustomerElectronics INTERSECT SELECT customer_id FROM CustomerBooks) AND cat.category_name IN ('Electronics', 'Books') GROUP BY c.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);",Two CTEs identify customers who have ordered from 'Electronics' and 'Books' categories respectively. The main query then finds customers common to both CTEs using INTERSECT and counts their total orders specifically within these two categories.
Get the count of new customers per month. A new customer is defined by their first order date.,"SELECT STRFTIME('%Y-%m', first_order_date) AS sales_month, COUNT(customer_id) AS new_customer_count FROM (SELECT customer_id, MIN(order_date) AS first_order_date FROM Orders GROUP BY customer_id) AS FirstOrders GROUP BY sales_month ORDER BY sales_month;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","A derived table identifies the earliest order date for each customer, effectively their 'first order date'. The outer query then groups these first order dates by month and counts the number of customers, showing monthly new customer acquisition."
"List all employees along with their direct manager's name. If an employee has no manager, indicate 'Top Level'.","WITH RECURSIVE EmployeeHierarchy AS (SELECT employee_id, employee_name, manager_id FROM Employees WHERE manager_id IS NULL UNION ALL SELECT e.employee_id, e.employee_name, e.manager_id FROM Employees e JOIN EmployeeHierarchy eh ON e.manager_id = eh.employee_id) SELECT eh.employee_name, COALESCE(m.employee_name, 'Top Level') AS manager_name FROM EmployeeHierarchy eh LEFT JOIN Employees m ON eh.manager_id = m.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, manager_id INTEGER);","A recursive CTE 'EmployeeHierarchy' traverses the employee-manager relationship. It starts with employees having no manager, then recursively adds employees whose manager is already in the CTE. The final query then joins this hierarchy with the Employees table to get manager names, using COALESCE for top-level employees."
Find departments where the average salary is higher than the average salary of the entire company.,"SELECT d.department_name, ds.avg_dept_salary FROM Departments d JOIN (SELECT department_id, AVG(salary) AS avg_dept_salary FROM Employees GROUP BY department_id) AS DepartmentSalaries ON d.department_id = DepartmentSalaries.department_id WHERE DepartmentSalaries.avg_dept_salary > (SELECT AVG(salary) FROM Employees);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",A derived table calculates the average salary for each department. The outer query then compares each department's average salary to the overall company average salary (calculated in a scalar subquery) and returns departments meeting the criteria.
Calculate the running total of daily sales for each day in March 2023. Display the date and the running total.,"WITH DailySales AS (SELECT order_date, SUM(total_amount) AS daily_total FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-03' GROUP BY order_date) SELECT order_date, SUM(daily_total) OVER (ORDER BY order_date) AS running_total_sales FROM DailySales ORDER BY order_date;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, total_amount REAL);",A CTE first aggregates sales by day for March 2023. The outer query then calculates a running total of these daily sales using a window function SUM(...) OVER (ORDER BY order_date).
List the customer IDs and names of customers who have purchased at least 3 distinct products.,"SELECT c.customer_id, c.customer_name FROM Customers c JOIN (SELECT o.customer_id, COUNT(DISTINCT oi.product_id) AS distinct_products_count FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id GROUP BY o.customer_id HAVING distinct_products_count >= 3) AS ProductCounts ON c.customer_id = ProductCounts.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER);",A derived table 'ProductCounts' calculates the number of distinct products purchased by each customer. The outer query then joins with the Customers table to retrieve names for customers who have purchased 3 or more distinct products.
"For each user, find their most recent status update message.","WITH RankedStatuses AS (SELECT user_id, status_message, update_timestamp, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY update_timestamp DESC) AS rn FROM UserStatuses) SELECT user_id, status_message, update_timestamp FROM RankedStatuses WHERE rn = 1;","CREATE TABLE UserStatuses (status_id INTEGER PRIMARY KEY, user_id INTEGER, status_message TEXT, update_timestamp TEXT);","A CTE 'RankedStatuses' assigns a rank to each status update for a user, ordering by timestamp in descending order. The outer query then selects only the rank 1 entry for each user, which corresponds to their most recent status."
Find the names of authors who have published more than 5 books.,"SELECT a.author_name FROM Authors a JOIN (SELECT author_id, COUNT(book_id) AS num_books FROM Books GROUP BY author_id HAVING num_books > 5) AS ProlificAuthors ON a.author_id = ProlificAuthors.author_id;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER);",A derived table 'ProlificAuthors' counts the number of books for each author and filters for those with more than 5. The outer query then joins with the Authors table to display the names of these authors.
"For each sales region, show the number of sales representatives, separating them into 'Senior' (more than 5 years experience) and 'Junior' (5 years or less experience).","WITH SalesRepExperience AS (SELECT rep_id, region_id, CASE WHEN julianday('now') - julianday(hire_date) > (5 * 365.25) THEN 'Senior' ELSE 'Junior' END AS experience_level FROM SalesRepresentatives) SELECT sr.region_id, r.region_name, SUM(CASE WHEN sre.experience_level = 'Senior' THEN 1 ELSE 0 END) AS senior_reps, SUM(CASE WHEN sre.experience_level = 'Junior' THEN 1 ELSE 0 END) AS junior_reps FROM SalesRepExperience sre JOIN SalesRegions r ON sre.region_id = r.region_id GROUP BY sr.region_id, r.region_name ORDER BY r.region_name;","CREATE TABLE SalesRepresentatives (rep_id INTEGER PRIMARY KEY, rep_name TEXT, region_id INTEGER, hire_date TEXT); CREATE TABLE SalesRegions (region_id INTEGER PRIMARY KEY, region_name TEXT);",A CTE 'SalesRepExperience' categorizes sales representatives as 'Senior' or 'Junior' based on their hire date. The outer query then groups by region and pivots the experience_level to count senior and junior reps separately for each region.
List product categories that have at least one product with a price over 500.,SELECT DISTINCT c.category_name FROM Categories c JOIN (SELECT DISTINCT category_id FROM Products WHERE price > 500) AS HighPriceCategories ON c.category_id = HighPriceCategories.category_id;,"CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL);",A derived table 'HighPriceCategories' identifies unique category IDs that contain at least one product priced above 500. The outer query then joins with the Categories table to retrieve the names of these categories.
"Show the average order value for each customer, but only for customers whose average order value is higher than the overall average order value across all customers.","WITH CustomerAvgOrder AS (SELECT customer_id, AVG(order_total) AS avg_customer_order_value FROM Orders GROUP BY customer_id), OverallAvgOrder AS (SELECT AVG(order_total) AS overall_avg_order FROM Orders) SELECT c.customer_name, cao.avg_customer_order_value FROM Customers c JOIN CustomerAvgOrder cao ON c.customer_id = cao.customer_id, OverallAvgOrder oao WHERE cao.avg_customer_order_value > oao.overall_avg_order;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_total REAL);","Two CTEs are used: 'CustomerAvgOrder' calculates the average order value for each customer, and 'OverallAvgOrder' calculates the average order value across all orders. The final query joins with the Customers table and filters for customers whose individual average order value exceeds the overall average."
"For each product, list its name and the total quantity sold.","SELECT p.product_name, COALESCE(ps.total_quantity_sold, 0) AS total_quantity_sold FROM Products p LEFT JOIN (SELECT product_id, SUM(quantity) AS total_quantity_sold FROM OrderItems GROUP BY product_id) AS ProductSales ON p.product_id = ProductSales.product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL);","A derived table calculates the total quantity sold for each product. The outer query then LEFT JOINs this result with the Products table to show product names and their total quantities sold, using COALESCE to display 0 for products with no sales."
Show the names of employees who have worked on more than 2 projects.,"WITH EmployeeProjectCounts AS (SELECT employee_id, COUNT(DISTINCT project_id) AS project_count FROM EmployeeProjects GROUP BY employee_id HAVING project_count > 2) SELECT e.employee_name FROM Employees e JOIN EmployeeProjectCounts epc ON e.employee_id = epc.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, PRIMARY KEY (employee_id, project_id));",A CTE calculates the number of distinct projects each employee has worked on and filters for those with more than 2 projects. The outer query then joins with the Employees table to get the names of these employees.
"For each year, count the number of unique product categories sold.","SELECT sales_year, COUNT(DISTINCT category_id) AS unique_categories_sold FROM (SELECT STRFTIME('%Y', o.order_date) AS sales_year, p.category_id FROM Orders o JOIN OrderItems oi ON o.order_id = oi.order_id JOIN Products p ON oi.product_id = p.product_id) AS YearlyCategorySales GROUP BY sales_year ORDER BY sales_year;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, category_id INTEGER);","A derived table extracts the year from order_date and combines it with category_id. The outer query then groups by year to count the distinct category_ids, showing how many unique product categories were sold each year."
Identify days in January 2023 where there were no orders. List just the dates.,"WITH RECURSIVE Dates AS (SELECT '2023-01-01' AS order_date UNION ALL SELECT DATE(order_date, '+1 day') FROM Dates WHERE order_date < '2023-01-31'), ActualOrderDates AS (SELECT DISTINCT order_date FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-01') SELECT d.order_date FROM Dates d LEFT JOIN ActualOrderDates aod ON d.order_date = aod.order_date WHERE aod.order_date IS NULL ORDER BY d.order_date;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, total_amount REAL);","A recursive CTE 'Dates' generates all dates in January 2023. Another CTE 'ActualOrderDates' gets distinct dates where orders occurred in January. The final query then performs a LEFT JOIN between all dates and actual order dates, filtering for dates where there was no corresponding order, effectively finding missing order days."
"For each product category, calculate the percentage of its total sales relative to the overall total sales across all categories.","SELECT c.category_name, (CAST(CategorySales.total_category_sales AS REAL) / OverallSales.overall_total_sales) * 100 AS percentage_of_total_sales FROM Categories c JOIN (SELECT p.category_id, SUM(oi.quantity * oi.price) AS total_category_sales FROM Products p JOIN OrderItems oi ON p.product_id = oi.product_id GROUP BY p.category_id) AS CategorySales ON c.category_id = CategorySales.category_id, (SELECT SUM(quantity * price) AS overall_total_sales FROM OrderItems) AS OverallSales ORDER BY percentage_of_total_sales DESC;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, category_id INTEGER); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, price REAL);","Two derived tables are used: 'CategorySales' calculates total sales for each product category, and 'OverallSales' calculates the grand total sales. The outer query then calculates the percentage of each category's sales relative to the overall total."
"For each city, find the customer who placed the highest single order. List the city, customer name, and order value.","WITH RankedOrders AS (SELECT c.customer_name, cust.city_id, o.order_total, ROW_NUMBER() OVER (PARTITION BY cust.city_id ORDER BY o.order_total DESC) AS rn FROM Orders o JOIN Customers cust ON o.customer_id = cust.customer_id) SELECT ci.city, ro.customer_name, ro.order_total FROM RankedOrders ro JOIN Cities ci ON ro.city_id = ci.city_id WHERE ro.rn = 1 ORDER BY ci.city;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_total REAL); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city_id INTEGER); CREATE TABLE Cities (city_id INTEGER PRIMARY KEY, city TEXT);","A CTE 'RankedOrders' assigns a rank to each order within each city based on order_total. The outer query then selects the order with rank 1 for each city, representing the highest single order, along with customer name and city, by joining with the Cities table."
Count the number of active users each week. An active user is defined as someone who logged in at least once in that week.,"SELECT STRFTIME('%Y-%W', login_date) AS login_week, COUNT(DISTINCT user_id) AS active_users_count FROM (SELECT user_id, login_date FROM UserLogins WHERE login_date IS NOT NULL) AS ValidLogins GROUP BY login_week ORDER BY login_week;","CREATE TABLE UserLogins (login_id INTEGER PRIMARY KEY, user_id INTEGER, login_date TEXT);","A derived table 'ValidLogins' filters for valid login dates. The outer query then groups by week (using STRFTIME('%Y-%W', ...)) and counts the distinct user_ids to find the number of active users per week."
List departments that have at least one employee earning more than 70000.,WITH HighEarners AS (SELECT DISTINCT department_id FROM Employees WHERE salary > 70000) SELECT d.department_name FROM Departments d WHERE EXISTS (SELECT 1 FROM HighEarners he WHERE he.department_id = d.department_id);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL);",A CTE 'HighEarners' identifies departments that have employees earning over 70000. The outer query then uses EXISTS to select the names of departments that appear in the 'HighEarners' CTE.
Combine unique names of authors and customers and count how many unique names there are in total.,SELECT COUNT(DISTINCT combined_name) AS total_unique_names FROM (SELECT author_name AS combined_name FROM Authors UNION SELECT customer_name AS combined_name FROM Customers) AS CombinedNames;,"CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT);",A derived table 'CombinedNames' uses a UNION operation to merge the names from Authors and Customers tables. The outer query then counts the distinct names from this combined set.
"For each product, show its total sales quantity and the average price it was sold for.","WITH ProductSalesData AS (SELECT product_id, SUM(quantity) AS total_quantity, AVG(price) AS average_price FROM OrderItems GROUP BY product_id) SELECT p.product_name, psd.total_quantity, psd.average_price FROM Products p JOIN ProductSalesData psd ON p.product_id = psd.product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, price REAL);",A CTE 'ProductSalesData' calculates both the total quantity sold and the average price for each product. The outer query then joins with the Products table to display the product names alongside these calculated metrics.
Find customer names who have the same email address as another customer.,"SELECT c1.customer_name, c1.email FROM Customers c1 JOIN (SELECT email FROM Customers GROUP BY email HAVING COUNT(*) > 1) AS DuplicateEmails ON c1.email = DuplicateEmails.email ORDER BY c1.email, c1.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT);",A derived table 'DuplicateEmails' identifies email addresses that appear more than once in the Customers table. The outer query then joins the Customers table with this derived table to list the names of customers sharing these duplicate email addresses.
"First, calculate the total quantity ordered per product. Then, find products whose total ordered quantity is above 100.","WITH ProductTotalQuantities AS (SELECT product_id, SUM(quantity) AS total_ordered_quantity FROM OrderItems GROUP BY product_id), HighQuantityProducts AS (SELECT product_id FROM ProductTotalQuantities WHERE total_ordered_quantity > 100) SELECT p.product_name, ptq.total_ordered_quantity FROM Products p JOIN ProductTotalQuantities ptq ON p.product_id = ptq.product_id JOIN HighQuantityProducts hqp ON p.product_id = hqp.product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER);",The 'ProductTotalQuantities' CTE calculates the sum of quantities for each product. The 'HighQuantityProducts' CTE then filters products from the first CTE that have a total quantity greater than 100. The final query joins these CTEs with the Products table to display the names and total quantities of these high-quantity products.
List users who have logged in within the last 30 days but have NOT logged in within the last 7 days.,"SELECT u.user_name FROM Users u JOIN (SELECT DISTINCT user_id FROM UserLogins WHERE login_date >= DATE('now', '-30 days')) AS RecentLogins ON u.user_id = RecentLogins.user_id LEFT JOIN (SELECT DISTINCT user_id FROM UserLogins WHERE login_date >= DATE('now', '-7 days')) AS LastWeekLogins ON u.user_id = LastWeekLogins.user_id WHERE LastWeekLogins.user_id IS NULL;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, user_name TEXT); CREATE TABLE UserLogins (login_id INTEGER PRIMARY KEY, user_id INTEGER, login_date TEXT);","This query uses two derived tables. 'RecentLogins' identifies users who logged in within the last 30 days. 'LastWeekLogins' identifies users who logged in within the last 7 days. It then performs a LEFT JOIN and filters for users who are in 'RecentLogins' but not in 'LastWeekLogins', indicating they logged in 8-30 days ago but not more recently."
"For each department, list the department name and the total number of employees, including departments with no employees (displaying 0 for employee count).","WITH DepartmentEmployeeCounts AS (SELECT department_id, COUNT(employee_id) AS employee_count FROM Employees GROUP BY department_id) SELECT d.department_name, COALESCE(dec.employee_count, 0) AS total_employees FROM Departments d LEFT JOIN DepartmentEmployeeCounts dec ON d.department_id = dec.department_id ORDER BY d.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER);","A CTE calculates the employee count for each department that has employees. The main query then performs a LEFT JOIN from Departments to this CTE to include all departments, using COALESCE to display '0' for departments that had no employees (and thus no entry in the CTE)."
"Calculate the average order value for customers, excluding any customers whose single largest order value is less than 50 or greater than 5000.","SELECT AVG(FilteredOrders.order_total) AS average_filtered_order_value FROM (SELECT o.order_total FROM Orders o JOIN (SELECT customer_id, MAX(order_total) AS max_order_value FROM Orders GROUP BY customer_id) AS CustomerMaxOrder ON o.customer_id = CustomerMaxOrder.customer_id WHERE CustomerMaxOrder.max_order_value >= 50 AND CustomerMaxOrder.max_order_value <= 5000) AS FilteredOrders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_total REAL);","This query uses a nested derived table approach. The inner derived table 'CustomerMaxOrder' finds the single largest order value for each customer. The outer derived table 'FilteredOrders' then selects order_total for all orders, but only for customers whose maximum single order falls within the 50-5000 range. Finally, the outermost query calculates the average of these filtered order totals."
List customer names who have placed orders on more than 5 distinct days in March 2023.,"WITH CustomerDailyOrders AS (SELECT customer_id, STRFTIME('%Y-%m-%d', order_date) AS order_day FROM Orders WHERE STRFTIME('%Y-%m', order_date) = '2023-03' GROUP BY customer_id, order_day), CustomerDistinctDays AS (SELECT customer_id, COUNT(order_day) AS distinct_days_count FROM CustomerDailyOrders GROUP BY customer_id HAVING distinct_days_count > 5) SELECT c.customer_name FROM Customers c JOIN CustomerDistinctDays cdd ON c.customer_id = cdd.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",The 'CustomerDailyOrders' CTE identifies unique order days for each customer in March 2023. The 'CustomerDistinctDays' CTE then counts these distinct days per customer and filters for those with more than 5. The final query joins with the 'Customers' table to get the names of these frequent customers.
Find the average purchase price for products that have been reviewed by more than 10 unique users.,SELECT AVG(oi.price) AS avg_purchase_price FROM OrderItems oi JOIN (SELECT product_id FROM ProductReviews GROUP BY product_id HAVING COUNT(DISTINCT user_id) > 10) AS HighlyReviewedProducts ON oi.product_id = HighlyReviewedProducts.product_id;,"CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, price REAL); CREATE TABLE ProductReviews (review_id INTEGER PRIMARY KEY, product_id INTEGER, user_id INTEGER, rating INTEGER);",A derived table 'HighlyReviewedProducts' identifies products that have received reviews from more than 10 unique users. The outer query then joins 'OrderItems' with this derived table to calculate the average purchase price specifically for these highly-reviewed products.
"Classify products as 'Expensive' if price is over 100, 'Moderate' if price is between 50 and 100 (inclusive), and 'Cheap' otherwise.","SELECT ProductName, Price, CASE WHEN Price > 100 THEN 'Expensive' WHEN Price >= 50 AND Price <= 100 THEN 'Moderate' ELSE 'Cheap' END AS PriceCategory FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL);","This query assigns a price category ('Expensive', 'Moderate', or 'Cheap') to each product based on its price, using a searched CASE expression."
"Calculate the total sales for 'Online' orders and 'Store' orders separately, showing them in two distinct columns.","SELECT SUM(CASE WHEN OrderType = 'Online' THEN TotalAmount ELSE 0 END) AS OnlineSales, SUM(CASE WHEN OrderType = 'Store' THEN TotalAmount ELSE 0 END) AS StoreSales FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderType TEXT, TotalAmount REAL, OrderDate TEXT);","This query calculates the sum of total amounts for online orders and store orders, presenting them in two separate columns using conditional aggregation with CASE expressions."
"List employees, sorting them by their start date in ascending order if they are 'Full-time' and in descending order if they are 'Part-time'.","SELECT EmployeeName, StartDate, EmploymentType FROM Employees ORDER BY CASE WHEN EmploymentType = 'Full-time' THEN StartDate END ASC, CASE WHEN EmploymentType = 'Part-time' THEN StartDate END DESC;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, EmploymentType TEXT, StartDate TEXT);","This query lists employees, applying a custom sort order: full-time employees are sorted by ascending start date, and part-time employees by descending start date, achieved by using CASE expressions in the ORDER BY clause."
"Update the status of tasks: 'Completed' if progress is 100, 'In Progress' if progress is between 1 and 99 (inclusive), and 'Not Started' if progress is 0.",UPDATE Tasks SET Status = CASE WHEN Progress = 100 THEN 'Completed' WHEN Progress > 0 AND Progress < 100 THEN 'In Progress' ELSE 'Not Started' END;,"CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, TaskName TEXT, Progress INTEGER, Status TEXT);",This query updates the 'Status' column of all tasks based on their 'Progress' value using a CASE expression to define the new status.
"Find orders placed by customers from 'USA' if the order amount is greater than 500, or any order from 'Canada' regardless of amount.","SELECT O.OrderID, C.CustomerName, C.Country, O.TotalAmount FROM Orders O JOIN Customers C ON O.CustomerID = C.CustomerID WHERE CASE WHEN C.Country = 'USA' THEN O.TotalAmount > 500 ELSE C.Country = 'Canada' END;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalAmount REAL); CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Country TEXT);","This query selects orders based on conditional logic: it includes orders from USA if their total amount is over 500, and includes all orders from Canada, regardless of amount. This is achieved using a CASE expression within the WHERE clause."
"Display the discount level for each product: 'High Discount' if discount percentage is 20% or more, 'Medium Discount' if between 10% and 19.9%, 'Low Discount' if between 1% and 9.9%, and 'No Discount' otherwise.","SELECT ProductName, DiscountPercentage, CASE WHEN DiscountPercentage >= 20 THEN 'High Discount' WHEN DiscountPercentage >= 10 THEN 'Medium Discount' WHEN DiscountPercentage >= 1 THEN 'Low Discount' ELSE 'No Discount' END AS DiscountLevel FROM Products;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, DiscountPercentage REAL);","This query categorizes products into discount levels ('High', 'Medium', 'Low', 'No Discount') based on their discount percentage using a searched CASE expression."
"Count the number of active, inactive, and pending users, showing each count in a separate column.","SELECT SUM(CASE WHEN Status = 'Active' THEN 1 ELSE 0 END) AS ActiveUsers, SUM(CASE WHEN Status = 'Inactive' THEN 1 ELSE 0 END) AS InactiveUsers, SUM(CASE WHEN Status = 'Pending' THEN 1 ELSE 0 END) AS PendingUsers FROM Users;","CREATE TABLE Users (UserID INTEGER PRIMARY KEY, UserName TEXT, Status TEXT);","This query counts users in each status category (Active, Inactive, Pending) using conditional aggregation, where each CASE expression returns 1 for a match and 0 otherwise, which is then summed."
"For each person, determine their age group: 'Child' (0-12), 'Teen' (13-19), 'Adult' (20-64), or 'Senior' (65+).","SELECT PersonName, Age, CASE WHEN Age BETWEEN 0 AND 12 THEN 'Child' WHEN Age BETWEEN 13 AND 19 THEN 'Teen' WHEN Age BETWEEN 20 AND 64 THEN 'Adult' ELSE 'Senior' END AS AgeGroup FROM People;","CREATE TABLE People (PersonID INTEGER PRIMARY KEY, PersonName TEXT, Age INTEGER);","This query categorizes people into age groups ('Child', 'Teen', 'Adult', 'Senior') based on their age using a searched CASE expression."
"Display customer names, showing 'Not Specified' if their email is NULL or empty, otherwise show their email.","SELECT CustomerName, CASE WHEN Email IS NULL OR Email = '' THEN 'Not Specified' ELSE Email END AS ContactInfo FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT);","This query displays 'Not Specified' for customers who have a NULL or empty email address, otherwise it shows their actual email, using a CASE expression to handle these conditions."
"List all orders and their associated product details. If an order has a 'Premium' status, add a note indicating 'Eligible for special handling', otherwise 'Standard processing'.","SELECT O.OrderID, P.ProductName, O.OrderStatus, CASE WHEN O.OrderStatus = 'Premium' THEN 'Eligible for special handling' ELSE 'Standard processing' END AS ProcessingNote FROM Orders O JOIN OrderItems OI ON O.OrderID = OI.OrderID JOIN Products P ON OI.ProductID = P.ProductID;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderStatus TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL);","This query joins orders, order items, and products to display order details, and adds a 'ProcessingNote' column based on the order's status using a CASE expression."
"For events, if the event is scheduled for the current year, display only the month and day (MM-DD format). Otherwise, display the full date (YYYY-MM-DD format).","SELECT EventName, CASE WHEN STRFTIME('%Y', EventDate) = STRFTIME('%Y', 'now') THEN STRFTIME('%m-%d', EventDate) ELSE EventDate END AS DisplayDate FROM Events;","CREATE TABLE Events (EventID INTEGER PRIMARY KEY, EventName TEXT, EventDate TEXT);","This query formats the event date conditionally: if the event falls in the current year, it displays only month and day; otherwise, it shows the full date, using SQLite's date functions and a CASE expression."
"Mark students as 'Passed' if their grade is 70 or above, otherwise 'Failed'.","SELECT StudentName, Grade, CASE WHEN Grade >= 70 THEN 'Passed' ELSE 'Failed' END AS Status FROM Students;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT, Grade INTEGER);",This query assigns a 'Passed' or 'Failed' status to each student based on their grade using a simple CASE expression.
"Count the number of employees in each salary range: 'Low' (salary less than 30000), 'Medium' (salary between 30000 and 60000 inclusive), 'High' (salary over 60000).","SELECT CASE WHEN Salary < 30000 THEN 'Low' WHEN Salary >= 30000 AND Salary <= 60000 THEN 'Medium' ELSE 'High' END AS SalaryRange, COUNT(EmployeeID) AS NumberOfEmployees FROM Employees GROUP BY SalaryRange;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL);","This query counts employees within defined salary ranges ('Low', 'Medium', 'High') by categorizing salaries using a CASE expression in the GROUP BY clause."
"For each order, show a 'ShippingCharge' of 10.00 if the total amount is less than 100, otherwise show 0.00 (indicating free shipping).","SELECT OrderID, TotalAmount, CASE WHEN TotalAmount < 100 THEN 10.00 ELSE 0.00 END AS ShippingCharge FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, TotalAmount REAL);","This query calculates a 'ShippingCharge' for each order: 10.00 if the total amount is less than 100, otherwise 0.00 (representing free shipping), using a CASE expression."
Classify customer loyalty based on total purchase amount and years as a customer. 'Platinum' for >10000 total purchases AND >5 years. 'Gold' for >5000 total purchases OR >3 years. 'Silver' for >1000 total purchases. 'Bronze' otherwise.,"SELECT CustomerName, TotalPurchases, YearsAsCustomer, CASE WHEN TotalPurchases > 10000 AND YearsAsCustomer > 5 THEN 'Platinum' WHEN TotalPurchases > 5000 OR YearsAsCustomer > 3 THEN 'Gold' WHEN TotalPurchases > 1000 THEN 'Silver' ELSE 'Bronze' END AS LoyaltyTier FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, TotalPurchases REAL, YearsAsCustomer INTEGER);","This query assigns a loyalty tier ('Platinum', 'Gold', 'Silver', 'Bronze') to each customer based on a combination of their total purchases and years as a customer, using a complex searched CASE expression."
"Calculate the commission for each salesperson: 10% of sales if sales are over 100000, 5% if sales are between 50000 and 100000 (inclusive), and 2% otherwise.","SELECT SalespersonName, SalesAmount, CASE WHEN SalesAmount > 100000 THEN SalesAmount * 0.10 WHEN SalesAmount >= 50000 AND SalesAmount <= 100000 THEN SalesAmount * 0.05 ELSE SalesAmount * 0.02 END AS Commission FROM Salespeople;","CREATE TABLE Salespeople (SalespersonID INTEGER PRIMARY KEY, SalespersonName TEXT, SalesAmount REAL);","This query calculates the commission for each salesperson based on their sales amount, applying different commission percentages using a searched CASE expression."
"Count the number of male and female employees, treating 'Unknown' or NULL gender as 'Other'. Show each count separately.","SELECT SUM(CASE WHEN Gender = 'Male' THEN 1 ELSE 0 END) AS MaleCount, SUM(CASE WHEN Gender = 'Female' THEN 1 ELSE 0 END) AS FemaleCount, SUM(CASE WHEN Gender IS NULL OR Gender = 'Unknown' THEN 1 ELSE 0 END) AS OtherCount FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Gender TEXT);","This query counts employees by gender (Male, Female, Other) by using conditional aggregation and explicitly handling NULL or 'Unknown' gender values in the 'Other' category."
"For all employees, set their 'BonusEligible' status to 'Yes' if their performance rating is 'Excellent' AND their tenure is over 5 years, or if their performance rating is 'Good' AND their tenure is over 10 years. Otherwise, set it to 'No'.",UPDATE Employees SET BonusEligible = CASE WHEN (PerformanceRating = 'Excellent' AND TenureYears > 5) OR (PerformanceRating = 'Good' AND TenureYears > 10) THEN 'Yes' ELSE 'No' END;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, PerformanceRating TEXT, TenureYears INTEGER, BonusEligible TEXT);","This query updates the 'BonusEligible' status of employees based on a complex set of conditions involving their performance rating and tenure years, defined within a CASE expression."
"Display all tasks, prioritizing 'High Priority' tasks first, then 'Medium Priority', then 'Low Priority', and finally 'No Priority' items. Within each priority, sort by DueDate ascending.","SELECT ItemName, Priority, DueDate FROM Tasks ORDER BY CASE Priority WHEN 'High Priority' THEN 1 WHEN 'Medium Priority' THEN 2 WHEN 'Low Priority' THEN 3 ELSE 4 END, DueDate ASC;","CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, ItemName TEXT, Priority TEXT, DueDate TEXT);","This query sorts tasks by a custom priority order (High > Medium > Low > No Priority) and then by their due date within each priority, achieved by assigning numeric values to priorities using a CASE expression in the ORDER BY clause."
Report the total revenue from domestic sales (country 'USA') and international sales (any other country) separately.,"SELECT SUM(CASE WHEN Country = 'USA' THEN Revenue ELSE 0 END) AS DomesticRevenue, SUM(CASE WHEN Country <> 'USA' THEN Revenue ELSE 0 END) AS InternationalRevenue FROM SalesData;","CREATE TABLE SalesData (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, Country TEXT, Revenue REAL);",This query calculates the total revenue from domestic sales (USA) and international sales (non-USA) in two separate columns using conditional aggregation.
"Create a report showing the number of customers whose last order was in the 'Last 30 Days', 'Last 90 Days', 'Last Year', or 'Older'.","SELECT SUM(CASE WHEN JULIANDAY('now') - JULIANDAY(LastOrderDate) <= 30 THEN 1 ELSE 0 END) AS Last30Days, SUM(CASE WHEN JULIANDAY('now') - JULIANDAY(LastOrderDate) > 30 AND JULIANDAY('now') - JULIANDAY(LastOrderDate) <= 90 THEN 1 ELSE 0 END) AS Last90Days, SUM(CASE WHEN JULIANDAY('now') - JULIANDAY(LastOrderDate) > 90 AND JULIANDAY('now') - JULIANDAY(LastOrderDate) <= 365 THEN 1 ELSE 0 END) AS LastYear, SUM(CASE WHEN JULIANDAY('now') - JULIANDAY(LastOrderDate) > 365 THEN 1 ELSE 0 END) AS Older FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, LastOrderDate TEXT);","This query counts customers based on the recency of their last order, categorizing them into specified timeframes ('Last 30 Days', 'Last 90 Days', 'Last Year', 'Older') using date arithmetic and conditional aggregation with CASE."
"List all products and their stock status. If the product's quantity in stock is less than its reorder level, mark it 'Reorder Now'. If it's less than twice its reorder level, mark it 'Low Stock'. Otherwise, mark it 'In Stock'.","SELECT P.ProductName, S.QuantityInStock, P.ReorderLevel, CASE WHEN S.QuantityInStock < P.ReorderLevel THEN 'Reorder Now' WHEN S.QuantityInStock < (P.ReorderLevel * 2) THEN 'Low Stock' ELSE 'In Stock' END AS StockStatus FROM Products P JOIN Inventory S ON P.ProductID = S.ProductID;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, ReorderLevel INTEGER); CREATE TABLE Inventory (InventoryID INTEGER PRIMARY KEY, ProductID INTEGER, QuantityInStock INTEGER);","This query joins product and inventory data to determine a stock status ('Reorder Now', 'Low Stock', 'In Stock') for each product based on its quantity in stock relative to its reorder level, using a CASE expression."
Show the total quantity sold for 'Product A' and 'Product B' in separate columns.,"SELECT SUM(CASE WHEN ProductName = 'Product A' THEN Quantity ELSE 0 END) AS QuantityProductA, SUM(CASE WHEN ProductName = 'Product B' THEN Quantity ELSE 0 END) AS QuantityProductB FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductName TEXT, Quantity INTEGER);","This query calculates the total quantity sold for specific products ('Product A' and 'Product B') and displays them in separate columns using conditional aggregation, mimicking a pivot operation."
"Assign a region to cities: 'North' for New York and Boston, 'South' for Miami and Atlanta, 'West' for Los Angeles and San Francisco, and 'Other' for any other city.","SELECT CityName, CASE WHEN CityName IN ('New York', 'Boston') THEN 'North' WHEN CityName IN ('Miami', 'Atlanta') THEN 'South' WHEN CityName IN ('Los Angeles', 'San Francisco') THEN 'West' ELSE 'Other' END AS Region FROM Cities;","CREATE TABLE Cities (CityID INTEGER PRIMARY KEY, CityName TEXT);","This query assigns a geographical region ('North', 'South', 'West', 'Other') to each city based on its name using a CASE expression with the IN operator for grouping cities."
"Count how many orders were placed in 2022 versus 2023, showing separate counts.","SELECT SUM(CASE WHEN STRFTIME('%Y', OrderDate) = '2022' THEN 1 ELSE 0 END) AS Orders2022, SUM(CASE WHEN STRFTIME('%Y', OrderDate) = '2023' THEN 1 ELSE 0 END) AS Orders2023 FROM Orders;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, OrderDate TEXT);",This query counts the number of orders placed in 2022 and 2023 separately using conditional aggregation and SQLite's STRFTIME function to extract the year from the order date.
"Calculate bonus for employees: 10% of salary for managers, 5% for team leads, and 2% for staff.","SELECT EmployeeName, Salary, Role, CASE WHEN Role = 'Manager' THEN Salary * 0.10 WHEN Role = 'Team Lead' THEN Salary * 0.05 ELSE Salary * 0.02 END AS BonusAmount FROM Employees;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Salary REAL, Role TEXT);","This query calculates a bonus amount for each employee based on their role, applying different percentages using a CASE expression to determine the bonus rate."
Find departments where the majority of employees (more than 50%) have a 'Good' performance rating.,"SELECT Department, COUNT(EmployeeID) AS TotalEmployees, SUM(CASE WHEN PerformanceRating = 'Good' THEN 1 ELSE 0 END) AS GoodPerformers FROM Employees GROUP BY Department HAVING GoodPerformers > (TotalEmployees * 0.5);","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, Department TEXT, PerformanceRating TEXT);",This query identifies departments where more than half of the employees have a 'Good' performance rating. It uses conditional aggregation (SUM with CASE) to count 'Good' performers and filters the grouped results using the HAVING clause.
"Display customer's phone number if available, otherwise display their email address. If neither is available, show 'No Contact Info'.","SELECT CustomerName, CASE WHEN PhoneNumber IS NOT NULL AND PhoneNumber <> '' THEN PhoneNumber WHEN Email IS NOT NULL AND Email <> '' THEN Email ELSE 'No Contact Info' END AS PreferredContact FROM Customers;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, PhoneNumber TEXT, Email TEXT);","This query selects a preferred contact method for each customer, prioritizing a non-empty phone number over a non-empty email address, and displays 'No Contact Info' if both are missing or empty."
"Sum the total revenue for 'New Customers' and 'Returning Customers' separately. A customer is 'New' if their CustomerID is less than 1000, otherwise they are 'Returning'.","SELECT SUM(CASE WHEN CustomerID < 1000 THEN TotalRevenue ELSE 0 END) AS NewCustomerRevenue, SUM(CASE WHEN CustomerID >= 1000 THEN TotalRevenue ELSE 0 END) AS ReturningCustomerRevenue FROM Sales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, CustomerID INTEGER, TotalRevenue REAL);",This query calculates the total revenue separately for new customers (those with CustomerID less than 1000) and returning customers (those with CustomerID 1000 or greater) using conditional aggregation.
"For each record, identify if 'Data Quality' is 'Good' (no missing or invalid values for Name, Age, and City), 'Partial' (exactly one missing or invalid), or 'Poor' (two or more missing or invalid). Assume NULL or empty string for Name/City, and Age less than or equal to 0 are invalid.","SELECT RecordID, CASE WHEN ((Name IS NULL OR Name = '') + (Age <= 0) + (City IS NULL OR City = '')) = 0 THEN 'Good' WHEN ((Name IS NULL OR Name = '') + (Age <= 0) + (City IS NULL OR City = '')) = 1 THEN 'Partial' ELSE 'Poor' END AS DataQualityStatus FROM Records;","CREATE TABLE Records (RecordID INTEGER PRIMARY KEY, Name TEXT, Age INTEGER, City TEXT);","This query assesses the data quality for each record by counting the number of invalid fields (Name, Age, City). It then assigns a 'Good' status if all are valid, 'Partial' if one is invalid, and 'Poor' if two or more are invalid, utilizing boolean expressions that evaluate to 0 or 1 in SQLite's arithmetic context within a CASE statement."
Find the names of products in the 'Electronics' category.,SELECT P.product_name FROM Products P JOIN Categories C ON P.category_id = C.category_id WHERE C.category_name = 'Electronics';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL, stock_quantity INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL);",This query joins the Products and Categories tables on their common category_id. It then filters the results to only include products where the category name is 'Electronics' and selects their names.
"Calculate the total number of orders for each customer, including customers with no orders.","SELECT C.customer_name, COUNT(O.order_id) AS total_orders FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_name ORDER BY total_orders DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query uses a LEFT JOIN to combine customers with their orders. It counts the orders for each customer, including those without any orders (which will have a count of 0), groups them by customer name, and orders the results by the total number of orders in descending order."
List the names of products that have never been ordered.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL, stock_quantity INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, item_status TEXT, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query selects product names from the Products table where their product_id does not exist in the product_id list found in the Order_Items table, thus identifying products that have never been ordered."
"Get the names of employees who joined after January 1, 2020, and are in the 'Sales' department.",SELECT E.employee_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.department_name = 'Sales' AND E.hire_date > '2020-01-01';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, manager_id INTEGER, hire_date TEXT NOT NULL, salary REAL NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","This query joins the Employees and Departments tables, filters for employees in the 'Sales' department and those hired after '2020-01-01', then returns their names."
Which departments have more than 10 employees?,"SELECT D.department_name, COUNT(E.employee_id) AS num_employees FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name HAVING COUNT(E.employee_id) > 10;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, manager_id INTEGER, hire_date TEXT NOT NULL, salary REAL NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","This query joins Departments and Employees, groups the results by department name, and then filters these groups to show only departments where the count of employees is greater than 10."
Find the names of employees and their respective managers.,"SELECT E.employee_name AS employee, M.employee_name AS manager FROM Employees E LEFT JOIN Employees M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, manager_id INTEGER, hire_date TEXT NOT NULL, salary REAL NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This query uses a self-join on the Employees table. It joins employees (aliased as E) with their managers (aliased as M) based on the manager_id, showing each employee and their manager's name. A LEFT JOIN ensures all employees are listed, even if they don't have a manager."
"List all loans that are currently overdue, assuming a 14-day loan period.","SELECT L.loan_id, L.book_id, L.borrower_id FROM Loans L WHERE L.return_date IS NULL AND julianday('now') - julianday(L.loan_date) > 14;","CREATE TABLE Loans (loan_id INTEGER PRIMARY KEY, book_id INTEGER, borrower_id INTEGER, loan_date TEXT NOT NULL, return_date TEXT, FOREIGN KEY (book_id) REFERENCES Books(book_id), FOREIGN KEY (borrower_id) REFERENCES Borrowers(borrower_id));",This query selects loan details for books that have not yet been returned (return_date IS NULL) and where the current date (julianday('now')) is more than 14 days after the loan date.
Find the names of students who are enrolled in at least one course taught by Professor 'Dr. Smith'.,SELECT S.student_name FROM Students S WHERE S.student_id IN (SELECT E.student_id FROM Enrollments E JOIN Courses C ON E.course_id = C.course_id JOIN Professors P ON C.professor_id = P.professor_id WHERE P.professor_name = 'Dr. Smith');,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, gpa REAL); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, professor_id INTEGER, FOREIGN KEY (professor_id) REFERENCES Professors(professor_id)); CREATE TABLE Professors (professor_id INTEGER PRIMARY KEY, professor_name TEXT NOT NULL, professor_title TEXT);","This query uses a subquery to first find the student_ids of all students enrolled in courses taught by 'Dr. Smith', then selects the names of students matching those IDs."
List the names of all employees who are either managers or work in the 'HR' department.,SELECT E.employee_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE E.employee_id IN (SELECT DISTINCT manager_id FROM Employees WHERE manager_id IS NOT NULL) OR D.department_name = 'HR';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, manager_id INTEGER, hire_date TEXT NOT NULL, salary REAL NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","This query retrieves employee names. It joins Employees with Departments and applies a condition: an employee is included if their ID appears as a manager_id for another employee, OR if they belong to the 'HR' department."
Find customers who have placed orders for products from at least two different categories.,SELECT C.customer_name FROM Customers C WHERE (SELECT COUNT(DISTINCT PR.category_id) FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products PR ON OI.product_id = PR.product_id WHERE O.customer_id = C.customer_id) >= 2;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, item_status TEXT, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL, stock_quantity INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL);",This query selects customer names. It uses a correlated subquery to count the distinct categories of products associated with each customer's orders. It then filters for customers who have ordered products from 2 or more distinct categories.
List all departments that currently have no employees.,SELECT D.department_name FROM Departments D LEFT JOIN Employees E ON D.department_id = E.department_id WHERE E.employee_id IS NULL;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, manager_id INTEGER, hire_date TEXT NOT NULL, salary REAL NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));","This query performs a LEFT JOIN from Departments to Employees. If a department has no matching employees, the employee columns in the join will be NULL. The WHERE clause then filters for these cases, effectively finding departments without employees."
"For each category, count how many products are 'in stock' (quantity > 0) and 'out of stock' (quantity = 0).","SELECT C.category_name, SUM(CASE WHEN P.stock_quantity > 0 THEN 1 ELSE 0 END) AS in_stock, SUM(CASE WHEN P.stock_quantity = 0 THEN 1 ELSE 0 END) AS out_of_stock FROM Categories C JOIN Products P ON C.category_id = P.category_id GROUP BY C.category_name;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL, stock_quantity INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id));","This query joins Categories and Products. It then uses conditional aggregation (SUM with CASE statements) to count products with stock_quantity > 0 (in_stock) and stock_quantity = 0 (out_of_stock) for each category, grouping by category name."
Identify customers who have orders with ONLY cancelled items.,SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_id IN (SELECT order_id FROM Order_Items GROUP BY order_id HAVING COUNT(*) = SUM(CASE WHEN item_status = 'Cancelled' THEN 1 ELSE 0 END));,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, item_status TEXT, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query selects customer names. It identifies orders where the total count of order items equals the count of items with 'Cancelled' status, implying all items in that order were cancelled. It then returns the names of customers associated with such orders."
Which author has the highest average number of pages per book?,"SELECT A.author_name, AVG(B.num_pages) AS avg_pages FROM Authors A JOIN Books B ON A.author_id = B.author_id GROUP BY A.author_name ORDER BY avg_pages DESC LIMIT 1;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT NOT NULL); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, num_pages INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query joins Authors and Books, calculates the average number of pages for books by each author, groups by author name, orders the results in descending order of average pages, and finally limits the result to the top author."
List students who are enrolled in both 'Math 101' and 'Physics 101'.,SELECT S.student_name FROM Students S WHERE S.student_id IN (SELECT student_id FROM Enrollments E JOIN Courses C ON E.course_id = C.course_id WHERE C.course_name = 'Math 101') AND S.student_id IN (SELECT student_id FROM Enrollments E JOIN Courses C ON E.course_id = C.course_id WHERE C.course_name = 'Physics 101');,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, gpa REAL); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, professor_id INTEGER, FOREIGN KEY (professor_id) REFERENCES Professors(professor_id));","This query finds student names whose student_id appears in the list of students enrolled in 'Math 101' AND also in the list of students enrolled in 'Physics 101', ensuring they are enrolled in both."
Show all orders placed in the last 30 days that include at least one product from the 'Books' category.,"SELECT DISTINCT O.order_id FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id JOIN Categories C ON P.category_id = C.category_id WHERE O.order_date >= date('now', '-30 days') AND C.category_name = 'Books';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, item_status TEXT, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL, stock_quantity INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT NOT NULL);","This query joins Orders, Order_Items, Products, and Categories. It filters for orders placed within the last 30 days and those containing products from the 'Books' category, returning distinct order IDs."
"What is the average salary of employees in each department, but only for departments with more than 5 employees?","SELECT D.department_name, AVG(E.salary) AS average_salary FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name HAVING COUNT(E.employee_id) > 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, manager_id INTEGER, hire_date TEXT NOT NULL, salary REAL NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","This query joins Departments and Employees, calculates the average salary for each department, groups by department name, and then filters these groups to include only departments with more than 5 employees."
List all products that are not currently part of any order.,SELECT P.product_name FROM Products P LEFT JOIN Order_Items OI ON P.product_id = OI.product_id WHERE OI.product_id IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL, stock_quantity INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, item_status TEXT, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query uses a LEFT JOIN from Products to Order_Items. If a product has no corresponding entry in Order_Items, its `product_id` from `Order_Items` will be NULL. The WHERE clause filters for these NULL values to find products never ordered."
How many distinct products has each customer ordered?,"SELECT C.customer_name, COUNT(DISTINCT OI.product_id) AS distinct_products_ordered FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id GROUP BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, item_status TEXT, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query joins Customers, Orders, and Order_Items. It groups the results by customer name and counts the number of unique product IDs associated with each customer's orders."
"For each department, find the name of the employee with the highest salary.","SELECT D.department_name, E.employee_name, E.salary FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE (E.department_id, E.salary) IN (SELECT department_id, MAX(salary) FROM Employees GROUP BY department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER, manager_id INTEGER, hire_date TEXT NOT NULL, salary REAL NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id), FOREIGN KEY (manager_id) REFERENCES Employees(employee_id)); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL);","This query first finds the maximum salary for each department using a subquery. Then, it joins Employees and Departments and filters for employees whose department_id and salary match those maximums found, effectively identifying the highest-paid employee in each department."
"Find all books that have been borrowed at least once and are currently not on loan (i.e., their return_date is not NULL).",SELECT DISTINCT B.title FROM Books B JOIN Loans L ON B.book_id = L.book_id WHERE L.return_date IS NOT NULL;,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER, num_pages INTEGER, FOREIGN KEY (author_id) REFERENCES Authors(author_id)); CREATE TABLE Loans (loan_id INTEGER PRIMARY KEY, book_id INTEGER, borrower_id INTEGER, loan_date TEXT NOT NULL, return_date TEXT, FOREIGN KEY (book_id) REFERENCES Books(book_id), FOREIGN KEY (borrower_id) REFERENCES Borrowers(borrower_id));","This query joins Books and Loans. It selects distinct book titles for which there is at least one loan record where the `return_date` is not NULL, indicating the book was borrowed and has since been returned."
How many courses are currently taught by professors who also teach 'Introduction to AI'?,SELECT COUNT(DISTINCT C.course_id) FROM Courses C WHERE C.professor_id IN (SELECT professor_id FROM Courses WHERE course_name = 'Introduction to AI');,"CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, professor_id INTEGER, FOREIGN KEY (professor_id) REFERENCES Professors(professor_id)); CREATE TABLE Professors (professor_id INTEGER PRIMARY KEY, professor_name TEXT NOT NULL, professor_title TEXT);","This query first identifies the professor_ids of professors who teach 'Introduction to AI' using a subquery. Then, it counts the distinct course_ids for all courses taught by those identified professors."
"List departments where the total project budget exceeds $50,000.",SELECT D.department_name FROM Departments D JOIN Projects P ON D.department_id = P.department_id GROUP BY D.department_name HAVING SUM(P.budget) > 50000;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT NOT NULL); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT NOT NULL, department_id INTEGER, budget REAL NOT NULL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query joins Departments and Projects, sums the budget for all projects within each department, groups by department name, and filters to show only departments where the total budget exceeds $50,000."
Find customers who have placed exactly 3 orders.,SELECT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_name HAVING COUNT(O.order_id) = 3;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins Customers with Orders, groups the results by customer name, and then filters these groups to only include customers for whom the count of orders is exactly 3."
"For each product, find the date of its most recent order.","SELECT P.product_name, MAX(O.order_date) AS most_recent_order_date FROM Products P JOIN Order_Items OI ON P.product_id = OI.product_id JOIN Orders O ON OI.order_id = O.order_id GROUP BY P.product_name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL, stock_quantity INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, item_status TEXT, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins Products, Order_Items, and Orders. It groups the results by product name and finds the maximum (most recent) order date associated with each product."
Calculate the total price of each order.,"SELECT O.order_id, SUM(OI.quantity * P.price) AS total_order_price FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id GROUP BY O.order_id;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, item_status TEXT, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL, stock_quantity INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id));","This query joins Orders, Order_Items, and Products. It calculates the total price for each item (quantity * price) and then sums these values for each order, grouping by order ID."
List all artists who have no albums recorded.,SELECT A.artist_name FROM Artists A LEFT JOIN Albums AL ON A.artist_id = AL.artist_id WHERE AL.album_id IS NULL;,"CREATE TABLE Artists (artist_id INTEGER PRIMARY KEY, artist_name TEXT NOT NULL); CREATE TABLE Albums (album_id INTEGER PRIMARY KEY, album_title TEXT NOT NULL, artist_id INTEGER, release_year INTEGER, FOREIGN KEY (artist_id) REFERENCES Artists(artist_id));","This query uses a LEFT JOIN from Artists to Albums. If an artist has no albums, the album-related columns in the join will be NULL. The WHERE clause filters for these NULL album_id values to find artists without any albums."
"Count the number of orders placed in the current year, grouped by customer.","SELECT C.customer_name, COUNT(O.order_id) AS orders_this_year FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE STRFTIME('%Y', O.order_date) = STRFTIME('%Y', 'now') GROUP BY C.customer_name;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query joins Customers and Orders. It filters orders to only include those placed in the current year (using STRFTIME('%Y', ...)) and then counts the number of such orders for each customer, grouping by customer name."
Find the names of students who are enrolled in a course taught by a professor with 'PhD' in their title.,SELECT DISTINCT S.student_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id JOIN Professors P ON C.professor_id = P.professor_id WHERE P.professor_title LIKE '%PhD%';,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, gpa REAL); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT NOT NULL, professor_id INTEGER, FOREIGN KEY (professor_id) REFERENCES Professors(professor_id)); CREATE TABLE Professors (professor_id INTEGER PRIMARY KEY, professor_name TEXT NOT NULL, professor_title TEXT);","This query joins Students, Enrollments, Courses, and Professors. It filters for professors whose title contains 'PhD' and then selects the distinct names of students enrolled in courses taught by those professors."
List all products that have only been ordered by customers from the 'USA'.,SELECT P.product_name FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE OI.product_id = P.product_id AND C.country <> 'USA');,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category_id INTEGER, price REAL NOT NULL, stock_quantity INTEGER NOT NULL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER NOT NULL, item_status TEXT, FOREIGN KEY (order_id) REFERENCES Orders(order_id), FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT NOT NULL, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT NOT NULL, email TEXT, country TEXT);",This query selects product names where there does NOT exist any order item for that product placed by a customer whose country is NOT 'USA'. This ensures only products ordered exclusively by US customers are listed.
Retrieve all information about products.,SELECT * FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects all columns and all rows from the Products table.
List the names and prices of all products.,"SELECT product_name, price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query retrieves only the product name and price for all products.
"Show employee first names, aliasing the column as 'GivenName'.",SELECT first_name AS GivenName FROM Employees;,"CREATE TABLE Employees (id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, salary REAL, department_id INTEGER);",This query selects the first_name column from the Employees table and renames it to 'GivenName' in the output.
"Get the title and release year of movies, calling them 'MovieTitle' and 'YearReleased'.","SELECT title AS MovieTitle, release_year AS YearReleased FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, release_year INTEGER, genre TEXT, director TEXT, rating REAL);",This query selects the title and release_year columns from the Movies table and renames them to 'MovieTitle' and 'YearReleased' respectively.
"For each product, show its name and the calculated total value in stock, aliased as 'TotalStockValue'.","SELECT product_name, (price * stock_quantity) AS TotalStockValue FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query calculates the total value of stock for each product by multiplying price by stock_quantity and displays it alongside the product name, aliased as 'TotalStockValue'."
"List the full names of customers, formatted as 'FirstName LastName', and label the column 'CustomerFullName'.",SELECT first_name || ' ' || last_name AS CustomerFullName FROM Customers;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);","This query concatenates the first_name and last_name columns with a space in between to form a full name, aliased as 'CustomerFullName'."
"Retrieve all product names, and add a column showing 'Active' status for each, aliased as 'ProductStatus'.","SELECT product_name, 'Active' AS ProductStatus FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects the product name and adds a new column named 'ProductStatus' with a constant string value 'Active' for every row.
Find all unique categories of products and call the column 'UniqueCategory'.,SELECT DISTINCT category AS UniqueCategory FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects all unique values from the 'category' column of the Products table and renames the column to 'UniqueCategory'.
Show the names and salaries of employees who earn more than 60000.,"SELECT first_name, salary FROM Employees WHERE salary > 60000;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, salary REAL, department_id INTEGER);",This query retrieves the first name and salary of employees whose salary is greater than 60000.
"List movie titles and their ratings, aliasing rating as 'ViewerScore', ordered by the score in descending order.","SELECT title, rating AS ViewerScore FROM Movies ORDER BY ViewerScore DESC;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, release_year INTEGER, genre TEXT, director TEXT, rating REAL);",This query selects the movie title and rating (aliased as 'ViewerScore') and orders the results by 'ViewerScore' in descending order.
"Display employee IDs, their last names, and a calculated annual bonus (10% of salary), aliased as 'AnnualBonus'.","SELECT id, last_name, (salary * 0.10) AS AnnualBonus FROM Employees;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, salary REAL, department_id INTEGER);","This query calculates a 10% annual bonus for each employee based on their salary and displays it alongside their ID and last name, with the calculated column aliased as 'AnnualBonus'."
"For each order, show its ID and the year it was placed, aliasing the year as 'OrderYear'.","SELECT order_id, STRFTIME('%Y', order_date) AS OrderYear FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query extracts the year from the 'order_date' column for each order and aliases it as 'OrderYear'.
Count the total number of products and label this count 'ProductCount'.,SELECT COUNT(*) AS ProductCount FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query counts the total number of rows in the Products table and labels the result 'ProductCount'.
Calculate the sum of all salaries and call it 'TotalSalariesPaid'.,SELECT SUM(salary) AS TotalSalariesPaid FROM Employees;,"CREATE TABLE Employees (id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, salary REAL, department_id INTEGER);",This query calculates the sum of all salaries from the Employees table and aliases the result as 'TotalSalariesPaid'.
Find the average price of products and name the column 'AvgProductPrice'.,SELECT AVG(price) AS AvgProductPrice FROM Products;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query calculates the average price of all products and aliases the result as 'AvgProductPrice'.
"Show the lowest and highest stock quantities, aliasing them as 'MinStock' and 'MaxStock'.","SELECT MIN(stock_quantity) AS MinStock, MAX(stock_quantity) AS MaxStock FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query finds the minimum and maximum values from the 'stock_quantity' column and aliases them as 'MinStock' and 'MaxStock' respectively.
"List product names and their price category: 'Expensive' if price > 100, else 'Affordable'. Alias the category column as 'PriceCategory'.","SELECT product_name, CASE WHEN price > 100 THEN 'Expensive' ELSE 'Affordable' END AS PriceCategory FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query assigns a 'PriceCategory' to each product based on its price, labeling products over 100 as 'Expensive' and others as 'Affordable'."
"Display the titles and genres of movies released after 2000, ordered by title alphabetically.","SELECT title, genre FROM Movies WHERE release_year > 2000 ORDER BY title ASC;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, release_year INTEGER, genre TEXT, director TEXT, rating REAL);","This query retrieves the title and genre for movies released after the year 2000, sorted alphabetically by title."
"For all orders with 'Completed' status, show their order ID and the total amount including a 5% tax, aliased as 'TotalWithTax'.","SELECT order_id, (total_amount * 1.05) AS TotalWithTax FROM Orders WHERE status = 'Completed';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects the order ID and calculates the total amount with a 5% tax for all orders with a 'Completed' status, aliasing the calculated amount as 'TotalWithTax'."
"For each employee, show their ID, their net salary (salary minus 15% tax), and their gross salary (original salary), aliased as 'NetSalary' and 'GrossSalary' respectively.","SELECT id, (salary * 0.85) AS NetSalary, salary AS GrossSalary FROM Employees;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, salary REAL, department_id INTEGER);","This query displays employee IDs, calculates a net salary (85% of original salary) aliased as 'NetSalary', and shows the original salary aliased as 'GrossSalary'."
"Select product name and price, but rename the price column to 'Product_Price' for clarity.","SELECT product_name, price AS Product_Price FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects the product name and renames the 'price' column to 'Product_Price'.
"List unique combinations of movie genre and release year, aliasing them as 'MovieGenre' and 'ReleaseYear'.","SELECT DISTINCT genre AS MovieGenre, release_year AS ReleaseYear FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, release_year INTEGER, genre TEXT, director TEXT, rating REAL);","This query selects all unique pairs of genre and release_year from the Movies table, aliasing them as 'MovieGenre' and 'ReleaseYear'."
"For each product, show its name and a flag 'IsInStock' which is 1 if stock quantity is greater than 0, else 0.","SELECT product_name, CASE WHEN stock_quantity > 0 THEN 1 ELSE 0 END AS IsInStock FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects the product name and creates a new column 'IsInStock' that is 1 if the stock quantity is positive, and 0 otherwise."
"Get the current date and time, labeled as 'CurrentTimestamp'.",SELECT DATETIME('now') AS CurrentTimestamp;,CREATE TABLE DummyTable (id INTEGER PRIMARY KEY);,This query retrieves the current date and time using SQLite's DATETIME function and aliases the result as 'CurrentTimestamp'.
"For each customer, list their customer ID and the month they registered, aliasing the month as 'RegistrationMonth'.","SELECT customer_id, STRFTIME('%m', registration_date) AS RegistrationMonth FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT);",This query extracts the month number from the 'registration_date' for each customer and aliases it as 'RegistrationMonth'.
"From the products table, display product names and the first three characters of their category, aliased as 'CategoryCode'.","SELECT product_name, SUBSTR(category, 1, 3) AS CategoryCode FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects the product name and extracts the first three characters from the 'category' column, aliasing the result as 'CategoryCode'."
"Show the product name and the remaining stock after selling 5 units, for products with more than 10 units originally. Alias the new column 'RemainingStock'.","SELECT product_name, (stock_quantity - 5) AS RemainingStock FROM Products WHERE stock_quantity > 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query calculates the remaining stock after selling 5 units for products that initially had more than 10 units, aliasing the result as 'RemainingStock'."
"List employee IDs, first names, and their annual salary (aliased as 'AnnualPay') for employees earning between 50000 and 70000.","SELECT id, first_name, salary AS AnnualPay FROM Employees WHERE salary BETWEEN 50000 AND 70000;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, salary REAL, department_id INTEGER);","This query retrieves the ID, first name, and salary (aliased as 'AnnualPay') for employees whose salary is between 50000 and 70000, inclusive."
"For each product, show its product name and its category. If the category is null, display 'Uncategorized' instead. Alias the column 'ProductCategory'.","SELECT product_name, COALESCE(category, 'Uncategorized') AS ProductCategory FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects the product name and displays the product's category. If the category is NULL, it substitutes 'Uncategorized' and aliases the column as 'ProductCategory'."
"Display product names and their prices rounded to two decimal places, aliased as 'RoundedPrice'.","SELECT product_name, ROUND(price, 2) AS RoundedPrice FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects the product name and rounds the 'price' column to two decimal places, aliasing the result as 'RoundedPrice'."
Find all employees who work in the 'Sales' department.,SELECT * FROM Employees WHERE Department = 'Sales';,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Department TEXT, Salary REAL);",Retrieves all columns for employees whose 'Department' is exactly 'Sales'.
List all products with a price greater than 50.00.,"SELECT ProductName, Price FROM Products WHERE Price > 50.00;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL, StockQuantity INTEGER);",Selects the name and price of products where the 'Price' is greater than 50.
"Show orders placed before January 1, 2023.","SELECT OrderID, OrderDate, TotalAmount FROM Orders WHERE OrderDate < '2023-01-01';","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","Fetches order IDs, dates, and total amounts for orders placed before January 1, 2023."
Get a list of students who scored 90 or above in any subject.,"SELECT StudentID, Course, Score FROM Grades WHERE Score >= 90;","CREATE TABLE Grades (GradeID INTEGER PRIMARY KEY, StudentID INTEGER, Course TEXT, Score INTEGER);","Lists student IDs, courses, and scores for all grades that are 90 or higher."
Display tasks with a priority of 3 or less.,"SELECT TaskID, TaskName, Priority FROM Tasks WHERE Priority <= 3;","CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, TaskName TEXT, Description TEXT, Priority INTEGER, DueDate TEXT);","Retrieves task IDs, names, and priorities for tasks where the 'Priority' level is 3 or lower."
Show all customers who are not from 'New York'.,"SELECT CustomerID, CustomerName, City FROM Customers WHERE City != 'New York';","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, State TEXT, PostalCode TEXT);","Selects customer IDs, names, and cities for customers whose 'City' is not 'New York'."
Find employees who are in 'IT' department and have a salary greater than 70000.,"SELECT FirstName, LastName, Department, Salary FROM Employees WHERE Department = 'IT' AND Salary > 70000;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Department TEXT, Salary REAL);","Gets the first name, last name, department, and salary of employees who belong to the 'IT' department AND earn more than 70000."
List products that are either 'Electronics' or 'Books'.,"SELECT ProductName, Category FROM Products WHERE Category = 'Electronics' OR Category = 'Books';","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);",Retrieves the name and category of products that are in the 'Electronics' category OR the 'Books' category.
Find all orders that were NOT shipped to 'California'.,"SELECT OrderID, ShippingState FROM Orders WHERE NOT ShippingState = 'California';","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, ShippingState TEXT);",Retrieves order IDs and shipping states for orders where the 'ShippingState' is NOT 'California'.
Find users whose age is between 25 and 35 AND they are from either 'London' or 'Paris'.,"SELECT UserID, UserName, Age, City FROM Users WHERE Age BETWEEN 25 AND 35 AND (City = 'London' OR City = 'Paris');","CREATE TABLE Users (UserID INTEGER PRIMARY KEY, UserName TEXT, Age INTEGER, City TEXT, Country TEXT);","Selects user IDs, names, ages, and cities for users who are between 25 and 35 years old AND whose city is either 'London' or 'Paris'."
List transactions that occurred between '2023-03-01' and '2023-03-31' inclusive.,"SELECT TransactionID, TransactionDate, Amount FROM Transactions WHERE TransactionDate BETWEEN '2023-03-01' AND '2023-03-31';","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, AccountID INTEGER, TransactionDate TEXT, Amount REAL);","Retrieves transaction IDs, dates, and amounts for transactions that took place within the month of March 2023."
Show employees whose salaries are NOT between 50000 and 80000.,"SELECT EmployeeID, FirstName, Salary FROM Employees WHERE Salary NOT BETWEEN 50000 AND 80000;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Salary REAL, Department TEXT);","Lists employee IDs, first names, and salaries for employees whose salaries fall outside the range of 50,000 to 80,000."
"Get books written by authors whose IDs are 101, 105, or 108.","SELECT BookTitle, AuthorID FROM Books WHERE AuthorID IN (101, 105, 108);","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, BookTitle TEXT, AuthorID INTEGER, PublicationYear INTEGER);","Selects book titles and author IDs for books where the author's ID is one of 101, 105, or 108."
Display courses that are not offered in 'Fall' or 'Winter' semesters.,"SELECT CourseID, CourseName, Semester FROM Courses WHERE Semester NOT IN ('Fall', 'Winter');","CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Semester TEXT, Credits INTEGER);","Retrieves course IDs, names, and semesters for courses that are not scheduled for the 'Fall' or 'Winter' semesters."
Find customers whose names start with 'J'.,"SELECT CustomerID, CustomerName FROM Customers WHERE CustomerName LIKE 'J%';","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT);",Lists customer IDs and names for customers whose names begin with the letter 'J'.
List part numbers that have 'A' as the second character.,"SELECT PartNumber, PartDescription FROM Parts WHERE PartNumber LIKE '_A%';","CREATE TABLE Parts (PartID INTEGER PRIMARY KEY, PartNumber TEXT, PartDescription TEXT);",Selects part numbers and descriptions for parts where the second character of the 'PartNumber' is 'A'.
Show articles whose titles do NOT contain the word 'tutorial'.,"SELECT ArticleID, Title FROM Articles WHERE Title NOT LIKE '%tutorial%';","CREATE TABLE Articles (ArticleID INTEGER PRIMARY KEY, Title TEXT, Content TEXT);",Retrieves article IDs and titles for articles where the 'Title' does not contain the substring 'tutorial'.
Find customers who have not provided their phone number.,"SELECT CustomerID, CustomerName FROM Customers WHERE PhoneNumber IS NULL;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, PhoneNumber TEXT, Email TEXT);",Lists customer IDs and names for customers where the 'PhoneNumber' field is explicitly NULL.
Get a list of employees for whom an email address is available.,"SELECT EmployeeID, FirstName, Email FROM Employees WHERE Email IS NOT NULL;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, Email TEXT);","Selects employee IDs, first names, and emails for employees who have an email address recorded (i.e., their 'Email' field is not NULL)."
Find appointments scheduled for today's date.,"SELECT AppointmentID, AppointmentDate, Description FROM Appointments WHERE DATE(AppointmentDate) = DATE('now');","CREATE TABLE Appointments (AppointmentID INTEGER PRIMARY KEY, PatientID INTEGER, AppointmentDate TEXT, Description TEXT);","Retrieves appointment IDs, dates, and descriptions for appointments scheduled for the current date."
"Find products whose category, ignoring case, is 'electronics'.","SELECT ProductName, Category FROM Products WHERE LOWER(Category) = 'electronics';","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);","Selects product names and categories for products where the lowercase version of their 'Category' is 'electronics', ensuring case-insensitive matching."
List customers who have placed at least one order.,"SELECT CustomerID, CustomerName FROM Customers WHERE CustomerID IN (SELECT DISTINCT CustomerID FROM Orders);","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","Retrieves customer IDs and names for customers whose IDs are present in the list of distinct customer IDs from the 'Orders' table, indicating they have placed an order."
Find departments that have at least one employee earning more than 100000.,SELECT DepartmentName FROM Departments WHERE EXISTS (SELECT 1 FROM Employees WHERE Employees.DepartmentID = Departments.DepartmentID AND Salary > 100000);,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, Salary REAL);","Selects department names for departments where there exists at least one employee whose 'DepartmentID' matches the department's ID and whose 'Salary' is greater than 100,000."
Get the names of employees and their departments for employees located in 'London'.,"SELECT E.FirstName, E.LastName, D.DepartmentName FROM Employees E JOIN Departments D ON E.DepartmentID = D.DepartmentID WHERE E.City = 'London';","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, FirstName TEXT, LastName TEXT, DepartmentID INTEGER, City TEXT); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT);","Retrieves the first name, last name, and department name for employees who reside in 'London' by joining the 'Employees' and 'Departments' tables."
"Find projects that are 'Active' and have a 'High' priority, OR are 'Pending' and due before '2024-06-01'.","SELECT ProjectID, ProjectName, Status, Priority, DueDate FROM Projects WHERE (Status = 'Active' AND Priority = 'High') OR (Status = 'Pending' AND DueDate < '2024-06-01');","CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, Status TEXT, Priority TEXT, DueDate TEXT);","Lists project IDs, names, statuses, priorities, and due dates for projects that are either 'Active' with 'High' priority, OR are 'Pending' and have a due date before June 1, 2024."
Show users who are either inactive or have no last login date recorded.,"SELECT UserID, UserName, IsActive, LastLoginDate FROM Users WHERE IsActive = 0 OR LastLoginDate IS NULL;","CREATE TABLE Users (UserID INTEGER PRIMARY KEY, UserName TEXT, IsActive INTEGER, LastLoginDate TEXT);","Selects user IDs, names, active status, and last login dates for users who are marked as inactive (IsActive = 0) OR whose 'LastLoginDate' is NULL."
List events that occurred within the last 30 days from today.,"SELECT EventID, EventName, EventDate FROM Events WHERE julianday('now') - julianday(EventDate) <= 30;","CREATE TABLE Events (EventID INTEGER PRIMARY KEY, EventName TEXT, EventDate TEXT);","Retrieves event IDs, names, and dates for events that happened within the last 30 days up to the current date."
Find products with stock quantity between 10 and 50 and price less than 100.,"SELECT ProductName, StockQuantity, Price FROM Products WHERE StockQuantity >= 10 AND StockQuantity <= 50 AND Price < 100;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, StockQuantity INTEGER, Price REAL);","Selects product names, stock quantities, and prices for products where the 'StockQuantity' is between 10 and 50 (inclusive) AND the 'Price' is less than 100."
Find articles whose title contains 'SQL' or 'database' (case-insensitive).,"SELECT ArticleID, Title FROM Articles WHERE LOWER(Title) LIKE '%sql%' OR LOWER(Title) LIKE '%database%';","CREATE TABLE Articles (ArticleID INTEGER PRIMARY KEY, Title TEXT, Content TEXT);","Retrieves article IDs and titles for articles where the title, when converted to lowercase, contains either 'sql' or 'database'."
List user comments that are shorter than 20 characters.,"SELECT CommentID, CommentText FROM Comments WHERE LENGTH(CommentText) < 20;","CREATE TABLE Comments (CommentID INTEGER PRIMARY KEY, UserID INTEGER, CommentText TEXT, CommentDate TEXT);",Selects comment IDs and their text for comments where the length of the 'CommentText' is less than 20 characters.
List the names of all customers and the IDs of the orders they placed.,"SELECT c.first_name, c.last_name, o.order_id FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query retrieves the first name, last name, and order ID for all orders by joining the 'Customers' and 'Orders' tables on their common 'customer_id' column."
"Find all products that have been part of an order, showing their name and the associated order ID.","SELECT p.product_name, oi.order_id FROM Products AS p INNER JOIN Order_Items AS oi ON p.product_id = oi.product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query lists product names and the order IDs they are associated with by joining 'Products' and 'Order_Items' tables on 'product_id'.
"Retrieve the order ID, customer name, and total amount for all orders.","SELECT o.order_id, c.first_name, c.last_name, o.total_amount FROM Orders AS o INNER JOIN Customers AS c ON o.customer_id = c.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query gets the order ID, customer's full name, and total amount for each order by joining 'Orders' and 'Customers' tables."
"Show the product name, category name, and price for all products.","SELECT p.product_name, c.category_name, p.price FROM Products AS p INNER JOIN Categories AS c ON p.category_id = c.category_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);","This query displays product names, their corresponding category names, and prices by joining 'Products' and 'Categories' tables."
List all employees along with the titles of their current jobs.,"SELECT e.first_name, e.last_name, j.job_title FROM Employees AS e INNER JOIN Jobs AS j ON e.job_id = j.job_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT, min_salary REAL, max_salary REAL);",This query retrieves employee names and their job titles by joining the 'Employees' and 'Jobs' tables.
Find all books and the names of their authors.,"SELECT b.title, a.first_name, a.last_name FROM Books AS b INNER JOIN Authors AS a ON b.author_id = a.author_id;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre_id INTEGER); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT);",This query lists book titles along with the first and last names of their authors by joining 'Books' and 'Authors' tables.
"Get a list of all borrowed books, including the book title and the member's full name.","SELECT b.title, m.first_name, m.last_name FROM Borrows AS br INNER JOIN Books AS b ON br.book_id = b.book_id INNER JOIN Members AS m ON br.member_id = m.member_id;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre_id INTEGER); CREATE TABLE Members (member_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, registration_date TEXT); CREATE TABLE Borrows (borrow_id INTEGER PRIMARY KEY, book_id INTEGER, member_id INTEGER, borrow_date TEXT, return_date TEXT, FOREIGN KEY (book_id) REFERENCES Books(book_id), FOREIGN KEY (member_id) REFERENCES Members(member_id));","This query retrieves the title of each borrowed book and the full name of the member who borrowed it, by joining 'Borrows', 'Books', and 'Members' tables."
List all orders placed by customers from 'California'. Assume customer addresses are in another table.,"SELECT o.order_id, o.order_date, c.first_name, c.last_name FROM Orders AS o INNER JOIN Customers AS c ON o.customer_id = c.customer_id INNER JOIN Addresses AS a ON c.customer_id = a.customer_id WHERE a.state = 'California';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)); CREATE TABLE Addresses (address_id INTEGER PRIMARY KEY, customer_id INTEGER, street TEXT, city TEXT, state TEXT, zip_code TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query fetches order details and customer names for orders placed by customers residing in 'California' by joining 'Orders', 'Customers', and 'Addresses' tables."
"Calculate the total revenue generated from each product, showing product name and total revenue.","SELECT p.product_name, SUM(oi.quantity * oi.price_at_time_of_order) AS total_revenue FROM Products AS p INNER JOIN Order_Items AS oi ON p.product_id = oi.product_id GROUP BY p.product_name ORDER BY total_revenue DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query calculates the total revenue for each product by summing the product of quantity and price from 'Order_Items', joined with 'Products' to get product names, and then groups the results by product name."
Find all employees who have been assigned to the 'IT Department'.,"SELECT e.first_name, e.last_name FROM Employees AS e INNER JOIN Employee_Departments AS ed ON e.employee_id = ed.employee_id INNER JOIN Departments AS d ON ed.department_id = d.department_id WHERE d.department_name = 'IT Department';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employee_Departments (employee_id INTEGER, department_id INTEGER, start_date TEXT, end_date TEXT, PRIMARY KEY (employee_id, department_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query identifies employees who have worked in the 'IT Department' by joining 'Employees', 'Employee_Departments', and 'Departments' tables."
List all customers who have placed at least one order.,"SELECT DISTINCT c.first_name, c.last_name FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query returns the unique names of customers who have placed orders by performing an inner join and selecting distinct customer names.
Find the titles of books in the 'Fantasy' genre.,SELECT b.title FROM Books AS b INNER JOIN Genres AS g ON b.genre_id = g.genre_id WHERE g.genre_name = 'Fantasy';,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre_id INTEGER); CREATE TABLE Genres (genre_id INTEGER PRIMARY KEY, genre_name TEXT);",This query retrieves the titles of books categorized under 'Fantasy' by joining 'Books' and 'Genres' tables.
"Count the number of orders placed by each customer, displaying customer name and order count.","SELECT c.first_name, c.last_name, COUNT(o.order_id) AS order_count FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY order_count DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query counts the total number of orders for each customer by joining 'Customers' and 'Orders' and then grouping the results by customer.
List products along with the names of their primary suppliers.,"SELECT p.product_name, s.supplier_name FROM Products AS p INNER JOIN Product_Suppliers AS ps ON p.product_id = ps.product_id INNER JOIN Suppliers AS s ON ps.supplier_id = s.supplier_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, contact_email TEXT); CREATE TABLE Product_Suppliers (product_id INTEGER, supplier_id INTEGER, PRIMARY KEY (product_id, supplier_id), FOREIGN KEY (product_id) REFERENCES Products(product_id), FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id));","This query lists product names and their associated supplier names by joining 'Products', 'Product_Suppliers' (junction table), and 'Suppliers'."
Find orders that include products from the 'Electronics' category.,"SELECT DISTINCT o.order_id, o.order_date FROM Orders AS o INNER JOIN Order_Items AS oi ON o.order_id = oi.order_id INNER JOIN Products AS p ON oi.product_id = p.product_id INNER JOIN Categories AS c ON p.category_id = c.category_id WHERE c.category_name = 'Electronics';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);","This query identifies distinct orders that contain products belonging to the 'Electronics' category by joining four tables: 'Orders', 'Order_Items', 'Products', and 'Categories'."
Get the names of all employees and their manager's names.,"SELECT E.first_name AS EmployeeFirstName, E.last_name AS EmployeeLastName, M.first_name AS ManagerFirstName, M.last_name AS ManagerLastName FROM Employees AS E INNER JOIN Employees AS M ON E.manager_id = M.employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));",This query uses a self-join on the 'Employees' table to list each employee alongside the name of their direct manager.
List members who have borrowed books written by 'Stephen King'.,"SELECT DISTINCT m.first_name, m.last_name FROM Members AS m INNER JOIN Borrows AS br ON m.member_id = br.member_id INNER JOIN Books AS b ON br.book_id = b.book_id INNER JOIN Authors AS a ON b.author_id = a.author_id WHERE a.first_name = 'Stephen' AND a.last_name = 'King';","CREATE TABLE Members (member_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, registration_date TEXT); CREATE TABLE Borrows (borrow_id INTEGER PRIMARY KEY, book_id INTEGER, member_id INTEGER, borrow_date TEXT, return_date TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre_id INTEGER); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT);","This query finds the names of members who have borrowed books by 'Stephen King' by joining 'Members', 'Borrows', 'Books', and 'Authors' tables."
Show the average salary for each job title.,"SELECT j.job_title, AVG(e.salary) AS average_salary FROM Employees AS e INNER JOIN Jobs AS j ON e.job_id = j.job_id GROUP BY j.job_title;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT, min_salary REAL, max_salary REAL);",This query calculates the average salary for each job title by joining 'Employees' and 'Jobs' tables and grouping the results by job title.
Identify products that are currently out of stock (stock_quantity = 0) but have been ordered at least once.,SELECT DISTINCT p.product_name FROM Products AS p INNER JOIN Order_Items AS oi ON p.product_id = oi.product_id WHERE p.stock_quantity = 0;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query finds distinct names of products that are out of stock but have an entry in the 'Order_Items' table, indicating they were ordered at least once."
List all customers who registered in 2023 and have placed an order.,"SELECT DISTINCT c.first_name, c.last_name FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id WHERE STRFTIME('%Y', c.registration_date) = '2023';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query retrieves the names of distinct customers who registered in 2023 and have placed at least one order by joining 'Customers' and 'Orders' and filtering by registration year.
"For each order, show its ID, customer's email, and the count of distinct products in it.","SELECT o.order_id, c.email, COUNT(DISTINCT oi.product_id) AS distinct_product_count FROM Orders AS o INNER JOIN Customers AS c ON o.customer_id = c.customer_id INNER JOIN Order_Items AS oi ON o.order_id = oi.order_id GROUP BY o.order_id, c.email;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL);","This query displays each order's ID, the customer's email, and the count of unique products within that order, by joining 'Orders', 'Customers', and 'Order_Items' tables."
Find departments that have at least 5 employees.,"SELECT d.department_name, COUNT(ed.employee_id) AS employee_count FROM Departments AS d INNER JOIN Employee_Departments AS ed ON d.department_id = ed.department_id GROUP BY d.department_id HAVING COUNT(ed.employee_id) >= 5;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employee_Departments (employee_id INTEGER, department_id INTEGER, start_date TEXT, end_date TEXT, PRIMARY KEY (employee_id, department_id), FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query identifies departments with 5 or more employees by joining 'Departments' and 'Employee_Departments', grouping by department, and filtering with a HAVING clause."
List all books that were published before 2000 and have been borrowed at least once.,"SELECT DISTINCT b.title, b.publication_year FROM Books AS b INNER JOIN Borrows AS br ON b.book_id = br.book_id WHERE b.publication_year < 2000;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre_id INTEGER); CREATE TABLE Borrows (borrow_id INTEGER PRIMARY KEY, book_id INTEGER, member_id INTEGER, borrow_date TEXT, return_date TEXT, FOREIGN KEY (book_id) REFERENCES Books(book_id));","This query retrieves the titles and publication years of distinct books published before 2000 that have been borrowed, by joining 'Books' and 'Borrows'."
Find the highest-paid employee in each job title.,"SELECT j.job_title, e.first_name, e.last_name, e.salary FROM Employees AS e INNER JOIN Jobs AS j ON e.job_id = j.job_id WHERE e.salary = (SELECT MAX(e2.salary) FROM Employees AS e2 WHERE e2.job_id = e.job_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT, min_salary REAL, max_salary REAL);",This query identifies the highest-paid employee for each job title by joining 'Employees' and 'Jobs' and using a correlated subquery to filter for the maximum salary within each job category.
"Retrieve the total number of items sold for each product, showing product name and total quantity.","SELECT p.product_name, SUM(oi.quantity) AS total_sold_quantity FROM Products AS p INNER JOIN Order_Items AS oi ON p.product_id = oi.product_id GROUP BY p.product_name ORDER BY total_sold_quantity DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_time_of_order REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query calculates the total quantity of each product sold by joining 'Products' and 'Order_Items', grouping by product name, and summing the quantities."
"List customer details (name, email) for customers who placed orders after '2023-01-01'.","SELECT DISTINCT c.first_name, c.last_name, c.email FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id WHERE o.order_date > '2023-01-01';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query fetches the names and emails of customers who have placed at least one order after '2023-01-01' by joining 'Customers' and 'Orders' and filtering by order date.
"Find books that have a genre and an author, displaying title, author name, and genre name.","SELECT b.title, a.first_name, a.last_name, g.genre_name FROM Books AS b INNER JOIN Authors AS a ON b.author_id = a.author_id INNER JOIN Genres AS g ON b.genre_id = g.genre_id;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publication_year INTEGER, genre_id INTEGER); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Genres (genre_id INTEGER PRIMARY KEY, genre_name TEXT);","This query lists book titles along with their author's name and genre name by joining 'Books', 'Authors', and 'Genres' tables."
Get the names of products that are supplied by 'Global Supply Co.'.,SELECT p.product_name FROM Products AS p INNER JOIN Product_Suppliers AS ps ON p.product_id = ps.product_id INNER JOIN Suppliers AS s ON ps.supplier_id = s.supplier_id WHERE s.supplier_name = 'Global Supply Co.';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL, stock_quantity INTEGER); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT, contact_email TEXT); CREATE TABLE Product_Suppliers (product_id INTEGER, supplier_id INTEGER, PRIMARY KEY (product_id, supplier_id), FOREIGN KEY (product_id) REFERENCES Products(product_id), FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id));","This query finds products supplied by 'Global Supply Co.' by joining 'Products', 'Product_Suppliers', and 'Suppliers' tables and filtering by supplier name."
Count how many employees are managed by 'John Doe'.,SELECT COUNT(E.employee_id) AS employee_count FROM Employees AS E INNER JOIN Employees AS M ON E.manager_id = M.employee_id WHERE M.first_name = 'John' AND M.last_name = 'Doe';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, FOREIGN KEY (manager_id) REFERENCES Employees(employee_id));",This query counts the number of employees whose manager is 'John Doe' by performing a self-join on the 'Employees' table and filtering by the manager's name.
List all customers who have placed an order with a total amount greater than 100.,"SELECT DISTINCT c.first_name, c.last_name FROM Customers AS c INNER JOIN Orders AS o ON c.customer_id = o.customer_id WHERE o.total_amount > 100;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query returns the unique names of customers who have placed orders with a total amount exceeding 100, by joining 'Customers' and 'Orders' and applying a filter on the order amount."
"List all customers and their corresponding order IDs, if they have placed any orders. Include customers who haven't placed any orders.","SELECT c.name, o.order_id FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query retrieves the name of each customer and the ID of any orders they have placed. It uses a LEFT JOIN to ensure all customers are included in the result, even if they have no associated orders (in which case order_id will be NULL)."
Show all departments and the names of employees hired after 2020 in those departments. Include departments with no such employees.,"SELECT d.department_name, e.first_name, e.last_name FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id AND e.hire_date >= '2021-01-01';","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query lists all department names and, for each department, the first and last names of employees who were hired on or after January 1, 2021. Departments with no employees matching the hire date condition are still included, but their employee details will be NULL."
"Count the number of orders for each customer, including customers who have placed no orders.","SELECT c.name, COUNT(o.order_id) AS total_orders FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name ORDER BY total_orders DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query counts the total number of orders placed by each customer. A LEFT JOIN ensures that all customers are listed, and COUNT(o.order_id) correctly counts 0 orders for customers without any, as COUNT ignores NULLs."
Find all authors who have not published any books.,SELECT a.author_name FROM Authors a LEFT JOIN Books b ON a.author_id = b.author_id WHERE b.book_id IS NULL;,"CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, birth_date TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query identifies authors who do not have any books listed in the Books table. It uses a LEFT JOIN to combine authors with their books and then filters for rows where the book information (b.book_id) is NULL, indicating no match."
"List all departments, and for each department, show the first and last names of their employees and the names of projects they are assigned to, even if no employees or projects exist.","SELECT d.department_name, e.first_name, e.last_name, p.project_name FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id LEFT JOIN EmployeeProjects ep ON e.employee_id = ep.employee_id LEFT JOIN Projects p ON ep.project_id = p.project_id;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id)); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT);","This query retrieves department names, their employees' names, and the projects those employees are assigned to. It uses multiple LEFT JOINs to ensure that all departments are included, even if they have no employees, and all employees are included, even if they are not assigned to any projects."
"Show all authors and all books, linking them where appropriate. Include authors without books and books without authors.","SELECT a.author_name, b.title FROM Authors a LEFT JOIN Books b ON a.author_id = b.author_id UNION ALL SELECT a.author_name, b.title FROM Books b LEFT JOIN Authors a ON a.author_id = b.author_id WHERE a.author_id IS NULL;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, birth_date TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query emulates a FULL OUTER JOIN between Authors and Books. The first part (LEFT JOIN Authors to Books) gets all authors and their books, including authors with no books. The second part (LEFT JOIN Books to Authors, filtered by Authors.author_id IS NULL) gets books that have no matching author, and then combines these two sets using UNION ALL."
"Calculate the total amount spent by each customer on orders placed after January 1, 2023. Include all customers, even those who didn't place orders or placed orders only before 2023.","SELECT c.name, SUM(CASE WHEN o.order_date >= '2023-01-01' THEN o.total_amount ELSE 0 END) AS total_spent_after_2023 FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id, c.name ORDER BY total_spent_after_2023 DESC;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query calculates the total amount spent by each customer for orders placed on or after January 1, 2023. It uses a LEFT JOIN to ensure all customers are included. The CASE statement within SUM ensures that only relevant orders contribute to the total, and customers without such orders will correctly show 0."
"List all employees and their hire dates, along with the names of projects they started working on in the current year. Include employees not on any projects or not on projects started this year.","SELECT e.first_name, e.last_name, e.hire_date, p.project_name FROM Employees e LEFT JOIN EmployeeProjects ep ON e.employee_id = ep.employee_id LEFT JOIN Projects p ON ep.project_id = p.project_id AND strftime('%Y', p.start_date) = strftime('%Y', 'now');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, role TEXT, PRIMARY KEY (employee_id, project_id)); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT);","This query lists employees and the projects they are assigned to that started in the current calendar year. It uses LEFT JOINs to ensure all employees are shown, and a condition in the second LEFT JOIN's ON clause filters projects by their start year, allowing employees without such projects to still appear with NULL project details."
"List the top 5 most expensive products and their associated order items, if any. Include products that have never been ordered.","SELECT p.name AS product_name, p.price, oi.quantity FROM Products p LEFT JOIN OrderItems oi ON p.product_id = oi.product_id ORDER BY p.price DESC LIMIT 5;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, category TEXT, price REAL); CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query retrieves the names, prices, and associated order item quantities for the top 5 most expensive products. It uses a LEFT JOIN to include products even if they haven't been part of any order items, and orders the results by price in descending order, then limits to 5."
"List all employees and all projects, showing their associations. Include employees not on any projects and projects with no assigned employees.","SELECT e.first_name, e.last_name, p.project_name FROM Employees e LEFT JOIN EmployeeProjects ep ON e.employee_id = ep.employee_id LEFT JOIN Projects p ON ep.project_id = p.project_id UNION ALL SELECT e.first_name, e.last_name, p.project_name FROM Projects p LEFT JOIN EmployeeProjects ep ON p.project_id = ep.project_id LEFT JOIN Employees e ON ep.employee_id = e.employee_id WHERE e.employee_id IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, role TEXT, PRIMARY KEY (employee_id, project_id)); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT);","This query simulates a FULL OUTER JOIN to show all employees and all projects, along with their links. The first part gets all employees and their linked projects. The second part gets projects not linked to any employees (by checking for NULL employee_id after joining back to Employees) and then combines these two sets using UNION ALL."
"For each department, list the names of employees and their hire dates, but only include employees who earn more than the average salary of all employees. Include departments with no such employees.","SELECT d.department_name, e.first_name, e.last_name, e.hire_date FROM Departments d LEFT JOIN (SELECT employee_id, first_name, last_name, department_id, hire_date FROM Employees WHERE salary > (SELECT AVG(salary) FROM Employees)) AS e ON d.department_id = e.department_id;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query lists departments and their employees who earn above the overall average salary. It uses a LEFT JOIN with a subquery that pre-filters employees based on salary. This ensures all departments are displayed, and only high-earning employees (if any) are associated."
"List all departments and the count of employees in each department. Show only departments that have fewer than 3 employees, and also include departments with no employees.","SELECT d.department_name, COUNT(e.employee_id) AS num_employees FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name HAVING COUNT(e.employee_id) < 3 ORDER BY d.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query counts employees per department and filters for departments with fewer than 3 employees. The LEFT JOIN ensures all departments are considered, and COUNT(e.employee_id) correctly returns 0 for departments with no employees, thus including them in the result."
Display all products and all order items. Link them if an order item corresponds to a product. Show products not in any orders and order items not linked to any existing product.,"SELECT p.name AS product_name, oi.quantity, oi.price AS item_price FROM Products p LEFT JOIN OrderItems oi ON p.product_id = oi.product_id UNION ALL SELECT p.name AS product_name, oi.quantity, oi.price AS item_price FROM OrderItems oi LEFT JOIN Products p ON oi.product_id = p.product_id WHERE p.product_id IS NULL;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, category TEXT, price REAL); CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query simulates a FULL OUTER JOIN between Products and OrderItems. The first part retrieves all products and their associated order items. The second part identifies order items that don't have a matching product. Both sets are combined using UNION ALL to provide a complete view.
List all customers and their orders placed in the year 2023. Customers without orders in 2023 should still be listed.,"SELECT c.name, o.order_id, o.order_date FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id AND strftime('%Y', o.order_date) = '2023';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query lists all customers and their orders placed specifically in 2023. The condition `strftime('%Y', o.order_date) = '2023'` in the ON clause ensures that only 2023 orders are matched, while the LEFT JOIN ensures all customers are still included, even if they have no orders in 2023 (their order details will be NULL)."
"For each department, calculate the total salary of employees hired after 2022 and count how many employees were hired. Include all departments.","SELECT d.department_name, SUM(CASE WHEN e.hire_date >= '2023-01-01' THEN e.salary ELSE 0 END) AS total_salary_2023_onwards, COUNT(CASE WHEN e.hire_date >= '2023-01-01' THEN e.employee_id ELSE NULL END) AS employees_hired_2023_onwards FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query calculates the total salary and count of employees hired from 2023 onwards for each department. A LEFT JOIN ensures all departments are included, and conditional SUM and COUNT expressions only consider employees meeting the hire date criterion. Departments with no such employees will show 0 for both aggregates."
Find customers who have never placed an order after 2022.,SELECT c.name FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id AND o.order_date >= '2023-01-01' WHERE o.order_id IS NULL;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query identifies customers who have not placed any orders since the start of 2023. It uses a LEFT JOIN to link customers with their orders from 2023 onwards. If a customer has no such orders, the `o.order_id` will be NULL, which is then used in the WHERE clause to filter the results."
"For each product, show its name, price, and the earliest and latest date it was ordered. Include products that have never been ordered.","SELECT p.name, p.price, MIN(o.order_date) AS first_order_date, MAX(o.order_date) AS last_order_date FROM Products p LEFT JOIN OrderItems oi ON p.product_id = oi.product_id LEFT JOIN Orders o ON oi.order_id = o.order_id GROUP BY p.product_id, p.name, p.price ORDER BY p.name;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, category TEXT, price REAL); CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id)); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query retrieves the name, price, and the earliest and latest order dates for each product. It uses multiple LEFT JOINs to ensure all products are listed, even if they have never been ordered (in which case the date fields will be NULL)."
"Show all departments and all employees. Link employees to their departments, and list departments with no employees and employees with no department assigned (if any).","SELECT d.department_name, e.first_name, e.last_name FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id UNION ALL SELECT d.department_name, e.first_name, e.last_name FROM Employees e LEFT JOIN Departments d ON e.department_id = d.department_id WHERE d.department_id IS NULL;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));",This query simulates a FULL OUTER JOIN between Departments and Employees. The first part gets all departments and their employees. The second part gets employees who are not assigned to any department (where department_id is NULL or invalid). Both sets are combined with UNION ALL.
List all product categories and the number of products belonging to each. Include categories that currently have no products.,"SELECT cat.category_name, COUNT(p.product_id) AS product_count FROM Categories cat LEFT JOIN Products p ON cat.category_id = p.category_id GROUP BY cat.category_id, cat.category_name ORDER BY cat.category_name;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, category_id INTEGER, price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id));","This query counts the number of products for each product category. It uses a LEFT JOIN from the Categories table to the Products table to ensure that all categories are included in the result, even those that currently have no associated products (which will show a count of 0)."
Find all products that have never been included in any order.,SELECT p.name FROM Products p LEFT JOIN OrderItems oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, category TEXT, price REAL); CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));","This query identifies products that have not appeared in any order items. It performs a LEFT JOIN from Products to OrderItems, then filters for rows where the OrderItems product_id is NULL, indicating no match."
Find all customers who have not placed any orders.,"SELECT c.name, c.email FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","This query identifies customers who have not placed any orders. It uses a LEFT JOIN to combine customers with their orders and then filters for rows where the order information (o.order_id) is NULL, indicating no associated orders."
List all books and all publishers. Link them where a book is published by a publisher. Include books with no specified publisher and publishers that haven't published any existing books.,"SELECT b.title, p.publisher_name FROM Books b LEFT JOIN Publishers p ON b.publisher_id = p.publisher_id UNION ALL SELECT b.title, p.publisher_name FROM Publishers p LEFT JOIN Books b ON p.publisher_id = b.publisher_id WHERE b.book_id IS NULL;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id)); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, city TEXT);",This query simulates a FULL OUTER JOIN between Books and Publishers. The first part retrieves all books and their associated publishers. The second part identifies publishers that are not linked to any books. Both sets are combined using UNION ALL to provide a complete view.
Find products from the 'Electronics' category that have never been included in any order.,SELECT p.name FROM Products p LEFT JOIN OrderItems oi ON p.product_id = oi.product_id WHERE p.category = 'Electronics' AND oi.product_id IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, category TEXT, price REAL); CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price REAL, FOREIGN KEY (product_id) REFERENCES Products(product_id));",This query identifies 'Electronics' products that have never been part of an order item. It uses a LEFT JOIN to combine products with order items and filters for 'Electronics' products where no corresponding order item exists (indicated by `oi.product_id IS NULL`).
"For each department, list its name and the number of distinct projects its employees are working on. Include departments with no employees or no projects.","SELECT d.department_name, COUNT(DISTINCT ep.project_id) AS distinct_projects_count FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id LEFT JOIN EmployeeProjects ep ON e.employee_id = ep.employee_id GROUP BY d.department_id, d.department_name ORDER BY d.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id)); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id)); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT);","This query calculates the number of distinct projects associated with employees in each department. It uses multiple LEFT JOINs to ensure all departments are included, even if they have no employees or their employees are not assigned to any projects. `COUNT(DISTINCT ep.project_id)` correctly handles cases where no projects are assigned (returning 0)."
"For each author, find the publication year of their latest book. Include authors who have not published any books.","SELECT a.author_name, MAX(b.publication_year) AS latest_publication_year FROM Authors a LEFT JOIN Books b ON a.author_id = b.author_id GROUP BY a.author_id, a.author_name ORDER BY a.author_name;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, birth_date TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query finds the most recent publication year for each author's books. A LEFT JOIN ensures all authors are included, and MAX(b.publication_year) will return NULL for authors with no books, correctly representing the absence of a latest publication year."
"Show all customers from 'New York' and their orders placed after 2022, only if the order total was greater than 100. Include 'New York' customers who fit the order criteria or have no orders that fit.","SELECT c.name, o.order_id, o.total_amount FROM Customers c LEFT JOIN Orders o ON c.customer_id = o.customer_id WHERE c.city = 'New York' AND (o.order_id IS NULL OR (o.order_date >= '2023-01-01' AND o.total_amount > 100));","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, city TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",This query selects customers from 'New York' and their orders that meet specific criteria (placed after 2022 with a total amount over 100). The LEFT JOIN ensures all 'New York' customers are included. The WHERE clause filters customers by city and then checks if the order matches the date/amount criteria OR if there's no matching order (o.order_id IS NULL) to include customers without such orders.
"For each employee, count the number of projects they are assigned to. Include employees who are not assigned to any project.","SELECT e.first_name, e.last_name, COUNT(ep.project_id) AS num_projects_assigned FROM Employees e LEFT JOIN EmployeeProjects ep ON e.employee_id = ep.employee_id GROUP BY e.employee_id, e.first_name, e.last_name ORDER BY e.last_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id)); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT);","This query counts the number of projects each employee is assigned to. It uses a LEFT JOIN to ensure all employees are listed, even those with no project assignments, in which case their project count will be 0."
"For each author, list their name, the total number of books they've published, and the average publication year of their books, but only for books published after 2000. Include authors who have no books published after 2000.","SELECT a.author_name, COUNT(CASE WHEN b.publication_year > 2000 THEN b.book_id ELSE NULL END) AS num_books_after_2000, AVG(CASE WHEN b.publication_year > 2000 THEN b.publication_year ELSE NULL END) AS avg_pub_year_after_2000 FROM Authors a LEFT JOIN Books b ON a.author_id = b.author_id GROUP BY a.author_id, a.author_name ORDER BY a.author_name;","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, birth_date TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, FOREIGN KEY (author_id) REFERENCES Authors(author_id));","This query calculates the number of books published after 2000 and their average publication year for each author. The LEFT JOIN ensures all authors are included. Conditional aggregates (COUNT and AVG with CASE) ensure only books published after 2000 contribute to the counts and averages, showing 0 or NULL for authors without such books."
"List all customers and all publishers, trying to match them by name if a customer is also a publisher. Include customers with no publisher match and publishers with no customer match.","SELECT c.name AS customer_name, p.publisher_name FROM Customers c LEFT JOIN Publishers p ON c.name = p.publisher_name UNION ALL SELECT c.name AS customer_name, p.publisher_name FROM Publishers p LEFT JOIN Customers c ON p.publisher_name = c.name WHERE c.customer_id IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, city TEXT); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, city TEXT);",This query performs a conceptual FULL OUTER JOIN between Customers and Publishers by attempting to match their names. The first part gets all customers and any matching publishers. The second part gets publishers that do not match any customer names. Both results are combined to show all customers and all publishers.
"For each department, list its name, the average salary of its employees, and the highest salary among employees hired in the last 5 years. Include departments with no employees or no employees hired in the last 5 years.","SELECT d.department_name, AVG(e.salary) AS avg_department_salary, MAX(CASE WHEN e.hire_date >= strftime('%Y-%m-%d', 'now', '-5 years') THEN e.salary ELSE NULL END) AS max_salary_last_5_years FROM Departments d LEFT JOIN Employees e ON d.department_id = e.department_id GROUP BY d.department_id, d.department_name ORDER BY d.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL, FOREIGN KEY (department_id) REFERENCES Departments(department_id));","This query calculates the average salary for each department and the highest salary among employees hired in the last 5 years within that department. It uses a LEFT JOIN to include all departments. Conditional aggregation (MAX with CASE) handles the 5-year hiring window, showing NULL if no employees meet the criteria, while AVG provides the overall department average."
"List all products and their categories, including products with no category assigned (NULL category_id).","SELECT p.name AS product_name, c.category_name FROM Products p LEFT JOIN Categories c ON p.category_id = c.category_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, name TEXT, category_id INTEGER, price REAL, FOREIGN KEY (category_id) REFERENCES Categories(category_id)); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);","This query lists all products along with their category names. It uses a LEFT JOIN to ensure that every product is included, even if its 'category_id' is NULL or doesn't match any existing category, in which case the category_name will be NULL."
"For each employee, display their name and the total budget of all projects they are assigned to, including employees not on any projects.","SELECT e.first_name, e.last_name, SUM(p.budget) AS total_project_budget FROM Employees e LEFT JOIN EmployeeProjects ep ON e.employee_id = ep.employee_id LEFT JOIN Projects p ON ep.project_id = p.project_id GROUP BY e.employee_id, e.first_name, e.last_name ORDER BY e.last_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, department_id INTEGER, hire_date TEXT, salary REAL); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL); CREATE TABLE EmployeeProjects (employee_id INTEGER, project_id INTEGER, role TEXT, PRIMARY KEY (employee_id, project_id), FOREIGN KEY (employee_id) REFERENCES Employees(employee_id), FOREIGN KEY (project_id) REFERENCES Projects(project_id));","This query calculates the sum of budgets for all projects an employee is assigned to. It uses LEFT JOINs to ensure all employees are included, and the SUM aggregate correctly handles employees with no projects, resulting in a NULL or 0 budget for them."
Find the total number of orders placed by each customer.,"SELECT c.CustomerName, COUNT(o.OrderID) AS NumberOfOrders FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerName;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, Country TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query counts the total number of orders for each customer by joining the Customers and Orders tables and grouping the results by customer name.
List customers who have placed more than 5 orders.,"SELECT c.CustomerName, COUNT(o.OrderID) AS NumberOfOrders FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerName HAVING COUNT(o.OrderID) > 5;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, Country TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query identifies customers who have placed more than 5 orders by counting orders per customer and filtering using the HAVING clause.
Get the average price of products in each category.,"SELECT cat.CategoryName, AVG(p.Price) AS AveragePrice FROM Categories cat JOIN Products p ON cat.CategoryID = p.CategoryID GROUP BY cat.CategoryName;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL, StockQuantity INTEGER); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);",This query calculates the average price for products within each category by joining Products and Categories tables and grouping by category name.
Show categories where the average product price is greater than 50.,"SELECT cat.CategoryName, AVG(p.Price) AS AveragePrice FROM Categories cat JOIN Products p ON cat.CategoryID = p.CategoryID GROUP BY cat.CategoryName HAVING AVG(p.Price) > 50;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL, StockQuantity INTEGER); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);","This query lists categories where the average price of products exceeds 50, using AVG in both SELECT and HAVING clauses."
"For each department, find the total salary expense.","SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalaryExpense FROM Departments d JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);",This query sums the salaries of all employees for each department by joining Employees and Departments tables and grouping by department name.
Identify departments where the total salary expenditure is over 100000.,"SELECT d.DepartmentName, SUM(e.Salary) AS TotalSalaryExpense FROM Departments d JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING SUM(e.Salary) > 100000;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query finds departments whose total salary expense surpasses 100,000, using SUM in both SELECT and HAVING clauses."
Calculate the total revenue generated in each region.,"SELECT r.RegionName, SUM(s.Revenue) AS TotalRevenue FROM Regions r JOIN Sales s ON r.RegionID = s.RegionID GROUP BY r.RegionName;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, RegionID INTEGER, SaleDate TEXT, QuantitySold INTEGER, Revenue REAL); CREATE TABLE Regions (RegionID INTEGER PRIMARY KEY, RegionName TEXT);",This query calculates the total sales revenue for each region by joining Sales and Regions tables and grouping by region name.
Find regions with a total revenue less than 50000.,"SELECT r.RegionName, SUM(s.Revenue) AS TotalRevenue FROM Regions r JOIN Sales s ON r.RegionID = s.RegionID GROUP BY r.RegionName HAVING SUM(s.Revenue) < 50000;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, RegionID INTEGER, SaleDate TEXT, QuantitySold INTEGER, Revenue REAL); CREATE TABLE Regions (RegionID INTEGER PRIMARY KEY, RegionName TEXT);","This query lists regions where the accumulated sales revenue is less than 50,000, filtering with the HAVING clause."
Count the number of books written by each author.,"SELECT a.AuthorName, COUNT(b.BookID) AS NumberOfBooks FROM Authors a JOIN Books b ON a.AuthorID = b.AuthorID GROUP BY a.AuthorName;","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, PublicationYear INTEGER, Genre TEXT); CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT, Country TEXT);",This query counts the number of books each author has written by joining Authors and Books tables and grouping by author name.
Display authors who have published more than 3 books.,"SELECT a.AuthorName, COUNT(b.BookID) AS NumberOfBooks FROM Authors a JOIN Books b ON a.AuthorID = b.AuthorID GROUP BY a.AuthorName HAVING COUNT(b.BookID) > 3;","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, PublicationYear INTEGER, Genre TEXT); CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT, Country TEXT);","This query retrieves authors who have published more than 3 books, using COUNT in the HAVING clause to filter groups."
Determine the average rating for movies directed by each director.,"SELECT d.DirectorName, AVG(m.Rating) AS AverageRating FROM Directors d JOIN Movies m ON d.DirectorID = m.DirectorID GROUP BY d.DirectorName;","CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, DirectorID INTEGER, ReleaseYear INTEGER, Rating REAL); CREATE TABLE Directors (DirectorID INTEGER PRIMARY KEY, DirectorName TEXT);",This query calculates the average rating for movies associated with each director by joining Movies and Directors tables.
List directors whose average movie rating is at least 7.5.,"SELECT d.DirectorName, AVG(m.Rating) AS AverageRating FROM Directors d JOIN Movies m ON d.DirectorID = m.DirectorID GROUP BY d.DirectorName HAVING AVG(m.Rating) >= 7.5;","CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, DirectorID INTEGER, ReleaseYear INTEGER, Rating REAL); CREATE TABLE Directors (DirectorID INTEGER PRIMARY KEY, DirectorName TEXT);","This query returns directors whose movies have an average rating of 7.5 or higher, filtering groups based on the average rating."
Get the total hours worked on each project.,"SELECT p.ProjectName, SUM(ep.HoursWorked) AS TotalHoursWorked FROM Projects p JOIN EmployeeProjects ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName;","CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, StartDate TEXT, EndDate TEXT, Budget REAL); CREATE TABLE EmployeeProjects (EmployeeID INTEGER, ProjectID INTEGER, HoursWorked REAL);",This query sums the hours worked for each project by joining Projects and EmployeeProjects tables and grouping by project name.
Show projects where the total hours worked exceed 500.,"SELECT p.ProjectName, SUM(ep.HoursWorked) AS TotalHoursWorked FROM Projects p JOIN EmployeeProjects ep ON p.ProjectID = ep.ProjectID GROUP BY p.ProjectName HAVING SUM(ep.HoursWorked) > 500;","CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, StartDate TEXT, EndDate TEXT, Budget REAL); CREATE TABLE EmployeeProjects (EmployeeID INTEGER, ProjectID INTEGER, HoursWorked REAL);","This query identifies projects where the cumulative hours worked is more than 500, using HAVING with SUM."
"For each course, find the number of enrolled students.","SELECT c.CourseName, COUNT(e.StudentID) AS NumberOfStudents FROM Courses c JOIN Enrollments e ON c.CourseID = e.CourseID GROUP BY c.CourseName;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT, Major TEXT, EnrollmentDate TEXT); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Grade REAL);",This query counts the number of students enrolled in each course by joining Courses and Enrollments tables and grouping by course name.
List courses that have fewer than 10 students enrolled.,"SELECT c.CourseName, COUNT(e.StudentID) AS NumberOfStudents FROM Courses c JOIN Enrollments e ON c.CourseID = e.CourseID GROUP BY c.CourseName HAVING COUNT(e.StudentID) < 10;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT, Major TEXT, EnrollmentDate TEXT); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Grade REAL);","This query retrieves courses with fewer than 10 enrolled students, filtering groups based on the student count."
Find the maximum total amount spent by any customer from each city.,"SELECT c.City, MAX(sub.TotalCustomerSpend) AS MaxSpendInCity FROM Customers c JOIN (SELECT CustomerID, SUM(TotalAmount) AS TotalCustomerSpend FROM Orders GROUP BY CustomerID) AS sub ON c.CustomerID = sub.CustomerID GROUP BY c.City;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, Country TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query first calculates the total spend per customer, then finds the maximum total spend among customers in each city using a subquery and grouping by city."
Show categories that have at least one product with a stock quantity greater than 100.,"SELECT C.CategoryName, COUNT(P.ProductID) AS ProductsWithHighStock FROM Categories C JOIN Products P ON C.CategoryID = P.CategoryID WHERE P.StockQuantity > 100 GROUP BY C.CategoryName HAVING COUNT(P.ProductID) > 0;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL, StockQuantity INTEGER); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);","This query lists categories that contain at least one product with a stock quantity over 100, filtering first by WHERE and then ensuring at least one such product per group with HAVING."
Retrieve the names of employees who are assigned to projects with a total budget exceeding 500000.,"SELECT E.EmployeeName FROM Employees E JOIN EmployeeProjects EP ON E.EmployeeID = EP.EmployeeID JOIN Projects P ON EP.ProjectID = P.ProjectID GROUP BY E.EmployeeID, E.EmployeeName HAVING SUM(P.Budget) > 500000;","CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT, StartDate TEXT, EndDate TEXT, Budget REAL); CREATE TABLE EmployeeProjects (EmployeeID INTEGER, ProjectID INTEGER, HoursWorked REAL); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT);","This query finds employees who are part of projects whose combined budget exceeds 500,000, by joining three tables and using SUM in HAVING."
"Find the country names and the number of customers in each country, but only for countries with more than 2 customers.","SELECT Country, COUNT(CustomerID) AS NumberOfCustomers FROM Customers GROUP BY Country HAVING COUNT(CustomerID) > 2;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, Country TEXT);",This query counts customers per country and filters to show only those countries having more than 2 customers.
List departments where the average employee salary is between 50000 and 75000.,"SELECT d.DepartmentName, AVG(e.Salary) AS AverageSalary FROM Departments d JOIN Employees e ON d.DepartmentID = e.DepartmentID GROUP BY d.DepartmentName HAVING AVG(e.Salary) BETWEEN 50000 AND 75000;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query identifies departments where the average employee salary falls within a specified range, using BETWEEN in the HAVING clause."
Get product categories that have at least 5 products and total stock quantity more than 1000.,"SELECT C.CategoryName, COUNT(P.ProductID) AS ProductCount, SUM(P.StockQuantity) AS TotalStock FROM Categories C JOIN Products P ON C.CategoryID = P.CategoryID GROUP BY C.CategoryName HAVING COUNT(P.ProductID) >= 5 AND SUM(P.StockQuantity) > 1000;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL, StockQuantity INTEGER); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);","This query lists categories that meet two conditions: having at least 5 products AND a total stock quantity exceeding 1000, combining COUNT and SUM in HAVING."
Show regions where sales occurred in both '2022' and '2023'.,"SELECT r.RegionName FROM Regions r JOIN Sales s ON r.RegionID = s.RegionID WHERE STRFTIME('%Y', s.SaleDate) IN ('2022', '2023') GROUP BY r.RegionName HAVING COUNT(DISTINCT STRFTIME('%Y', s.SaleDate)) = 2;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, RegionID INTEGER, SaleDate TEXT, QuantitySold INTEGER, Revenue REAL); CREATE TABLE Regions (RegionID INTEGER PRIMARY KEY, RegionName TEXT);",This query finds regions that had sales in both 2022 and 2023 by grouping by region and checking for distinct years in the HAVING clause. STRFTIME is used for SQLite date compatibility.
"Find the average grade for each course, but only for courses where the lowest grade is above 60.","SELECT C.CourseName, AVG(E.Grade) AS AverageGrade FROM Courses C JOIN Enrollments E ON C.CourseID = E.CourseID GROUP BY C.CourseName HAVING MIN(E.Grade) > 60;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT, Major TEXT, EnrollmentDate TEXT); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Grade REAL);","This query calculates the average grade for each course, but only includes courses where the minimum grade among enrolled students is greater than 60, using MIN in HAVING."
Display students who are enrolled in courses from more than one major.,"SELECT S.StudentName FROM Students S JOIN Enrollments E ON S.StudentID = E.StudentID JOIN Courses C ON E.CourseID = C.CourseID GROUP BY S.StudentName, S.StudentID HAVING COUNT(DISTINCT S.Major) > 1;","CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT, Major TEXT, EnrollmentDate TEXT); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT, Credits INTEGER); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, Grade REAL);","This query identifies students who are enrolled in courses associated with multiple majors, by counting distinct majors for each student in the HAVING clause."
Get directors who have at least one movie released before 2000 and at least one movie released after 2010.,SELECT D.DirectorName FROM Directors D JOIN Movies M ON D.DirectorID = M.DirectorID GROUP BY D.DirectorName HAVING SUM(CASE WHEN M.ReleaseYear < 2000 THEN 1 ELSE 0 END) > 0 AND SUM(CASE WHEN M.ReleaseYear > 2010 THEN 1 ELSE 0 END) > 0;,"CREATE TABLE Movies (MovieID INTEGER PRIMARY KEY, Title TEXT, DirectorID INTEGER, ReleaseYear INTEGER, Rating REAL); CREATE TABLE Directors (DirectorID INTEGER PRIMARY KEY, DirectorName TEXT);","This query finds directors who have directed movies released both before 2000 and after 2010, using conditional SUMs in the HAVING clause."
"List products whose average sale quantity per transaction is greater than 5, considering only sales made in 'North' region.","SELECT P.ProductName, AVG(S.QuantitySold) AS AverageQuantitySold FROM Products P JOIN Sales S ON P.ProductID = S.ProductID JOIN Regions R ON S.RegionID = R.RegionID WHERE R.RegionName = 'North' GROUP BY P.ProductName HAVING AVG(S.QuantitySold) > 5;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL, StockQuantity INTEGER); CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, RegionID INTEGER, SaleDate TEXT, QuantitySold INTEGER, Revenue REAL); CREATE TABLE Regions (RegionID INTEGER PRIMARY KEY, RegionName TEXT);",This query calculates the average quantity sold for products specifically in the 'North' region and then filters to show only products where this average is greater than 5.
Find customers whose total order value is higher than the average total order value across all customers.,"SELECT c.CustomerName, SUM(o.TotalAmount) AS TotalOrderValue FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID GROUP BY c.CustomerName HAVING SUM(o.TotalAmount) > (SELECT AVG(TotalAmount) FROM Orders);","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT, Country TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query identifies customers whose total order value exceeds the overall average total order value of all orders, using a subquery in the HAVING clause."
Show departments that have at least 2 employees hired after '2020-01-01'.,"SELECT D.DepartmentName, COUNT(E.EmployeeID) AS RecentHiresCount FROM Departments D JOIN Employees E ON D.DepartmentID = E.DepartmentID WHERE E.HireDate > '2020-01-01' GROUP BY D.DepartmentName HAVING COUNT(E.EmployeeID) >= 2;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, Salary REAL, HireDate TEXT); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, Location TEXT);","This query lists departments that have hired at least two employees after January 1, 2020, using a WHERE clause for initial filtering and HAVING for counting recent hires per group."
Retrieve authors who have written books in more than one genre.,"SELECT A.AuthorName, COUNT(DISTINCT B.Genre) AS DistinctGenres FROM Authors A JOIN Books B ON A.AuthorID = B.AuthorID GROUP BY A.AuthorName HAVING COUNT(DISTINCT B.Genre) > 1;","CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, PublicationYear INTEGER, Genre TEXT); CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT, Country TEXT);","This query identifies authors who have written books spanning multiple genres, by counting distinct genres for each author in the HAVING clause."
List sales regions where the minimum quantity sold in any transaction is greater than 10.,"SELECT R.RegionName, MIN(S.QuantitySold) AS MinimumQuantitySold FROM Regions R JOIN Sales S ON R.RegionID = S.RegionID GROUP BY R.RegionName HAVING MIN(S.QuantitySold) > 10;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, RegionID INTEGER, SaleDate TEXT, QuantitySold INTEGER, Revenue REAL); CREATE TABLE Regions (RegionID INTEGER PRIMARY KEY, RegionName TEXT);","This query finds regions where the smallest quantity sold in any single transaction within that region is greater than 10, using MIN in HAVING."
"List all employees along with their salaries, and a row number based on their salary in ascending order within each department. Sort the final output by department ID and then by row number.","SELECT employee_id, employee_name, department_id, salary, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary ASC) AS salary_rank_in_dept FROM Employees ORDER BY department_id, salary_rank_in_dept;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);","This query assigns a unique rank to each employee within their respective department based on their salary, starting from 1 for the lowest salary. It uses `ROW_NUMBER()` partitioned by `department_id` and ordered by `salary`."
"Find the top 3 highest-paid employees in each department. If there are ties in salary, they should receive the same rank, and the next rank should be skipped.","SELECT employee_id, employee_name, department_id, salary FROM (SELECT employee_id, employee_name, department_id, salary, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk FROM Employees) WHERE rnk <= 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);","This query first ranks employees by salary in descending order within each department using `RANK()`. Then, it selects only those employees whose rank is 3 or less, effectively getting the top 3 highest-paid employees per department, handling ties by assigning them the same rank and skipping subsequent ranks."
"Retrieve all products, their prices, and their price rank within their category. If prices are identical, they should share the same rank, and no ranks should be skipped.","SELECT product_id, product_name, category, price, DENSE_RANK() OVER (PARTITION BY category ORDER BY price DESC) AS price_dense_rank FROM Products ORDER BY category, price_dense_rank;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT NOT NULL, price REAL NOT NULL, stock_quantity INTEGER);","This query assigns a dense rank to products based on their price within each category. `DENSE_RANK()` ensures that if multiple products have the same price, they get the same rank, and the next rank assigned is consecutive without gaps."
"For each employee, show their salary and the salary of the employee who was hired immediately before them in the same department. Order by hire date.","SELECT employee_id, employee_name, department_id, salary, hire_date, LAG(salary, 1, 0) OVER (PARTITION BY department_id ORDER BY hire_date ASC) AS previous_employee_salary FROM Employees ORDER BY department_id, hire_date;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);","This query uses `LAG()` to fetch the salary of the previous row (based on `hire_date` within the same `department_id`). If there is no previous row (e.g., for the first employee hired in a department), it defaults to 0."
"Display each employee's name, salary, and the salary of the employee hired immediately after them in the same department.","SELECT employee_id, employee_name, department_id, salary, hire_date, LEAD(salary, 1) OVER (PARTITION BY department_id ORDER BY hire_date ASC) AS next_employee_salary FROM Employees ORDER BY department_id, hire_date;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);","This query uses `LEAD()` to retrieve the salary of the employee hired after the current one, within the same department, ordered by their hire date. If no next employee exists, the value will be NULL."
"Calculate the running total of sales for each product, ordered by sale date.","SELECT sale_id, product_id, sale_date, quantity, SUM(quantity) OVER (PARTITION BY product_id ORDER BY sale_date) AS running_total_quantity FROM Sales ORDER BY product_id, sale_date;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, sale_date TEXT NOT NULL, quantity INTEGER NOT NULL, total_amount REAL NOT NULL);","This query calculates a running total of the `quantity` for each `product_id`, ordered by `sale_date`. The `SUM() OVER()` window function computes the cumulative sum up to the current row within each product's sales history."
"For each student, calculate their score and the average score of all students in their course.","SELECT student_id, student_name, course_id, score, AVG(score) OVER (PARTITION BY course_id) AS average_course_score FROM Students ORDER BY course_id, student_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, course_id INTEGER NOT NULL, score INTEGER NOT NULL, enrollment_date TEXT NOT NULL);",This query computes the average score for each course using `AVG() OVER (PARTITION BY course_id)`. This average is then displayed alongside each student's individual score within that course.
Assign students into 4 performance groups (quartiles) based on their scores within each course.,"SELECT student_id, student_name, course_id, score, NTILE(4) OVER (PARTITION BY course_id ORDER BY score DESC) AS score_quartile FROM Students ORDER BY course_id, score_quartile, score DESC;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, course_id INTEGER NOT NULL, score INTEGER NOT NULL, enrollment_date TEXT NOT NULL);","This query uses `NTILE(4)` to divide students within each course into 4 approximately equal groups based on their scores, with the highest scores being in group 1."
"For each employee, get their salary and the salary of the highest-paid employee in their department.","SELECT employee_id, employee_name, department_id, salary, MAX(salary) OVER (PARTITION BY department_id) AS max_dept_salary FROM Employees ORDER BY department_id, salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);",This query uses `MAX() OVER (PARTITION BY department_id)` to find the maximum salary within each employee's department and displays it alongside their individual salary.
Find the earliest and latest hire dates for employees within each department.,"SELECT employee_id, employee_name, department_id, hire_date, MIN(hire_date) OVER (PARTITION BY department_id) AS first_hire_date_in_dept, MAX(hire_date) OVER (PARTITION BY department_id) AS last_hire_date_in_dept FROM Employees ORDER BY department_id, hire_date;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);","This query uses `MIN()` and `MAX()` as window functions, partitioned by `department_id`, to get the earliest and latest hire dates for all employees within their respective departments."
"List all sales with the previous day's total sales amount, if available, for the same product.","SELECT sale_id, product_id, sale_date, total_amount, LAG(total_amount, 1, 0) OVER (PARTITION BY product_id ORDER BY sale_date) AS previous_day_sale_amount FROM Sales ORDER BY product_id, sale_date;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, sale_date TEXT NOT NULL, quantity INTEGER NOT NULL, total_amount REAL NOT NULL);","This query fetches the `total_amount` from the previous sale date for the same `product_id` using `LAG()`. If no previous sale exists, it defaults to 0."
"For each order, show its total price and the total price of the first order placed by the same customer.","SELECT order_id, customer_id, order_date, total_price, FIRST_VALUE(total_price) OVER (PARTITION BY customer_id ORDER BY order_date) AS first_order_total FROM Orders ORDER BY customer_id, order_date;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_price REAL NOT NULL, status TEXT);","This query uses `FIRST_VALUE()` to retrieve the `total_price` of the first order placed by each customer, based on the `order_date`, and displays it alongside each individual order."
"For each order, show its total price and the total price of the last order placed by the same customer.","SELECT order_id, customer_id, order_date, total_price, LAST_VALUE(total_price) OVER (PARTITION BY customer_id ORDER BY order_date) AS last_order_total FROM Orders ORDER BY customer_id, order_date;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER NOT NULL, order_date TEXT NOT NULL, total_price REAL NOT NULL, status TEXT);","This query uses `LAST_VALUE()` to retrieve the `total_price` of the last order placed by each customer, based on the `order_date`, and displays it alongside each individual order. Note: The default frame for `LAST_VALUE` might be `RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW`, which means it would only show the last value up to the current row. For true last value, the frame might need to be `ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING` in some SQL dialects, but SQLite often simplifies this behavior with a simple `OVER (PARTITION BY ... ORDER BY ...)`."
Get the third highest score for each course.,"SELECT student_id, student_name, course_id, score FROM (SELECT student_id, student_name, course_id, score, DENSE_RANK() OVER (PARTITION BY course_id ORDER BY score DESC) AS rnk FROM Students) WHERE rnk = 3;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, course_id INTEGER NOT NULL, score INTEGER NOT NULL, enrollment_date TEXT NOT NULL);","This query uses `DENSE_RANK()` to rank students by score within each course. It then filters for students who achieved the 3rd highest score, ensuring ties are handled correctly and multiple students can share the 3rd rank."
"Identify products whose price is exactly the same as the product sold immediately after them within the same category, ordered by price then product name.","SELECT product_id, product_name, category, price FROM (SELECT product_id, product_name, category, price, LEAD(price, 1) OVER (PARTITION BY category ORDER BY price ASC, product_name ASC) AS next_product_price FROM Products) WHERE price = next_product_price;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT NOT NULL, price REAL NOT NULL, stock_quantity INTEGER);",This query finds products that have the same price as the next product in their category when ordered by price and then product name. It uses `LEAD()` to get the next product's price and compares it.
"For each employee, calculate their salary difference from the department's average salary.","SELECT employee_id, employee_name, department_id, salary, salary - AVG(salary) OVER (PARTITION BY department_id) AS salary_deviation_from_dept_avg FROM Employees ORDER BY department_id, salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);",This query calculates the average salary for each department using `AVG() OVER (PARTITION BY department_id)` and then subtracts this average from each employee's individual salary to show their deviation.
"Get the 5th highest temperature reading for each weather station, ordered by date.","SELECT reading_id, station_id, reading_date, temperature FROM (SELECT reading_id, station_id, reading_date, temperature, RANK() OVER (PARTITION BY station_id ORDER BY temperature DESC, reading_date ASC) AS temp_rank FROM WeatherReadings) WHERE temp_rank = 5;","CREATE TABLE WeatherReadings (reading_id INTEGER PRIMARY KEY, station_id INTEGER NOT NULL, reading_date TEXT NOT NULL, temperature REAL NOT NULL, humidity REAL);","This query uses `RANK()` to assign a rank to temperature readings within each weather station, ordered by temperature in descending order. It then filters for readings that have a rank of 5."
"For each employee, show their salary and the salary of the first employee hired in their department.","SELECT employee_id, employee_name, department_id, salary, FIRST_VALUE(salary) OVER (PARTITION BY department_id ORDER BY hire_date ASC) AS salary_of_first_hire FROM Employees ORDER BY department_id, hire_date;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);",This query uses `FIRST_VALUE()` to get the salary of the employee with the earliest `hire_date` within each department and displays it for all employees in that department.
"Calculate the running average of prices for products within each category, ordered by product ID.","SELECT product_id, product_name, category, price, AVG(price) OVER (PARTITION BY category ORDER BY product_id) AS running_avg_price FROM Products ORDER BY category, product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT NOT NULL, price REAL NOT NULL, stock_quantity INTEGER);","This query computes a running average of `price` for products within each `category`, ordered by `product_id`. The `AVG() OVER()` window function calculates the average price up to the current row within each product category."
"For each sale, find the difference in total amount from the previous sale made by the same employee.","SELECT S.sale_id, S.employee_id, E.employee_name, S.sale_date, S.total_amount, S.total_amount - LAG(S.total_amount, 1, S.total_amount) OVER (PARTITION BY S.employee_id ORDER BY S.sale_date) AS amount_diff_from_prev_sale FROM Sales AS S JOIN Employees AS E ON S.employee_id = E.employee_id ORDER BY S.employee_id, S.sale_date;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, employee_id INTEGER NOT NULL, sale_date TEXT NOT NULL, quantity INTEGER NOT NULL, total_amount REAL NOT NULL); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);","This query calculates the difference between the current sale's total amount and the previous sale's total amount made by the same employee. `LAG()` fetches the previous amount, defaulting to the current amount if no previous sale exists for the first sale."
Identify employees whose salary is lower than the second highest salary in their department.,"SELECT employee_id, employee_name, department_id, salary FROM (SELECT employee_id, employee_name, department_id, salary, DENSE_RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS dr FROM Employees) WHERE salary < (SELECT salary FROM (SELECT department_id, salary, DENSE_RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) as dr FROM Employees) WHERE dr = 2 AND department_id = Employees.department_id GROUP BY department_id) OR (SELECT count(*) FROM (SELECT department_id, salary, DENSE_RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) as dr FROM Employees) WHERE dr = 1 AND department_id = Employees.department_id) = 1 AND dr > 1;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);","This query is complex due to SQLite's limited window function support in subqueries for direct comparison. It aims to find employees with salaries less than the second highest in their department. The subquery with `DENSE_RANK()` finds the second highest salary, and the outer query filters employees based on this condition, handling cases where there might not be a second highest salary."
"For each student, show their score and the score of the next student by enrollment date in the same course.","SELECT student_id, student_name, course_id, score, enrollment_date, LEAD(score) OVER (PARTITION BY course_id ORDER BY enrollment_date ASC) AS next_student_score FROM Students ORDER BY course_id, enrollment_date;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT NOT NULL, course_id INTEGER NOT NULL, score INTEGER NOT NULL, enrollment_date TEXT NOT NULL);","This query uses `LEAD()` to retrieve the score of the next student in the same course, ordered by their enrollment date. If there is no next student, the value will be NULL."
"Calculate the count of employees in each department, displayed for every employee.","SELECT employee_id, employee_name, department_id, salary, COUNT(employee_id) OVER (PARTITION BY department_id) AS total_employees_in_dept FROM Employees ORDER BY department_id, employee_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);","This query uses `COUNT() OVER (PARTITION BY department_id)` to count the total number of employees within each department, and this count is repeated for every employee row in that department."
"For each sale, show the total number of sales made by the same employee up to that point in time.","SELECT sale_id, employee_id, sale_date, quantity, COUNT(sale_id) OVER (PARTITION BY employee_id ORDER BY sale_date) AS running_sale_count FROM Sales ORDER BY employee_id, sale_date;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, employee_id INTEGER NOT NULL, sale_date TEXT NOT NULL, quantity INTEGER NOT NULL, total_amount REAL NOT NULL);","This query calculates a running count of sales for each employee, ordered by `sale_date`. The `COUNT() OVER()` window function computes the cumulative count of sales up to the current row for each employee."
Find the product with the highest stock quantity within each category.,"SELECT product_id, product_name, category, stock_quantity FROM (SELECT product_id, product_name, category, stock_quantity, ROW_NUMBER() OVER (PARTITION BY category ORDER BY stock_quantity DESC) AS rn FROM Products) WHERE rn = 1;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT NOT NULL, price REAL NOT NULL, stock_quantity INTEGER);","This query uses `ROW_NUMBER()` to assign a unique rank to products within each category based on their `stock_quantity` in descending order. It then filters to select only the product with rank 1 (i.e., the highest stock quantity) for each category."
"List all products and their prices, along with the average price of all products within their category and the overall average price of all products.","SELECT product_id, product_name, category, price, AVG(price) OVER (PARTITION BY category) AS category_avg_price, AVG(price) OVER () AS overall_avg_price FROM Products ORDER BY category, product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT NOT NULL, price REAL NOT NULL, stock_quantity INTEGER);","This query demonstrates two levels of aggregation using window functions: `AVG(price) OVER (PARTITION BY category)` calculates the average price per category, while `AVG(price) OVER ()` calculates the overall average price of all products."
"For each employee, retrieve their name and salary, and compare it to the salary of the third highest paid employee in the entire company.","SELECT employee_id, employee_name, salary, (SELECT salary FROM (SELECT salary, DENSE_RANK() OVER (ORDER BY salary DESC) AS rnk FROM Employees) WHERE rnk = 3 LIMIT 1) AS third_highest_company_salary FROM Employees ORDER BY salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);",This query finds the third highest salary across the entire company using `DENSE_RANK()` without a `PARTITION BY` clause in a subquery and then displays it alongside each employee's salary for comparison.
List employees who were hired after the first person in their department and whose salary is above the department's average salary.,"SELECT employee_id, employee_name, department_id, salary, hire_date FROM (SELECT employee_id, employee_name, department_id, salary, hire_date, FIRST_VALUE(hire_date) OVER (PARTITION BY department_id ORDER BY hire_date ASC) AS first_dept_hire_date, AVG(salary) OVER (PARTITION BY department_id) AS dept_avg_salary FROM Employees) WHERE hire_date > first_dept_hire_date AND salary > dept_avg_salary ORDER BY department_id, hire_date;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);",This query uses two window functions in a subquery: `FIRST_VALUE()` to get the first hire date in each department and `AVG()` to get the department's average salary. The outer query then filters employees based on being hired after the first person and having a salary greater than the department average.
"For each order item, display its price per unit and the running maximum price per unit for that specific product across all its order items.","SELECT item_id, order_id, product_id, quantity, price_per_unit, MAX(price_per_unit) OVER (PARTITION BY product_id ORDER BY item_id) AS running_max_price_per_unit FROM OrderItems ORDER BY product_id, item_id;","CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER NOT NULL, product_id INTEGER NOT NULL, quantity INTEGER NOT NULL, price_per_unit REAL NOT NULL);","This query calculates a running maximum of `price_per_unit` for each `product_id`, ordered by `item_id`. The `MAX() OVER()` window function tracks the highest price per unit encountered so far for a given product."
Identify products whose stock quantity is among the bottom 2 (lowest) within their category.,"SELECT product_id, product_name, category, stock_quantity FROM (SELECT product_id, product_name, category, stock_quantity, DENSE_RANK() OVER (PARTITION BY category ORDER BY stock_quantity ASC) AS rnk FROM Products) WHERE rnk <= 2 ORDER BY category, rnk;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT NOT NULL, category TEXT NOT NULL, price REAL NOT NULL, stock_quantity INTEGER);","This query uses `DENSE_RANK()` to rank products by their `stock_quantity` in ascending order within each category. It then selects products with a rank of 1 or 2, effectively finding the bottom 2 (lowest stock) products per category, handling ties by including all products with the same rank."
"Show each sale and the earliest sale date for the product, across all sales.","SELECT sale_id, product_id, sale_date, total_amount, FIRST_VALUE(sale_date) OVER (PARTITION BY product_id ORDER BY sale_date) AS first_sale_date_for_product FROM Sales ORDER BY product_id, sale_date;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, sale_date TEXT NOT NULL, quantity INTEGER NOT NULL, total_amount REAL NOT NULL);",This query uses `FIRST_VALUE()` to find the very first `sale_date` for each specific `product_id` and displays it alongside every sale record for that product.
"For each employee, show their salary, the average salary of their department, and the difference between their salary and the department average, but only for employees in departments with more than 5 people.","SELECT employee_id, employee_name, department_id, salary, dept_avg_salary, salary - dept_avg_salary AS salary_diff_from_dept_avg FROM (SELECT employee_id, employee_name, department_id, salary, AVG(salary) OVER (PARTITION BY department_id) AS dept_avg_salary, COUNT(employee_id) OVER (PARTITION BY department_id) AS num_employees_in_dept FROM Employees) WHERE num_employees_in_dept > 5 ORDER BY department_id, salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT NOT NULL, department_id INTEGER NOT NULL, salary REAL NOT NULL, hire_date TEXT NOT NULL);","This query first calculates both the average salary and the count of employees per department using window functions in a subquery. Then, it filters the results to include only departments with more than 5 employees, and finally calculates the salary difference."
List the names of all employees who earn more than the average salary of all employees.,"SELECT first_name, last_name FROM Employees WHERE salary > (SELECT AVG(salary) FROM Employees);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, hire_date TEXT, salary REAL, department_id INTEGER);",This query uses an uncorrelated subquery to first calculate the average salary of all employees. The outer query then retrieves the names of employees whose individual salary is greater than this calculated average.
Find the names of products that belong to the 'Electronics' category.,SELECT product_name FROM Products WHERE category_id = (SELECT category_id FROM Categories WHERE category_name = 'Electronics');,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, category_id INTEGER); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);",The uncorrelated subquery finds the `category_id` for 'Electronics'. The outer query then selects products matching that `category_id`.
Retrieve the full names of customers who have placed at least one order.,"SELECT first_name, last_name FROM Customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM Orders);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",The uncorrelated subquery selects all unique `customer_id`s from the `Orders` table. The outer query then retrieves customer names whose `customer_id` exists in this list.
List departments that have no employees.,SELECT department_name FROM Departments WHERE department_id NOT IN (SELECT DISTINCT department_id FROM Employees WHERE department_id IS NOT NULL);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, department_id INTEGER);","The uncorrelated subquery finds all `department_id`s that currently have employees. The outer query then selects department names whose `department_id` is not in this list, effectively finding empty departments."
Show products that have a price higher than the most expensive product in the 'Books' category.,"SELECT product_name, price FROM Products WHERE price > (SELECT MAX(P.price) FROM Products AS P JOIN Categories AS C ON P.category_id = C.category_id WHERE C.category_name = 'Books');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, category_id INTEGER); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);",The uncorrelated subquery calculates the maximum price of products specifically in the 'Books' category. The outer query then returns products whose price exceeds this maximum.
Find employees whose salary is greater than the average salary of employees in their own department.,"SELECT E.first_name, E.last_name, E.salary, D.department_name FROM Employees AS E JOIN Departments AS D ON E.department_id = D.department_id WHERE E.salary > (SELECT AVG(salary) FROM Employees WHERE department_id = E.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","This query uses a correlated subquery. For each employee in the outer query, the subquery calculates the average salary only for employees in *that specific employee's* department. The outer query then filters employees based on this department-specific average."
List all departments that have at least one employee.,SELECT department_name FROM Departments AS D WHERE EXISTS (SELECT 1 FROM Employees AS E WHERE E.department_id = D.department_id);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, department_id INTEGER);","This query uses a correlated subquery with `EXISTS`. For each department, the subquery checks if there's at least one employee record matching that department's ID. If a match exists, the department's name is returned."
Retrieve the names of customers who have not placed any orders.,"SELECT first_name, last_name FROM Customers AS C WHERE NOT EXISTS (SELECT 1 FROM Orders AS O WHERE O.customer_id = C.customer_id);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER);","This query uses a correlated subquery with `NOT EXISTS`. For each customer, the subquery checks if there are any orders associated with that customer. If no orders are found, the customer's name is returned."
Find products whose price is greater than the maximum price of any other product in the same category.,"SELECT P1.product_name, P1.price FROM Products AS P1 WHERE P1.price > (SELECT MAX(P2.price) FROM Products AS P2 WHERE P2.category_id = P1.category_id AND P2.product_id != P1.product_id);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, category_id INTEGER);","This is a correlated subquery. For each product (P1), the subquery finds the maximum price among all *other* products (P2) within its same category. The outer query then returns P1 if its price is greater than this maximum."
List the names of students who have enrolled in more than 3 courses.,"SELECT first_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Enrollments GROUP BY student_id HAVING COUNT(course_id) > 3);","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER);","The uncorrelated subquery first groups enrollments by student and filters for those with more than 3 courses, returning their IDs. The outer query then retrieves the names of students whose IDs are in this list."
"Get the total number of orders for each customer, but only for customers who have placed orders after '2023-01-01'.","SELECT C.first_name, C.last_name, (SELECT COUNT(O.order_id) FROM Orders AS O WHERE O.customer_id = C.customer_id) AS total_orders FROM Customers AS C WHERE C.customer_id IN (SELECT DISTINCT customer_id FROM Orders WHERE order_date > '2023-01-01');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",This query combines an uncorrelated subquery in the `WHERE` clause (filtering customers who ordered recently) and a correlated scalar subquery in the `SELECT` clause (counting orders for each selected customer).
"Show each employee's name and salary, along with the average salary of their respective department.","SELECT E.first_name, E.last_name, E.salary, (SELECT AVG(E2.salary) FROM Employees AS E2 WHERE E2.department_id = E.department_id) AS department_average_salary FROM Employees AS E;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER);","This query uses a correlated scalar subquery in the `SELECT` clause. For each employee in the outer query, the subquery calculates and returns the average salary specifically for the department to which that employee belongs."
Find employees who are the highest paid in their respective department.,"SELECT E.first_name, E.last_name, E.salary, D.department_name FROM Employees AS E JOIN Departments AS D ON E.department_id = D.department_id WHERE E.salary = (SELECT MAX(E2.salary) FROM Employees AS E2 WHERE E2.department_id = E.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","This correlated subquery checks, for each employee, if their salary matches the maximum salary found within their own department. It effectively identifies the top earner(s) in each department."
List products that have never been part of an order.,SELECT product_name FROM Products AS P WHERE NOT EXISTS (SELECT 1 FROM Order_Items AS OI WHERE OI.product_id = P.product_id);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","This correlated subquery uses `NOT EXISTS` to find products that do not have any corresponding entries in the `Order_Items` table, indicating they have never been ordered."
Find the names of students who have enrolled in courses only from the 'Computer Science' department.,"SELECT S.first_name, S.last_name FROM Students AS S WHERE NOT EXISTS (SELECT 1 FROM Enrollments AS E JOIN Courses AS C ON E.course_id = C.course_id WHERE E.student_id = S.student_id AND C.department != 'Computer Science');","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT);","This correlated subquery uses `NOT EXISTS`. For each student, it checks if there is any enrollment for a course that is *not* in the 'Computer Science' department. If no such enrollment exists, the student is returned."
Retrieve the department names where the minimum salary is above 40000.,SELECT D.department_name FROM Departments AS D WHERE (SELECT MIN(E.salary) FROM Employees AS E WHERE E.department_id = D.department_id) > 40000;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, salary REAL, department_id INTEGER);",This correlated subquery calculates the minimum salary for each department. The outer query then filters for departments where this minimum salary is greater than 40000.
Get the names of products that have a stock quantity below the average stock quantity of all products.,"SELECT product_name, stock_quantity FROM Products WHERE stock_quantity < (SELECT AVG(stock_quantity) FROM Products);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, stock_quantity INTEGER);",An uncorrelated subquery computes the overall average stock quantity. The outer query then selects products whose individual stock quantity is less than this global average.
List customers who placed an order on the same day as their very first order.,"SELECT C.first_name, C.last_name FROM Customers AS C JOIN Orders AS O ON C.customer_id = O.customer_id WHERE O.order_date = (SELECT MIN(O2.order_date) FROM Orders AS O2 WHERE O2.customer_id = C.customer_id);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",This correlated subquery determines the earliest order date for each specific customer. The outer query then retrieves customers who have an order placed on this exact earliest date.
Show the job titles and the count of employees for job titles that have more than 5 employees.,"SELECT J.job_title, (SELECT COUNT(E.employee_id) FROM Employees AS E WHERE E.job_id = J.job_id) AS employee_count FROM Jobs AS J WHERE (SELECT COUNT(E2.employee_id) FROM Employees AS E2 WHERE E2.job_id = J.job_id) > 5;","CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, job_id INTEGER);","This query uses a correlated subquery in both the `SELECT` and `WHERE` clauses. For each job title, it counts the associated employees, first to filter jobs with more than 5 employees, and then to display the count."
Retrieve employees whose hire date is earlier than the earliest hire date in the 'Marketing' department.,"SELECT first_name, last_name FROM Employees WHERE hire_date < (SELECT MIN(E.hire_date) FROM Employees AS E JOIN Departments AS D ON E.department_id = D.department_id WHERE D.department_name = 'Marketing');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",The uncorrelated subquery identifies the earliest hire date among employees in the 'Marketing' department. The outer query then selects employees hired before this specific date.
"Find customers who placed an order with a total amount greater than 1000, and also placed another order within 7 days of it.","SELECT DISTINCT C.first_name, C.last_name FROM Customers AS C JOIN Orders AS O1 ON C.customer_id = O1.customer_id WHERE O1.total_amount > 1000 AND EXISTS (SELECT 1 FROM Orders AS O2 WHERE O2.customer_id = O1.customer_id AND O2.order_id != O1.order_id AND julianday(O2.order_date) BETWEEN julianday(O1.order_date) AND julianday(O1.order_date, '+7 days'));","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This complex query uses a correlated subquery. For each order (O1) exceeding 1000, the subquery checks if another order (O2) by the same customer exists within a 7-day window. If so, the customer's name is returned."
"Display product names and their prices, along with the average price of all products in their respective categories.","SELECT P.product_name, P.price, (SELECT AVG(P2.price) FROM Products AS P2 WHERE P2.category_id = P.category_id) AS category_avg_price FROM Products AS P;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, category_id INTEGER);","This query uses a correlated scalar subquery in the `SELECT` clause. For each product, the subquery calculates the average price of all products that share the same category ID as the current product."
Get the names of students who have enrolled in courses but have not received a 'Pass' grade in any of them.,"SELECT S.first_name, S.last_name FROM Students AS S WHERE S.student_id IN (SELECT DISTINCT student_id FROM Enrollments) AND NOT EXISTS (SELECT 1 FROM Enrollments AS E WHERE E.student_id = S.student_id AND E.grade = 'Pass');","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, grade TEXT);","This query first filters for students who have enrollments (uncorrelated subquery). Then, for those students, it uses a correlated `NOT EXISTS` subquery to ensure they don't have any enrollment with a 'Pass' grade."
Find the top 3 highest-paid employees.,"SELECT first_name, last_name, salary FROM Employees ORDER BY salary DESC LIMIT 3;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL);","This query uses `ORDER BY` and `LIMIT` to retrieve the top 3 employees based on salary. While not strictly a subquery example, it's included as a baseline for comparison with Nth highest salary using subqueries."
Find the employee with the second highest salary.,"SELECT first_name, last_name, salary FROM Employees WHERE salary = (SELECT MAX(salary) FROM Employees WHERE salary < (SELECT MAX(salary) FROM Employees));","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL);","This query uses nested uncorrelated subqueries. The innermost subquery finds the highest salary. The outer subquery then finds the maximum salary among those less than the absolute highest, which effectively finds the second highest."
List categories that have products with a price above 500.,SELECT category_name FROM Categories AS C WHERE EXISTS (SELECT 1 FROM Products AS P WHERE P.category_id = C.category_id AND P.price > 500);,"CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, price REAL, category_id INTEGER);","This correlated subquery checks for each category if there is at least one product associated with it that has a price greater than 500. If so, the category name is returned."
Get product names that have a stock quantity lower than the minimum stock quantity of products in the 'Food' category.,SELECT product_name FROM Products WHERE stock_quantity < (SELECT MIN(P.stock_quantity) FROM Products AS P JOIN Categories AS C ON P.category_id = C.category_id WHERE C.category_name = 'Food');,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, stock_quantity INTEGER, category_id INTEGER); CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT);",The uncorrelated subquery determines the minimum stock quantity for products belonging to the 'Food' category. The outer query then retrieves product names whose stock quantity is less than this minimum.
Retrieve the names of departments where all employees earn less than 60000.,SELECT D.department_name FROM Departments AS D WHERE NOT EXISTS (SELECT 1 FROM Employees AS E WHERE E.department_id = D.department_id AND E.salary >= 60000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, salary REAL, department_id INTEGER);",This correlated subquery uses `NOT EXISTS` to find departments where there isn't a single employee earning 60000 or more. This implies all employees in that department earn less than 60000.
Find students who have enrolled in courses taught by the 'Math' department and also in courses taught by the 'Physics' department.,"SELECT S.first_name, S.last_name FROM Students AS S WHERE EXISTS (SELECT 1 FROM Enrollments AS E JOIN Courses AS C ON E.course_id = C.course_id WHERE E.student_id = S.student_id AND C.department = 'Math') AND EXISTS (SELECT 1 FROM Enrollments AS E2 JOIN Courses AS C2 ON E2.course_id = C2.course_id WHERE E2.student_id = S.student_id AND C2.department = 'Physics');","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department TEXT);","This query uses two correlated `EXISTS` subqueries. For each student, it checks if they have an enrollment in a 'Math' course AND also an enrollment in a 'Physics' course. Only students satisfying both conditions are returned."
List employees who were hired after all employees in the 'Sales' department.,"SELECT first_name, last_name FROM Employees WHERE hire_date > (SELECT MAX(E.hire_date) FROM Employees AS E JOIN Departments AS D ON E.department_id = D.department_id WHERE D.department_name = 'Sales');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",The uncorrelated subquery finds the latest hire date among all employees in the 'Sales' department. The outer query then selects employees whose hire date is later than this specific date.
Show products that have a unit price in Order_Items that is different from their current price in the Products table.,"SELECT DISTINCT P.product_name, P.price AS current_price, OI.unit_price AS ordered_price FROM Products AS P JOIN Order_Items AS OI ON P.product_id = OI.product_id WHERE P.price != OI.unit_price;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, product_id INTEGER, unit_price REAL);","This query directly joins `Products` and `Order_Items` and filters for cases where the product's current price doesn't match the unit price at the time of the order. It's a join, not a subquery, but commonly requested with similar intent."
List all unique job titles found across employees and contractors.,SELECT JobTitle FROM Employees UNION SELECT ContractorType AS JobTitle FROM Contractors;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, JobTitle TEXT, DepartmentID INTEGER); CREATE TABLE Contractors (ContractorID INTEGER PRIMARY KEY, ContractorName TEXT, ContractorType TEXT, ProjectID INTEGER);",This query combines all JobTitles from the Employees table and ContractorTypes (aliased as JobTitle) from the Contractors table using UNION to return a distinct list of all unique job roles/types.
"Find product names that are categorized as both 'Electronics' and 'Office Supplies' (e.g., a product miscategorized or multi-category product).",SELECT ProductName FROM Products WHERE Category = 'Electronics' INTERSECT SELECT ProductName FROM Products WHERE Category = 'Office Supplies';,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);","This query identifies products whose ProductName appears in both the 'Electronics' category and the 'Office Supplies' category, using INTERSECT to find common entries."
Show the names of customers who have never placed an order.,SELECT CustomerName FROM Customers EXCEPT SELECT c.CustomerName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);","This query returns CustomerNames from the Customers table that do not have corresponding entries in the Orders table, effectively listing customers who haven't placed any orders."
"Retrieve all sales records from both online and in-store transactions, including duplicates.","SELECT SaleID, ProductID, Amount, SaleDate, 'Online' AS Source FROM OnlineSales UNION ALL SELECT SaleID, ProductID, Amount, SaleDate, 'InStore' AS Source FROM InStoreSales;","CREATE TABLE OnlineSales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, Amount REAL, SaleDate TEXT); CREATE TABLE InStoreSales (SaleID INTEGER PRIMARY KEY, ProductID INTEGER, Amount REAL, SaleDate TEXT);","This query combines all records from OnlineSales and InStoreSales into a single result set using UNION ALL, preserving duplicate rows if they exist across the two tables and adding a 'Source' column."
Find the names of students who are enrolled in both 'Calculus I' and 'Linear Algebra'.,SELECT s.StudentName FROM Students s JOIN Enrollments e ON s.StudentID = e.StudentID JOIN Courses c ON e.CourseID = c.CourseID WHERE c.CourseName = 'Calculus I' INTERSECT SELECT s.StudentName FROM Students s JOIN Enrollments e ON s.StudentID = e.StudentID JOIN Courses c ON e.CourseID = c.CourseID WHERE c.CourseName = 'Linear Algebra';,"CREATE TABLE Students (StudentID INTEGER PRIMARY KEY, StudentName TEXT, Major TEXT); CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER);",This query identifies StudentNames that are present in the enrollment lists for both 'Calculus I' and 'Linear Algebra' by using the INTERSECT operator on two subqueries.
List the names of employees who are not currently assigned to any project.,SELECT EmployeeName FROM Employees EXCEPT SELECT e.EmployeeName FROM Employees e JOIN ProjectAssignments pa ON e.EmployeeID = pa.EmployeeID;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER); CREATE TABLE ProjectAssignments (AssignmentID INTEGER PRIMARY KEY, ProjectID INTEGER, EmployeeID INTEGER);","This query returns EmployeeNames from the Employees table that do not have any corresponding assignments in the ProjectAssignments table, identifying employees without projects."
Combine the top 5 most expensive products from the 'Electronics' category with the top 5 most expensive products from the 'Home Goods' category.,"SELECT ProductName, Price FROM Products WHERE Category = 'Electronics' ORDER BY Price DESC LIMIT 5 UNION SELECT ProductName, Price FROM Products WHERE Category = 'Home Goods' ORDER BY Price DESC LIMIT 5;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT, Price REAL);",This query combines two sets of results: the top 5 most expensive products from 'Electronics' and the top 5 from 'Home Goods'. UNION ensures only unique products are listed if any happen to fall into both categories (though unlikely with distinct categories).
Find the names of authors who have published books with both 'Penguin Books' and 'HarperCollins'.,SELECT a.AuthorName FROM Authors a JOIN Books b ON a.AuthorID = b.AuthorID JOIN Publishers p ON b.PublisherID = p.PublisherID WHERE p.PublisherName = 'Penguin Books' INTERSECT SELECT a.AuthorName FROM Authors a JOIN Books b ON a.AuthorID = b.AuthorID JOIN Publishers p ON b.PublisherID = p.PublisherID WHERE p.PublisherName = 'HarperCollins';,"CREATE TABLE Authors (AuthorID INTEGER PRIMARY KEY, AuthorName TEXT); CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, AuthorID INTEGER, PublisherID INTEGER); CREATE TABLE Publishers (PublisherID INTEGER PRIMARY KEY, PublisherName TEXT);","This query uses INTERSECT to find AuthorNames that have published books with both 'Penguin Books' and 'HarperCollins' by joining Authors, Books, and Publishers tables in two separate subqueries."
List departments that have no employees hired in the year 2023.,"SELECT DepartmentName FROM Departments EXCEPT SELECT d.DepartmentName FROM Departments d JOIN Employees e ON d.DepartmentID = e.DepartmentID WHERE STRFTIME('%Y', e.HireDate) = '2023';","CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT);","This query retrieves all DepartmentNames from the Departments table and then uses EXCEPT to remove departments that have at least one employee hired in 2023, effectively listing departments with no new hires in that year."
"Get a complete list of all customer email addresses, including any duplicates, from both the main customer database and a marketing leads list.",SELECT Email FROM Customers UNION ALL SELECT LeadEmail AS Email FROM MarketingLeads;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, Email TEXT); CREATE TABLE MarketingLeads (LeadID INTEGER PRIMARY KEY, LeadName TEXT, LeadEmail TEXT);","This query combines all Email addresses from the Customers table and all LeadEmails (aliased as Email) from the MarketingLeads table, using UNION ALL to include all records, even if duplicates exist."
Find the IDs of products that are currently stocked in both 'Warehouse A' and 'Warehouse B'.,SELECT ProductID FROM Inventory WHERE WarehouseLocation = 'Warehouse A' INTERSECT SELECT ProductID FROM Inventory WHERE WarehouseLocation = 'Warehouse B';,"CREATE TABLE Inventory (InventoryID INTEGER PRIMARY KEY, ProductID INTEGER, WarehouseLocation TEXT, Quantity INTEGER);","This query uses INTERSECT to find ProductIDs that appear in the inventory for both 'Warehouse A' and 'Warehouse B', indicating products stocked in both locations."
Identify employees whose last contact information update was more than 2 years ago.,SELECT EmployeeName FROM Employees WHERE julianday('now') - julianday(LastContactUpdate) > 730 EXCEPT SELECT EmployeeName FROM Employees WHERE LastContactUpdate IS NULL;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, LastContactUpdate TEXT);","This query selects employees whose LastContactUpdate is older than 2 years from today. The EXCEPT clause removes employees who have never had their contact info updated (where LastContactUpdate is NULL), ensuring we only consider those who have an update record."
"List all User IDs, combining both active and inactive users.",SELECT UserID FROM Users WHERE Status = 'Active' UNION SELECT UserID FROM Users WHERE Status = 'Inactive';,"CREATE TABLE Users (UserID INTEGER PRIMARY KEY, Username TEXT, Status TEXT);","This query combines the UserIDs of active users with those of inactive users using UNION, resulting in a complete, distinct list of all user IDs."
Find customers who placed orders in both the year 2022 and the year 2023.,"SELECT c.CustomerName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE STRFTIME('%Y', o.OrderDate) = '2022' INTERSECT SELECT c.CustomerName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID WHERE STRFTIME('%Y', o.OrderDate) = '2023';","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT);",This query uses INTERSECT to find CustomerNames that appear in the list of customers who ordered in 2022 and also in the list of customers who ordered in 2023.
Identify products that have been added to the catalog but have never been sold.,SELECT ProductName FROM Products EXCEPT SELECT p.ProductName FROM Products p JOIN OrderItems oi ON p.ProductID = oi.ProductID;,"CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query selects all ProductNames from the Products table and then removes any products that have corresponding entries in the OrderItems table, effectively listing products that have never been sold."
"Get a list of all unique participant emails from a conference, combining registered attendees and event organizers, including any duplicate email addresses if they appear in both lists.",SELECT Email FROM ConferenceAttendees UNION ALL SELECT OrganizerEmail AS Email FROM EventOrganizers;,"CREATE TABLE ConferenceAttendees (AttendeeID INTEGER PRIMARY KEY, AttendeeName TEXT, Email TEXT); CREATE TABLE EventOrganizers (OrganizerID INTEGER PRIMARY KEY, OrganizerName TEXT, OrganizerEmail TEXT);","This query combines Email addresses from ConferenceAttendees and OrganizerEmails from EventOrganizers using UNION ALL to include all records, even if an email appears in both sets, without removing duplicates."
Find the names of suppliers who provide parts for both 'Model X' and 'Model Y' of a product.,SELECT s.SupplierName FROM Suppliers s JOIN Parts p ON s.SupplierID = p.SupplierID WHERE p.ProductModel = 'Model X' INTERSECT SELECT s.SupplierName FROM Suppliers s JOIN Parts p ON s.SupplierID = p.SupplierID WHERE p.ProductModel = 'Model Y';,"CREATE TABLE Suppliers (SupplierID INTEGER PRIMARY KEY, SupplierName TEXT); CREATE TABLE Parts (PartID INTEGER PRIMARY KEY, PartName TEXT, ProductModel TEXT, SupplierID INTEGER);","This query uses INTERSECT to find SupplierNames that supply parts for 'Model X' and also supply parts for 'Model Y', identifying common suppliers for both models."
List tasks that are marked as 'Completed' but were never assigned to any employee.,SELECT TaskName FROM Tasks WHERE Status = 'Completed' EXCEPT SELECT t.TaskName FROM Tasks t JOIN TaskAssignments ta ON t.TaskID = ta.TaskID;,"CREATE TABLE Tasks (TaskID INTEGER PRIMARY KEY, TaskName TEXT, Status TEXT); CREATE TABLE TaskAssignments (AssignmentID INTEGER PRIMARY KEY, TaskID INTEGER, EmployeeID INTEGER);","This query selects TaskNames that are 'Completed' and then uses EXCEPT to remove those tasks that have an entry in TaskAssignments, effectively listing completed tasks without any assignment record."
Retrieve titles of books published before the year 2000 or after the year 2010.,SELECT Title FROM Books WHERE PublicationYear < 2000 UNION SELECT Title FROM Books WHERE PublicationYear > 2010;,"CREATE TABLE Books (BookID INTEGER PRIMARY KEY, Title TEXT, PublicationYear INTEGER);","This query combines the Titles of books published before 2000 with those published after 2010 using UNION, providing a distinct list of books from these two time periods."
Find the names of departments that have at least one male and at least one female employee.,SELECT d.DepartmentName FROM Departments d JOIN Employees e ON d.DepartmentID = e.DepartmentID WHERE e.Gender = 'Male' INTERSECT SELECT d.DepartmentName FROM Departments d JOIN Employees e ON d.DepartmentID = e.DepartmentID WHERE e.Gender = 'Female';,"CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, Gender TEXT);","This query uses INTERSECT to find DepartmentNames that appear in both the list of departments with male employees and the list of departments with female employees, indicating departments with a mix of genders."
List the names of managers who are not assigned as project leads.,SELECT ManagerName FROM Managers EXCEPT SELECT e.EmployeeName FROM Employees e JOIN ProjectLeads pl ON e.EmployeeID = pl.EmployeeID;,"CREATE TABLE Managers (ManagerID INTEGER PRIMARY KEY, ManagerName TEXT); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT); CREATE TABLE ProjectLeads (LeadID INTEGER PRIMARY KEY, ProjectID INTEGER, EmployeeID INTEGER);","This query retrieves ManagerNames from the Managers table and then uses EXCEPT to remove any managers who are also present in the ProjectLeads table (assuming EmployeeName maps to ManagerName), thus identifying managers not acting as project leads."
"Get a combined list of all phone numbers from customers and suppliers, including duplicates.",SELECT PhoneNumber FROM Customers UNION ALL SELECT ContactPhone AS PhoneNumber FROM Suppliers;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, PhoneNumber TEXT); CREATE TABLE Suppliers (SupplierID INTEGER PRIMARY KEY, SupplierName TEXT, ContactPhone TEXT);","This query concatenates all PhoneNumbers from the Customers table with ContactPhone numbers from the Suppliers table using UNION ALL, allowing for duplicate phone numbers in the final list."
Find employees who have had both an 'Active' contract and a 'Terminated' contract in the past (indicating re-hires or multiple engagements).,SELECT EmployeeID FROM Contracts WHERE ContractStatus = 'Active' INTERSECT SELECT EmployeeID FROM Contracts WHERE ContractStatus = 'Terminated';,"CREATE TABLE Contracts (ContractID INTEGER PRIMARY KEY, EmployeeID INTEGER, ContractStatus TEXT, StartDate TEXT, EndDate TEXT);","This query identifies EmployeeIDs that appear in the set of employees with 'Active' contracts and also in the set of employees with 'Terminated' contracts, using INTERSECT to find employees with both statuses."
"List the names of courses that have no students enrolled for the current year, 2024.","SELECT CourseName FROM Courses EXCEPT SELECT c.CourseName FROM Courses c JOIN Enrollments e ON c.CourseID = e.CourseID WHERE STRFTIME('%Y', e.EnrollmentDate) = '2024';","CREATE TABLE Courses (CourseID INTEGER PRIMARY KEY, CourseName TEXT); CREATE TABLE Enrollments (EnrollmentID INTEGER PRIMARY KEY, StudentID INTEGER, CourseID INTEGER, EnrollmentDate TEXT);","This query selects all CourseNames and then removes those courses that have at least one enrollment record in 2024, effectively listing courses with no current year enrollments."
Get a unique list of all cities where we either have customers or physical stores.,SELECT City FROM Customers UNION SELECT StoreCity AS City FROM Stores;,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT); CREATE TABLE Stores (StoreID INTEGER PRIMARY KEY, StoreName TEXT, StoreCity TEXT);","This query combines distinct City names from the Customers table and StoreCity names (aliased as City) from the Stores table using UNION, providing a unique list of all relevant cities."
Find the usernames of users who logged in both yesterday and today.,"SELECT Username FROM UserLogins WHERE LoginDate = DATE('now', '-1 day') INTERSECT SELECT Username FROM UserLogins WHERE LoginDate = DATE('now');","CREATE TABLE UserLogins (LoginID INTEGER PRIMARY KEY, Username TEXT, LoginDate TEXT);",This query uses INTERSECT to find UserNames that appear in the set of users who logged in yesterday and also in the set of users who logged in today.
Identify products that have more than 100 units in stock but had less than 10 units sold in the last 30 days.,"SELECT p.ProductName FROM Products p JOIN Inventory i ON p.ProductID = i.ProductID WHERE i.Quantity > 100 EXCEPT SELECT p.ProductName FROM Products p JOIN OrderItems oi ON p.ProductID = oi.ProductID JOIN Orders o ON oi.OrderID = o.OrderID WHERE o.OrderDate >= DATE('now', '-30 days') GROUP BY p.ProductName HAVING SUM(oi.Quantity) >= 10;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE Inventory (ProductID INTEGER PRIMARY KEY, Quantity INTEGER); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, OrderDate TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query first selects products with over 100 units in inventory. Then, it uses EXCEPT to remove products that had 10 or more units sold in the last 30 days, effectively listing high-stock, low-selling items."
"Retrieve all transaction IDs and amounts from both 'Savings' and 'Checking' accounts, including duplicates.","SELECT TransactionID, Amount FROM Transactions WHERE AccountType = 'Savings' UNION ALL SELECT TransactionID, Amount FROM Transactions WHERE AccountType = 'Checking';","CREATE TABLE Transactions (TransactionID INTEGER PRIMARY KEY, AccountID INTEGER, AccountType TEXT, Amount REAL, TransactionDate TEXT);","This query combines all TransactionIDs and Amounts from 'Savings' accounts with those from 'Checking' accounts using UNION ALL, preserving all records regardless of duplication."
Find the names of customers located in 'London' who have also purchased any product from the 'Electronics' category.,SELECT CustomerName FROM Customers WHERE City = 'London' INTERSECT SELECT c.CustomerName FROM Customers c JOIN Orders o ON c.CustomerID = o.CustomerID JOIN OrderItems oi ON o.OrderID = oi.OrderID JOIN Products p ON oi.ProductID = p.ProductID WHERE p.Category = 'Electronics';,"CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, CustomerName TEXT, City TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Category TEXT);",This query uses INTERSECT to find CustomerNames that are both located in 'London' and have purchased a product from the 'Electronics' category.
List employees who were hired before their respective department was established.,SELECT e.EmployeeName FROM Employees e EXCEPT SELECT e.EmployeeName FROM Employees e JOIN Departments d ON e.DepartmentID = d.DepartmentID WHERE e.HireDate >= d.EstablishmentDate;,"CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, EmployeeName TEXT, DepartmentID INTEGER, HireDate TEXT); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT, EstablishmentDate TEXT);","This query selects all EmployeeNames and then uses EXCEPT to remove those employees whose HireDate is on or after their department's EstablishmentDate, effectively listing employees hired before their department existed."
Get today's current date.,SELECT DATE('now');,No specific table schema needed for this query.,Retrieves the current date using the DATE() function with 'now' as the time string.
Show the current full timestamp including date and time.,SELECT DATETIME('now');,No specific table schema needed for this query.,Retrieves the current date and time (timestamp) using the DATETIME() function with 'now'.
List all orders placed in the year 2023.,"SELECT order_id, customer_id, order_date FROM Orders WHERE STRFTIME('%Y', order_date) = '2023';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Selects orders where the year extracted from the 'order_date' column using STRFTIME('%Y', ...) is '2023'."
"For each event, display its name and the full name of the month it occurred in.","SELECT event_name, STRFTIME('%B', event_date) AS month_name FROM Events;","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, event_time TEXT);","Retrieves the full month name (e.g., 'January') from 'event_date' for each event using STRFTIME('%B', ...)."
"Calculate the number of days it took to ship each order, only for orders that have been shipped.","SELECT order_id, order_date, shipped_date, JULIANDAY(shipped_date) - JULIANDAY(order_date) AS days_to_ship FROM Orders WHERE shipped_date IS NOT NULL;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipped_date TEXT);",Calculates the difference in days between 'shipped_date' and 'order_date' by converting both to Julian day numbers using JULIANDAY() and subtracting.
Determine what date it will be exactly 30 days from the current date.,"SELECT DATE('now', '+30 days');",No specific table schema needed for this query.,Calculates the date 30 days from the current date using the DATE() function with a modifier.
What was the date exactly 5 years ago from today?,"SELECT DATE('now', '-5 years');",No specific table schema needed for this query.,Calculates the date 5 years prior to the current date using the DATE() function with a negative modifier.
"Find all orders that were placed in the month of December, regardless of the year.","SELECT order_id, order_date FROM Orders WHERE STRFTIME('%m', order_date) = '12';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Selects orders where the numeric month (01-12) extracted from 'order_date' using STRFTIME('%m', ...) is '12' (December)."
Count the total number of employees hired in each year.,"SELECT STRFTIME('%Y', hire_date) AS hire_year, COUNT(employee_id) AS num_employees FROM Employees GROUP BY hire_year ORDER BY hire_year;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL);","Groups employees by the year they were hired (extracted using STRFTIME('%Y', ...)) and counts the number of employees for each year."
List the names and dates of all events that took place on a Monday.,"SELECT event_name, event_date FROM Events WHERE STRFTIME('%w', event_date) = '1';","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, event_time TEXT);","Selects events where the day of the week (0 for Sunday, 1 for Monday, etc.) extracted from 'event_date' using STRFTIME('%w', ...) is '1'."
Calculate the current age of each employee based on their date of birth.,"SELECT first_name, last_name, STRFTIME('%Y', 'now') - STRFTIME('%Y', date_of_birth) - (STRFTIME('%m%d', 'now') < STRFTIME('%m%d', date_of_birth)) AS age FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, date_of_birth TEXT, salary REAL);",Calculates the current age of each employee by subtracting their birth year from the current year and adjusting if their birthday hasn't occurred yet this year.
Show all orders that were placed within the last 7 days relative to the current date.,"SELECT order_id, order_date, total_amount FROM Orders WHERE order_date >= DATE('now', '-7 days');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Selects orders where the 'order_date' is on or after the date 7 days prior to the current date.
List tasks that have a due date in the next calendar month.,"SELECT task_name, due_date FROM Tasks WHERE STRFTIME('%Y-%m', due_date) = STRFTIME('%Y-%m', DATE('now', '+1 month'));","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, created_at TEXT, due_date TEXT, status TEXT);",Selects tasks where the year and month of their 'due_date' match the year and month of the date one month from now.
Find the earliest hire date recorded in the employee database.,SELECT MIN(hire_date) AS earliest_hire_date FROM Employees;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT);",Retrieves the minimum (earliest) 'hire_date' from the Employees table using the MIN() aggregate function.
"For each customer, determine the date of their most recent order.","SELECT customer_id, MAX(order_date) AS latest_order_date FROM Orders GROUP BY customer_id;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Groups orders by 'customer_id' and finds the maximum (latest) 'order_date' for each group.
Retrieve all events that are scheduled for the exact date 2024-07-15.,"SELECT event_name, event_time FROM Events WHERE event_date = '2024-07-15';","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, event_time TEXT);",Selects events where the 'event_date' exactly matches the string '2024-07-15'.
"Calculate the average duration of events for each month, excluding events without a duration.","SELECT STRFTIME('%Y-%m', event_date) AS event_month, AVG(duration_minutes) AS avg_duration FROM Events WHERE duration_minutes IS NOT NULL GROUP BY event_month ORDER BY event_month;","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, duration_minutes INTEGER);","Groups events by their year and month (extracted using STRFTIME('%Y-%m', ...)) and calculates the average 'duration_minutes' for each month."
Get all sensor readings that were taken during the 10 AM hour.,"SELECT sensor_id, reading_timestamp, temperature FROM Sensors WHERE STRFTIME('%H', reading_timestamp) = '10';","CREATE TABLE Sensors (sensor_id INTEGER PRIMARY KEY, reading_timestamp TEXT, temperature REAL, humidity REAL);","Selects sensor readings where the hour part of 'reading_timestamp' (extracted using STRFTIME('%H', ...)) is '10' (representing 10:00 to 10:59)."
"For completed tasks, calculate the duration in hours from creation to completion.","SELECT task_name, created_at, completed_at, (JULIANDAY(completed_at) - JULIANDAY(created_at)) * 24 AS duration_hours FROM Tasks WHERE completed_at IS NOT NULL;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, created_at TEXT, completed_at TEXT, status TEXT);","Calculates the difference between 'completed_at' and 'created_at' in Julian days, then multiplies by 24 to get the duration in hours for completed tasks."
Retrieve all orders placed within the current calendar quarter.,"SELECT order_id, order_date FROM Orders WHERE STRFTIME('%Y', order_date) = STRFTIME('%Y', 'now') AND ((STRFTIME('%m', order_date) BETWEEN '01' AND '03' AND STRFTIME('%m', 'now') BETWEEN '01' AND '03') OR (STRFTIME('%m', order_date) BETWEEN '04' AND '06' AND STRFTIME('%m', 'now') BETWEEN '04' AND '06') OR (STRFTIME('%m', order_date) BETWEEN '07' AND '09' AND STRFTIME('%m', 'now') BETWEEN '07' AND '09') OR (STRFTIME('%m', order_date) BETWEEN '10' AND '12' AND STRFTIME('%m', 'now') BETWEEN '10' AND '12'));","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Selects orders that fall within the same calendar quarter (and year) as the current date. It explicitly checks for each quarter's month range.
Find employees who were hired in a leap year.,"SELECT employee_id, first_name, hire_date FROM Employees WHERE STRFTIME('%Y', hire_date) % 4 = 0 AND (STRFTIME('%Y', hire_date) % 100 != 0 OR STRFTIME('%Y', hire_date) % 400 = 0);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, hire_date TEXT);","Selects employees whose hire year (extracted using STRFTIME('%Y', ...)) satisfies the conditions for being a leap year."
List events that occurred on the very last day of their respective month.,"SELECT event_name, event_date FROM Events WHERE DATE(event_date, '+1 day') = DATE(event_date, 'start of month', '+1 month');","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT);","Selects events where adding one day to the 'event_date' results in the first day of the next month, indicating the original date was the last day of its month."
Find all orders that were placed on a weekend day (Saturday or Sunday).,"SELECT order_id, order_date FROM Orders WHERE STRFTIME('%w', order_date) IN ('0', '6');","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","Selects orders where the day of the week (0 for Sunday, 6 for Saturday) extracted from 'order_date' indicates a weekend."
Count the number of events that occur on each specific day of the week.,"SELECT STRFTIME('%w', event_date) AS day_of_week_num, COUNT(event_id) AS num_events FROM Events GROUP BY day_of_week_num ORDER BY day_of_week_num;","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT);",Groups events by their numeric day of the week (0 for Sunday to 6 for Saturday) and counts the number of events for each day.
List employees who were hired in the current year but not in the current month.,"SELECT employee_id, first_name, hire_date FROM Employees WHERE STRFTIME('%Y', hire_date) = STRFTIME('%Y', 'now') AND STRFTIME('%m', hire_date) != STRFTIME('%m', 'now');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, hire_date TEXT);",Selects employees whose hire year matches the current year but whose hire month does not match the current month.
Find orders that were shipped exactly 5 days after they were placed.,"SELECT order_id, order_date, shipped_date FROM Orders WHERE DATE(order_date, '+5 days') = shipped_date;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, shipped_date TEXT);","Selects orders where the 'shipped_date' is precisely 5 days after the 'order_date', calculated using DATE() with a modifier."
Retrieve all orders that were placed in the previous calendar year.,"SELECT order_id, order_date FROM Orders WHERE STRFTIME('%Y', order_date) = STRFTIME('%Y', DATE('now', '-1 year'));","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Selects orders where the year of the 'order_date' matches the year of the date one year prior to the current date.
"Find tasks that were created and are due on the same day, and have not yet been completed.","SELECT task_name, created_at, due_date FROM Tasks WHERE DATE(created_at) = DATE(due_date) AND completed_at IS NULL;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, created_at TEXT, due_date TEXT, completed_at TEXT);",Selects tasks where the date part of 'created_at' equals the date part of 'due_date' and the 'completed_at' column is NULL.
List all employees whose birthday falls within the current calendar month.,"SELECT first_name, last_name, date_of_birth FROM Employees WHERE STRFTIME('%m', date_of_birth) = STRFTIME('%m', 'now');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, date_of_birth TEXT);","Selects employees whose birth month (extracted using STRFTIME('%m', ...)) matches the current month."
Get all sensor readings that were recorded on the first day of their respective month.,"SELECT sensor_id, reading_timestamp, temperature FROM Sensors WHERE STRFTIME('%d', reading_timestamp) = '01';","CREATE TABLE Sensors (sensor_id INTEGER PRIMARY KEY, reading_timestamp TEXT, temperature REAL, humidity REAL);","Selects sensor readings where the day of the month (extracted using STRFTIME('%d', ...)) from 'reading_timestamp' is '01'."
List all products ordered by their price from lowest to highest.,"SELECT product_name, price FROM Products ORDER BY price ASC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);","Retrieves product names and prices, sorted by price in ascending order."
"Show the names of employees, sorted by their salary from highest to lowest.","SELECT first_name, last_name, salary FROM Employees ORDER BY salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER);","Fetches employee first names, last names, and salaries, ordered by salary in descending order."
"Get all orders, first sorted by customer ID ascending, then by order date descending.","SELECT order_id, customer_id, order_date FROM Orders ORDER BY customer_id ASC, order_date DESC;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Selects order details and sorts them first by customer ID in ascending order, then by order date in descending order for orders with the same customer ID."
Find the top 5 most expensive products.,"SELECT product_name, price FROM Products ORDER BY price DESC LIMIT 5;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);",Retrieves the names and prices of the 5 products with the highest prices.
Get the 6th to 10th employees when sorted by their last name.,"SELECT first_name, last_name FROM Employees ORDER BY last_name ASC LIMIT 5 OFFSET 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER);",Fetches the 5 employees (from the 6th to the 10th) after sorting all employees by their last name in ascending order.
List the 3 most recent sales records for customer ID 101.,"SELECT sale_id, sale_date, total_price FROM Sales WHERE customer_id = 101 ORDER BY sale_date DESC LIMIT 3;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, customer_id INTEGER, sale_date TEXT, total_price REAL);","Selects the 3 most recent sales for customer ID 101, ordered by sale date in descending order."
Find the names of the top 10 customers by their total order amount.,"SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY total_spent DESC LIMIT 10;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Joins Customers and Orders tables, calculates the total amount spent by each customer, and then returns the names of the top 10 customers who spent the most."
"Show product names and their value (price * quantity), sorted by this calculated value descending.","SELECT product_name, price * stock_quantity AS total_value FROM Products ORDER BY total_value DESC;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);",Calculates the total value for each product (price multiplied by stock quantity) and sorts the results by this calculated value in descending order.
"Retrieve all employees except the first 5, sorted by their employee ID.","SELECT employee_id, first_name, last_name FROM Employees ORDER BY employee_id ASC LIMIT -1 OFFSET 5;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER);","Selects all employees, skips the first 5 records when ordered by employee ID, and returns the rest. `LIMIT -1` in SQLite means no limit."
"Get the second page of products, with 10 products per page, sorted by product name.","SELECT product_name, price FROM Products ORDER BY product_name ASC LIMIT 10 OFFSET 10;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);","Retrieves 10 product names and prices, representing the second page of results, after sorting all products by name in ascending order."
"List all users, with those who have a last_login_date sorted newest first, and those without a date appearing last.","SELECT user_id, username, last_login_date FROM Users ORDER BY last_login_date DESC;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, email TEXT, last_login_date TEXT);","Selects user IDs, usernames, and last login dates, ordering them by last login date in descending order. Users with a NULL last login date will appear last (SQLite's default for DESC)."
"For department 'Sales', list employees who joined after 2020, ordered by their hire date (oldest first) and then by salary (highest first).","SELECT e.first_name, e.last_name, e.hire_date, e.salary FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE d.department_name = 'Sales' AND e.hire_date >= '2020-01-01' ORDER BY e.hire_date ASC, e.salary DESC;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","Joins Employees and Departments tables, filters for employees in the 'Sales' department hired after 2020-01-01, then sorts by hire date ascending and salary descending."
"For each department, find the employee with the highest salary.","SELECT e.first_name, e.last_name, e.salary, d.department_name FROM Employees e JOIN Departments d ON e.department_id = d.department_id WHERE e.employee_id IN (SELECT employee_id FROM Employees AS emp2 WHERE emp2.department_id = e.department_id ORDER BY salary DESC LIMIT 1);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);",This query identifies the employee with the highest salary within each department by using a correlated subquery that orders employees by salary and limits to one for each department.
Get the 3 cheapest products.,"SELECT product_name, price FROM Products ORDER BY price ASC LIMIT 3;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);",Retrieves the names and prices of the 3 products with the lowest prices.
"List the 5 events that are happening soonest, excluding events that have already passed.","SELECT event_name, event_date FROM Events WHERE event_date >= DATE('now') ORDER BY julianday(event_date) - julianday('now') ASC LIMIT 5;","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, location TEXT);","Selects the 5 upcoming events that are closest in time, ordered by the difference between their date and the current date."
"Show the usernames ordered by their length, from shortest to longest.",SELECT username FROM Users ORDER BY LENGTH(username) ASC;,"CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, email TEXT, last_login_date TEXT);","Retrieves all usernames, sorted by the length of the username string in ascending order."
"List tasks, prioritizing 'Urgent', then 'High', then 'Medium', then 'Low', then 'Done'.","SELECT task_name, priority FROM Tasks ORDER BY CASE priority WHEN 'Urgent' THEN 1 WHEN 'High' THEN 2 WHEN 'Medium' THEN 3 WHEN 'Low' THEN 4 WHEN 'Done' THEN 5 ELSE 6 END ASC, task_name ASC;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, priority TEXT, due_date TEXT);","Selects task names and their priorities, ordering them by a custom priority hierarchy (Urgent first, then High, etc.), and then by task name for tasks with the same priority."
Find the 3 cities with the most customers.,"SELECT city, COUNT(customer_id) AS customer_count FROM Customers GROUP BY city ORDER BY customer_count DESC LIMIT 3;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT);","Groups customers by city, counts the number of customers in each city, and then returns the top 3 cities with the highest customer counts."
"Display all orders starting from the 101st order, ordered by order ID.","SELECT order_id, order_date, total_amount FROM Orders ORDER BY order_id ASC LIMIT -1 OFFSET 100;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Selects all orders, skipping the first 100 records when ordered by order ID, effectively starting from the 101st order."
"List users, showing active users first, then inactive ones, both sorted by username.","SELECT user_id, username, is_active FROM Users ORDER BY is_active DESC, username ASC;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, email TEXT, is_active BOOLEAN);","Selects users, ordering them so that active users (where `is_active` is 1) appear before inactive users (where `is_active` is 0), and then alphabetically by username."
Get the 5 most recently created unique product categories.,SELECT DISTINCT category_name FROM Products ORDER BY created_date DESC LIMIT 5;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_name TEXT, created_date TEXT);","Selects the 5 most recent unique product categories, ordered by their creation date in descending order."
"Get the 2nd page of customers who have placed at least 5 orders, with 5 customers per page, ordered by their total order count.","SELECT c.customer_name, COUNT(o.order_id) AS order_count FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING order_count >= 5 ORDER BY order_count DESC LIMIT 5 OFFSET 5;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","Groups customers by their orders, filters for those with 5 or more orders, then retrieves the 5 customers from the second page (skipping the first 5) who have the most orders."
Get the names of the 10 oldest employees.,"SELECT first_name, last_name FROM Employees ORDER BY hire_date ASC LIMIT 10;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, hire_date TEXT, salary REAL, department_id INTEGER);","Selects the first names and last names of the 10 employees who were hired earliest, even though `hire_date` is not selected."
"List the 4th, 5th, and 6th events occurring in 'New York' after 2023, sorted by event date.","SELECT event_name, event_date, location FROM Events WHERE location = 'New York' AND event_date >= '2023-01-01' ORDER BY event_date ASC LIMIT 3 OFFSET 3;","CREATE TABLE Events (event_id INTEGER PRIMARY KEY, event_name TEXT, event_date TEXT, location TEXT);","Filters events to those in 'New York' after 2023, then selects the 3 events (4th, 5th, 6th) from the sorted list."
"List all countries, sorted alphabetically case-insensitively.",SELECT DISTINCT country FROM Customers ORDER BY country COLLATE NOCASE ASC;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT, country TEXT);",Selects all unique country names and sorts them alphabetically without regard to case.
List the 5 users who have been registered the longest.,"SELECT user_id, username, registration_date FROM Users ORDER BY julianday(registration_date) ASC LIMIT 5;","CREATE TABLE Users (user_id INTEGER PRIMARY KEY, username TEXT, email TEXT, registration_date TEXT);","Retrieves the 5 users with the earliest registration dates, by converting the date strings to Julian day numbers for accurate sorting."
"Get no products at all, but prepare the query to retrieve products.","SELECT product_name, price FROM Products LIMIT 0;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);","This query is syntactically correct but will return an empty result set, as it limits the output to zero rows."
Find the 3rd highest salary among all employees.,SELECT salary FROM Employees ORDER BY salary DESC LIMIT 1 OFFSET 2;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, salary REAL, department_id INTEGER);",Retrieves the single salary value that is the 3rd highest among all employee salaries.
"Get the third page of product reviews (10 reviews per page), showing the most helpful reviews first, then by review date.","SELECT pr.review_id, pr.rating, pr.review_text, p.product_name FROM ProductReviews pr JOIN Products p ON pr.product_id = p.product_id ORDER BY pr.helpful_votes DESC, pr.review_date DESC LIMIT 10 OFFSET 20;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE ProductReviews (review_id INTEGER PRIMARY KEY, product_id INTEGER, rating INTEGER, review_text TEXT, review_date TEXT, helpful_votes INTEGER);","Joins product reviews with product names, orders them by the number of helpful votes (descending) and then by review date (descending), and retrieves the 10 reviews corresponding to the third page of results."
Find the names and cities of customers located in 'New York' or 'Los Angeles'.,"SELECT first_name, last_name, city FROM Customers WHERE city IN ('New York', 'Los Angeles');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT);","This query retrieves the first name, last name, and city for all customers whose city is either 'New York' or 'Los Angeles' using the IN operator."
List all products that belong to the 'Electronics' or 'Books' categories.,"SELECT product_name, category FROM Products WHERE category IN ('Electronics', 'Books');","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","The query selects the product name and category for products whose category is 'Electronics' or 'Books', utilizing the IN operator."
"Show the titles of books published in the years 2000, 2010, or 2020.","SELECT title FROM Books WHERE publication_year IN (2000, 2010, 2020);","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, ISBN TEXT, price REAL);","This query fetches the titles of books that were published specifically in the years 2000, 2010, or 2020, using the IN operator."
Find employees who are not in departments with IDs 101 and 103.,"SELECT first_name, last_name, department_id FROM Employees WHERE department_id NOT IN (101, 103);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER);","This query retrieves the names and department IDs of employees who are not assigned to departments with IDs 101 or 103, using the NOT IN operator."
List customers who have not placed any orders.,"SELECT C.first_name, C.last_name FROM Customers C WHERE C.customer_id NOT IN (SELECT O.customer_id FROM Orders O);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects customers whose IDs do not appear in the list of customer IDs from the Orders table, effectively finding customers with no orders using NOT IN with a subquery."
Retrieve the names of departments that have at least one employee.,SELECT D.department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER);","This query selects department names if there exists at least one employee record associated with that department, using a correlated subquery with EXISTS."
Find authors who have published at least one book.,"SELECT A.first_name, A.last_name FROM Authors A WHERE EXISTS (SELECT 1 FROM Books B WHERE B.author_id = A.author_id);","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, ISBN TEXT, price REAL);","This query retrieves the first and last names of authors for whom there exists at least one book record in the Books table, using a correlated subquery with EXISTS."
List customers who have placed at least one order with a total amount greater than 500.,"SELECT C.first_name, C.last_name FROM Customers C WHERE EXISTS (SELECT 1 FROM Orders O WHERE O.customer_id = C.customer_id AND O.total_amount > 500);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query selects customers who have at least one order with a total amount exceeding 500, using the EXISTS operator with a correlated subquery."
Identify projects that have no employees assigned to them.,SELECT P.project_name FROM Projects P WHERE NOT EXISTS (SELECT 1 FROM Employee_Projects EP WHERE EP.project_id = P.project_id);,"CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, start_date TEXT, end_date TEXT, budget REAL); CREATE TABLE Employee_Projects (employee_id INTEGER, project_id INTEGER, hours_worked INTEGER, PRIMARY KEY (employee_id, project_id));","This query returns the names of projects for which there are no corresponding entries in the 'Employee_Projects' table, using NOT EXISTS to find projects without assigned employees."
Find products that have never been part of any order.,SELECT P.product_name FROM Products P WHERE NOT EXISTS (SELECT 1 FROM Order_Items OI WHERE OI.product_id = P.product_id);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","This query selects products that have no entries in the Order_Items table, meaning they have never been purchased, by using NOT EXISTS with a correlated subquery."
List employees whose salary is between 50000 and 70000.,"SELECT first_name, last_name, salary FROM Employees WHERE salary BETWEEN 50000 AND 70000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER);","This query retrieves employees whose salary falls inclusively within the range of 50000 and 70000, using the BETWEEN operator."
"Find orders placed between January 1, 2023, and March 31, 2023.","SELECT order_id, order_date, total_amount FROM Orders WHERE order_date BETWEEN '2023-01-01' AND '2023-03-31';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query selects orders placed within the specified date range (inclusive of start and end dates) using the BETWEEN operator for dates.
Show products with a price between 10.00 and 50.00.,"SELECT product_name, price FROM Products WHERE price BETWEEN 10.00 AND 50.00;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query fetches the name and price of products where the price is inclusively between 10.00 and 50.00, using the BETWEEN operator."
Find books published outside the years 2000 to 2010.,"SELECT title, publication_year FROM Books WHERE publication_year NOT BETWEEN 2000 AND 2010;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, ISBN TEXT, price REAL);","This query selects book titles and their publication years for books published before 2000 or after 2010, using the NOT BETWEEN operator."
List customers whose first name starts with 'J'.,"SELECT first_name, last_name FROM Customers WHERE first_name LIKE 'J%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT);","This query retrieves the first and last names of customers where the first name begins with the letter 'J', using the LIKE operator with the '%' wildcard."
Find products whose name contains 'wireless'.,SELECT product_name FROM Products WHERE product_name LIKE '%wireless%';,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects products whose names include the substring 'wireless' anywhere within the name, using the LIKE operator with '%' wildcards on both sides."
Show employee names where the last name ends with 'son'.,"SELECT first_name, last_name FROM Employees WHERE last_name LIKE '%son';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER);","This query fetches the first and last names of employees whose last name finishes with 'son', using the LIKE operator with a '%' wildcard at the beginning."
"Find books with a 4-letter genre, where the second letter is 'o'.","SELECT title, genre FROM Books WHERE genre LIKE '_o__';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, ISBN TEXT, price REAL);","This query selects titles and genres of books where the genre is exactly four letters long and the second letter is 'o', using the LIKE operator with '_' wildcards."
List customers whose email does not end with '.com'.,"SELECT first_name, last_name, email FROM Customers WHERE email NOT LIKE '%.com';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT);","This query retrieves customers whose email addresses do not end with '.com', using the NOT LIKE operator."
Find employees whose first name starts with 'A' but does not end with 'n'.,"SELECT first_name, last_name FROM Employees WHERE first_name LIKE 'A%' AND first_name NOT LIKE '%n';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER);","This query selects employees whose first name starts with 'A' but does not end with 'n', combining LIKE and NOT LIKE operators."
List products whose category is 'Electronics' and price is between 100 and 500.,"SELECT product_name, price, category FROM Products WHERE category = 'Electronics' AND price BETWEEN 100 AND 500;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query retrieves products that are categorized as 'Electronics' and have a price inclusively between 100 and 500, combining an equality check with BETWEEN."
Find orders placed by customers from 'USA' and with a total amount greater than 200.,"SELECT O.order_id, O.total_amount FROM Orders O JOIN Customers C ON O.customer_id = C.customer_id WHERE C.country = 'USA' AND O.total_amount > 200;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",This query joins Orders and Customers to find orders from customers in 'USA' where the total amount exceeds 200.
Retrieve employees who work in departments located in 'New York' or 'London' and have a salary greater than 60000.,"SELECT E.first_name, E.last_name, D.department_name, E.salary FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE D.location IN ('New York', 'London') AND E.salary > 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query joins Employees and Departments to find employees who work in specific locations and earn more than 60000, combining IN with a numerical comparison."
Show all books whose title starts with 'The' and were published by publishers located in 'New York'.,"SELECT B.title, P.publisher_name FROM Books B JOIN Publishers P ON B.publisher_id = P.publisher_id WHERE B.title LIKE 'The%' AND P.city = 'New York';","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, ISBN TEXT, price REAL); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, city TEXT, country TEXT);","This query joins Books and Publishers to find books with titles starting with 'The' that were published by publishers in 'New York', using LIKE and an equality check."
Find customers who have ordered products from 'Electronics' category and are from 'USA'.,"SELECT DISTINCT C.first_name, C.last_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.category = 'Electronics' AND C.country = 'USA';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query joins multiple tables to find unique customers who are from the 'USA' and have placed orders that include products from the 'Electronics' category.
List employees who were hired in 2022 and whose job title contains 'Engineer'.,"SELECT first_name, last_name, hire_date FROM Employees WHERE hire_date BETWEEN '2022-01-01' AND '2022-12-31' AND job_id IN (SELECT job_id FROM Jobs WHERE job_title LIKE '%Engineer%');","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER); CREATE TABLE Jobs (job_id INTEGER PRIMARY KEY, job_title TEXT, min_salary REAL, max_salary REAL);","This query selects employees hired within 2022 and whose job title (fetched from a subquery on the Jobs table) contains 'Engineer', combining BETWEEN, IN, and LIKE."
Find orders placed in Q3 2023 ('2023-07-01' to '2023-09-30') that contain a product with 'Pro' in its name.,"SELECT DISTINCT O.order_id, O.order_date FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE O.order_date BETWEEN '2023-07-01' AND '2023-09-30' AND P.product_name LIKE '%Pro%';","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query finds distinct orders placed in Q3 2023 that include at least one product with 'Pro' in its name, combining BETWEEN with LIKE across joined tables."
Retrieve authors who have written books in both 'Fiction' and 'Science' genres.,"SELECT A.first_name, A.last_name FROM Authors A WHERE EXISTS (SELECT 1 FROM Books B1 WHERE B1.author_id = A.author_id AND B1.genre = 'Fiction') AND EXISTS (SELECT 1 FROM Books B2 WHERE B2.author_id = A.author_id AND B2.genre = 'Science');","CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, country TEXT); CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER, genre TEXT, ISBN TEXT, price REAL);","This query selects authors who have books in both the 'Fiction' and 'Science' genres, using two separate EXISTS clauses with correlated subqueries."
"Find employees whose email address does not start with their first name, and their salary is not between 40000 and 60000.","SELECT first_name, last_name, email, salary FROM Employees WHERE email NOT LIKE first_name || '%' AND salary NOT BETWEEN 40000 AND 60000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, department_id INTEGER);","This query selects employees whose email does not start with their first name (using `||` for concatenation in LIKE) AND whose salary is outside the 40000-60000 range, combining NOT LIKE with NOT BETWEEN."
"List customers who have placed more than 5 orders, and whose city starts with 'S'.","SELECT C.first_name, C.last_name, C.city FROM Customers C WHERE C.customer_id IN (SELECT O.customer_id FROM Orders O GROUP BY O.customer_id HAVING COUNT(O.order_id) > 5) AND C.city LIKE 'S%';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, city TEXT, country TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query uses a subquery with IN to find customers with more than 5 orders, then filters those customers whose city name begins with 'S' using LIKE."
Find the names of employees who earn more than the average salary of all employees.,SELECT name FROM Employees WHERE salary > (SELECT AVG(salary) FROM Employees);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);","Retrieves the names of employees whose salary is greater than the overall average salary of all employees, which is calculated by the subquery."
List all products that have been ordered by customers from the 'Electronics' category.,SELECT product_name FROM Products WHERE product_id IN (SELECT product_id FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id JOIN Customers ON Orders.customer_id = Customers.customer_id WHERE Customers.category = 'Electronics');,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, category TEXT);",Selects products whose IDs are found in the list of product IDs from orders placed by customers categorized as 'Electronics'.
Get the names of departments that have at least one employee earning more than 60000.,SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary > 60000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);",Returns department names for which there exists at least one employee in that department with a salary greater than 60000.
"Find the average salary for each department, but only for departments where the average salary is above 70000.","SELECT department_name, avg_dept_salary FROM (SELECT department_id, AVG(salary) AS avg_dept_salary FROM Employees GROUP BY department_id) AS DeptAvgSalary JOIN Departments ON DeptAvgSalary.department_id = Departments.department_id WHERE avg_dept_salary > 70000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","Calculates the average salary per department as a derived table, then joins it with the Departments table and filters for departments where this average salary exceeds 70000."
List each employee's name along with the name of their department.,"SELECT name, (SELECT department_name FROM Departments D WHERE D.department_id = E.department_id) AS department_name FROM Employees E;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","Retrieves each employee's name and, for each employee, fetches their corresponding department name using a correlated subquery in the SELECT clause."
Show the names of products that have never been ordered.,SELECT product_name FROM Products WHERE product_id NOT IN (SELECT product_id FROM Order_Items);,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);",Selects products whose IDs are not present in the list of product IDs found in any order item.
Find the name of the employee who has the highest salary.,SELECT name FROM Employees WHERE salary = (SELECT MAX(salary) FROM Employees);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);",Retrieves the name of the employee whose salary matches the maximum salary found in the Employees table.
"Get the department names and the count of employees in each department, but only for departments with more than 5 employees.","SELECT D.department_name, EmpCounts.employee_count FROM Departments D JOIN (SELECT department_id, COUNT(employee_id) AS employee_count FROM Employees GROUP BY department_id) AS EmpCounts ON D.department_id = EmpCounts.department_id WHERE EmpCounts.employee_count > 5;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);","Counts employees per department as a derived table, then joins with the Departments table to get names and filters for departments having more than 5 employees."
List employees whose salary is higher than the average salary of their own department.,"SELECT E.name, E.salary, D.department_name FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE E.salary > (SELECT AVG(salary) FROM Employees WHERE department_id = E.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","Selects employees whose salary is greater than the average salary of their respective department, calculated using a correlated subquery in the WHERE clause."
"For each department, show the department name and the number of employees in it.","SELECT department_name, (SELECT COUNT(*) FROM Employees E WHERE E.department_id = D.department_id) AS employee_count FROM Departments D;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);","Retrieves each department's name and, for each department, counts the number of employees belonging to it using a correlated subquery in the SELECT clause."
Find the names of customers who have placed an order in the last 30 days.,"SELECT customer_name FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders WHERE order_date >= DATE('now', '-30 days'));","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",Selects customers whose IDs are found among orders placed within the last 30 days from the current date using a subquery.
"Get the total sales amount for each product for the current year, but only for products with total sales greater than 10000.","SELECT P.product_name, AnnualSales.total_sales FROM Products P JOIN (SELECT product_id, SUM(quantity * price_at_order) AS total_sales FROM Order_Items JOIN Orders ON Order_Items.order_id = Orders.order_id WHERE STRFTIME('%Y', order_date) = STRFTIME('%Y', 'now') GROUP BY product_id) AS AnnualSales ON P.product_id = AnnualSales.product_id WHERE AnnualSales.total_sales > 10000;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_order REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","Calculates the total sales per product for the current year as a derived table, then joins with the Products table and filters for products with total sales exceeding 10000."
List departments that have no employees earning more than 100000.,SELECT department_name FROM Departments D WHERE NOT EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id AND E.salary > 100000);,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);","Retrieves department names for which there is no employee in that department with a salary greater than 100000, using a correlated NOT EXISTS subquery."
"For each customer, show their name and the date of their first order.","SELECT C.customer_name, (SELECT MIN(order_date) FROM Orders O WHERE O.customer_id = C.customer_id) AS first_order_date FROM Customers C;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);",Selects each customer's name and retrieves their earliest order date using a correlated subquery in the SELECT clause.
Find the names of products that were part of orders placed by customers from 'New York' and display the total quantity sold for these products.,"SELECT P.product_name, Sub.total_quantity_sold FROM Products P JOIN (SELECT OI.product_id, SUM(OI.quantity) AS total_quantity_sold FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id JOIN Customers C ON O.customer_id = C.customer_id WHERE C.city = 'New York' GROUP BY OI.product_id) AS Sub ON P.product_id = Sub.product_id;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, city TEXT);","Creates a derived table calculating total quantity sold for products in orders from 'New York' customers, then joins this with the Products table to show product names and their total quantities."
Get the names of employees who work in the department with the highest number of employees.,SELECT name FROM Employees WHERE department_id = (SELECT department_id FROM Employees GROUP BY department_id ORDER BY COUNT(*) DESC LIMIT 1);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);","Selects employees whose department ID matches the ID of the department that has the maximum number of employees, determined by a subquery."
"For each product, list its name and the average quantity sold per order that included this product.","SELECT product_name, (SELECT AVG(quantity) FROM Order_Items OI WHERE OI.product_id = P.product_id) AS avg_quantity_per_order FROM Products P;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","Retrieves each product's name and, for each product, calculates the average quantity sold for that specific product across all its orders using a correlated subquery in the SELECT clause."
"List the customer name, the order ID, and the total value of each order, but only for orders placed in 2023.","SELECT C.customer_name, O.order_id, OrderValue.total_value FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN (SELECT order_id, SUM(quantity * price_at_order) AS total_value FROM Order_Items GROUP BY order_id) AS OrderValue ON O.order_id = OrderValue.order_id WHERE STRFTIME('%Y', O.order_date) = '2023';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_order REAL);","Calculates the total value for each order as a derived table, then joins it with Customers and Orders to display customer name, order ID, and total value for orders placed in 2023."
Find employees whose salary is higher than all salaries in the 'Marketing' department.,SELECT name FROM Employees WHERE salary > ALL (SELECT salary FROM Employees WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Marketing'));,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","Selects employees whose salary is strictly greater than every salary found in the 'Marketing' department, using a nested subquery with the ALL operator."
"Get the names of departments that have at least one employee, and for each such department, show the average salary of its employees, but only for departments where the average salary is above the company-wide average.","SELECT D.department_name, DeptAvg.avg_salary FROM Departments D JOIN (SELECT department_id, AVG(salary) AS avg_salary FROM Employees GROUP BY department_id HAVING COUNT(*) > 0) AS DeptAvg ON D.department_id = DeptAvg.department_id WHERE DeptAvg.avg_salary > (SELECT AVG(salary) FROM Employees);","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);","Calculates average salary per department as a derived table, filtering for departments with employees. Then joins with Departments and filters these results further to include only departments whose average salary is greater than the overall company average."
List the names of customers who have bought products with a price greater than 50.,SELECT customer_name FROM Customers WHERE customer_id IN (SELECT O.customer_id FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE P.price > 50);,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL);","Selects customers whose IDs are found in the list of customer IDs who placed orders that included products with a price greater than 50, using a multi-table subquery."
"For each department, show its name and indicate if it has any employees earning over 80000.","SELECT department_name, CASE WHEN (SELECT COUNT(*) FROM Employees E WHERE E.department_id = D.department_id AND E.salary > 80000) > 0 THEN 'Yes' ELSE 'No' END AS high_earner_dept FROM Departments D;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);",Retrieves each department's name and uses a correlated subquery within a CASE statement to determine if that department has any employees earning over 80000.
Get the names of employees whose salary is in the top 3 of their department.,"SELECT D.department_name, E.name, E.salary FROM Departments D JOIN Employees E ON D.department_id = E.department_id WHERE E.employee_id IN (SELECT employee_id FROM (SELECT employee_id, department_id, salary, ROW_NUMBER() OVER(PARTITION BY department_id ORDER BY salary DESC) AS rn FROM Employees) AS RankedEmployees WHERE rn <= 3);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","Identifies employees with the top 3 salaries within their respective departments using a derived table with a window function (ROW_NUMBER), then retrieves their names, salaries, and department names."
Find all unique department IDs that either have an employee earning more than 100000 or have an average salary below 50000.,SELECT department_id FROM Departments WHERE department_id IN (SELECT department_id FROM Employees WHERE salary > 100000 UNION SELECT department_id FROM Employees GROUP BY department_id HAVING AVG(salary) < 50000);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","Retrieves department IDs that either contain an employee earning over 100000 or have an average departmental salary below 50000, combining these two sets using a UNION within the subquery."
"For each order, list its ID, the customer's name, and the number of products in that order.","SELECT O.order_id, (SELECT customer_name FROM Customers C WHERE C.customer_id = O.customer_id) AS customer_name, (SELECT COUNT(product_id) FROM Order_Items OI WHERE OI.order_id = O.order_id) AS product_count FROM Orders O;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","Selects order ID, customer name (using a correlated subquery), and the count of products in each order (using another correlated subquery)."
Get the names of customers who placed an order with a total value greater than 500 in the current year.,"SELECT C.customer_name FROM Customers C WHERE C.customer_id IN (SELECT O.customer_id FROM Orders O JOIN (SELECT order_id, SUM(quantity * price_at_order) AS total_order_value FROM Order_Items GROUP BY order_id) AS OrderValues ON O.order_id = OrderValues.order_id WHERE OrderValues.total_order_value > 500 AND STRFTIME('%Y', O.order_date) = STRFTIME('%Y', 'now'));","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_order REAL);","Selects customer names whose IDs are found among orders that had a total value over 500 and were placed in the current year, utilizing a derived table for order values within the subquery."
"Find the average quantity of products sold per order, but only considering orders from customers who have placed more than 2 orders in total.","SELECT AVG(OI.quantity) FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id WHERE O.customer_id IN (SELECT customer_id FROM (SELECT customer_id, COUNT(order_id) AS order_count FROM Orders GROUP BY customer_id HAVING order_count > 2) AS FrequentCustomers);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER);","Calculates the average quantity of items in orders, but only for orders placed by customers who are identified as 'frequent' (more than 2 orders) via a nested derived table."
Find departments where the maximum salary is higher than the average salary of the entire company.,SELECT department_name FROM Departments D WHERE EXISTS (SELECT 1 FROM Employees E WHERE E.department_id = D.department_id GROUP BY E.department_id HAVING MAX(E.salary) > (SELECT AVG(salary) FROM Employees));,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL);","Selects departments where the maximum salary within that department is greater than the overall average salary of all employees in the company, using a subquery with aggregation."
Get the names of employees whose salary is in the top 3 of their department.,"SELECT D.department_name, E.name, E.salary FROM Departments D JOIN Employees E ON D.department_id = E.department_id WHERE E.employee_id IN (SELECT employee_id FROM (SELECT employee_id, department_id, salary, ROW_NUMBER() OVER(PARTITION BY department_id ORDER BY salary DESC) AS rn FROM Employees) AS RankedEmployees WHERE rn <= 3);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, name TEXT, department_id INTEGER, salary REAL); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT);","Identifies employees with the top 3 salaries within their respective departments using a derived table with window functions, then retrieves their names, salaries, and department names."
"For each product, show its name, total quantity sold, and the number of distinct customers who bought it, but only if the product's total sales value in 2023 exceeds the average total sales value of all products in 2023.","SELECT P.product_name, ProductSales.total_quantity_sold, (SELECT COUNT(DISTINCT O.customer_id) FROM Orders O JOIN Order_Items OI ON O.order_id = OI.order_id WHERE OI.product_id = P.product_id) AS distinct_customer_count FROM Products P JOIN (SELECT product_id, SUM(quantity) AS total_quantity_sold, SUM(quantity * price_at_order) AS total_sales_value FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id WHERE STRFTIME('%Y', O.order_date) = '2023' GROUP BY product_id) AS ProductSales ON P.product_id = ProductSales.product_id WHERE ProductSales.total_sales_value > (SELECT AVG(total_sales_value) FROM (SELECT SUM(quantity * price_at_order) AS total_sales_value FROM Order_Items OI JOIN Orders O ON OI.order_id = O.order_id WHERE STRFTIME('%Y', O.order_date) = '2023' GROUP BY product_id));","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_at_order REAL);","Retrieves product names, total quantity sold for 2023 (from a derived table), and the count of distinct customers who bought each product (from a correlated subquery). The results are filtered to include only products whose 2023 total sales value exceeds the average 2023 total sales value across all products (calculated by a nested derived table)."
List all employees who do not have a phone number recorded.,"SELECT employee_name, email FROM Employees WHERE phone_number IS NULL;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, email TEXT, phone_number TEXT, department_id INTEGER);","Selects the name and email for employees where the phone_number column is NULL, indicating no phone number is recorded."
Find all products that have a description provided.,SELECT product_name FROM Products WHERE description IS NOT NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, description TEXT, price REAL, stock_quantity INTEGER);",Retrieves the names of products that have a non-NULL value in their 'description' column.
"Get the customer's preferred contact information, prioritizing email, then phone number, otherwise displaying 'No Contact Info'.","SELECT customer_name, COALESCE(email, phone_number, 'No Contact Info') AS preferred_contact FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, phone_number TEXT, address TEXT);","Shows each customer's name and their preferred contact method, which is email if available, otherwise phone_number if available, or 'No Contact Info' if both are NULL."
"Calculate the total amount for each order, treating any NULL total amounts as 0.","SELECT order_id, IFNULL(total_amount, 0) AS calculated_amount FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, shipping_status TEXT);","Selects the order ID and the order's total amount, replacing any NULL total amounts with 0 using IFNULL."
Count the total number of employees who have not been assigned to a manager.,SELECT COUNT(*) FROM Employees WHERE manager_id IS NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, manager_id INTEGER, department_id INTEGER);","Counts all rows in the Employees table where the manager_id column is NULL, indicating an unassigned manager."
"For each product, calculate the effective stock, considering 'on_order_quantity' if 'stock_quantity' is NULL, and defaulting to 0 if both are NULL.","SELECT product_name, COALESCE(stock_quantity, on_order_quantity, 0) AS effective_stock FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, stock_quantity INTEGER, on_order_quantity INTEGER, supplier_id INTEGER);","Retrieves product names and their effective stock, which is the stock_quantity if present, otherwise on_order_quantity if present, otherwise 0."
"Get the task name and its completion date, displaying 'Not Completed' if the completed date is NULL.","SELECT task_name, IFNULL(completed_date, 'Not Completed') AS actual_completion FROM Tasks;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, due_date TEXT, completed_date TEXT, status TEXT);","Selects the task name and its completion date, displaying 'Not Completed' if the completed_date is NULL."
"Find all customers who have placed orders, but where the shipping address for that specific order was not provided.","SELECT C.customer_name, O.order_id FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id WHERE O.shipping_address IS NULL;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, shipping_address TEXT, order_date TEXT);","Joins Customers and Orders, then filters to show customers and orders where the order's shipping_address is NULL."
"Display the full name of an employee, including their middle initial if available, otherwise just first and last name.","SELECT first_name || ' ' || COALESCE(middle_initial || ' ', '') || last_name AS full_name FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, middle_initial TEXT, last_name TEXT, email TEXT);","Concatenates first name, an optional middle initial (if not NULL, adding a space after it), and last name to form a full name. COALESCE handles the potential NULL middle initial."
"Find the average price of products across the inventory, treating any products with no price listed as free (0).","SELECT AVG(adjusted_price) FROM (SELECT IFNULL(price, 0) AS adjusted_price FROM Products);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);","Calculates the average of product prices by first replacing any NULL prices with 0 in a subquery, and then averaging those adjusted values."
List all departments that have at least one employee with an unassigned email address.,SELECT D.department_name FROM Departments D JOIN Employees E ON D.department_id = E.department_id WHERE E.email IS NULL GROUP BY D.department_name HAVING COUNT(E.employee_id) > 0;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, email TEXT, department_id INTEGER);","Joins departments and employees, filters for employees with NULL emails, then groups by department to find those with at least one such employee."
"For each customer, get their most accessible contact number, preferring mobile, then home phone, then work phone, or indicating 'Not Available'.","SELECT customer_name, COALESCE(mobile_phone, home_phone, work_phone, 'Not Available') AS contact_number FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, mobile_phone TEXT, home_phone TEXT, work_phone TEXT, email TEXT);","Selects the customer's name and their contact number, prioritizing mobile, then home, then work phone, or displaying 'Not Available' if all three are NULL."
"Calculate the total commission paid across all sales, treating any unrecorded commissions as 0.","SELECT SUM(IFNULL(commission_amount, 0)) FROM Sales;","CREATE TABLE Sales (sale_id INTEGER PRIMARY KEY, employee_id INTEGER, sale_amount REAL, commission_amount REAL, sale_date TEXT);","Sums the commission amounts from the Sales table, treating any NULL commission amounts as 0 before summing them up."
Find all tasks that have a specific completion date and were completed before their scheduled due date.,SELECT task_name FROM Tasks WHERE completed_date IS NOT NULL AND completed_date < due_date;,"CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, due_date TEXT, completed_date TEXT, assigned_to TEXT);",Retrieves the names of tasks that have a non-NULL completed_date and where the completed_date is earlier than the due_date.
"List orders with their effective delivery date, using the order date as a fallback if the delivery date is not specified.","SELECT order_id, COALESCE(delivery_date, order_date) AS effective_delivery_date FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, delivery_date TEXT, total_amount REAL);","Displays each order's ID and its effective delivery date, which is the actual delivery date if available, otherwise the order date."
"Get the primary responsible party for an employee, preferring the manager's name, then the employee's name, and finally 'Unknown' if both are unavailable.","SELECT IFNULL(manager_name, IFNULL(employee_name, 'Unknown')) AS responsible_party FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, manager_name TEXT, department_id INTEGER);","Selects the responsible party for each employee, preferring the manager's name, then the employee's name, or 'Unknown' if both are NULL, by nesting IFNULL functions."
Find customers who have never placed an order.,SELECT C.customer_name FROM Customers C LEFT JOIN Orders O ON C.customer_id = O.customer_id WHERE O.order_id IS NULL;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","Performs a LEFT JOIN from Customers to Orders and filters for customers where there is no matching order (i.e., order_id from the Orders table is NULL in the joined result)."
"Calculate the average rating per book, ensuring no division by zero if review count is NULL or zero.","SELECT book_id, CAST(rating AS REAL) / COALESCE(NULLIF(review_count, 0), 1) AS avg_rating FROM Books;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, rating INTEGER, review_count INTEGER);","Divides the book's rating by its review count, replacing a NULL or zero review count with 1 (using NULLIF and COALESCE) to avoid division by zero errors."
"List products and their warranty status, displaying 'No Warranty' if the warranty period is NULL.","SELECT product_name, IFNULL(warranty_period || ' months', 'No Warranty') AS warranty_status FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, warranty_period INTEGER);","Selects product names and their warranty status, displaying 'No Warranty' if the warranty_period is NULL, otherwise showing the period in months."
Retrieve the names of employees who have both a recorded email address and a phone number.,SELECT employee_name FROM Employees WHERE email IS NOT NULL AND phone_number IS NOT NULL;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT);",Selects employee names only if both their email and phone_number columns contain non-NULL values.
"Sort employees primarily by their last name, then by their first name, and if both are NULL, sort by their employee ID.","SELECT employee_id, first_name, last_name FROM Employees ORDER BY COALESCE(last_name, first_name, CAST(employee_id AS TEXT));","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT);","Orders employees first by last name (if not NULL), otherwise by first name (if not NULL), otherwise by employee ID (converted to text for consistent type with names)."
"For each department, show the number of employees who are considered active, treating NULL end dates as currently active.","SELECT D.department_name, COUNT(E.employee_id) AS active_employees FROM Departments D JOIN Employees E ON D.department_id = E.department_id WHERE JULIANDAY(IFNULL(E.end_date, '2999-12-31')) > JULIANDAY(DATE('now')) GROUP BY D.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT); CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, start_date TEXT, end_date TEXT);","Counts employees per department where the employee's end_date is either NULL (treated as a very distant future date using IFNULL) or is a future date relative to today, indicating active status."
Count the number of customers who provided an email address versus those who did not.,"SELECT SUM(CASE WHEN email IS NOT NULL THEN 1 ELSE 0 END) AS customers_with_email, SUM(CASE WHEN email IS NULL THEN 1 ELSE 0 END) AS customers_without_email FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, phone_number TEXT);","Counts customers by using a CASE statement within a SUM, categorizing them based on whether their email column is NULL or not."
"Calculate the total revenue from invoices, considering 'prepaid_amount' if 'billed_amount' is NULL, and including only positive amounts.","SELECT SUM(COALESCE(billed_amount, prepaid_amount)) AS total_revenue FROM Invoices WHERE COALESCE(billed_amount, prepaid_amount) > 0;","CREATE TABLE Invoices (invoice_id INTEGER PRIMARY KEY, billed_amount REAL, prepaid_amount REAL, invoice_date TEXT);","Sums the effective amount for each invoice (billed amount or prepaid amount if billed is NULL), only including rows where this effective amount is positive."
"Count the number of products per supplier, categorizing products with no assigned supplier as 'Unassigned'.","SELECT IFNULL(S.supplier_name, 'Unassigned') AS supplier_category, COUNT(P.product_id) AS product_count FROM Products P LEFT JOIN Suppliers S ON P.supplier_id = S.supplier_id GROUP BY supplier_category;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, supplier_id INTEGER); CREATE TABLE Suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name TEXT);","Groups products by supplier name, replacing NULL supplier names (resulting from the LEFT JOIN for products without a supplier) with 'Unassigned', and counts products in each category."
"Find orders placed in the year 2023 that either have no shipping address specified, or have a shipping address but no delivery date recorded.","SELECT order_id, order_date FROM Orders WHERE STRFTIME('%Y', order_date) = '2023' AND (shipping_address IS NULL OR (shipping_address IS NOT NULL AND delivery_date IS NULL));","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, order_date TEXT, shipping_address TEXT, delivery_date TEXT, total_amount REAL);","Filters orders from 2023, selecting those where the shipping_address is NULL, OR those where the shipping_address is NOT NULL but the delivery_date IS NULL."
"Update the `actual_arrival_time` for all flights where it is currently NULL, setting it to their `scheduled_arrival_time`.","UPDATE Flights SET actual_arrival_time = COALESCE(actual_arrival_time, scheduled_arrival_time) WHERE actual_arrival_time IS NULL;","CREATE TABLE Flights (flight_id INTEGER PRIMARY KEY, flight_number TEXT, scheduled_arrival_time TEXT, actual_arrival_time TEXT);","Updates the `actual_arrival_time` column, setting it to the `scheduled_arrival_time` only for rows where `actual_arrival_time` is currently NULL."
"For each task, calculate the days overdue. Treat tasks without a due date as never overdue, and tasks with no completion date as due today.","SELECT task_name, JULIANDAY(IFNULL(completed_date, DATE('now'))) - JULIANDAY(IFNULL(due_date, DATE('now', '+1000 years'))) AS days_overdue FROM Tasks;","CREATE TABLE Tasks (task_id INTEGER PRIMARY KEY, task_name TEXT, due_date TEXT, completed_date TEXT, priority TEXT);","Calculates the days overdue for each task. If `completed_date` is NULL, it uses the current date. If `due_date` is NULL, it uses a very distant future date to ensure the task is not considered overdue."
"List the names of all employees who have a valid email address, defined as non-NULL and containing the '@' symbol.",SELECT employee_name FROM Employees WHERE email IS NOT NULL AND email LIKE '%@%';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, email TEXT, phone_number TEXT);","Selects employee names where the email address is not NULL and also contains the '@' symbol, indicating a potentially valid format."
"For each order item, calculate its final price. Use the `discounted_price` if available, otherwise the `standard_price`, otherwise default to `0`. If `quantity` is NULL, assume 1.","SELECT item_id, COALESCE(discounted_price, standard_price, 0) * COALESCE(quantity, 1) AS final_item_price FROM OrderItems;","CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, standard_price REAL, discounted_price REAL, quantity INTEGER);","Calculates the final price for each order item by using the discounted price, or standard price if discounted is NULL, or 0 if both are NULL, and multiplying it by the quantity (defaulting to 1 if quantity is NULL)."
Find the top 3 highest-paid employees in each department.,"WITH DepartmentSalaries AS (SELECT EmployeeID, Name, DepartmentID, Salary, ROW_NUMBER() OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) as rn FROM Employees) SELECT EmployeeID, Name, DepartmentID, Salary FROM DepartmentSalaries WHERE rn <= 3;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL);","This query uses a CTE named 'DepartmentSalaries' to calculate the rank of each employee's salary within their respective department using ROW_NUMBER(). It then selects employees whose rank is 3 or less, effectively finding the top 3 highest-paid employees per department."
"List customers who have placed more than 5 orders, along with their total order count.","SELECT c.CustomerID, c.Name, o.OrderCount FROM Customers c JOIN (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM Orders GROUP BY CustomerID HAVING COUNT(OrderID) > 5) AS o ON c.CustomerID = o.CustomerID;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query uses a derived table to first identify customers who have placed more than 5 orders and count their orders. It then joins this result back to the 'Customers' table to retrieve customer details for the identified customers.
"Calculate the average order value for each customer, and then find customers whose average order value is above the overall average order value across all customers.","WITH CustomerAverage AS (SELECT CustomerID, AVG(TotalAmount) AS AvgOrderValue FROM Orders GROUP BY CustomerID), OverallAverage AS (SELECT AVG(TotalAmount) AS GlobalAvg FROM Orders) SELECT ca.CustomerID, ca.AvgOrderValue FROM CustomerAverage ca, OverallAverage oa WHERE ca.AvgOrderValue > oa.GlobalAvg;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query uses two CTEs. 'CustomerAverage' calculates the average order value for each customer. 'OverallAverage' calculates the average order value across all orders. Finally, it selects customers whose individual average order value is greater than the overall average."
Find all products that have never been ordered.,"SELECT p.ProductID, p.ProductName FROM Products p LEFT JOIN (SELECT DISTINCT ProductID FROM OrderItems) AS oi ON p.ProductID = oi.ProductID WHERE oi.ProductID IS NULL;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query uses a derived table to get all distinct product IDs from 'OrderItems'. It then performs a LEFT JOIN with the 'Products' table and filters for products where the ProductID from the derived table is NULL, indicating they were never ordered."
"For each department, find the employee with the highest salary and the average salary of that department.","WITH DepartmentAvgSal AS (SELECT DepartmentID, AVG(Salary) AS AvgDeptSalary FROM Employees GROUP BY DepartmentID), MaxSalaryEmployee AS (SELECT DepartmentID, EmployeeID, Name, Salary, ROW_NUMBER() OVER (PARTITION BY DepartmentID ORDER BY Salary DESC) as rn FROM Employees) SELECT m.DepartmentID, m.Name AS HighestPaidEmployee, m.Salary AS HighestSalary, d.AvgDeptSalary FROM MaxSalaryEmployee m JOIN DepartmentAvgSal d ON m.DepartmentID = d.DepartmentID WHERE m.rn = 1;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL);",This query uses two CTEs: one to calculate the average salary per department and another to rank employees by salary within each department. It then joins these CTEs to display the highest-paid employee and the department's average salary.
List all customers who registered in 2023 and placed at least one order.,"SELECT c.CustomerID, c.Name FROM Customers c JOIN (SELECT CustomerID FROM Orders WHERE strftime('%Y', OrderDate) = '2023' GROUP BY CustomerID HAVING COUNT(OrderID) >= 1) AS orders_2023 ON c.CustomerID = orders_2023.CustomerID WHERE strftime('%Y', c.RegistrationDate) = '2023';","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT, Email TEXT, RegistrationDate TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query first creates a derived table of customers who placed orders in 2023. It then joins this with the 'Customers' table, filtering for customers whose registration date is also in 2023."
"Calculate the total sales amount for each product category, and then find the categories with total sales exceeding $1000.","WITH CategorySales AS (SELECT p.CategoryID, SUM(oi.Quantity * p.Price) AS TotalCategorySales FROM OrderItems oi JOIN Products p ON oi.ProductID = p.ProductID GROUP BY p.CategoryID) SELECT cs.CategoryID, cs.TotalCategorySales FROM CategorySales cs WHERE cs.TotalCategorySales > 1000;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);",This query uses a CTE 'CategorySales' to calculate the total sales for each product category. It then filters these results to show only categories where total sales exceed $1000.
"Find the average quantity of items per order, but only for orders placed in the last 90 days.","SELECT AVG(OrderItemsCount) AS AvgItemsPerRecentOrder FROM (SELECT OrderID, COUNT(OrderItemID) AS OrderItemsCount FROM OrderItems WHERE OrderID IN (SELECT OrderID FROM Orders WHERE OrderDate >= DATE('now', '-90 days')) GROUP BY OrderID);","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query uses a subquery to first identify orders placed in the last 90 days. A derived table then counts the number of items for each of these recent orders, and finally, the average of these counts is calculated."
List employees who work on more than one project.,"SELECT e.EmployeeID, e.Name FROM Employees e JOIN (SELECT EmployeeID FROM ProjectAssignments GROUP BY EmployeeID HAVING COUNT(ProjectID) > 1) AS multi_project_employees ON e.EmployeeID = multi_project_employees.EmployeeID;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER); CREATE TABLE ProjectAssignments (AssignmentID INTEGER PRIMARY KEY, ProjectID INTEGER, EmployeeID INTEGER);",This query uses a derived table to find employees who have more than one project assignment. It then joins this result with the 'Employees' table to retrieve the names of those employees.
"Get the latest order date for each customer, and the total amount of that latest order.","WITH LatestOrders AS (SELECT OrderID, CustomerID, OrderDate, TotalAmount, ROW_NUMBER() OVER (PARTITION BY CustomerID ORDER BY OrderDate DESC, OrderID DESC) as rn FROM Orders) SELECT CustomerID, OrderDate, TotalAmount FROM LatestOrders WHERE rn = 1;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query uses a CTE to rank orders for each customer by their date in descending order. It then selects only the first ranked order for each customer, effectively getting their latest order details."
Find departments where the average employee salary is greater than the overall average salary of all employees.,"WITH DepartmentAvg AS (SELECT DepartmentID, AVG(Salary) AS AvgSalary FROM Employees GROUP BY DepartmentID), OverallAvg AS (SELECT AVG(Salary) AS GlobalAvg FROM Employees) SELECT d.DepartmentID, da.AvgSalary FROM DepartmentAvg da JOIN Departments d ON da.DepartmentID = d.DepartmentID, OverallAvg oa WHERE da.AvgSalary > oa.GlobalAvg;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT);",This query uses two CTEs: one for department average salaries and another for the overall average salary. It then joins these with the 'Departments' table to list departments whose average salary exceeds the company-wide average.
List products whose unit price is higher than the average unit price of products in their respective categories.,"SELECT p.ProductName, p.Price, c.CategoryName FROM Products p JOIN (SELECT CategoryID, AVG(Price) AS AvgCategoryPrice FROM Products GROUP BY CategoryID) AS ca ON p.CategoryID = ca.CategoryID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE p.Price > ca.AvgCategoryPrice;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);",This query uses a derived table to calculate the average price for each product category. It then joins this with the 'Products' and 'Categories' tables to find products whose individual price is greater than their category's average price.
Identify sales representatives who have not made any sales in the last month.,"SELECT r.RepID, r.RepName FROM SalesReps r LEFT JOIN (SELECT DISTINCT RepID FROM Sales WHERE SaleDate >= DATE('now', '-1 month')) AS recent_sales ON r.RepID = recent_sales.RepID WHERE recent_sales.RepID IS NULL;","CREATE TABLE SalesReps (RepID INTEGER PRIMARY KEY, RepName TEXT); CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, RepID INTEGER, SaleDate TEXT, Amount REAL);","This query uses a derived table to find sales representatives who have made sales in the last month. It then performs a LEFT JOIN with the 'SalesReps' table and filters for reps who do not appear in the recent sales derived table, indicating no recent sales."
"For each customer, calculate their total spending, and then classify them into 'High Spender' (>1000), 'Medium Spender' (100-1000), or 'Low Spender' (<100).","WITH CustomerSpending AS (SELECT CustomerID, SUM(TotalAmount) AS TotalSpent FROM Orders GROUP BY CustomerID) SELECT cs.CustomerID, cs.TotalSpent, CASE WHEN cs.TotalSpent > 1000 THEN 'High Spender' WHEN cs.TotalSpent >= 100 THEN 'Medium Spender' ELSE 'Low Spender' END AS SpenderCategory FROM CustomerSpending cs;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query uses a CTE 'CustomerSpending' to calculate the total amount spent by each customer. It then uses a CASE statement to categorize each customer based on their total spending.
"Find departments where no employee earns less than $30,000.","SELECT d.DepartmentID, d.DepartmentName FROM Departments d LEFT JOIN (SELECT DISTINCT DepartmentID FROM Employees WHERE Salary < 30000) AS low_salary_depts ON d.DepartmentID = low_salary_depts.DepartmentID WHERE low_salary_depts.DepartmentID IS NULL;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL); CREATE TABLE Departments (DepartmentID INTEGER PRIMARY KEY, DepartmentName TEXT);","This query uses a derived table to identify departments that have at least one employee earning less than $30,000. It then performs a LEFT JOIN and filters out those departments, leaving only departments where all employees earn $30,000 or more."
Get the top 5 products by total quantity sold.,"SELECT p.ProductID, p.ProductName, SUM(oi.Quantity) AS TotalQuantitySold FROM OrderItems oi JOIN Products p ON oi.ProductID = p.ProductID GROUP BY p.ProductID, p.ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER);","This query groups order items by product, sums the quantity sold for each product, and then orders them in descending order of total quantity sold, limiting the result to the top 5. While not strictly a CTE/derived table, this is a simple aggregation and a good contrast."
Show products that have been part of orders with a total value greater than $500.,"SELECT DISTINCT p.ProductID, p.ProductName FROM Products p JOIN OrderItems oi ON p.ProductID = oi.ProductID JOIN (SELECT OrderID FROM Orders WHERE TotalAmount > 500) AS high_value_orders ON oi.OrderID = high_value_orders.OrderID;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, Price REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);",This query first creates a derived table of 'OrderID's from orders with a total value over $500. It then joins this with 'OrderItems' and 'Products' to find unique products associated with these high-value orders.
"For each employee, show their salary and the difference from their department's average salary.","WITH DepartmentAvgSalaries AS (SELECT DepartmentID, AVG(Salary) AS AvgDeptSalary FROM Employees GROUP BY DepartmentID) SELECT e.EmployeeID, e.Name, e.Salary, (e.Salary - das.AvgDeptSalary) AS SalaryDifferenceFromDeptAvg FROM Employees e JOIN DepartmentAvgSalaries das ON e.DepartmentID = das.DepartmentID;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL);",This query uses a CTE 'DepartmentAvgSalaries' to calculate the average salary for each department. It then joins this CTE back to the 'Employees' table to calculate the difference between each employee's salary and their department's average.
Get the total number of orders and distinct customers for each month in 2023.,"SELECT strftime('%Y-%m', OrderDate) AS OrderMonth, COUNT(OrderID) AS TotalOrders, COUNT(DISTINCT CustomerID) AS DistinctCustomers FROM Orders WHERE strftime('%Y', OrderDate) = '2023' GROUP BY OrderMonth ORDER BY OrderMonth;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query groups orders by month for the year 2023, then counts the total orders and distinct customers within each month. This is a basic aggregate query, useful for comparison with CTE/derived table applications."
Find customers who placed orders on consecutive days.,"WITH CustomerOrderDates AS (SELECT CustomerID, OrderDate FROM Orders GROUP BY CustomerID, OrderDate), LaggedOrderDates AS (SELECT CustomerID, OrderDate, LAG(OrderDate, 1, OrderDate) OVER (PARTITION BY CustomerID ORDER BY OrderDate) AS PrevOrderDate FROM CustomerOrderDates) SELECT DISTINCT CustomerID FROM LaggedOrderDates WHERE julianday(OrderDate) - julianday(PrevOrderDate) = 1;","CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER, OrderDate TEXT, TotalAmount REAL);","This query uses two CTEs. 'CustomerOrderDates' gets unique order dates per customer. 'LaggedOrderDates' uses the LAG window function to get the previous order date for each customer. Finally, it identifies customers where the difference between consecutive order dates is exactly one day."
"For each product, show its name and the number of distinct customers who bought it.","SELECT p.ProductName, NumberOfCustomers FROM Products p JOIN (SELECT ProductID, COUNT(DISTINCT CustomerID) AS NumberOfCustomers FROM OrderItems oi JOIN Orders o ON oi.OrderID = o.OrderID GROUP BY ProductID) AS product_customer_counts ON p.ProductID = product_customer_counts.ProductID;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER);",This query uses a derived table to count the number of distinct customers for each product by joining 'OrderItems' and 'Orders'. It then joins this result with the 'Products' table to display the product name alongside the customer count.
"List all employees who have a salary higher than at least one employee in their own department, but lower than the highest salary in a different department.","WITH DeptMaxSalaries AS (SELECT DepartmentID, MAX(Salary) AS MaxDeptSalary FROM Employees GROUP BY DepartmentID) SELECT e.EmployeeID, e.Name, e.Salary, e.DepartmentID FROM Employees e JOIN DeptMaxSalaries dms_self ON e.DepartmentID = dms_self.DepartmentID JOIN DeptMaxSalaries dms_other ON e.DepartmentID != dms_other.DepartmentID WHERE e.Salary < dms_self.MaxDeptSalary AND e.Salary < dms_other.MaxDeptSalary ORDER BY e.DepartmentID, e.Salary DESC;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL);","This query uses a CTE to get the maximum salary for each department. It then self-joins 'Employees' with this CTE twice: once for its own department's max salary, and once for a different department's max salary, applying the specified conditions."
Identify projects that have employees from more than two different departments assigned to them.,"SELECT p.ProjectID, p.ProjectName FROM Projects p JOIN (SELECT ProjectID, COUNT(DISTINCT e.DepartmentID) AS NumDepartments FROM ProjectAssignments pa JOIN Employees e ON pa.EmployeeID = e.EmployeeID GROUP BY ProjectID HAVING COUNT(DISTINCT e.DepartmentID) > 2) AS multi_dept_projects ON p.ProjectID = multi_dept_projects.ProjectID;","CREATE TABLE Projects (ProjectID INTEGER PRIMARY KEY, ProjectName TEXT); CREATE TABLE ProjectAssignments (AssignmentID INTEGER PRIMARY KEY, ProjectID INTEGER, EmployeeID INTEGER); CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER);",This query uses a derived table to count the number of distinct departments assigned to each project. It then filters for projects with more than two distinct departments and joins this result with the 'Projects' table to show project names.
Get the running total of sales for each day.,"WITH DailySales AS (SELECT strftime('%Y-%m-%d', SaleDate) AS SaleDay, SUM(Amount) AS DailyTotal FROM Sales GROUP BY SaleDay) SELECT SaleDay, DailyTotal, SUM(DailyTotal) OVER (ORDER BY SaleDay) AS RunningTotal FROM DailySales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, SaleDate TEXT, Amount REAL);",This query uses a CTE 'DailySales' to aggregate total sales per day. It then calculates a running total of these daily sales using a window function ordered by the sale date.
Find customers who have ordered products from at least 3 different categories.,"SELECT c.CustomerID, c.Name FROM Customers c JOIN (SELECT o.CustomerID FROM Orders o JOIN OrderItems oi ON o.OrderID = oi.OrderID JOIN Products p ON oi.ProductID = p.ProductID GROUP BY o.CustomerID HAVING COUNT(DISTINCT p.CategoryID) >= 3) AS multi_category_customers ON c.CustomerID = multi_category_customers.CustomerID;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER);",This query uses a derived table to count the number of distinct product categories ordered by each customer. It then filters for customers who have ordered from 3 or more categories and joins with the 'Customers' table.
"For each employee, list their name, salary, and the average salary of their department, but only for departments with an average salary over $70,000.","WITH DeptAvgSalaries AS (SELECT DepartmentID, AVG(Salary) AS AvgSalary FROM Employees GROUP BY DepartmentID HAVING AVG(Salary) > 70000) SELECT e.Name, e.Salary, das.AvgSalary AS DepartmentAvgSalary FROM Employees e JOIN DeptAvgSalaries das ON e.DepartmentID = das.DepartmentID;","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, DepartmentID INTEGER, Salary REAL);","This query uses a CTE 'DeptAvgSalaries' to calculate average salaries for departments, filtering only those with an average over $70,000. It then joins back to 'Employees' to show individual employee details alongside their department's qualifying average salary."
Retrieve the names of products that were part of the largest single order (by total amount).,"WITH MaxOrder AS (SELECT OrderID, MAX(TotalAmount) AS MaxAmt FROM Orders) SELECT DISTINCT p.ProductName FROM Products p JOIN OrderItems oi ON p.ProductID = oi.ProductID JOIN Orders o ON oi.OrderID = o.OrderID JOIN MaxOrder mo ON o.OrderID = mo.OrderID AND o.TotalAmount = mo.MaxAmt;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, TotalAmount REAL);","This query uses a CTE to find the maximum total amount among all orders. It then joins 'Products', 'OrderItems', and 'Orders' with this CTE to identify and list products that belong to the order(s) with that maximum total amount."
"Calculate the total number of items sold per product, showing only products where the total quantity sold is above the overall average quantity sold per product.","WITH ProductQuantities AS (SELECT ProductID, SUM(Quantity) AS TotalQuantity FROM OrderItems GROUP BY ProductID), AverageProductQuantity AS (SELECT AVG(TotalQuantity) AS OverallAvgQty FROM ProductQuantities) SELECT p.ProductName, pq.TotalQuantity FROM ProductQuantities pq JOIN Products p ON pq.ProductID = p.ProductID, AverageProductQuantity apq WHERE pq.TotalQuantity > apq.OverallAvgQty;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, ProductID INTEGER, Quantity INTEGER);","This query uses two CTEs: 'ProductQuantities' to sum quantities for each product, and 'AverageProductQuantity' to calculate the average of these sums. It then selects products whose total quantity sold exceeds this overall average."
Find customers who have placed orders in both the 'Electronics' and 'Books' categories.,"WITH ElectronicsCustomers AS (SELECT DISTINCT o.CustomerID FROM Orders o JOIN OrderItems oi ON o.OrderID = oi.OrderID JOIN Products p ON oi.ProductID = p.ProductID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Electronics'), BooksCustomers AS (SELECT DISTINCT o.CustomerID FROM Orders o JOIN OrderItems oi ON o.OrderID = oi.OrderID JOIN Products p ON oi.ProductID = p.ProductID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE c.CategoryName = 'Books') SELECT c.CustomerID, c.Name FROM Customers c JOIN ElectronicsCustomers ec ON c.CustomerID = ec.CustomerID JOIN BooksCustomers bc ON c.CustomerID = bc.CustomerID;","CREATE TABLE Customers (CustomerID INTEGER PRIMARY KEY, Name TEXT); CREATE TABLE Orders (OrderID INTEGER PRIMARY KEY, CustomerID INTEGER); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, ProductID INTEGER); CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, CategoryID INTEGER); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);",This query uses two CTEs to find distinct customers who ordered from 'Electronics' and 'Books' categories separately. It then joins the 'Customers' table with both CTEs to find customers present in both sets.
Identify sales regions where the total sales amount is less than the total sales amount of the region with the highest sales.,"WITH RegionSales AS (SELECT r.RegionName, SUM(s.Amount) AS TotalSales FROM Sales s JOIN Stores st ON s.StoreID = st.StoreID JOIN Regions r ON st.RegionID = r.RegionID GROUP BY r.RegionName), MaxRegionSales AS (SELECT MAX(TotalSales) AS MaxSales FROM RegionSales) SELECT rs.RegionName, rs.TotalSales FROM RegionSales rs, MaxRegionSales mrs WHERE rs.TotalSales < mrs.MaxSales;","CREATE TABLE Sales (SaleID INTEGER PRIMARY KEY, StoreID INTEGER, Amount REAL); CREATE TABLE Stores (StoreID INTEGER PRIMARY KEY, RegionID INTEGER); CREATE TABLE Regions (RegionID INTEGER PRIMARY KEY, RegionName TEXT);","This query uses two CTEs: 'RegionSales' calculates total sales per region, and 'MaxRegionSales' finds the maximum sales among all regions. It then selects regions whose total sales are less than this overall maximum."
Find employees who joined in the same year as the CEO.,"WITH CeoHireYear AS (SELECT strftime('%Y', HireDate) AS HireYear FROM Employees WHERE EmployeeID = (SELECT EmployeeID FROM Employees WHERE Position = 'CEO')), EmployeesByYear AS (SELECT EmployeeID, Name, strftime('%Y', HireDate) AS HireYear FROM Employees) SELECT eby.EmployeeID, eby.Name FROM EmployeesByYear eby, CeoHireYear chy WHERE eby.HireYear = chy.HireYear AND eby.EmployeeID != (SELECT EmployeeID FROM Employees WHERE Position = 'CEO');","CREATE TABLE Employees (EmployeeID INTEGER PRIMARY KEY, Name TEXT, HireDate TEXT, Position TEXT);","This query uses a CTE 'CeoHireYear' to determine the CEO's hiring year. Another CTE 'EmployeesByYear' extracts the hiring year for all employees. Finally, it selects employees whose hiring year matches the CEO's, excluding the CEO themselves."
Get the percentage of total sales contributed by each product category.,"WITH CategorySales AS (SELECT p.CategoryID, SUM(oi.Quantity * p.Price) AS CategoryTotalSales FROM OrderItems oi JOIN Products p ON oi.ProductID = p.ProductID GROUP BY p.CategoryID), OverallSales AS (SELECT SUM(CategoryTotalSales) AS GrandTotalSales FROM CategorySales) SELECT c.CategoryName, (cs.CategoryTotalSales * 100.0 / os.GrandTotalSales) AS PercentageOfTotalSales FROM CategorySales cs JOIN Categories c ON cs.CategoryID = c.CategoryID, OverallSales os;","CREATE TABLE Products (ProductID INTEGER PRIMARY KEY, ProductName TEXT, CategoryID INTEGER, Price REAL); CREATE TABLE OrderItems (OrderItemID INTEGER PRIMARY KEY, OrderID INTEGER, ProductID INTEGER, Quantity INTEGER); CREATE TABLE Categories (CategoryID INTEGER PRIMARY KEY, CategoryName TEXT);","This query uses two CTEs: 'CategorySales' calculates total sales per category, and 'OverallSales' sums these to get a grand total. It then calculates the percentage contribution of each category by dividing its total sales by the grand total."
"List employee names and their salary bands (Low, Medium, High).","SELECT name, CASE WHEN salary < 50000 THEN 'Low' WHEN salary BETWEEN 50000 AND 80000 THEN 'Medium' ELSE 'High' END AS SalaryBand FROM Employees;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary INTEGER, department_id INTEGER);",Categorizes employees into salary bands based on their salary amount.
"Get order IDs, their total amounts, and a descriptive status.","SELECT order_id, total_amount, CASE status WHEN 'pending' THEN 'Waiting for processing' WHEN 'shipped' THEN 'On its way' WHEN 'delivered' THEN 'Successfully delivered' WHEN 'cancelled' THEN 'Order has been cancelled' ELSE 'Unknown Status' END AS StatusDescription FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Provides a more verbose description for each order's status.
"Show product names, their current stock quantity, and a stock level indicator.","SELECT product_name, stock_quantity, CASE WHEN stock_quantity = 0 THEN 'Out of Stock' WHEN stock_quantity < 10 THEN 'Low Stock' WHEN stock_quantity >= 100 THEN 'High Stock' ELSE 'In Stock' END AS StockLevel FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Assigns a stock level indicator (Out of Stock, Low Stock, In Stock, High Stock) based on the current stock quantity."
"Count the number of customers in each region, categorizing regions into 'North', 'South', 'East', 'West', and 'Other'.","SELECT CASE WHEN region IN ('New York', 'Boston', 'Philadelphia') THEN 'North' WHEN region IN ('Miami', 'Atlanta', 'Orlando') THEN 'South' WHEN region IN ('Chicago', 'Detroit', 'Cleveland') THEN 'East' WHEN region IN ('Los Angeles', 'San Francisco', 'Seattle') THEN 'West' ELSE 'Other' END AS RegionGroup, COUNT(customer_id) AS NumberOfCustomers FROM Customers GROUP BY RegionGroup;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, region TEXT, registration_date TEXT);",Groups customers into broader regional categories and counts the number of customers in each group.
"List all projects, prioritizing 'in_progress', then 'not_started', then 'on_hold', then 'completed', ordered by start date within each group.","SELECT project_name, status, start_date FROM Projects ORDER BY CASE status WHEN 'in_progress' THEN 1 WHEN 'not_started' THEN 2 WHEN 'on_hold' THEN 3 WHEN 'completed' THEN 4 ELSE 99 END, start_date;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, status TEXT, start_date TEXT, end_date TEXT);","Orders projects by a custom priority of their status, and then by their start date for projects with the same status priority."
Update the status of employees who have been with the company for more than 5 years to 'Veteran' if they are currently 'Active'.,UPDATE Employees SET status = CASE WHEN (julianday('now') - julianday(hire_date)) / 365.25 > 5 AND status = 'Active' THEN 'Veteran' ELSE status END;,"CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary INTEGER, hire_date TEXT, status TEXT);","Updates the status of employees who meet specific tenure (more than 5 years) and current status ('Active') criteria to 'Veteran', leaving others unchanged."
"Show product names and their categories, using 'Uncategorized' if the category is missing or empty.","SELECT product_name, CASE WHEN category IS NULL OR category = '' THEN 'Uncategorized' ELSE category END AS DisplayCategory FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL);",Replaces missing or empty product categories with 'Uncategorized' for display purposes.
Calculate the total amount for 'deposit' transactions and 'withdrawal' transactions separately for each account.,"SELECT account_id, SUM(CASE WHEN transaction_type = 'deposit' THEN amount ELSE 0 END) AS TotalDeposits, SUM(CASE WHEN transaction_type = 'withdrawal' THEN amount ELSE 0 END) AS TotalWithdrawals FROM Transactions GROUP BY account_id;","CREATE TABLE Transactions (transaction_id INTEGER PRIMARY KEY, account_id INTEGER, transaction_type TEXT, amount REAL, transaction_date TEXT);",Calculates the sum of deposits and withdrawals for each account using conditional aggregation in a single query.
List movie titles and a full description of their rating.,"SELECT title, CASE rating WHEN 'G' THEN 'General Audiences' WHEN 'PG' THEN 'Parental Guidance Suggested' WHEN 'PG-13' THEN 'Parents Strongly Cautioned' WHEN 'R' THEN 'Restricted' WHEN 'NC-17' THEN 'No One 17 and Under Admitted' ELSE 'Rating Not Available' END AS RatingDescription FROM Movies;","CREATE TABLE Movies (movie_id INTEGER PRIMARY KEY, title TEXT, genre TEXT, release_year INTEGER, rating TEXT);",Provides a verbose description for each movie's rating.
"Find students who have a GPA above 3.5 and are in 'Computer Science', or any student with a GPA above 3.8.","SELECT student_name, gpa, major FROM Students WHERE CASE WHEN major = 'Computer Science' THEN gpa > 3.5 ELSE gpa > 3.8 END;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT, gpa REAL);","Filters students based on a conditional GPA requirement: a lower GPA threshold is applied if they are a 'Computer Science' major, otherwise a higher threshold applies."
"Calculate the bonus for employees based on performance rating and salary: 'Excellent' gets 10% of salary, 'Good' gets 5%, 'Fair' gets 2%. If 'Poor', no bonus. If salary over 100k and 'Excellent', gets extra 5%.","SELECT name, salary, performance_rating, CASE performance_rating WHEN 'Excellent' THEN CASE WHEN salary > 100000 THEN salary * 0.15 ELSE salary * 0.10 END WHEN 'Good' THEN salary * 0.05 WHEN 'Fair' THEN salary * 0.02 ELSE 0 END AS BonusAmount FROM Employees;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary INTEGER, performance_rating TEXT);","Calculates bonus amounts for employees based on their performance rating, with an additional bonus tier for high-salary 'Excellent' performers using a nested CASE expression."
"Determine the season an order was placed (Winter, Spring, Summer, Autumn).","SELECT order_id, order_date, CASE WHEN strftime('%m', order_date) BETWEEN '03' AND '05' THEN 'Spring' WHEN strftime('%m', order_date) BETWEEN '06' AND '08' THEN 'Summer' WHEN strftime('%m', order_date) BETWEEN '09' AND '11' THEN 'Autumn' ELSE 'Winter' END AS OrderSeason FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);",Assigns a season to each order based on the month of the order_date using SQLite's strftime function.
Count the number of active and inactive employees.,"SELECT COUNT(CASE WHEN status = 'Active' THEN 1 END) AS ActiveEmployees, COUNT(CASE WHEN status = 'Inactive' THEN 1 END) AS InactiveEmployees FROM Employees;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, status TEXT);",Counts active and inactive employees in a single query by using conditional aggregation.
"For each order, indicate if it contains products from the 'Electronics' category.","SELECT o.order_id, o.order_date, CASE WHEN EXISTS (SELECT 1 FROM OrderItems oi JOIN Products p ON oi.product_id = p.product_id WHERE oi.order_id = o.order_id AND p.category = 'Electronics') THEN 'Yes' ELSE 'No' END AS ContainsElectronics FROM Orders o;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT); CREATE TABLE OrderItems (item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);",Checks each order to see if it includes any products from the 'Electronics' category using a subquery within a CASE expression.
"Calculate the average salary for junior, mid-level, and senior employees, based on years since hire.","SELECT CASE WHEN (julianday('now') - julianday(hire_date)) / 365.25 < 3 THEN 'Junior' WHEN (julianday('now') - julianday(hire_date)) / 365.25 BETWEEN 3 AND 10 THEN 'Mid-Level' ELSE 'Senior' END AS ExperienceLevel, AVG(salary) AS AverageSalary FROM Employees GROUP BY ExperienceLevel;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary INTEGER, hire_date TEXT);",Categorizes employees into experience levels based on their hire date and calculates the average salary for each level.
"Insert a new product, setting its stock quantity to 50 if it's 'Electronics', otherwise 20.","INSERT INTO Products (product_name, category, price, stock_quantity) VALUES ('New Gadget', 'Electronics', 199.99, CASE WHEN 'Electronics' = 'Electronics' THEN 50 ELSE 20 END);","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","Inserts a new product record, conditionally setting its initial stock quantity based on the product category provided in the VALUES clause."
"Calculate the final price for each order, applying a 10% discount if the total amount is over 1000, otherwise no discount.","SELECT order_id, total_amount, CASE WHEN total_amount > 1000 THEN total_amount * 0.90 ELSE total_amount END AS FinalAmount FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, total_amount REAL);","Calculates a final amount for each order, applying a 10% discount if the total amount exceeds 1000."
"List student names and their final grade categorized as 'Pass' (A, B, C, P) or 'Fail' (D, F, NP).","SELECT student_name, final_grade, CASE WHEN final_grade IN ('A', 'B', 'C', 'P') THEN 'Pass' WHEN final_grade IN ('D', 'F', 'NP') THEN 'Fail' ELSE 'Incomplete' END AS GradeCategory FROM Enrollments e JOIN Students s ON e.student_id = s.student_id;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, final_grade TEXT);","Joins student and enrollment data to categorize student final grades into 'Pass', 'Fail', or 'Incomplete'."
"Count products that have a category defined, and those that don't.","SELECT COUNT(CASE WHEN category IS NOT NULL AND category != '' THEN 1 END) AS CategorizedProducts, COUNT(CASE WHEN category IS NULL OR category = '' THEN 1 END) AS UncategorizedProducts FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);","Counts products that have a non-empty category versus those that do not, demonstrating conditional counting of NULLs or empty strings."
"Group products by 'Food' (for 'Dairy' and 'Produce') or 'Non-Food' (for 'Electronics' and 'Apparel'), and count them.","SELECT CASE WHEN category IN ('Dairy', 'Produce') THEN 'Food' WHEN category IN ('Electronics', 'Apparel') THEN 'Non-Food' ELSE 'Other' END AS SuperCategory, COUNT(product_id) AS NumberOfProducts FROM Products GROUP BY SuperCategory;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);","Groups products into broader 'Food', 'Non-Food', or 'Other' categories based on their specific category and counts products within each super category."
"Find the maximum salary for male and female employees, if gender information is available, otherwise group as 'Unknown'.","SELECT CASE WHEN gender = 'M' THEN 'Male' WHEN gender = 'F' THEN 'Female' ELSE 'Unknown' END AS GenderGroup, MAX(salary) AS MaxSalary FROM Employees GROUP BY GenderGroup;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary INTEGER, gender TEXT);","Groups employees by gender (Male, Female, or Unknown if null) and finds the maximum salary for each group."
"For each project, show its name and how many days it has been 'in progress' (if applicable), otherwise 'not started' or 'completed'.","SELECT project_name, CASE WHEN status = 'in_progress' THEN julianday('now') - julianday(start_date) WHEN status = 'completed' THEN julianday(end_date) - julianday(start_date) ELSE 0 END AS DurationInDays FROM Projects;","CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, status TEXT, start_date TEXT, end_date TEXT);","Calculates the duration in days for 'in progress' or 'completed' projects, otherwise showing 0 days."
"Display customer name and their preferred contact method. If email is null, use phone. If phone is null too, use 'No contact info'.","SELECT customer_name, CASE WHEN email IS NOT NULL THEN email WHEN phone IS NOT NULL THEN phone ELSE 'No contact info' END AS PreferredContact FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT, phone TEXT);","Selects the first available contact method (email then phone) for each customer, defaulting to 'No contact info' if both are missing."
"Calculate the price per unit for products, handling cases where stock is zero to prevent division by zero errors.","SELECT product_name, price, stock_quantity, CASE WHEN stock_quantity > 0 THEN price / stock_quantity ELSE 0 END AS PricePerUnit FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);","Calculates the price per unit, preventing division by zero errors by setting PricePerUnit to 0 if stock_quantity is 0."
"For each department, rank employees by salary, but within 'Sales' department, rank by hire date (oldest first) instead.","SELECT department_id, name, salary, hire_date, RANK() OVER (PARTITION BY department_id ORDER BY CASE WHEN department_id = (SELECT id FROM Departments WHERE name = 'Sales') THEN julianday(hire_date) ELSE -salary END) AS DeptRank FROM Employees;","CREATE TABLE Employees (id INTEGER PRIMARY KEY, name TEXT, salary INTEGER, department_id INTEGER, hire_date TEXT); CREATE TABLE Departments (id INTEGER PRIMARY KEY, name TEXT);","Ranks employees within each department. For the 'Sales' department, ranking is based on hire date (oldest first), otherwise by salary (highest first)."
"For each customer, calculate the total amount of orders that were placed in 2023 and had a status of 'delivered'.","SELECT customer_id, SUM(CASE WHEN strftime('%Y', order_date) = '2023' AND status = 'delivered' THEN total_amount ELSE 0 END) AS TotalDelivered2023Orders FROM Orders GROUP BY customer_id;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","Calculates the sum of total amounts for orders that were placed in 2023 and have a 'delivered' status, grouped by customer."
List all products with an indicator whether they are 'expensive' (price > 500) or 'on sale' (stock_quantity < 10).,"SELECT product_name, price, stock_quantity, CASE WHEN price > 500 THEN 1 ELSE 0 END AS IsExpensive, CASE WHEN stock_quantity < 10 THEN 1 ELSE 0 END AS IsLowStock FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, price REAL, stock_quantity INTEGER);",Adds two columns indicating whether a product is expensive (price > 500) or has low stock (stock_quantity < 10) using 1/0 boolean flags.
"Join customers and orders. For 'VIP' customers, match orders made on the same day as their registration date. For others, match orders within 30 days of registration.","SELECT c.customer_name, o.order_id FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id AND (CASE WHEN c.customer_type = 'VIP' THEN o.order_date = c.registration_date ELSE julianday(o.order_date) BETWEEN julianday(c.registration_date) AND julianday(c.registration_date, '+30 days') END);","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, customer_type TEXT, registration_date TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT);","Joins customers and orders, applying different date matching conditions in the ON clause based on whether the customer is a 'VIP' or not."
"For orders older than 6 months and still pending, change their status to 'cancelled' and set the total amount to 0.","UPDATE Orders SET status = CASE WHEN julianday('now') - julianday(order_date) > 180 AND status = 'pending' THEN 'cancelled' ELSE status END, total_amount = CASE WHEN julianday('now') - julianday(order_date) > 180 AND status = 'pending' THEN 0 ELSE total_amount END WHERE status = 'pending' AND julianday('now') - julianday(order_date) > 180;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);",Updates the status of old pending orders to 'cancelled' and sets their total amount to 0. The WHERE clause ensures only relevant rows are considered for the conditional update.
"Clean up product categories: 'Elec' and 'Electronics' should become 'Electronics', 'Hosehold' and 'Home' should become 'Household'. Other categories remain as is.","SELECT product_name, CASE category WHEN 'Elec' THEN 'Electronics' WHEN 'Hosehold' THEN 'Household' WHEN 'Home' THEN 'Household' WHEN 'Mobile' THEN 'Electronics' ELSE category END AS CleanedCategory FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT);",Standardizes product category names by mapping common misspellings or variations to a unified name for display.
Find the names of customers who have placed an order.,SELECT DISTINCT C.customer_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query joins the Customers and Orders tables on their common customer_id to find all customers who have placed at least one order, then selects their distinct names."
"List the total amount spent by each customer, but only for customers who have spent more than 500.","SELECT C.customer_name, SUM(O.total_amount) AS total_spent FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id GROUP BY C.customer_name HAVING total_spent > 500;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query calculates the total amount spent by each customer by joining Customers and Orders, grouping by customer name, and then filters for customers whose total spending exceeds 500."
Get the names of products that have been ordered by customers named 'Alice Johnson'.,SELECT DISTINCT P.product_name FROM Customers C JOIN Orders O ON C.customer_id = O.customer_id JOIN OrderItems OI ON O.order_id = OI.order_id JOIN Products P ON OI.product_id = P.product_id WHERE C.customer_name = 'Alice Johnson';,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL);","This query performs multiple joins across Customers, Orders, OrderItems, and Products to link customer names to ordered products, then filters for products ordered by 'Alice Johnson'."
Find all products that have never been ordered.,SELECT P.product_name FROM Products P LEFT JOIN OrderItems OI ON P.product_id = OI.product_id WHERE OI.order_item_id IS NULL;,"CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL); CREATE TABLE OrderItems (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, price_per_unit REAL);","This query uses a LEFT JOIN to include all products and then filters for products that do not have any corresponding entries in the OrderItems table, indicating they've never been ordered."
"List all orders placed in the last 30 days, along with the customer's name.","SELECT O.order_id, C.customer_name, O.order_date, O.total_amount FROM Orders O JOIN Customers C ON O.customer_id = C.customer_id WHERE O.order_date >= DATE('now', '-30 days');","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, customer_name TEXT, email TEXT); CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL);","This query joins Orders and Customers to retrieve order details and customer names, filtering for orders placed within the last 30 days using SQLite's DATE function."
"For each product category, show the category name and the average price of products in that category, but only for categories where the average product price is above $50.","SELECT C.category_name, AVG(P.price) AS average_product_price FROM Categories C JOIN Products P ON C.category_id = P.category_id GROUP BY C.category_name HAVING average_product_price > 50;","CREATE TABLE Categories (category_id INTEGER PRIMARY KEY, category_name TEXT); CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category_id INTEGER, price REAL);","This query joins Categories and Products, calculates the average price for products within each category, and then filters to show only categories where this average price is greater than 50."
Count the number of students enrolled in each course.,"SELECT C.course_name, COUNT(E.student_id) AS enrolled_students FROM Courses C JOIN Enrollments E ON C.course_id = E.course_id GROUP BY C.course_name;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT);","This query joins Courses and Enrollments tables on course_id and counts the number of student enrollments for each course, grouping the results by course name."
Find the names of students who are majoring in 'Computer Science' and are enrolled in a course taught by Professor 'Dr. Smith'.,SELECT DISTINCT S.student_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id JOIN Professors P ON C.professor_id = P.professor_id WHERE S.major = 'Computer Science' AND P.professor_name = 'Dr. Smith';,"CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, professor_id INTEGER, credits INTEGER); CREATE TABLE Professors (professor_id INTEGER PRIMARY KEY, professor_name TEXT, department_id INTEGER);","This query performs multiple joins to connect Students, Enrollments, Courses, and Professors, then filters for students whose major is 'Computer Science' and who are enrolled in a course taught by 'Dr. Smith'."
List all courses that currently have no students enrolled.,SELECT C.course_name FROM Courses C WHERE C.course_id NOT IN (SELECT DISTINCT E.course_id FROM Enrollments E);,"CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT);","This query uses a subquery to find all course IDs that have at least one enrollment, then selects courses whose IDs are not present in that list, indicating no current enrollments."
"For each department, show the department name and the total number of credits offered by courses in that department.","SELECT D.department_name, SUM(C.credits) AS total_credits FROM Departments D JOIN Courses C ON D.department_id = C.department_id GROUP BY D.department_name;","CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, credits INTEGER);","This query joins Departments and Courses to sum the credits for all courses belonging to each department, grouping the results by department name."
Find students who have enrolled in the same course more than once.,"SELECT S.student_name, C.course_name FROM Students S JOIN Enrollments E ON S.student_id = E.student_id JOIN Courses C ON E.course_id = C.course_id GROUP BY S.student_id, E.course_id HAVING COUNT(*) > 1;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT); CREATE TABLE Courses (course_id INTEGER PRIMARY KEY, course_name TEXT, department_id INTEGER, credits INTEGER); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT);","This query joins Students, Enrollments, and Courses, then groups enrollments by student and course to identify pairs where the count of enrollments is greater than one, indicating re-enrollment."
"For each student, find their earliest enrollment date.","SELECT S.student_name, MIN(E.enrollment_date) AS earliest_enrollment FROM Students S JOIN Enrollments E ON S.student_id = E.student_id GROUP BY S.student_name;","CREATE TABLE Students (student_id INTEGER PRIMARY KEY, student_name TEXT, major TEXT); CREATE TABLE Enrollments (enrollment_id INTEGER PRIMARY KEY, student_id INTEGER, course_id INTEGER, enrollment_date TEXT);","This query joins Students and Enrollments and calculates the minimum (earliest) enrollment date for each student, grouping the results by student name."
Count how many employees are in each department.,"SELECT D.department_name, COUNT(E.employee_id) AS num_employees FROM Departments D JOIN Employees E ON D.department_id = E.department_id GROUP BY D.department_name;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query joins Departments and Employees tables on department_id to count the number of employees within each department, grouping the results by department name."
Find the average salary of employees assigned to 'Marketing' department projects.,SELECT AVG(E.salary) AS average_salary FROM Employees E JOIN Departments D ON E.department_id = D.department_id JOIN Assignments A ON E.employee_id = A.employee_id JOIN Projects P ON A.project_id = P.project_id WHERE D.department_name = 'Marketing';,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT); CREATE TABLE Projects (project_id INTEGER PRIMARY KEY, project_name TEXT, budget REAL); CREATE TABLE Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, start_date TEXT, end_date TEXT);","This query joins Employees, Departments, Assignments, and Projects to filter employees by 'Marketing' department and then calculates the average salary for those employees."
List employees who are not currently assigned to any project.,SELECT E.employee_name FROM Employees E WHERE NOT EXISTS (SELECT 1 FROM Assignments A WHERE A.employee_id = E.employee_id);,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Assignments (assignment_id INTEGER PRIMARY KEY, employee_id INTEGER, project_id INTEGER, start_date TEXT, end_date TEXT);","This query selects employees where there is no corresponding entry in the Assignments table for their employee_id, indicating they are not assigned to any project."
Find employees who were hired before 2020 and are in the 'Sales' department.,"SELECT E.employee_name, E.hire_date FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE E.hire_date < '2020-01-01' AND D.department_name = 'Sales';","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",This query joins Employees and Departments and filters for employees hired before '2020-01-01' who belong to the 'Sales' department.
"Show each employee's name, their department name, and a 'Salary Level' (Low, Medium, High) based on their salary: Low (<50000), Medium (50000-80000), High (>80000).","SELECT E.employee_name, D.department_name, CASE WHEN E.salary < 50000 THEN 'Low' WHEN E.salary BETWEEN 50000 AND 80000 THEN 'Medium' ELSE 'High' END AS Salary_Level FROM Employees E JOIN Departments D ON E.department_id = D.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);","This query joins Employees and Departments and uses a CASE statement to categorize each employee's salary into 'Low', 'Medium', or 'High' levels, displaying their name and department."
"For each department, find the employee with the highest salary.","SELECT D.department_name, E.employee_name, E.salary FROM Employees E JOIN Departments D ON E.department_id = D.department_id WHERE E.salary = (SELECT MAX(E2.salary) FROM Employees E2 WHERE E2.department_id = E.department_id);","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, employee_name TEXT, department_id INTEGER, salary REAL, hire_date TEXT); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location TEXT);",This query uses a correlated subquery to find the maximum salary within each department and then selects the employee(s) who match that maximum salary in their respective departments.
List all books and their corresponding authors.,"SELECT B.title, A.author_name FROM Books B JOIN Authors A ON B.author_id = A.author_id;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, nationality TEXT);",This query joins the Books and Authors tables on their common author_id to retrieve the title of each book and the name of its author.
"Count how many books each publisher has published, only for publishers with more than 5 books.","SELECT P.publisher_name, COUNT(B.book_id) AS num_books FROM Publishers P JOIN Books B ON P.publisher_id = B.publisher_id GROUP BY P.publisher_name HAVING num_books > 5;","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, city TEXT);","This query joins Publishers and Books to count the number of books published by each publisher, then filters to show only publishers who have published more than 5 books."
Find all members who have not borrowed any books.,SELECT M.member_name FROM Members M LEFT JOIN Borrowings B ON M.member_id = B.member_id WHERE B.borrowing_id IS NULL;,"CREATE TABLE Members (member_id INTEGER PRIMARY KEY, member_name TEXT, address TEXT); CREATE TABLE Borrowings (borrowing_id INTEGER PRIMARY KEY, book_id INTEGER, member_id INTEGER, borrow_date TEXT, return_date TEXT);","This query uses a LEFT JOIN to include all members and filters for those with no corresponding entries in the Borrowings table, indicating they have not borrowed any books."
List all books that are currently overdue (return date is null and borrow date is more than 30 days ago).,"SELECT B.title, M.member_name, BR.borrow_date FROM Borrowings BR JOIN Books B ON BR.book_id = B.book_id JOIN Members M ON BR.member_id = M.member_id WHERE BR.return_date IS NULL AND BR.borrow_date < DATE('now', '-30 days');","CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER); CREATE TABLE Members (member_id INTEGER PRIMARY KEY, member_name TEXT, address TEXT); CREATE TABLE Borrowings (borrowing_id INTEGER PRIMARY KEY, book_id INTEGER, member_id INTEGER, borrow_date TEXT, return_date TEXT);","This query joins Borrowings, Books, and Members to find books that are overdue, by checking if their return_date is NULL and if the borrow_date was more than 30 days ago."
Find authors who have published books with more than one publisher.,SELECT A.author_name FROM Authors A JOIN Books B ON A.author_id = B.author_id GROUP BY A.author_id HAVING COUNT(DISTINCT B.publisher_id) > 1;,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER); CREATE TABLE Authors (author_id INTEGER PRIMARY KEY, author_name TEXT, nationality TEXT); CREATE TABLE Publishers (publisher_id INTEGER PRIMARY KEY, publisher_name TEXT, city TEXT);","This query joins Authors and Books, groups by author, and counts the distinct publishers for each author to identify authors who have worked with multiple publishers."
List the titles of books that have been borrowed more than 10 times.,SELECT B.title FROM Books B JOIN Borrowings BR ON B.book_id = BR.book_id GROUP BY B.book_id HAVING COUNT(BR.borrowing_id) > 10;,"CREATE TABLE Books (book_id INTEGER PRIMARY KEY, title TEXT, author_id INTEGER, publisher_id INTEGER, publication_year INTEGER); CREATE TABLE Borrowings (borrowing_id INTEGER PRIMARY KEY, book_id INTEGER, member_id INTEGER, borrow_date TEXT, return_date TEXT);","This query joins Books and Borrowings, groups by book, and counts the number of times each book has been borrowed, filtering for those borrowed over 10 times."
Find the names of patients who have appointments with 'Dr. Alice Brown'.,SELECT DISTINCT P.patient_name FROM Patients P JOIN Appointments A ON P.patient_id = A.patient_id JOIN Doctors D ON A.doctor_id = D.doctor_id WHERE D.doctor_name = 'Dr. Alice Brown';,"CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT, date_of_birth TEXT, gender TEXT); CREATE TABLE Doctors (doctor_id INTEGER PRIMARY KEY, doctor_name TEXT, specialty TEXT); CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, appointment_date TEXT, appointment_time TEXT);","This query joins Patients, Appointments, and Doctors tables to find the names of patients who have appointments with the specified doctor."
Count the total number of appointments scheduled for each doctor in the year 2023.,"SELECT D.doctor_name, COUNT(A.appointment_id) AS total_appointments FROM Doctors D JOIN Appointments A ON D.doctor_id = A.doctor_id WHERE STRFTIME('%Y', A.appointment_date) = '2023' GROUP BY D.doctor_name;","CREATE TABLE Doctors (doctor_id INTEGER PRIMARY KEY, doctor_name TEXT, specialty TEXT); CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, appointment_date TEXT, appointment_time TEXT);","This query joins Doctors and Appointments, filters appointments to include only those in 2023, and then counts the total appointments for each doctor, grouping by doctor name."
List patients who have no medical records yet.,SELECT P.patient_name FROM Patients P WHERE P.patient_id NOT IN (SELECT DISTINCT MR.patient_id FROM MedicalRecords MR);,"CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT, date_of_birth TEXT, gender TEXT); CREATE TABLE MedicalRecords (record_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, record_date TEXT, diagnosis TEXT);","This query selects patients whose IDs do not appear in the MedicalRecords table, indicating that they do not have any medical records."
Find the name of the oldest patient diagnosed with 'Influenza'.,"SELECT P.patient_name, P.date_of_birth FROM Patients P JOIN MedicalRecords MR ON P.patient_id = MR.patient_id WHERE MR.diagnosis = 'Influenza' ORDER BY P.date_of_birth ASC LIMIT 1;","CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT, date_of_birth TEXT, gender TEXT); CREATE TABLE MedicalRecords (record_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, record_date TEXT, diagnosis TEXT);","This query joins Patients and MedicalRecords, filters for patients diagnosed with 'Influenza', orders them by date of birth in ascending order (oldest first), and returns the top 1 patient."
"Count how many appointments are scheduled for each day of the week, considering all doctors.","SELECT CASE CAST(STRFTIME('%w', appointment_date) AS INTEGER) WHEN 0 THEN 'Sunday' WHEN 1 THEN 'Monday' WHEN 2 THEN 'Tuesday' WHEN 3 THEN 'Wednesday' WHEN 4 THEN 'Thursday' WHEN 5 THEN 'Friday' WHEN 6 THEN 'Saturday' END AS day_of_week, COUNT(appointment_id) AS num_appointments FROM Appointments GROUP BY day_of_week ORDER BY CAST(STRFTIME('%w', appointment_date) AS INTEGER);","CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, appointment_date TEXT, appointment_time TEXT);",This query groups appointments by the day of the week (using STRFTIME and CASE to map day numbers to names) and counts the total number of appointments for each day.
Find doctors who have not seen any patients older than 60 years.,SELECT D.doctor_name FROM Doctors D WHERE D.doctor_id NOT IN (SELECT DISTINCT A.doctor_id FROM Appointments A JOIN Patients P ON A.patient_id = P.patient_id WHERE CAST((julianday('now') - julianday(P.date_of_birth)) / 365.25 AS INTEGER) > 60);,"CREATE TABLE Patients (patient_id INTEGER PRIMARY KEY, patient_name TEXT, date_of_birth TEXT, gender TEXT); CREATE TABLE Doctors (doctor_id INTEGER PRIMARY KEY, doctor_name TEXT, specialty TEXT); CREATE TABLE Appointments (appointment_id INTEGER PRIMARY KEY, patient_id INTEGER, doctor_id INTEGER, appointment_date TEXT, appointment_time TEXT);","This query identifies doctors whose IDs are not found among doctors who have had appointments with any patient calculated to be older than 60 years, using julianday for age approximation."
"Retrieve the first name and last name of all employees, aliasing them as 'FirstName' and 'LastName'.","SELECT first_name AS FirstName, last_name AS LastName FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);",This query selects the 'first_name' and 'last_name' columns from the 'Employees' table and renames them to 'FirstName' and 'LastName' respectively in the output.
"List all product names and their current stock quantities, using 'ItemName' and 'CurrentStock' as aliases.","SELECT product_name AS ItemName, stock_quantity AS CurrentStock FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","It retrieves the product name and stock quantity for all products, displaying them under more descriptive aliases 'ItemName' and 'CurrentStock'."
"Get the order ID and the total amount for each order, aliasing 'order_id' as 'OrderID' and 'total_amount' as 'TotalCost'.","SELECT order_id AS OrderID, total_amount AS TotalCost FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","This query fetches the order ID and total amount from the 'Orders' table, providing aliases 'OrderID' and 'TotalCost' for the selected columns."
"Show the full name of each customer by concatenating their first and last names, and label this column 'CustomerFullName'.",SELECT first_name || ' ' || last_name AS CustomerFullName FROM Customers;,"CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT);","The query combines the 'first_name' and 'last_name' columns into a single 'CustomerFullName' column, separated by a space, for all customers."
"For each order item, calculate the extended price (quantity * unit_price) and display it as 'ExtendedPrice', along with the product ID.","SELECT product_id, quantity * unit_price AS ExtendedPrice FROM Order_Items;","CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","It calculates the total price for each item in an order by multiplying 'quantity' and 'unit_price', and names this calculated column 'ExtendedPrice'."
Find the total number of employees and alias the count as 'TotalEmployees'.,SELECT COUNT(*) AS TotalEmployees FROM Employees;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);",This query counts all rows in the 'Employees' table to determine the total number of employees and assigns the alias 'TotalEmployees' to the result.
"Retrieve the average salary of all employees, aliasing the result as 'AverageEmployeeSalary'.",SELECT AVG(salary) AS AverageEmployeeSalary FROM Employees;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);",It calculates the average value of the 'salary' column from the 'Employees' table and labels this average as 'AverageEmployeeSalary'.
"List all departments and their names, using 'd' as a table alias for Departments and 'DeptName' for department_name.",SELECT d.department_name AS DeptName FROM Departments AS d;,"CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location_id INTEGER);","The query selects the 'department_name' from the 'Departments' table, using 'd' as a table alias and 'DeptName' as a column alias."
"Get the earliest hire date among all employees, aliased as 'FirstHireDate'.",SELECT MIN(hire_date) AS FirstHireDate FROM Employees;,"CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);","This query finds the minimum 'hire_date' from the 'Employees' table, effectively showing the earliest hiring date, and aliases it as 'FirstHireDate'."
"Display the latest order date, aliased as 'MostRecentOrder'.",SELECT MAX(order_date) AS MostRecentOrder FROM Orders;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","It retrieves the maximum 'order_date' from the 'Orders' table, representing the most recent order, and names the result 'MostRecentOrder'."
"For each product, show its ID, name, and a calculated column 'ValueInStock' (price * stock_quantity).","SELECT product_id, product_name, price * stock_quantity AS ValueInStock FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects the product ID and name, then calculates the total value of stock for each product by multiplying 'price' and 'stock_quantity', labeling it 'ValueInStock'."
"List the customer ID and their email address, aliasing 'customer_id' to 'CustomerID' and 'email' to 'ContactEmail'.","SELECT customer_id AS CustomerID, email AS ContactEmail FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT);","It retrieves the customer ID and email for all customers, renaming the columns to 'CustomerID' and 'ContactEmail' for clarity."
"Show the product name and its category, aliasing 'product_name' as 'Item' and 'category' as 'Type'.","SELECT product_name AS Item, category AS Type FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query fetches the product name and category from the 'Products' table, using 'Item' and 'Type' as respective aliases for the columns."
"From the Orders table, select the order date and format it to display only the year, aliased as 'OrderYear'.","SELECT STRFTIME('%Y', order_date) AS OrderYear FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","It extracts only the year part from the 'order_date' column for all orders, presenting it under the alias 'OrderYear'."
"For each employee, display their first name, last name, and their annual salary increment (salary * 0.05), aliased as 'AnnualBonus'.","SELECT first_name, last_name, salary * 0.05 AS AnnualBonus FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);","This query selects employee first and last names, and calculates a 5% annual bonus based on their salary, aliasing it as 'AnnualBonus'."
"Get the order ID and the distinct product IDs included in each order, aliasing 'product_id' as 'UniqueProduct'.","SELECT order_id, DISTINCT product_id AS UniqueProduct FROM Order_Items;","CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","It retrieves the order ID and lists each unique product ID within those orders, aliasing the unique product ID as 'UniqueProduct'."
"Show the employee ID and a description of their salary level: 'High' if salary > 100000, 'Medium' if salary > 50000, else 'Low'. Alias this as 'SalaryLevel'.","SELECT employee_id, CASE WHEN salary > 100000 THEN 'High' WHEN salary > 50000 THEN 'Medium' ELSE 'Low' END AS SalaryLevel FROM Employees;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);","This query categorizes each employee's salary into 'High', 'Medium', or 'Low' based on specified thresholds and displays it as 'SalaryLevel' alongside their employee ID."
"For customers in 'New York', list their full name (first_name || ' ' || last_name) aliased as 'NYCustomer', and their email.","SELECT (first_name || ' ' || last_name) AS NYCustomer, email FROM Customers WHERE city = 'New York';","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT);",It selects the concatenated full name (aliased as 'NYCustomer') and email for customers residing in 'New York'.
"Find the total quantity of all items sold across all orders, aliasing the sum as 'TotalItemsSold'.",SELECT SUM(quantity) AS TotalItemsSold FROM Order_Items;,"CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","This query calculates the sum of all 'quantity' values in the 'Order_Items' table, giving the total number of items sold, and aliases the result 'TotalItemsSold'."
"List all products and indicate if they are 'In Stock' or 'Out of Stock' based on stock_quantity, aliasing the status as 'Availability'.","SELECT product_name, CASE WHEN stock_quantity > 0 THEN 'In Stock' ELSE 'Out of Stock' END AS Availability FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",The query returns each product's name and a custom 'Availability' status ('In Stock' or 'Out of Stock') based on its stock quantity.
"Show employee IDs and their hire dates, aliasing 'hire_date' to 'DateOfHire'. Order the results by this aliased column.","SELECT employee_id, hire_date AS DateOfHire FROM Employees ORDER BY DateOfHire;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);","This query selects employee IDs and their hire dates, aliasing 'hire_date' as 'DateOfHire', and then sorts the results by this new alias."
"Retrieve the first name, last name, and department name for each employee, aliasing employee table as 'e' and department table as 'd'.","SELECT e.first_name, e.last_name, d.department_name FROM Employees AS e JOIN Departments AS d ON e.department_id = d.department_id;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER); CREATE TABLE Departments (department_id INTEGER PRIMARY KEY, department_name TEXT, location_id INTEGER);","This query joins the 'Employees' and 'Departments' tables using 'e' and 'd' as table aliases, respectively, to retrieve employee names and their corresponding department names."
"For each customer, display their customer ID and the length of their email address, aliasing the length as 'EmailLength'.","SELECT customer_id, LENGTH(email) AS EmailLength FROM Customers;","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, address TEXT, city TEXT, state TEXT, zip_code TEXT);",It calculates the length of the 'email' string for each customer and presents it under the alias 'EmailLength' alongside their ID.
"Show product name and 'DiscountedPrice' which is 10% off the original price, only for products with price over 50.","SELECT product_name, price * 0.9 AS DiscountedPrice FROM Products WHERE price > 50;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);","This query selects products with a price greater than 50, displaying their name and a calculated 'DiscountedPrice' which is 90% of the original price."
List all order IDs and the 'OrderDayOfWeek' using a SQLite date function.,"SELECT order_id, STRFTIME('%w', order_date) AS OrderDayOfWeek FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","It retrieves each 'order_id' and the day of the week (0 for Sunday, 6 for Saturday) that the order was placed, aliasing it as 'OrderDayOfWeek'."
"Get the employee's full name (first_name + ' ' + last_name) aliased as 'EmployeeName', and their salary, for employees earning more than 70000.","SELECT (first_name || ' ' || last_name) AS EmployeeName, salary FROM Employees WHERE salary > 70000;","CREATE TABLE Employees (employee_id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email TEXT, phone_number TEXT, hire_date TEXT, job_id INTEGER, salary REAL, manager_id INTEGER, department_id INTEGER);",This query selects the concatenated full name (aliased as 'EmployeeName') and salary for employees whose salary exceeds 70000.
"For each order, display its ID, customer ID, and a boolean flag 'IsHighValueOrder' that is 1 if total_amount > 1000, else 0.","SELECT order_id, customer_id, CASE WHEN total_amount > 1000 THEN 1 ELSE 0 END AS IsHighValueOrder FROM Orders;","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","It retrieves order and customer IDs, adding a calculated column 'IsHighValueOrder' which is 1 if the order's total amount is over 1000, and 0 otherwise."
"Show the product name and 'CategoryAndName' by concatenating category and product_name, separated by a colon.","SELECT product_name, category || ':' || product_name AS CategoryAndName FROM Products;","CREATE TABLE Products (product_id INTEGER PRIMARY KEY, product_name TEXT, category TEXT, price REAL, stock_quantity INTEGER);",This query selects the product name and a new column 'CategoryAndName' which combines the category and product name with a colon in between.
"Get the distinct status values from the Orders table, aliased as 'OrderStatus'.",SELECT DISTINCT status AS OrderStatus FROM Orders;,"CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date TEXT, total_amount REAL, status TEXT);","It retrieves all unique status values from the 'Orders' table, labeling them as 'OrderStatus'."
"For each order item, show the order ID, product ID, and the unit price labeled as 'UnitPricePerItem'.","SELECT order_id, product_id, unit_price AS UnitPricePerItem FROM Order_Items;","CREATE TABLE Order_Items (order_item_id INTEGER PRIMARY KEY, order_id INTEGER, product_id INTEGER, quantity INTEGER, unit_price REAL);","This query selects the order ID, product ID, and unit price from 'Order_Items', renaming 'unit_price' to 'UnitPricePerItem' for clarity."
